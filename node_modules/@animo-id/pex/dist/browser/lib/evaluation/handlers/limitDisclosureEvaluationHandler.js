"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimitDisclosureEvaluationHandler = void 0;
const pex_models_1 = require("@sphereon/pex-models");
const ssi_types_1 = require("@sphereon/ssi-types");
const ConstraintUtils_1 = require("../../ConstraintUtils");
const Messages_1 = __importDefault(require("../../types/Messages"));
const utils_1 = require("../../utils");
const abstractEvaluationHandler_1 = require("./abstractEvaluationHandler");
const markForSubmissionEvaluationHandler_1 = require("./markForSubmissionEvaluationHandler");
class LimitDisclosureEvaluationHandler extends abstractEvaluationHandler_1.AbstractEvaluationHandler {
    constructor(client) {
        super(client);
    }
    getName() {
        return 'LimitDisclosureEvaluation';
    }
    handle(pd, wrappedVcs) {
        this.evaluateLimitDisclosure(pd.input_descriptors, wrappedVcs);
    }
    isLimitDisclosureSupported(eligibleInputDescriptors, wvc, vcIndex) {
        if (wvc.format === 'vc+sd-jwt' || wvc.format === 'mso_mdoc')
            return true;
        if (wvc.format === 'ldp' || wvc.format === 'jwt')
            return false;
        const limitDisclosureSignatures = this.client.limitDisclosureSignatureSuites;
        const decoded = wvc.decoded;
        const proofs = Array.isArray(decoded.proof) ? decoded.proof : decoded.proof ? [decoded.proof] : undefined;
        const requiredLimitDisclosureInputDescriptorIds = eligibleInputDescriptors
            .map(({ inputDescriptor: { constraints }, inputDescriptorIndex }) => (constraints === null || constraints === void 0 ? void 0 : constraints.limit_disclosure) === pex_models_1.Optionality.Required ? inputDescriptorIndex : undefined)
            .filter((id) => id !== undefined);
        if (!proofs || proofs.length === 0 || proofs.length > 1 || !proofs[0].type) {
            // todo: Support/inspect array based proofs
            if (requiredLimitDisclosureInputDescriptorIds.length > 0) {
                this.createLimitDisclosureNotSupportedResult(eligibleInputDescriptors.map((i) => i.inputDescriptorIndex), vcIndex, 'Multiple proofs on verifiable credential not supported for limit disclosure');
            }
            return false;
        }
        const proof = proofs[0];
        const signatureSuite = proof.cryptosuite ? `${proof.type}.${proof.cryptosuite}` : proof.type;
        if (!(limitDisclosureSignatures === null || limitDisclosureSignatures === void 0 ? void 0 : limitDisclosureSignatures.includes(signatureSuite))) {
            if (requiredLimitDisclosureInputDescriptorIds.length > 0) {
                this.createLimitDisclosureNotSupportedResult(requiredLimitDisclosureInputDescriptorIds, vcIndex, `Signature suite '${signatureSuite}' is not present in limitDisclosureSignatureSuites [${limitDisclosureSignatures.join(',')}]`);
            }
            return false;
        }
        return true;
    }
    evaluateLimitDisclosure(inputDescriptors, wrappedVcs) {
        wrappedVcs.forEach((wvc, vcIndex) => {
            const eligibleInputDescriptors = (0, markForSubmissionEvaluationHandler_1.eligibleInputDescriptorsForWrappedVc)(inputDescriptors, vcIndex, this.getResults());
            const includeLimitDisclosure = eligibleInputDescriptors.some(({ inputDescriptor: { constraints } }) => (constraints === null || constraints === void 0 ? void 0 : constraints.limit_disclosure) === pex_models_1.Optionality.Preferred || (constraints === null || constraints === void 0 ? void 0 : constraints.limit_disclosure) === pex_models_1.Optionality.Required);
            if (eligibleInputDescriptors.length > 0 && includeLimitDisclosure && this.isLimitDisclosureSupported(eligibleInputDescriptors, wvc, vcIndex)) {
                this.enforceLimitDisclosure(wrappedVcs, eligibleInputDescriptors, vcIndex);
            }
        });
    }
    enforceLimitDisclosure(wrappedVcs, eligibleInputDescriptors, vcIndex) {
        var _a, _b, _c;
        const wvc = wrappedVcs[vcIndex];
        if (ssi_types_1.CredentialMapper.isWrappedSdJwtVerifiableCredential(wvc)) {
            const presentationFrame = this.createSdJwtPresentationFrame(eligibleInputDescriptors, wvc.credential, vcIndex);
            // We update the SD-JWT to it's presentation format (remove disclosures, update pretty payload, etc..), except
            // we don't create or include the (optional) KB-JWT yet, this is done when we create the presentation
            if (presentationFrame) {
                (0, utils_1.applySdJwtLimitDisclosure)(wvc.credential, presentationFrame);
                wvc.decoded = wvc.credential.decodedPayload;
                // We need to overwrite the original, as that is returned in the selectFrom method
                // But we also want to keep the format of the original credential.
                wvc.original = ssi_types_1.CredentialMapper.isSdJwtDecodedCredential(wvc.original) ? wvc.credential : wvc.credential.compactSdJwtVc;
                for (const { inputDescriptorIndex, inputDescriptor } of eligibleInputDescriptors) {
                    this.createSuccessResult(inputDescriptorIndex, `$[${vcIndex}]`, (_a = inputDescriptor.constraints) === null || _a === void 0 ? void 0 : _a.limit_disclosure);
                }
            }
        }
        else if (ssi_types_1.CredentialMapper.isWrappedMdocCredential(wvc)) {
            for (const { inputDescriptorIndex, inputDescriptor } of eligibleInputDescriptors) {
                this.createSuccessResult(inputDescriptorIndex, `$[${vcIndex}]`, (_b = inputDescriptor.constraints) === null || _b === void 0 ? void 0 : _b.limit_disclosure);
            }
        }
        else if (ssi_types_1.CredentialMapper.isWrappedW3CVerifiableCredential(wvc)) {
            const internalCredentialToSend = this.createVcWithRequiredFields(eligibleInputDescriptors, wvc.credential, vcIndex);
            /* When verifiableCredentialToSend is null/undefined an error is raised, the credential will
             * remain untouched and the verifiable credential won't be submitted.
             */
            if (internalCredentialToSend) {
                wvc.credential = internalCredentialToSend;
                for (const { inputDescriptorIndex, inputDescriptor } of eligibleInputDescriptors) {
                    this.createSuccessResult(inputDescriptorIndex, `$[${vcIndex}]`, (_c = inputDescriptor.constraints) === null || _c === void 0 ? void 0 : _c.limit_disclosure);
                }
            }
        }
        else {
            throw new Error('Unsupported format for selective disclosure');
        }
    }
    createSdJwtPresentationFrame(inputDescriptors, vc, vcIndex) {
        var _a, _b;
        // Mapping of key -> true to indicate which values should be disclosed in an SD-JWT
        // Can be nested array / object
        const presentationFrame = {};
        const processNestedObject = (obj, currentPath, basePath) => {
            if (obj === null || typeof obj !== 'object') {
                // For literal values, set the path to true in the presentation frame
                utils_1.JsonPathUtils.setValue(presentationFrame, currentPath, true);
                return;
            }
            // For arrays, process each element
            if (Array.isArray(obj)) {
                obj.forEach((item, index) => {
                    processNestedObject(item, [...currentPath, index], basePath);
                });
                return;
            }
            // For objects, process each child property
            Object.entries(obj).forEach(([key, value]) => {
                processNestedObject(value, [...currentPath, key], basePath);
            });
        };
        for (const { inputDescriptor, inputDescriptorIndex } of inputDescriptors) {
            for (const field of (_b = (_a = inputDescriptor.constraints) === null || _a === void 0 ? void 0 : _a.fields) !== null && _b !== void 0 ? _b : []) {
                if (field.path) {
                    const inputField = utils_1.JsonPathUtils.extractInputField(vc.decodedPayload, field.path);
                    if (inputField.length > 0) {
                        const selectedField = inputField[0];
                        const fieldValue = utils_1.JsonPathUtils.getValue(vc.decodedPayload, selectedField.path);
                        if (fieldValue !== null && typeof fieldValue === 'object') {
                            // For objects, recursively process all nested fields
                            processNestedObject(fieldValue, selectedField.path, selectedField.path);
                        }
                        else {
                            // For literal values, just set the path to true
                            utils_1.JsonPathUtils.setValue(presentationFrame, selectedField.path, true);
                        }
                    }
                    else {
                        this.createMandatoryFieldNotFoundResult(inputDescriptorIndex, vcIndex, field.path);
                        return undefined;
                    }
                }
            }
        }
        return presentationFrame;
    }
    createVcWithRequiredFields(inputDescriptors, vc, vcIndex) {
        var _a, _b;
        let credentialToSend = {};
        credentialToSend = Object.assign(credentialToSend, vc);
        credentialToSend.credentialSubject = {};
        for (const { inputDescriptor, inputDescriptorIndex } of inputDescriptors) {
            for (const field of (_b = (_a = inputDescriptor.constraints) === null || _a === void 0 ? void 0 : _a.fields) !== null && _b !== void 0 ? _b : []) {
                if (field.path) {
                    const inputField = utils_1.JsonPathUtils.extractInputField(vc, field.path);
                    if (inputField.length > 0) {
                        credentialToSend = this.copyResultPathToDestinationCredential(inputField[0], vc, credentialToSend);
                    }
                    else {
                        this.createMandatoryFieldNotFoundResult(inputDescriptorIndex, vcIndex, field.path);
                        return undefined;
                    }
                }
            }
        }
        return credentialToSend;
    }
    copyResultPathToDestinationCredential(requiredField, internalCredential, internalCredentialToSend) {
        //TODO: ESSIFI-186
        let credentialSubject = Object.assign({}, internalCredential.credentialSubject);
        requiredField.path.forEach((e) => {
            if (credentialSubject[e]) {
                credentialSubject = { [e]: credentialSubject[e] };
            }
        });
        internalCredentialToSend.credentialSubject = Object.assign(Object.assign({}, internalCredentialToSend.credentialSubject), credentialSubject);
        return internalCredentialToSend;
    }
    createSuccessResult(idIdx, path, limitDisclosure) {
        return this.getResults().push({
            input_descriptor_path: `$.input_descriptors[${idIdx}]`,
            verifiable_credential_path: `${path}`,
            evaluator: this.getName(),
            status: limitDisclosure === pex_models_1.Optionality.Required ? ConstraintUtils_1.Status.INFO : ConstraintUtils_1.Status.WARN,
            message: Messages_1.default.LIMIT_DISCLOSURE_APPLIED,
            payload: undefined,
        });
    }
    createMandatoryFieldNotFoundResult(idIdx, vcIdx, path) {
        return this.getResults().push({
            input_descriptor_path: `$.input_descriptors[${idIdx}]`,
            verifiable_credential_path: `$[${vcIdx}]`,
            evaluator: this.getName(),
            status: ConstraintUtils_1.Status.ERROR,
            message: Messages_1.default.VERIFIABLE_CREDENTIAL_MANDATORY_FIELD_NOT_PRESENT,
            payload: path,
        });
    }
    createLimitDisclosureNotSupportedResult(idIdxs, vcIdx, reason) {
        return this.getResults().push(...idIdxs.map((idIdx) => ({
            input_descriptor_path: `$.input_descriptors[${idIdx}]`,
            verifiable_credential_path: `$[${vcIdx}]`,
            evaluator: this.getName(),
            status: ConstraintUtils_1.Status.ERROR,
            message: reason ? `${Messages_1.default.LIMIT_DISCLOSURE_NOT_SUPPORTED}. ${reason}` : Messages_1.default.LIMIT_DISCLOSURE_NOT_SUPPORTED,
        })));
    }
}
exports.LimitDisclosureEvaluationHandler = LimitDisclosureEvaluationHandler;
//# sourceMappingURL=data:application/json;base64,