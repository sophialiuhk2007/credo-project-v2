/**
 * index.ts
 */
export declare const fromJwk: (publicJwk: JsonWebKey, privateJwk: JsonWebKey, format?: import("./typedef").AsnFormat, options?: import("./typedef").X509EncodingOptions) => Promise<string | import("./typedef").DER>;
export declare const toJwk: (certX509: string | import("./typedef").DER, format?: import("./typedef").AsnFormat) => Promise<JsonWebKey>;
export declare const parse: (certX509: string | import("./typedef").DER, format?: import("./typedef").AsnFormat) => {
    tbsCertificate: Uint8Array;
    signatureValue: Uint8Array;
    signatureAlgorithm: {
        algorithm: import("./typedef").SignatureType;
        parameters?: any;
    };
};
export declare const info: (certX509: string | import("./typedef").DER, format?: import("./typedef").AsnFormat) => any;
declare const _default: {
    fromJwk: (publicJwk: JsonWebKey, privateJwk: JsonWebKey, format?: import("./typedef").AsnFormat, options?: import("./typedef").X509EncodingOptions) => Promise<string | import("./typedef").DER>;
    toJwk: (certX509: string | import("./typedef").DER, format?: import("./typedef").AsnFormat) => Promise<JsonWebKey>;
    parse: (certX509: string | import("./typedef").DER, format?: import("./typedef").AsnFormat) => {
        tbsCertificate: Uint8Array;
        signatureValue: Uint8Array;
        signatureAlgorithm: {
            algorithm: import("./typedef").SignatureType;
            parameters?: any;
        };
    };
    info: (certX509: string | import("./typedef").DER, format?: import("./typedef").AsnFormat) => any;
};
export default _default;
