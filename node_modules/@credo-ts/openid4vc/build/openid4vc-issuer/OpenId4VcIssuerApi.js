"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenId4VcIssuerApi = void 0;
const core_1 = require("@credo-ts/core");
const shared_1 = require("../shared");
const OpenId4VcIssuerModuleConfig_1 = require("./OpenId4VcIssuerModuleConfig");
const OpenId4VcIssuerService_1 = require("./OpenId4VcIssuerService");
/**
 * @public
 * This class represents the API for interacting with the OpenID4VC Issuer service.
 * It provides methods for creating a credential offer, creating a response to a credential issuance request,
 * and retrieving a credential offer from a URI.
 */
let OpenId4VcIssuerApi = class OpenId4VcIssuerApi {
    constructor(config, agentContext, openId4VcIssuerService) {
        this.config = config;
        this.agentContext = agentContext;
        this.openId4VcIssuerService = openId4VcIssuerService;
    }
    async getAllIssuers() {
        return this.openId4VcIssuerService.getAllIssuers(this.agentContext);
    }
    /**
     * @deprecated use {@link getIssuerByIssuerId} instead.
     * @todo remove in 0.6
     */
    async getByIssuerId(issuerId) {
        return this.getIssuerByIssuerId(issuerId);
    }
    async getIssuerByIssuerId(issuerId) {
        return this.openId4VcIssuerService.getIssuerByIssuerId(this.agentContext, issuerId);
    }
    /**
     * Creates an issuer and stores the corresponding issuer metadata. Multiple issuers can be created, to allow different sets of
     * credentials to be issued with each issuer.
     */
    async createIssuer(options) {
        return this.openId4VcIssuerService.createIssuer(this.agentContext, options);
    }
    /**
     * Rotate the key used for signing access tokens for the issuer with the given issuerId.
     */
    async rotateAccessTokenSigningKey(issuerId) {
        const issuer = await this.openId4VcIssuerService.getIssuerByIssuerId(this.agentContext, issuerId);
        return this.openId4VcIssuerService.rotateAccessTokenSigningKey(this.agentContext, issuer);
    }
    async updateIssuerMetadata(options) {
        const { issuerId, credentialConfigurationsSupported, credentialsSupported, ...issuerOptions } = options;
        const issuer = await this.openId4VcIssuerService.getIssuerByIssuerId(this.agentContext, issuerId);
        if (credentialConfigurationsSupported) {
            issuer.credentialConfigurationsSupported = credentialConfigurationsSupported;
            issuer.credentialsSupported = (0, shared_1.credentialsSupportedV13ToV11)(credentialConfigurationsSupported);
        }
        else {
            issuer.credentialsSupported = credentialsSupported;
            issuer.credentialConfigurationsSupported = undefined;
        }
        issuer.display = issuerOptions.display;
        issuer.dpopSigningAlgValuesSupported = issuerOptions.dpopSigningAlgValuesSupported;
        return this.openId4VcIssuerService.updateIssuer(this.agentContext, issuer);
    }
    /**
     * Creates a credential offer. Either the preAuthorizedCodeFlowConfig or the authorizationCodeFlowConfig must be provided.
     *
     * @returns Object containing the payload of the credential offer and the credential offer request, which can be sent to the wallet.
     */
    async createCredentialOffer(options) {
        const { issuerId, ...rest } = options;
        const issuer = await this.openId4VcIssuerService.getIssuerByIssuerId(this.agentContext, issuerId);
        return await this.openId4VcIssuerService.createCredentialOffer(this.agentContext, { ...rest, issuer });
    }
    /**
     * This function creates a response which can be send to the holder after receiving a credential issuance request.
     */
    async createCredentialResponse(options) {
        const { issuanceSessionId, ...rest } = options;
        const issuanceSession = await this.openId4VcIssuerService.getIssuanceSessionById(this.agentContext, issuanceSessionId);
        return await this.openId4VcIssuerService.createCredentialResponse(this.agentContext, { ...rest, issuanceSession });
    }
    async findIssuanceSessionForCredentialRequest(options) {
        const issuanceSession = await this.openId4VcIssuerService.findIssuanceSessionForCredentialRequest(this.agentContext, options);
        return issuanceSession;
    }
    async getIssuerMetadata(issuerId) {
        const issuer = await this.openId4VcIssuerService.getIssuerByIssuerId(this.agentContext, issuerId);
        return this.openId4VcIssuerService.getIssuerMetadata(this.agentContext, issuer);
    }
};
exports.OpenId4VcIssuerApi = OpenId4VcIssuerApi;
exports.OpenId4VcIssuerApi = OpenId4VcIssuerApi = __decorate([
    (0, core_1.injectable)(),
    __metadata("design:paramtypes", [OpenId4VcIssuerModuleConfig_1.OpenId4VcIssuerModuleConfig,
        core_1.AgentContext,
        OpenId4VcIssuerService_1.OpenId4VcIssuerService])
], OpenId4VcIssuerApi);
//# sourceMappingURL=OpenId4VcIssuerApi.js.map