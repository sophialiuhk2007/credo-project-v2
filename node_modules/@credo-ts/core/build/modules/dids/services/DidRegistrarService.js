"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DidRegistrarService = void 0;
const constants_1 = require("../../../constants");
const plugins_1 = require("../../../plugins");
const DidsModuleConfig_1 = require("../DidsModuleConfig");
const parse_1 = require("../domain/parse");
const DidResolverService_1 = require("./DidResolverService");
let DidRegistrarService = class DidRegistrarService {
    constructor(logger, didsModuleConfig, didResolverService) {
        this.logger = logger;
        this.didsModuleConfig = didsModuleConfig;
        this.didResolverService = didResolverService;
    }
    async create(agentContext, options) {
        this.logger.debug(`creating did ${options.did ?? options.method}`);
        const errorResult = {
            didDocumentMetadata: {},
            didRegistrationMetadata: {},
            didState: {
                state: 'failed',
                did: options.did,
            },
        };
        if ((!options.did && !options.method) || (options.did && options.method)) {
            return {
                ...errorResult,
                didState: {
                    ...errorResult.didState,
                    reason: 'Either did OR method must be specified',
                },
            };
        }
        const method = options.method ?? (0, parse_1.tryParseDid)(options.did)?.method;
        if (!method) {
            return {
                ...errorResult,
                didState: {
                    ...errorResult.didState,
                    reason: `Could not extract method from did ${options.did}`,
                },
            };
        }
        const registrar = this.findRegistrarForMethod(method);
        if (!registrar) {
            return {
                ...errorResult,
                didState: {
                    ...errorResult.didState,
                    reason: `Unsupported did method: '${method}'`,
                },
            };
        }
        return await registrar.create(agentContext, options);
    }
    async update(agentContext, options) {
        this.logger.debug(`updating did ${options.did}`);
        const method = (0, parse_1.tryParseDid)(options.did)?.method;
        const errorResult = {
            didDocumentMetadata: {},
            didRegistrationMetadata: {},
            didState: {
                state: 'failed',
                did: options.did,
            },
        };
        if (!method) {
            return {
                ...errorResult,
                didState: {
                    ...errorResult.didState,
                    reason: `Could not extract method from did ${options.did}`,
                },
            };
        }
        const registrar = this.findRegistrarForMethod(method);
        if (!registrar) {
            return {
                ...errorResult,
                didState: {
                    ...errorResult.didState,
                    reason: `Unsupported did method: '${method}'`,
                },
            };
        }
        // Invalidate cache before updating
        await this.didResolverService.invalidateCacheForDid(agentContext, options.did);
        return await registrar.update(agentContext, options);
    }
    async deactivate(agentContext, options) {
        this.logger.debug(`deactivating did ${options.did}`);
        const errorResult = {
            didDocumentMetadata: {},
            didRegistrationMetadata: {},
            didState: {
                state: 'failed',
                did: options.did,
            },
        };
        const method = (0, parse_1.tryParseDid)(options.did)?.method;
        if (!method) {
            return {
                ...errorResult,
                didState: {
                    ...errorResult.didState,
                    reason: `Could not extract method from did ${options.did}`,
                },
            };
        }
        const registrar = this.findRegistrarForMethod(method);
        if (!registrar) {
            return {
                ...errorResult,
                didState: {
                    ...errorResult.didState,
                    reason: `Unsupported did method: '${method}'`,
                },
            };
        }
        // Invalidate cache before deactivating
        await this.didResolverService.invalidateCacheForDid(agentContext, options.did);
        return await registrar.deactivate(agentContext, options);
    }
    findRegistrarForMethod(method) {
        return this.didsModuleConfig.registrars.find((r) => r.supportedMethods.includes(method)) ?? null;
    }
    /**
     * Get all supported did methods for the did registrar.
     */
    get supportedMethods() {
        return Array.from(new Set(this.didsModuleConfig.registrars.flatMap((r) => r.supportedMethods)));
    }
};
exports.DidRegistrarService = DidRegistrarService;
exports.DidRegistrarService = DidRegistrarService = __decorate([
    (0, plugins_1.injectable)(),
    __param(0, (0, plugins_1.inject)(constants_1.InjectionSymbols.Logger)),
    __metadata("design:paramtypes", [Object, DidsModuleConfig_1.DidsModuleConfig,
        DidResolverService_1.DidResolverService])
], DidRegistrarService);
//# sourceMappingURL=DidRegistrarService.js.map