"use strict";
/**
 * asn1enc.js
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeAsn1Signature = exports.decodeAsn1Signature = void 0;
var params_1 = require("./params");
var asn1_js_1 = __importDefault(require("asn1.js"));
var BufferMod = __importStar(require("buffer"));
var Buffer = BufferMod.Buffer;
var BN = asn1_js_1.default.bignum;
/**
 * Decode ASN.1 encoded signature byte array.
 * @param {Uint8Array} asn1sig - Byte array of ASN.1 encoded signature.
 * @param {String} namedCurve - Name of curve like 'P-256'.
 * @return {Uint8Array} - Decoded raw signature.
 */
var decodeAsn1Signature = function (asn1sig, namedCurve) {
    var asn1sigBuffer = Buffer.from(asn1sig); // This must be Buffer object to get decoded;
    var decoded = ECDSASignature.decode(asn1sigBuffer, 'der');
    var len = params_1.namedCurves[namedCurve].payloadSize;
    var r = new Uint8Array(decoded.r.toArray('be', len));
    var s = new Uint8Array(decoded.s.toArray('be', len));
    var signature = new Uint8Array(len * 2);
    signature.set(r);
    signature.set(s, len);
    return signature;
};
exports.decodeAsn1Signature = decodeAsn1Signature;
/**
 * Encode raw signature and obtain ASN.1-encoded signature.
 * @param {Uint8Array} signature - Byte array of raw signature.
 * @param {String} namedCurve - Name of curve like 'P-256'.
 * @return {Uint8Array} - Encoded ASN.1 signature.
 */
var encodeAsn1Signature = function (signature, namedCurve) {
    var len = params_1.namedCurves[namedCurve].payloadSize;
    var r = signature.slice(0, len);
    var s = signature.slice(len, signature.length);
    var asn1sig = ECDSASignature.encode({
        r: new BN(r), s: new BN(s)
    }, 'der');
    return new Uint8Array(asn1sig);
};
exports.encodeAsn1Signature = encodeAsn1Signature;
/////////////////////////////////////////////////////////////////////////////////////////
// RFC5759 https://tools.ietf.org/html/rfc5759.html
var ECDSASignature = asn1_js_1.default.define('ECDSASignature', function () {
    this.seq().obj(this.key('r').int(), this.key('s').int());
});
//# sourceMappingURL=asn1enc.js.map