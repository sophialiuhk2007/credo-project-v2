"use strict";
/**
 * purejs.js
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deriveSecret = exports.verify = exports.sign = exports.generateKey = void 0;
var params_1 = require("./params");
var asn1enc = __importStar(require("./asn1enc"));
var js_crypto_random_1 = __importDefault(require("js-crypto-random"));
var js_crypto_hash_1 = __importDefault(require("js-crypto-hash"));
var js_crypto_key_utils_1 = require("js-crypto-key-utils");
var js_encoding_utils_1 = __importDefault(require("js-encoding-utils"));
var elliptic = __importStar(require("elliptic"));
var Ec = elliptic.ec;
/**
 * Generate elliptic curve cryptography public/private key pair. Generated keys are in JWK.
 * @param {String} namedCurve - Name of curve like 'P-256'.
 * @return {Promise<{publicKey: JsonWebKey, privateKey: JsonWebKey}>} - The generated keys.
 * @throws {Error} - Throws if NotPublic/PrivateKeyForECCKeyGenPureJS
 */
var generateKey = function (namedCurve) { return __awaiter(void 0, void 0, void 0, function () {
    var curve, ec, ecKey, _a, _b, _c, _d, len, publicOct, privateOct, publicKey, publicJwk, privateKey, privateJwk;
    var _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                curve = params_1.namedCurves[namedCurve].indutnyName;
                ec = new Ec(curve);
                _b = (_a = ec).genKeyPair;
                _e = {};
                _d = (_c = js_encoding_utils_1.default.encoder).arrayBufferToString;
                return [4 /*yield*/, js_crypto_random_1.default.getRandomBytes(32)];
            case 1:
                ecKey = _b.apply(_a, [(_e.entropy = _d.apply(_c, [_f.sent()]),
                        _e)]);
                len = params_1.namedCurves[namedCurve].payloadSize;
                publicOct = new Uint8Array(ecKey.getPublic('array'));
                privateOct = new Uint8Array(ecKey.getPrivate().toArray('be', len));
                publicKey = new js_crypto_key_utils_1.Key('oct', publicOct, { namedCurve: namedCurve });
                if (publicKey.isPrivate)
                    throw new Error('NotPublicKeyForECCKeyGenPureJS');
                return [4 /*yield*/, publicKey.export('jwk', { outputPublic: true })];
            case 2:
                publicJwk = _f.sent();
                privateKey = new js_crypto_key_utils_1.Key('oct', privateOct, { namedCurve: namedCurve });
                if (!privateKey.isPrivate)
                    throw new Error('NotPrivateKeyForECCKeyGenPureJS');
                return [4 /*yield*/, privateKey.export('jwk')];
            case 3:
                privateJwk = _f.sent();
                return [2 /*return*/, { publicKey: publicJwk, privateKey: privateJwk }];
        }
    });
}); };
exports.generateKey = generateKey;
/**
 * Sign message with ECDSA.
 * @param {Uint8Array} msg - Byte array of message to be signed.
 * @param {JsonWebKey} privateJwk - Private key object in JWK format.
 * @param {String} hash - Name of hash algorithm used in singing, like 'SHA-256'.
 * @param {String} signatureFormat - Signature format, 'raw' or 'der'
 * @return {Promise<Uint8Array>} - Output signature byte array in raw or der format.
 * @throws {Error} - Throws if NotPrivateKeyForECCSIgnPureJS
 */
var sign = function (msg, privateJwk, hash, signatureFormat) { return __awaiter(void 0, void 0, void 0, function () {
    var namedCurve, curve, ec, privateKey, privateOct, ecKey, md, signature, len, arrayR, arrayS, concat;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                namedCurve = privateJwk.crv;
                curve = params_1.namedCurves[namedCurve].indutnyName;
                ec = new Ec(curve);
                privateKey = new js_crypto_key_utils_1.Key('jwk', privateJwk);
                if (!privateKey.isPrivate)
                    throw new Error('NotPrivateKeyForECCSignPureJS');
                return [4 /*yield*/, privateKey.export('oct')];
            case 1:
                privateOct = _a.sent();
                ecKey = ec.keyFromPrivate(privateOct);
                return [4 /*yield*/, js_crypto_hash_1.default.compute(msg, hash)];
            case 2:
                md = _a.sent();
                signature = ecKey.sign(md);
                len = params_1.namedCurves[namedCurve].payloadSize;
                arrayR = new Uint8Array(signature.r.toArray('be', len));
                arrayS = new Uint8Array(signature.s.toArray('be', len));
                concat = new Uint8Array(arrayR.length + arrayS.length);
                concat.set(arrayR);
                concat.set(arrayS, arrayR.length);
                return [2 /*return*/, (signatureFormat === 'raw') ? concat : asn1enc.encodeAsn1Signature(concat, namedCurve)];
        }
    });
}); };
exports.sign = sign;
/**
 * Verify signature with ECDSA.
 * @param {Uint8Array} msg - Byte array of message that have been signed.
 * @param {Uint8Array} signature - Byte array of signature for the given message.
 * @param {JsonWebKey} publicJwk - Public key object in JWK format.
 * @param {String} hash - Name of hash algorithm used in singing, like 'SHA-256'.
 * @param {String} signatureFormat - Signature format,'raw' or 'der'.
 * @return {Promise<boolean>} - The result of verification.
 * @throws {Error} - Throws if NotPublicKeyForEccVerifyPureJS.
 */
var verify = function (msg, signature, publicJwk, hash, signatureFormat) { return __awaiter(void 0, void 0, void 0, function () {
    var namedCurve, curve, ec, publicKey, publicOct, ecKey, len, sigR, sigS, md;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                namedCurve = publicJwk.crv;
                curve = params_1.namedCurves[namedCurve].indutnyName;
                ec = new Ec(curve);
                publicKey = new js_crypto_key_utils_1.Key('jwk', publicJwk);
                if (publicKey.isPrivate)
                    throw new Error('NotPublicKeyForECCVerifyPureJS');
                return [4 /*yield*/, publicKey.export('oct', { compact: false, outputPublic: true })];
            case 1:
                publicOct = _a.sent();
                ecKey = ec.keyFromPublic(publicOct);
                len = params_1.namedCurves[namedCurve].payloadSize;
                if (!(signature instanceof Uint8Array))
                    signature = new Uint8Array(signature);
                signature = (signatureFormat === 'raw') ? signature : asn1enc.decodeAsn1Signature(signature, namedCurve);
                sigR = signature.slice(0, len);
                sigS = signature.slice(len, len + sigR.length);
                return [4 /*yield*/, js_crypto_hash_1.default.compute(msg, hash)];
            case 2:
                md = _a.sent();
                return [2 /*return*/, ecKey.verify(md, { s: sigS, r: sigR })];
        }
    });
}); };
exports.verify = verify;
/**
 * Key Derivation for ECDH, Elliptic Curve Diffie-Hellman Key Exchange.
 * @param {JsonWebKey} publicJwk - Remote public key object in JWK format.
 * @param {JsonWebKey} privateJwk - Local (my) private key object in JWK format.
 * @return {Promise<Uint8Array>} - The derived master secret via ECDH.
 * @throws {Error} - Throws if NotPublic/PrivateKeyForECCSDeriveKeyPureJS.
 */
var deriveSecret = function (publicJwk, privateJwk) { return __awaiter(void 0, void 0, void 0, function () {
    var namedCurve, curve, ec, priKeyObj, privateOct, pubKeyObj, publicOct, privateKey, publicKey, len;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                namedCurve = privateJwk.crv;
                curve = params_1.namedCurves[namedCurve].indutnyName;
                ec = new Ec(curve);
                priKeyObj = new js_crypto_key_utils_1.Key('jwk', privateJwk);
                if (!priKeyObj.isPrivate)
                    throw new Error('NotPrivateKeyForECCSDeriveKeyPureJS');
                return [4 /*yield*/, priKeyObj.export('oct')];
            case 1:
                privateOct = _a.sent();
                pubKeyObj = new js_crypto_key_utils_1.Key('jwk', publicJwk);
                if (pubKeyObj.isPrivate)
                    throw new Error('NotPublicKeyForECCDeriveKeyPureJS');
                return [4 /*yield*/, pubKeyObj.export('oct', { compact: false, outputPublic: true })];
            case 2:
                publicOct = _a.sent();
                privateKey = ec.keyFromPrivate(privateOct);
                publicKey = ec.keyFromPublic(publicOct);
                len = params_1.namedCurves[namedCurve].payloadSize;
                return [2 /*return*/, new Uint8Array(privateKey.derive(publicKey.getPublic()).toArray('be', len))];
        }
    });
}); };
exports.deriveSecret = deriveSecret;
//# sourceMappingURL=purejs.js.map