"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUniResolvers = exports.getUniResolver = exports.UniResolver = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const did_resolver_1 = require("did-resolver");
const constants_1 = require("../types/constants");
/**
 * Class for performing various DID resolving operations.
 */
class UniResolver {
    /** Resolver constructor */
    constructor(config) {
        this.config = Object.assign(Object.assign({}, constants_1.DefaultConfig), config);
    }
    /**
     * Sets the base URL for the registrar.
     *
     * @param url The base URL for the registrar.
     * @return this.
     */
    setBaseURL(url) {
        const path = constants_1.Constants.URL_PATHNAME_REGEX.exec(this.config.resolveURL);
        if (path) {
            this.config.resolveURL = `${url}${path[1]}`;
        }
        return this;
    }
    /**
     * Sets the URL for the resolve endpoint.
     *
     * @param url The URL for the resolve endpoint.
     * @return this.
     */
    setResolveURL(url) {
        this.config.resolveURL = url;
        return this;
    }
    /**
     * Gets the configuration.
     * @return Config The config.
     */
    getConfig() {
        return this.config;
    }
    /**
     * Resolves a given did to did document.
     *
     * @param did The identifier (did).
     * @return Promise<DIDResolutionResult>, resolution result.
     */
    resolve(didUrl, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const parsedDid = (0, did_resolver_1.parse)(didUrl);
            if (parsedDid === null) {
                return (0, constants_1.errorResolutionResult)('invalidDid');
            }
            const url = `${(options === null || options === void 0 ? void 0 : options.resolveUrl) ? options.resolveUrl : this.config.resolveURL}/${parsedDid.did}`;
            const response = yield (0, cross_fetch_1.default)(url);
            if (response.status >= 400) {
                throw new Error(yield response.text());
            }
            else {
                return yield response.json();
            }
        });
    }
}
exports.UniResolver = UniResolver;
/**
 * Packaging the resolver as a driver to meet https://github.com/decentralized-identity/did-resolver spec
 */
function getUniResolver(didMethod, opts) {
    if (!didMethod) {
        throw new Error('Please provide a did method for the uni-resolver client to resolve a DID document for using the method');
    }
    const uniResolver = new UniResolver();
    if (opts === null || opts === void 0 ? void 0 : opts.resolveUrl) {
        uniResolver.setResolveURL(opts.resolveUrl);
    }
    if (opts === null || opts === void 0 ? void 0 : opts.baseUrl) {
        uniResolver.setBaseURL(opts.baseUrl);
    }
    /* eslint-disable @typescript-eslint/no-unused-vars */
    function resolve(did, _parsed, _resolver, _options) {
        return __awaiter(this, void 0, void 0, function* () {
            return uniResolver.resolve(did, opts);
        });
    }
    /* eslint-enable @typescript-eslint/no-unused-vars */
    return { [didMethod]: resolve };
}
exports.getUniResolver = getUniResolver;
function getUniResolvers(didMethods, opts) {
    if (!didMethods || didMethods.length == 0) {
        throw new Error('Please provide at least one DID method for the uni-resolver client to resolve a DID document for using the method');
    }
    return didMethods.map((didMethod) => getUniResolver(didMethod, opts));
}
exports.getUniResolvers = getUniResolvers;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5pUmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcmVzb2x2ZXIvVW5pUmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOERBQWdDO0FBQ2hDLCtDQUF5SDtBQUV6SCxrREFBcUY7QUFJckY7O0dBRUc7QUFDSCxNQUFhLFdBQVc7SUFJdEIsMkJBQTJCO0lBQzNCLFlBQVksTUFBZTtRQUN6QixJQUFJLENBQUMsTUFBTSxtQ0FBUSx5QkFBYSxHQUFLLE1BQU0sQ0FBRSxDQUFDO0lBQ2hELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLFVBQVUsQ0FBQyxHQUFXO1FBQzNCLE1BQU0sSUFBSSxHQUFHLHFCQUFTLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkUsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNULElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzlDLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLGFBQWEsQ0FBQyxHQUFXO1FBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztRQUU3QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7O09BR0c7SUFDSSxTQUFTO1FBQ2QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNVLE9BQU8sQ0FBQyxNQUFjLEVBQUUsT0FBOEI7O1lBQ2pFLE1BQU0sU0FBUyxHQUFHLElBQUEsb0JBQUssRUFBQyxNQUFNLENBQUMsQ0FBQztZQUNoQyxJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUUsQ0FBQztnQkFDdkIsT0FBTyxJQUFBLGlDQUFxQixFQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzdDLENBQUM7WUFFRCxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUEsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLFVBQVUsRUFBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3BHLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBQSxxQkFBSyxFQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xDLElBQUksUUFBUSxDQUFDLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQztnQkFDM0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ3pDLENBQUM7aUJBQU0sQ0FBQztnQkFDTixPQUFPLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQy9CLENBQUM7UUFDSCxDQUFDO0tBQUE7Q0FDRjtBQWhFRCxrQ0FnRUM7QUFFRDs7R0FFRztBQUNILFNBQWdCLGNBQWMsQ0FBQyxTQUFpQixFQUFFLElBQThCO0lBQzlFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNmLE1BQU0sSUFBSSxLQUFLLENBQUMsd0dBQXdHLENBQUMsQ0FBQztJQUM1SCxDQUFDO0lBRUQsTUFBTSxXQUFXLEdBQWdCLElBQUksV0FBVyxFQUFFLENBQUM7SUFDbkQsSUFBSSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsVUFBVSxFQUFFLENBQUM7UUFDckIsV0FBVyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUNELElBQUksSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLE9BQU8sRUFBRSxDQUFDO1FBQ2xCLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxzREFBc0Q7SUFDdEQsU0FBZSxPQUFPLENBQ3BCLEdBQVcsRUFDWCxPQUFrQixFQUNsQixTQUFxQixFQUNyQixRQUE4Qjs7WUFFOUIsT0FBTyxXQUFXLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4QyxDQUFDO0tBQUE7SUFFRCxxREFBcUQ7SUFFckQsT0FBTyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUM7QUFDbEMsQ0FBQztBQTFCRCx3Q0EwQkM7QUFFRCxTQUFnQixlQUFlLENBQUMsVUFBb0IsRUFBRSxJQUFnRDtJQUNwRyxJQUFJLENBQUMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDMUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxtSEFBbUgsQ0FBQyxDQUFDO0lBQ3ZJLENBQUM7SUFDRCxPQUFPLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN4RSxDQUFDO0FBTEQsMENBS0MifQ==