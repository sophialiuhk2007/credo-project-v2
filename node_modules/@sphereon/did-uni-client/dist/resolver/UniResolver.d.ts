import { DIDResolutionOptions, DIDResolutionResult, Resolvable, ResolverRegistry } from 'did-resolver';
import { Config, UniDIDResolutionOptions } from '../types/types';
/**
 * Class for performing various DID resolving operations.
 */
export declare class UniResolver implements Resolvable {
    /** Resolve URL associated with a resolver */
    private readonly config;
    /** Resolver constructor */
    constructor(config?: Config);
    /**
     * Sets the base URL for the registrar.
     *
     * @param url The base URL for the registrar.
     * @return this.
     */
    setBaseURL(url: string): this;
    /**
     * Sets the URL for the resolve endpoint.
     *
     * @param url The URL for the resolve endpoint.
     * @return this.
     */
    setResolveURL(url: string): this;
    /**
     * Gets the configuration.
     * @return Config The config.
     */
    getConfig(): Config;
    /**
     * Resolves a given did to did document.
     *
     * @param did The identifier (did).
     * @return Promise<DIDResolutionResult>, resolution result.
     */
    resolve(didUrl: string, options?: DIDResolutionOptions): Promise<DIDResolutionResult>;
}
/**
 * Packaging the resolver as a driver to meet https://github.com/decentralized-identity/did-resolver spec
 */
export declare function getUniResolver(didMethod: string, opts?: UniDIDResolutionOptions): ResolverRegistry;
export declare function getUniResolvers(didMethods: string[], opts?: {
    resolveUrl?: string;
    baseUrl?: string;
}): ResolverRegistry[];
