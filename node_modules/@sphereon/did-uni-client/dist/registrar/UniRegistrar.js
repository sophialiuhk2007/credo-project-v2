'use strict';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniRegistrar = void 0;
const did_resolver_1 = require("did-resolver");
const constants_1 = require("../types/constants");
const fetch = require('cross-fetch');
/**
 * Class for performing various DID registration operations.
 */
class UniRegistrar {
    /** Registrar constructor */
    constructor(config) {
        this.config = Object.assign(Object.assign({}, constants_1.DefaultConfig), config);
    }
    /**
     * Sets the base URL for the registrar.
     *
     * @param url The base URL for the registrar.
     * @return this.
     */
    setBaseURL(url) {
        this.config.createURL = UniRegistrar.setConfigUrl(this.config.createURL, url);
        this.config.updateURL = UniRegistrar.setConfigUrl(this.config.updateURL, url);
        this.config.deactivateURL = UniRegistrar.setConfigUrl(this.config.deactivateURL, url);
        return this;
    }
    /**
     * Sets the create URL for the registrar.
     *
     * @param url The create URL for the registrar.
     * @return this.
     */
    setCreateURL(url) {
        this.config.createURL = url;
        return this;
    }
    /**
     * Gets the config containing the URLs.
     * @return Config The config.
     */
    getConfig() {
        return this.config;
    }
    /**
     * Sets the update URL for the registrar.
     *
     * @param url The update URL for the registrar.
     * @return this.
     */
    setUpdateURL(url) {
        this.config.updateURL = url;
        return this;
    }
    /**
     * Sets the deactivate URL for the registrar.
     *
     * @param url The deactivate URL for the registrar.
     * @return this.
     */
    setDeactivateURL(url) {
        this.config.deactivateURL = url;
        return this;
    }
    /**
     * Creates a identity for a specific method.
     *
     * @param method The requested DID method for the operation.
     * @param request Request matching the method needed for creating the identity.
     * @return job result.
     */
    create(method, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return executePost(this.config.createURL, request, { method });
        });
    }
    /**
     * Updates a identity for a specific method.
     *
     * @param did The identifier (did).
     * @param request Request matching the method needed for updating the identity.
     * @return {didResolutionMetadata: {error: string}}, job result.
     */
    update(did, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return executePost(this.config.updateURL, request, { did });
        });
    }
    /**
     * Deactivates a identity for a specific method.
     *
     * @param did The identifier (did).
     * @param request Request matching the method needed for deactivating the identity.
     * @return {didResolutionMetadata: {error: string}}, job result.
     */
    deactivate(did, request) {
        return __awaiter(this, void 0, void 0, function* () {
            return executePost(this.config.deactivateURL, request, { did });
        });
    }
    static setConfigUrl(configVal, url) {
        const path = constants_1.Constants.URL_PATHNAME_REGEX.exec(configVal);
        if (path && path.length > 1) {
            configVal = `${url}${path[1]}`;
        }
        return configVal;
    }
}
exports.UniRegistrar = UniRegistrar;
/**
 * Creates a URL with method query parameter.
 *
 * @param url The URL.
 * @param method The did method.
 * @return string URL with query parameter.
 */
function createURL(url, method) {
    return `${url}?method=${method}`;
}
function executePost(baseUrl, request, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        let didMethod = opts === null || opts === void 0 ? void 0 : opts.method;
        const identifier = opts === null || opts === void 0 ? void 0 : opts.did;
        if (identifier) {
            const parsedDid = (0, did_resolver_1.parse)(identifier);
            if (parsedDid === null) {
                return new Promise((resolve) => resolve({
                    didState: { state: constants_1.Constants.INVALID_DID },
                }));
            }
            didMethod = parsedDid.method;
        }
        if (!didMethod) {
            throw new Error('No DID method passed or deducted');
        }
        const url = createURL(baseUrl, didMethod);
        return fetch(url, {
            method: 'post',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(Object.assign({ identifier }, request)),
        }).then((response) => __awaiter(this, void 0, void 0, function* () {
            if (response.status >= 400) {
                throw new Error(yield response.text());
            }
            else {
                return response.json();
            }
        }));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVW5pUmVnaXN0cmFyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3JlZ2lzdHJhci9VbmlSZWdpc3RyYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7Ozs7Ozs7Ozs7QUFFYiwrQ0FBcUM7QUFFckMsa0RBQThEO0FBSzlELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUVyQzs7R0FFRztBQUNILE1BQWEsWUFBWTtJQUd2Qiw0QkFBNEI7SUFDNUIsWUFBWSxNQUFlO1FBQ3pCLElBQUksQ0FBQyxNQUFNLG1DQUFRLHlCQUFhLEdBQUssTUFBTSxDQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksVUFBVSxDQUFDLEdBQVc7UUFDM0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUM3RSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQzdFLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFFckYsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxZQUFZLENBQUMsR0FBVztRQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUM7UUFFNUIsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksU0FBUztRQUNkLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQ7Ozs7O09BS0c7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