import { Config, DIDRegistrationResult } from '../types/types';
import { DIDRegistrationRequest } from './DIDRegistrationRequest';
/**
 * Class for performing various DID registration operations.
 */
export declare class UniRegistrar {
    private readonly config;
    /** Registrar constructor */
    constructor(config?: Config);
    /**
     * Sets the base URL for the registrar.
     *
     * @param url The base URL for the registrar.
     * @return this.
     */
    setBaseURL(url: string): UniRegistrar;
    /**
     * Sets the create URL for the registrar.
     *
     * @param url The create URL for the registrar.
     * @return this.
     */
    setCreateURL(url: string): UniRegistrar;
    /**
     * Gets the config containing the URLs.
     * @return Config The config.
     */
    getConfig(): Config;
    /**
     * Sets the update URL for the registrar.
     *
     * @param url The update URL for the registrar.
     * @return this.
     */
    setUpdateURL(url: string): UniRegistrar;
    /**
     * Sets the deactivate URL for the registrar.
     *
     * @param url The deactivate URL for the registrar.
     * @return this.
     */
    setDeactivateURL(url: string): UniRegistrar;
    /**
     * Creates a identity for a specific method.
     *
     * @param method The requested DID method for the operation.
     * @param request Request matching the method needed for creating the identity.
     * @return job result.
     */
    create(method: string, request: DIDRegistrationRequest): Promise<DIDRegistrationResult>;
    /**
     * Updates a identity for a specific method.
     *
     * @param did The identifier (did).
     * @param request Request matching the method needed for updating the identity.
     * @return {didResolutionMetadata: {error: string}}, job result.
     */
    update(did: string, request: DIDRegistrationRequest): Promise<DIDRegistrationResult>;
    /**
     * Deactivates a identity for a specific method.
     *
     * @param did The identifier (did).
     * @param request Request matching the method needed for deactivating the identity.
     * @return {didResolutionMetadata: {error: string}}, job result.
     */
    deactivate(did: string, request: DIDRegistrationRequest): Promise<DIDRegistrationResult>;
    private static setConfigUrl;
}
