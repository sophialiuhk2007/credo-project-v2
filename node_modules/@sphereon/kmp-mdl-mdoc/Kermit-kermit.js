(function (factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', './Kermit-kermit-core.js', './kotlin-kotlin-stdlib.js'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('./Kermit-kermit-core.js'), require('./kotlin-kotlin-stdlib.js'));
  else {
    if (typeof globalThis['Kermit-kermit-core'] === 'undefined') {
      throw new Error("Error loading module 'Kermit-kermit'. Its dependency 'Kermit-kermit-core' was not found. Please, check whether 'Kermit-kermit-core' is loaded prior to 'Kermit-kermit'.");
    }
    if (typeof globalThis['kotlin-kotlin-stdlib'] === 'undefined') {
      throw new Error("Error loading module 'Kermit-kermit'. Its dependency 'kotlin-kotlin-stdlib' was not found. Please, check whether 'kotlin-kotlin-stdlib' is loaded prior to 'Kermit-kermit'.");
    }
    globalThis['Kermit-kermit'] = factory(typeof globalThis['Kermit-kermit'] === 'undefined' ? {} : globalThis['Kermit-kermit'], globalThis['Kermit-kermit-core'], globalThis['kotlin-kotlin-stdlib']);
  }
}(function (_, kotlin_co_touchlab_kermit_core, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var platformLogWriter = kotlin_co_touchlab_kermit_core.$_$.c;
  var listOf = kotlin_kotlin.$_$.q6;
  var mutableLoggerConfigInit = kotlin_co_touchlab_kermit_core.$_$.b;
  var protoOf = kotlin_kotlin.$_$.ia;
  var initMetadataForCompanion = kotlin_kotlin.$_$.j9;
  var BaseLogger = kotlin_co_touchlab_kermit_core.$_$.a;
  var VOID = kotlin_kotlin.$_$.e;
  var initMetadataForClass = kotlin_kotlin.$_$.i9;
  //endregion
  //region block: pre-declaration
  initMetadataForClass(Logger, 'Logger', VOID, BaseLogger);
  initMetadataForCompanion(Companion, Logger);
  //endregion
  function Companion() {
    Companion_instance = this;
    Logger.call(this, mutableLoggerConfigInit(listOf(platformLogWriter())), '');
  }
  protoOf(Companion).z2c = function (severity) {
    this.e2c().n2c(severity);
  };
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function Logger(config, tag) {
    Companion_getInstance();
    tag = tag === VOID ? '' : tag;
    BaseLogger.call(this, config);
    this.b2d_1 = tag;
  }
  var defaultTag;
  //region block: init
  defaultTag = '';
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = Companion_getInstance;
  //endregion
  return _;
}));

//# sourceMappingURL=Kermit-kermit.js.map
