(function (factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', './kotlin-kotlin-stdlib.js'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('./kotlin-kotlin-stdlib.js'));
  else {
    if (typeof globalThis['kotlin-kotlin-stdlib'] === 'undefined') {
      throw new Error("Error loading module 'encoding-library-core'. Its dependency 'kotlin-kotlin-stdlib' was not found. Please, check whether 'kotlin-kotlin-stdlib' is loaded prior to 'encoding-library-core'.");
    }
    globalThis['encoding-library-core'] = factory(typeof globalThis['encoding-library-core'] === 'undefined' ? {} : globalThis['encoding-library-core'], globalThis['kotlin-kotlin-stdlib']);
  }
}(function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var protoOf = kotlin_kotlin.$_$.ia;
  var equals = kotlin_kotlin.$_$.b9;
  var FunctionAdapter = kotlin_kotlin.$_$.p8;
  var isInterface = kotlin_kotlin.$_$.w9;
  var hashCode = kotlin_kotlin.$_$.h9;
  var initMetadataForClass = kotlin_kotlin.$_$.i9;
  var VOID = kotlin_kotlin.$_$.e;
  var Unit_instance = kotlin_kotlin.$_$.k4;
  var IndexOutOfBoundsException = kotlin_kotlin.$_$.fd;
  var toString = kotlin_kotlin.$_$.ma;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.y1;
  var Char = kotlin_kotlin.$_$.wc;
  var toString_0 = kotlin_kotlin.$_$.pe;
  var initMetadataForInterface = kotlin_kotlin.$_$.l9;
  var charSequenceLength = kotlin_kotlin.$_$.w8;
  var charSequenceGet = kotlin_kotlin.$_$.v8;
  var fill = kotlin_kotlin.$_$.c6;
  var copyOf = kotlin_kotlin.$_$.q5;
  var initMetadataForCompanion = kotlin_kotlin.$_$.j9;
  var toLong = kotlin_kotlin.$_$.ka;
  var Long = kotlin_kotlin.$_$.gd;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.x;
  var THROW_CCE = kotlin_kotlin.$_$.md;
  var isCharSequence = kotlin_kotlin.$_$.s9;
  var trim = kotlin_kotlin.$_$.tc;
  var getStringHashCode = kotlin_kotlin.$_$.g9;
  var numberToLong = kotlin_kotlin.$_$.ga;
  var getKClassFromExpression = kotlin_kotlin.$_$.c;
  var StringBuilder_init_$Create$_0 = kotlin_kotlin.$_$.y;
  var objectCreate = kotlin_kotlin.$_$.ha;
  var captureStack = kotlin_kotlin.$_$.t8;
  var RuntimeException_init_$Init$ = kotlin_kotlin.$_$.u1;
  var RuntimeException = kotlin_kotlin.$_$.ld;
  var numberToChar = kotlin_kotlin.$_$.ea;
  var isByteArray = kotlin_kotlin.$_$.q9;
  var isCharArray = kotlin_kotlin.$_$.r9;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.j1;
  var fill_0 = kotlin_kotlin.$_$.b6;
  var numberToByte = kotlin_kotlin.$_$.da;
  //endregion
  //region block: pre-declaration
  initMetadataForInterface(OutFeed, 'OutFeed');
  initMetadataForClass(sam$io_matthewnelson_encoding_core_Decoder_OutFeed$0, 'sam$io_matthewnelson_encoding_core_Decoder_OutFeed$0', VOID, VOID, [OutFeed, FunctionAdapter]);
  initMetadataForClass(Feed_1, 'Feed');
  initMetadataForClass(Feed, 'Feed', VOID, Feed_1);
  initMetadataForCompanion(Companion);
  initMetadataForClass(Decoder, 'Decoder');
  initMetadataForInterface(OutFeed_0, 'OutFeed');
  initMetadataForClass(sam$io_matthewnelson_encoding_core_Encoder_OutFeed$0, 'sam$io_matthewnelson_encoding_core_Encoder_OutFeed$0', VOID, VOID, [OutFeed_0, FunctionAdapter]);
  initMetadataForClass(Feed_0, 'Feed', VOID, Feed_1);
  initMetadataForCompanion(Companion_0);
  initMetadataForClass(Encoder, 'Encoder', VOID, Decoder);
  initMetadataForClass(Setting, 'Setting');
  initMetadataForCompanion(Companion_1);
  initMetadataForClass(Config, 'Config');
  initMetadataForClass(EncoderDecoder, 'EncoderDecoder', VOID, Encoder);
  initMetadataForClass(EncodingException, 'EncodingException', VOID, RuntimeException);
  initMetadataForClass(EncodingSizeException, 'EncodingSizeException', VOID, EncodingException);
  initMetadataForClass(DecoderInput, 'DecoderInput');
  initMetadataForInterface(Flush, 'Flush');
  initMetadataForInterface(Finalize, 'Finalize');
  initMetadataForCompanion(Companion_2);
  initMetadataForClass(FeedBuffer, 'FeedBuffer');
  initMetadataForClass(LineBreakOutFeed, 'LineBreakOutFeed', VOID, VOID, [OutFeed_0]);
  //endregion
  function sam$io_matthewnelson_encoding_core_Decoder_OutFeed$0(function_0) {
    this.c2d_1 = function_0;
  }
  protoOf(sam$io_matthewnelson_encoding_core_Decoder_OutFeed$0).d2d = function (decoded) {
    return this.c2d_1(decoded);
  };
  protoOf(sam$io_matthewnelson_encoding_core_Decoder_OutFeed$0).v3 = function () {
    return this.c2d_1;
  };
  protoOf(sam$io_matthewnelson_encoding_core_Decoder_OutFeed$0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, OutFeed) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.v3(), other.v3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$io_matthewnelson_encoding_core_Decoder_OutFeed$0).hashCode = function () {
    return hashCode(this.v3());
  };
  function Decoder$Companion$decodeToByteArray$lambda($ba, $i, $size) {
    return function (decodedByte) {
      var tmp;
      try {
        var tmp0 = $i._v;
        $i._v = tmp0 + 1 | 0;
        $ba[tmp0] = decodedByte;
        tmp = Unit_instance;
      } catch ($p) {
        var tmp_0;
        if ($p instanceof IndexOutOfBoundsException) {
          var e = $p;
          throw EncodingSizeException_init_$Create$_0("Encoder's pre-calculation of Size[" + $size + '] was incorrect', e);
        } else {
          throw $p;
        }
      }
      return Unit_instance;
    };
  }
  function Feed($outer) {
    this.h2d_1 = $outer;
    Feed_1.call(this, $outer.i2d_1);
    this.f2d_1 = false;
    this.g2d_1 = false;
  }
  protoOf(Feed).j2d = function (input) {
    if (this.f2d_1) {
      // Inline function 'io.matthewnelson.encoding.core.internal.closedException' call
      throw EncodingException_init_$Create$(toString(this) + ' is closed');
    }
    try {
      var tmp;
      if (!(this.n2d_1.k2d_1 == null)) {
        // Inline function 'io.matthewnelson.encoding.core.internal.isSpaceOrNewLine' call
        tmp = (((input === _Char___init__impl__6a9atx(10) ? true : input === _Char___init__impl__6a9atx(13)) ? true : input === _Char___init__impl__6a9atx(32)) ? true : input === _Char___init__impl__6a9atx(9)) ? true : false;
      } else {
        tmp = false;
      }
      if (tmp) {
        if (this.n2d_1.k2d_1) {
          return Unit_instance;
        } else {
          throw EncodingException_init_$Create$('Spaces and new lines are forbidden when isLenient[false]');
        }
      }
      var tmp_0 = this.n2d_1.l2d_1;
      if (equals(tmp_0 == null ? null : new Char(tmp_0), new Char(input))) {
        this.g2d_1 = true;
        return Unit_instance;
      }
      if (this.g2d_1) {
        var tmp_1 = this.n2d_1.l2d_1;
        throw EncodingException_init_$Create$('Padding[' + toString_0(tmp_1 == null ? null : new Char(tmp_1)) + '] was previously passed, ' + 'but decoding operations are still being attempted.');
      }
      this.o2d(input);
    } catch ($p) {
      if ($p instanceof Error) {
        var t = $p;
        this.p2d();
        throw t;
      } else {
        throw $p;
      }
    }
  };
  protoOf(Feed).p2d = function () {
    this.f2d_1 = true;
  };
  protoOf(Feed).q2d = function () {
    return this.f2d_1;
  };
  protoOf(Feed).toString = function () {
    return toString(this.h2d_1) + '.Decoder.Feed@' + hashCode(this);
  };
  function OutFeed() {
  }
  function Companion() {
  }
  protoOf(Companion).t2d = function (_this__u8e3s4, decoder) {
    // Inline function 'io.matthewnelson.encoding.core.internal.decode' call
    var input = DecoderInput_init_$Create$(_this__u8e3s4);
    // Inline function 'kotlin.contracts.contract' call
    var size = decoder.i2d_1.u2d(input);
    var ba = new Int8Array(size);
    var i = {_v: 0};
    try {
      // Inline function 'io.matthewnelson.encoding.core.use' call
      var tmp = Decoder$Companion$decodeToByteArray$lambda(ba, i, size);
      var this_0 = decoder.v2d(new sam$io_matthewnelson_encoding_core_Decoder_OutFeed$0(tmp));
      // Inline function 'kotlin.contracts.contract' call
      var threw = false;
      var tmp_0;
      try {
        // Inline function 'io.matthewnelson.encoding.core.Companion.decodeToByteArray.<anonymous>' call
        // Inline function 'kotlin.text.forEach' call
        var inductionVariable = 0;
        while (inductionVariable < charSequenceLength(_this__u8e3s4)) {
          var element = charSequenceGet(_this__u8e3s4, inductionVariable);
          inductionVariable = inductionVariable + 1 | 0;
          // Inline function 'io.matthewnelson.encoding.core.Companion.decodeToByteArray.<anonymous>.<anonymous>' call
          this_0.j2d(element);
        }
        tmp_0 = Unit_instance;
      } catch ($p) {
        var tmp_1;
        if ($p instanceof Error) {
          var t = $p;
          threw = true;
          throw t;
        } else {
          throw $p;
        }
      }
      finally {
        if (this_0 != null)
          if (!threw && !this_0.q2d()) {
            this_0.r2d();
          } else {
            this_0.p2d();
          }
      }
    } catch ($p) {
      if ($p instanceof Error) {
        var t_0 = $p;
        // Inline function 'kotlin.math.min' call
        var a = ba.length;
        var b = i._v;
        var tmp$ret$1 = Math.min(a, b);
        fill(ba, 0, VOID, tmp$ret$1);
        throw t_0;
      } else {
        throw $p;
      }
    }
    var tmp_2;
    if (i._v === size) {
      tmp_2 = ba;
    } else {
      var copy = copyOf(ba, i._v);
      fill(ba, 0, VOID, i._v);
      tmp_2 = copy;
    }
    return tmp_2;
  };
  var Companion_instance;
  function Companion_getInstance() {
    return Companion_instance;
  }
  function Decoder(config) {
    this.i2d_1 = config;
  }
  protoOf(Decoder).v2d = function (out) {
    return this.w2d(out);
  };
  function sam$io_matthewnelson_encoding_core_Encoder_OutFeed$0(function_0) {
    this.x2d_1 = function_0;
  }
  protoOf(sam$io_matthewnelson_encoding_core_Encoder_OutFeed$0).y2d = function (encoded) {
    return this.x2d_1(new Char(encoded));
  };
  protoOf(sam$io_matthewnelson_encoding_core_Encoder_OutFeed$0).v3 = function () {
    return this.x2d_1;
  };
  protoOf(sam$io_matthewnelson_encoding_core_Encoder_OutFeed$0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, OutFeed_0) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.v3(), other.v3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$io_matthewnelson_encoding_core_Encoder_OutFeed$0).hashCode = function () {
    return hashCode(this.v3());
  };
  function Encoder$Companion$encodeToString$lambda($sb) {
    return function (char) {
      $sb.t8(char.k1_1);
      return Unit_instance;
    };
  }
  function Feed_0($outer) {
    this.b2e_1 = $outer;
    Feed_1.call(this, $outer.i2d_1);
    this.a2e_1 = false;
  }
  protoOf(Feed_0).c2e = function (input) {
    if (this.a2e_1) {
      // Inline function 'io.matthewnelson.encoding.core.internal.closedException' call
      throw EncodingException_init_$Create$(toString(this) + ' is closed');
    }
    try {
      this.d2e(input);
    } catch ($p) {
      if ($p instanceof Error) {
        var t = $p;
        this.p2d();
        throw t;
      } else {
        throw $p;
      }
    }
  };
  protoOf(Feed_0).p2d = function () {
    this.a2e_1 = true;
  };
  protoOf(Feed_0).q2d = function () {
    return this.a2e_1;
  };
  protoOf(Feed_0).toString = function () {
    return toString(this.b2e_1) + '.Encoder.Feed@' + hashCode(this);
  };
  function OutFeed_0() {
  }
  function Companion_0() {
  }
  protoOf(Companion_0).e2e = function (_this__u8e3s4, encoder) {
    // Inline function 'io.matthewnelson.encoding.core.internal.encodeOutSizeOrFail' call
    var size = _this__u8e3s4.length;
    // Inline function 'kotlin.contracts.contract' call
    var outSize = encoder.i2d_1.f2e(toLong(size));
    if (outSize.g1(new Long(2147483647, 0)) > 0) {
      throw Companion_instance_1.g2e(outSize, 2147483647);
    }
    // Inline function 'io.matthewnelson.encoding.core.Companion.encodeToString.<anonymous>' call
    var outSize_0 = outSize.i1();
    var sb = StringBuilder_init_$Create$(outSize_0);
    $l$block: {
      // Inline function 'io.matthewnelson.encoding.core.internal.encode' call
      var tmp = Encoder$Companion$encodeToString$lambda(sb);
      var out = new sam$io_matthewnelson_encoding_core_Encoder_OutFeed$0(tmp);
      // Inline function 'kotlin.collections.isEmpty' call
      if (_this__u8e3s4.length === 0) {
        break $l$block;
      }
      // Inline function 'io.matthewnelson.encoding.core.use' call
      var this_0 = encoder.i2e(out);
      // Inline function 'kotlin.contracts.contract' call
      var threw = false;
      var tmp_0;
      try {
        var inductionVariable = 0;
        var last = _this__u8e3s4.length;
        while (inductionVariable < last) {
          var byte = _this__u8e3s4[inductionVariable];
          inductionVariable = inductionVariable + 1 | 0;
          this_0.c2e(byte);
        }
        tmp_0 = Unit_instance;
      } catch ($p) {
        var tmp_1;
        if ($p instanceof Error) {
          var t = $p;
          threw = true;
          throw t;
        } else {
          throw $p;
        }
      }
      finally {
        if (this_0 != null)
          if (!threw && !this_0.q2d()) {
            this_0.r2d();
          } else {
            this_0.p2d();
          }
      }
    }
    return sb.toString();
  };
  var Companion_instance_0;
  function Companion_getInstance_0() {
    return Companion_instance_0;
  }
  function Encoder(config) {
    Decoder.call(this, config);
  }
  protoOf(Encoder).i2e = function (out) {
    var tmp;
    var tmp_0;
    if (this.i2d_1.m2d_1 > 0) {
      tmp_0 = !(out instanceof LineBreakOutFeed);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = this.j2e(new LineBreakOutFeed(this.i2d_1.m2d_1, out));
    } else {
      tmp = this.j2e(out);
    }
    return tmp;
  };
  function Setting($outer, name, value) {
    this.m2e_1 = $outer;
    this.k2e_1 = value;
    var tmp = this;
    // Inline function 'kotlin.text.trim' call
    tmp.l2e_1 = toString(trim(isCharSequence(name) ? name : THROW_CCE()));
  }
  protoOf(Setting).equals = function (other) {
    var tmp;
    if (other instanceof Setting) {
      tmp = other.l2e_1 === this.l2e_1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Setting).hashCode = function () {
    return 527 + getStringHashCode(this.l2e_1) | 0;
  };
  protoOf(Setting).toString = function () {
    return this.l2e_1 + ': ' + toString_0(this.k2e_1);
  };
  function Companion_1() {
  }
  protoOf(Companion_1).g2e = function (inputSize, maxSize) {
    return EncodingSizeException_init_$Create$('Size[' + toString(inputSize) + '] of input would exceed the maximum output Size[' + toString(maxSize) + '] for this operation.');
  };
  var Companion_instance_1;
  function Companion_getInstance_1() {
    return Companion_instance_1;
  }
  function Config(isLenient, lineBreakInterval, paddingChar) {
    this.k2d_1 = isLenient;
    this.l2d_1 = paddingChar;
    var tmp = this;
    var tmp_0;
    if (!(this.k2d_1 === false) && lineBreakInterval > 0) {
      tmp_0 = lineBreakInterval;
    } else {
      tmp_0 = 0;
    }
    tmp.m2d_1 = tmp_0;
  }
  protoOf(Config).f2e = function (unEncodedSize) {
    return this.n2e(unEncodedSize, this.m2d_1);
  };
  protoOf(Config).n2e = function (unEncodedSize, lineBreakInterval) {
    if (unEncodedSize.g1(new Long(0, 0)) < 0) {
      throw EncodingSizeException_init_$Create$('unEncodedSize cannot be negative');
    }
    if (unEncodedSize.equals(new Long(0, 0)))
      return new Long(0, 0);
    var outSize = this.o2e(unEncodedSize);
    if (outSize.g1(new Long(0, 0)) < 0) {
      // Inline function 'io.matthewnelson.encoding.core.internal.calculatedOutputNegativeEncodingSizeException' call
      var outSize_0 = outSize;
      throw EncodingSizeException_init_$Create$('Calculated output of Size[' + toString(outSize_0) + '] was negative');
    }
    if (lineBreakInterval > 0) {
      // Inline function 'kotlin.Long.minus' call
      // Inline function 'kotlin.Long.div' call
      var lineBreakCount = outSize.g3(toLong(lineBreakInterval)).t3() - 1.0;
      if (lineBreakCount > 0.0) {
        if (lineBreakCount % 1 > 0.0) {
          lineBreakCount = lineBreakCount + 1;
        }
        var tmp = outSize.t3();
        // Inline function 'kotlin.Long.minus' call
        var this_0 = new Long(-1, 2147483647);
        var other = lineBreakCount;
        if (tmp > this_0.t3() - other) {
          throw Companion_instance_1.g2e(unEncodedSize, new Long(-1, 2147483647));
        }
        outSize = outSize.d3(numberToLong(lineBreakCount));
      }
    }
    return outSize;
  };
  protoOf(Config).u2d = function (input) {
    var lastRelevantChar = input.q2e_1;
    $l$loop_0: while (lastRelevantChar > 0) {
      var c = input.b(lastRelevantChar - 1 | 0);
      var tmp;
      if (!(this.k2d_1 == null)) {
        // Inline function 'io.matthewnelson.encoding.core.internal.isSpaceOrNewLine' call
        tmp = (((c === _Char___init__impl__6a9atx(10) ? true : c === _Char___init__impl__6a9atx(13)) ? true : c === _Char___init__impl__6a9atx(32)) ? true : c === _Char___init__impl__6a9atx(9)) ? true : false;
      } else {
        tmp = false;
      }
      if (tmp) {
        if (this.k2d_1) {
          lastRelevantChar = lastRelevantChar - 1 | 0;
          continue $l$loop_0;
        } else {
          throw EncodingException_init_$Create$('Spaces and new lines are forbidden when isLenient[false]');
        }
      }
      var tmp_0 = this.l2d_1;
      if (equals(new Char(c), tmp_0 == null ? null : new Char(tmp_0))) {
        lastRelevantChar = lastRelevantChar - 1 | 0;
        continue $l$loop_0;
      }
      break $l$loop_0;
    }
    if (lastRelevantChar === 0)
      return 0;
    var outSize = this.r2e(lastRelevantChar, input);
    if (outSize < 0) {
      // Inline function 'io.matthewnelson.encoding.core.internal.calculatedOutputNegativeEncodingSizeException' call
      throw EncodingSizeException_init_$Create$('Calculated output of Size[' + toString(outSize) + '] was negative');
    }
    return outSize;
  };
  protoOf(Config).equals = function (other) {
    var tmp;
    var tmp_0;
    if (other instanceof Config) {
      tmp_0 = getKClassFromExpression(other).equals(getKClassFromExpression(this));
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = toString(other) === this.toString();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(Config).hashCode = function () {
    return 527 + getStringHashCode(this.toString()) | 0;
  };
  protoOf(Config).toString = function () {
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$_0();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'io.matthewnelson.encoding.core.Config.toString.<anonymous>' call
    this_0.s8('EncoderDecoder.Config [');
    // Inline function 'kotlin.text.appendLine' call
    this_0.t8(_Char___init__impl__6a9atx(10));
    this_0.s8('    isLenient: ');
    this_0.r8(this.k2d_1);
    // Inline function 'kotlin.text.appendLine' call
    this_0.t8(_Char___init__impl__6a9atx(10));
    this_0.s8('    lineBreakInterval: ');
    this_0.cc(this.m2d_1);
    // Inline function 'kotlin.text.appendLine' call
    this_0.t8(_Char___init__impl__6a9atx(10));
    this_0.s8('    paddingChar: ');
    var tmp = this.l2d_1;
    this_0.r8(tmp == null ? null : new Char(tmp));
    var tmp0_iterator = this.s2e().n();
    while (tmp0_iterator.o()) {
      var setting = tmp0_iterator.p();
      // Inline function 'kotlin.text.appendLine' call
      this_0.t8(_Char___init__impl__6a9atx(10));
      this_0.s8('    ');
      this_0.r8(setting);
    }
    // Inline function 'kotlin.text.appendLine' call
    this_0.t8(_Char___init__impl__6a9atx(10));
    this_0.t8(_Char___init__impl__6a9atx(93));
    return this_0.toString();
  };
  function Feed_1(config) {
    this.n2d_1 = config;
  }
  protoOf(Feed_1).r2d = function () {
    if (this.q2d()) {
      // Inline function 'io.matthewnelson.encoding.core.internal.closedException' call
      throw EncodingException_init_$Create$(toString(this) + ' is closed');
    }
    this.p2d();
    this.s2d();
  };
  function EncoderDecoder(config) {
    Encoder.call(this, config);
  }
  protoOf(EncoderDecoder).equals = function (other) {
    var tmp;
    var tmp_0;
    var tmp_1;
    if (other instanceof EncoderDecoder) {
      tmp_1 = getKClassFromExpression(other).equals(getKClassFromExpression(this));
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = other.u2e() === this.u2e();
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = other.i2d_1.hashCode() === this.i2d_1.hashCode();
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(EncoderDecoder).hashCode = function () {
    var result = 17;
    result = imul(result, 31) + getStringHashCode(this.u2e()) | 0;
    result = imul(result, 31) + this.i2d_1.hashCode() | 0;
    return result;
  };
  protoOf(EncoderDecoder).toString = function () {
    return 'EncoderDecoder[' + this.u2e() + ']@' + this.hashCode();
  };
  function EncodingException_init_$Init$(message, $this) {
    EncodingException_init_$Init$_0(message, null, $this);
    return $this;
  }
  function EncodingException_init_$Create$(message) {
    var tmp = EncodingException_init_$Init$(message, objectCreate(protoOf(EncodingException)));
    captureStack(tmp, EncodingException_init_$Create$);
    return tmp;
  }
  function EncodingException_init_$Init$_0(message, cause, $this) {
    RuntimeException_init_$Init$(message, cause, $this);
    EncodingException.call($this);
    $this.v2e_1 = message;
    return $this;
  }
  function EncodingException_init_$Create$_0(message, cause) {
    var tmp = EncodingException_init_$Init$_0(message, cause, objectCreate(protoOf(EncodingException)));
    captureStack(tmp, EncodingException_init_$Create$_0);
    return tmp;
  }
  protoOf(EncodingException).z9 = function () {
    return this.v2e_1;
  };
  function EncodingException() {
    captureStack(this, EncodingException);
  }
  function EncodingSizeException_init_$Init$(message, $this) {
    EncodingSizeException_init_$Init$_0(message, null, $this);
    return $this;
  }
  function EncodingSizeException_init_$Create$(message) {
    var tmp = EncodingSizeException_init_$Init$(message, objectCreate(protoOf(EncodingSizeException)));
    captureStack(tmp, EncodingSizeException_init_$Create$);
    return tmp;
  }
  function EncodingSizeException_init_$Init$_0(message, cause, $this) {
    EncodingException_init_$Init$_0(message, cause, $this);
    EncodingSizeException.call($this);
    return $this;
  }
  function EncodingSizeException_init_$Create$_0(message, cause) {
    var tmp = EncodingSizeException_init_$Init$_0(message, cause, objectCreate(protoOf(EncodingSizeException)));
    captureStack(tmp, EncodingSizeException_init_$Create$_0);
    return tmp;
  }
  function EncodingSizeException() {
    captureStack(this, EncodingSizeException);
  }
  function DecoderInput_init_$Init$(input, size, $this) {
    DecoderInput.call($this);
    $this.p2e_1 = input;
    $this.q2e_1 = size;
    return $this;
  }
  function DecoderInput_init_$Init$_0(input, $this) {
    DecoderInput_init_$Init$(input, charSequenceLength(input), $this);
    return $this;
  }
  function DecoderInput_init_$Create$(input) {
    return DecoderInput_init_$Init$_0(input, objectCreate(protoOf(DecoderInput)));
  }
  protoOf(DecoderInput).b = function (index) {
    var tmp;
    try {
      var tmp0_subject = this.p2e_1;
      var tmp_0;
      if (isCharSequence(tmp0_subject)) {
        tmp_0 = charSequenceGet(this.p2e_1, index);
      } else {
        if (isCharArray(tmp0_subject)) {
          tmp_0 = this.p2e_1[index];
        } else {
          if (isByteArray(tmp0_subject)) {
            tmp_0 = numberToChar(this.p2e_1[index]);
          } else {
            throw EncodingException_init_$Create$('DecoderInput type not known');
          }
        }
      }
      tmp = tmp_0;
    } catch ($p) {
      var tmp_1;
      if ($p instanceof IndexOutOfBoundsException) {
        var e = $p;
        throw EncodingException_init_$Create$_0('Index out of bounds', e);
      } else {
        throw $p;
      }
    }
    return tmp;
  };
  function DecoderInput() {
  }
  function Flush() {
  }
  function Finalize() {
  }
  function Companion_2() {
  }
  protoOf(Companion_2).y2e = function (modulus) {
    return EncodingException_init_$Create$('Truncated input. Illegal Modulus[' + modulus + ']');
  };
  var Companion_instance_2;
  function Companion_getInstance_2() {
    return Companion_instance_2;
  }
  function FeedBuffer(blockSize, flush, finalize) {
    this.z2e_1 = blockSize;
    this.a2f_1 = flush;
    this.b2f_1 = finalize;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.z2e_1 > 0)) {
      // Inline function 'io.matthewnelson.encoding.core.util.FeedBuffer.<anonymous>' call
      var message = 'blockSize must be greater than 0';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    this.c2f_1 = 0;
    this.d2f_1 = new Int32Array(this.z2e_1);
  }
  protoOf(FeedBuffer).e2f = function (input) {
    this.d2f_1[this.c2f_1] = input;
    this.c2f_1 = this.c2f_1 + 1 | 0;
    if ((this.c2f_1 % this.z2e_1 | 0) === 0) {
      this.a2f_1.w2e(this.d2f_1);
      this.c2f_1 = 0;
    }
  };
  protoOf(FeedBuffer).f2f = function () {
    fill_0(this.d2f_1, 0, this.c2f_1);
    this.b2f_1.x2e(this.c2f_1 % this.z2e_1 | 0, this.d2f_1);
    fill_0(this.d2f_1, 0, 0, this.c2f_1);
    this.c2f_1 = 0;
  };
  function LineBreakOutFeed(interval, out) {
    this.g2f_1 = interval;
    this.h2f_1 = out;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.g2f_1 > 0)) {
      // Inline function 'io.matthewnelson.encoding.core.util.LineBreakOutFeed.<anonymous>' call
      var message = 'interval must be greater than 0';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    this.i2f_1 = 0;
  }
  protoOf(LineBreakOutFeed).y2d = function (encoded) {
    if (this.i2f_1 === this.g2f_1) {
      this.h2f_1.y2d(_Char___init__impl__6a9atx(10));
      this.i2f_1 = 0;
    }
    this.h2f_1.y2d(encoded);
    var tmp1 = this.i2f_1;
    this.i2f_1 = numberToByte(tmp1 + 1);
  };
  //region block: init
  Companion_instance = new Companion();
  Companion_instance_0 = new Companion_0();
  Companion_instance_1 = new Companion_1();
  Companion_instance_2 = new Companion_2();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = EncodingException_init_$Create$;
  _.$_$.b = Companion_instance_2;
  _.$_$.c = Companion_instance;
  _.$_$.d = Companion_instance_0;
  _.$_$.e = Finalize;
  _.$_$.f = Flush;
  _.$_$.g = FeedBuffer;
  _.$_$.h = Feed;
  _.$_$.i = Feed_0;
  _.$_$.j = Setting;
  _.$_$.k = Config;
  _.$_$.l = EncoderDecoder;
  //endregion
  return _;
}));

//# sourceMappingURL=encoding-library-core.js.map
