type Nullable<T> = T | null | undefined
export declare namespace kotlin.collections {
    interface KtList<E> /* extends kotlin.collections.Collection<E> */ {
        asJsReadonlyArrayView(): ReadonlyArray<E>;
        readonly __doNotUseOrImplementIt: {
            readonly "kotlin.collections.KtList": unique symbol;
        };
    }
    const KtList: {
        fromJsArray<E>(array: ReadonlyArray<E>): kotlin.collections.KtList<E>;
    };
    interface KtSet<E> /* extends kotlin.collections.Collection<E> */ {
        asJsReadonlySetView(): ReadonlySet<E>;
        readonly __doNotUseOrImplementIt: {
            readonly "kotlin.collections.KtSet": unique symbol;
        };
    }
    const KtSet: {
        fromJsSet<E>(set: ReadonlySet<E>): kotlin.collections.KtSet<E>;
    };
    interface KtMap<K, V> {
        asJsReadonlyMapView(): ReadonlyMap<K, V>;
        readonly __doNotUseOrImplementIt: {
            readonly "kotlin.collections.KtMap": unique symbol;
        };
    }
    const KtMap: {
        fromJsMap<K, V>(map: ReadonlyMap<K, V>): kotlin.collections.KtMap<K, V>;
    };
    interface KtMutableList<E> extends kotlin.collections.KtList<E>/*, kotlin.collections.MutableCollection<E> */ {
        asJsArrayView(): Array<E>;
        readonly __doNotUseOrImplementIt: {
            readonly "kotlin.collections.KtMutableList": unique symbol;
        } & kotlin.collections.KtList<E>["__doNotUseOrImplementIt"];
    }
    const KtMutableList: {
        fromJsArray<E>(array: ReadonlyArray<E>): kotlin.collections.KtMutableList<E>;
    };
    interface KtMutableMap<K, V> extends kotlin.collections.KtMap<K, V> {
        asJsMapView(): Map<K, V>;
        readonly __doNotUseOrImplementIt: {
            readonly "kotlin.collections.KtMutableMap": unique symbol;
        } & kotlin.collections.KtMap<K, V>["__doNotUseOrImplementIt"];
    }
    const KtMutableMap: {
        fromJsMap<K, V>(map: ReadonlyMap<K, V>): kotlin.collections.KtMutableMap<K, V>;
    };
}
export declare namespace com.sphereon.kmp {
    function kmpListOf<T>(elements: Array<T>): kotlin.collections.KtList<T>;
    function kmpSetOf<T>(elements: Array<T>): kotlin.collections.KtSet<T>;
    function kmpMapOf<K, V>(): kotlin.collections.KtMutableMap<K, V>;
}
export declare namespace com.sphereon.kmp {
    class LocalDateTimeKMP /* implements kotlin.Comparable<com.sphereon.kmp.LocalDateTimeKMP> */ {
        constructor(year: number, monthNumber: number, dayOfMonth: number, hour: number, minute: number, second?: number, nanosecond?: number);
        get year(): number;
        get monthNumber(): number;
        get dayOfMonth(): number;
        get hour(): number;
        get minute(): number;
        get second(): number;
        get nanosecond(): number;
        get delegate(): any/* kotlinx.datetime.LocalDateTime */;
        toString(): string;
        toEpochSeconds(timeZoneId?: Nullable<string>): com.sphereon.kmp.LongKMP;
        static get Static(): {
            fromString(value: string): com.sphereon.kmp.LocalDateTimeKMP;
        };
        static get Companion(): {
        };
    }
}
export declare namespace com.sphereon.kmp {
    class DateTimeUtils {
        constructor(clock?: any/* kotlinx.datetime.Clock */, timeZoneId?: string);
        get clock(): any/* kotlinx.datetime.Clock */;
        set clock(value: any/* kotlinx.datetime.Clock */);
        get timeZoneId(): string;
        set timeZoneId(value: string);
        epochSeconds(): number;
        dateTimeUTC(epochSeconds?: Nullable<number>): com.sphereon.kmp.LocalDateTimeKMP;
        dateTimeLocal(epochSeconds?: Nullable<number>): com.sphereon.kmp.LocalDateTimeKMP;
        dateTime(timeZoneId?: Nullable<string>, epochSeconds?: Nullable<number>): com.sphereon.kmp.LocalDateTimeKMP;
        dateLocalISO(epochSeconds?: Nullable<number>): string;
        dateISO(timeZoneId: Nullable<string>, epochSeconds?: Nullable<number>): string;
        static get Static(): {
            get DEFAULT(): com.sphereon.kmp.DateTimeUtils;
        };
    }
    const DefaultDateTimeUtils: {
        get INSTANCE(): com.sphereon.kmp.DateTimeUtils;
    };
}
export declare namespace com.sphereon.kmp {
    abstract class Encoding {
        private constructor();
        static get BASE64(): com.sphereon.kmp.Encoding & {
            get name(): "BASE64";
            get ordinal(): 0;
        };
        static get BASE64URL(): com.sphereon.kmp.Encoding & {
            get name(): "BASE64URL";
            get ordinal(): 1;
        };
        static get HEX(): com.sphereon.kmp.Encoding & {
            get name(): "HEX";
            get ordinal(): 2;
        };
        static get UTF8(): com.sphereon.kmp.Encoding & {
            get name(): "UTF8";
            get ordinal(): 3;
        };
        get name(): "BASE64" | "BASE64URL" | "HEX" | "UTF8";
        get ordinal(): 0 | 1 | 2 | 3;
        static values(): Array<com.sphereon.kmp.Encoding>;
        static valueOf(value: string): com.sphereon.kmp.Encoding;
    }
    function decodeFromHex(_this_: string): Int8Array;
    function encodeToHex(_this_: Int8Array): string;
    function decodeFromBase64Url(_this_: string): Int8Array;
    function encodeToBase64Url(_this_: Int8Array): string;
    function encodeToBase64(_this_?: Int8Array, urlSafe?: boolean): string;
    function decodeFromBase64(_this_?: string, urlSafe?: boolean): Int8Array;
    function decodeFrom(_this_: string, encoding: com.sphereon.kmp.Encoding): Int8Array;
    function encodeTo(_this_: Int8Array, encoding: com.sphereon.kmp.Encoding): string;
}
export declare namespace com.sphereon.kmp {
    class LongKMP /* extends kotlin.Number */ /* implements kotlin.Comparable<com.sphereon.kmp.LongKMP> */ {
        constructor(value: number);
        static fromString(value: string): com.sphereon.kmp.LongKMP;
        static fromLong(value: any/* kotlin.Long */): com.sphereon.kmp.LongKMP;
        static fromNumber(value: number): com.sphereon.kmp.LongKMP;
        toULong(): any/* kotlin.ULong */;
        toUInt(): any/* kotlin.UInt */;
        toString(): string;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        static get Companion(): {
        };
    }
    function numberToKmpLong(_this_: any/* kotlin.Number */): com.sphereon.kmp.LongKMP;
    function ulongToKmpLong(_this_: any/* kotlin.ULong */): com.sphereon.kmp.LongKMP;
    function byteToKmpLong(_this_: number): com.sphereon.kmp.LongKMP;
    function stringToKmpLong(_this_: string): com.sphereon.kmp.LongKMP;
}
export declare namespace com.sphereon.kmp {
    const Uuid: {
        v4(): any/* kotlin.uuid.Uuid */;
        v4String(): string;
    };
}
export declare namespace com.sphereon.cbor {
    abstract class AbstractCborInt<Type extends unknown/* kotlin.Number */> extends /* com.sphereon.cbor.CborNumber<Type> */ com.sphereon.cbor.CborItem<Type> {
        constructor(value: Type, cddl: com.sphereon.cbor.CDDL);
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
    class CborInt extends com.sphereon.cbor.AbstractCborInt<any/* kotlin.Long */> {
        constructor(value: com.sphereon.kmp.LongKMP);
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
}
export declare namespace com.sphereon.cbor {
    class ArrayBuilder<T> {
        constructor(parent: T, array: com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>);
        addRequired(item: Array<com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.cbor.ArrayBuilder<T>;
        add(item: Array<Nullable<com.sphereon.cbor.CborItem<any /*UnknownType **/>>>): com.sphereon.cbor.ArrayBuilder<T>;
        addCborArray(item: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>>): com.sphereon.cbor.ArrayBuilder<T>;
        addCborMap(item: com.sphereon.cbor.CborMap<com.sphereon.cbor.CborItem<any /*UnknownType **/>, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.cbor.ArrayBuilder<T>;
        addTagged(tagNumber: number, taggedItem: com.sphereon.cbor.CborItem<any /*UnknownType **/>): com.sphereon.cbor.ArrayBuilder<T>;
        addTaggedEncodedCbor<T extends com.sphereon.cbor.CborItem<any /*UnknownType **/>>(encodedCbor: Int8Array): com.sphereon.cbor.ArrayBuilder<T>;
        addMap(): any/* com.sphereon.cbor.MapBuilder<com.sphereon.cbor.ArrayBuilder<T>> */;
        addArray(): com.sphereon.cbor.ArrayBuilder<com.sphereon.cbor.ArrayBuilder<T>>;
        end(): T;
        addByteArray(value: Int8Array): com.sphereon.cbor.ArrayBuilder<T>;
        addString(value: string): com.sphereon.cbor.ArrayBuilder<T>;
        addByte(value: number): com.sphereon.cbor.ArrayBuilder<T>;
        addShort(value: number): com.sphereon.cbor.ArrayBuilder<T>;
        addInt(value: number): com.sphereon.cbor.ArrayBuilder<T>;
        addLong(value: any/* kotlin.Long */): com.sphereon.cbor.ArrayBuilder<T>;
        addBoolean(value: boolean): com.sphereon.cbor.ArrayBuilder<T>;
        addDouble(value: number): com.sphereon.cbor.ArrayBuilder<T>;
        addFloat(value: number): com.sphereon.cbor.ArrayBuilder<T>;
        copy(parent?: T, array?: com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.cbor.ArrayBuilder<T>;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
}
export declare namespace com.sphereon.cbor {
    interface CDDLType {
        readonly format: string;
        readonly majorType: Nullable<com.sphereon.cbor.MajorType>;
        readonly info: Nullable<number>;
        readonly aliasFor: Array<com.sphereon.cbor.CDDLType>;
        toTag(additionalInfo?: Nullable<number>): string;
        newCborItemFromJson(value: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
        newCborItem<T extends any>(origValue: Nullable<T>): com.sphereon.cbor.CborItem<Nullable<any>>;
        readonly __doNotUseOrImplementIt: {
            readonly "com.sphereon.cbor.CDDLType": unique symbol;
        };
    }
    const CDDLType: {
    } & any/* kotlinx.serialization.internal.SerializerFactory */;
    abstract class CDDL implements com.sphereon.cbor.CDDLType {
        protected constructor(format: string, majorType?: Nullable<com.sphereon.cbor.MajorType>, info?: Nullable<number>, aliasFor?: Array<com.sphereon.cbor.CDDLType>);
        get format(): string;
        get majorType(): Nullable<com.sphereon.cbor.MajorType>;
        get info(): Nullable<number>;
        get aliasFor(): Array<com.sphereon.cbor.CDDLType>;
        newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
        newCborItem<T extends any>(origValue: Nullable<T>): com.sphereon.cbor.CborItem<Nullable<any>>;
        toTag(additionalInfo?: Nullable<number>): string;
        toString(): string;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        readonly __doNotUseOrImplementIt: com.sphereon.cbor.CDDLType["__doNotUseOrImplementIt"];
        static get tstr(): {
            newString(value: string): com.sphereon.cbor.CborString;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborString;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL;
        static get uint(): {
            newUint(value: com.sphereon.kmp.LongKMP): com.sphereon.cbor.CborUInt;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborUInt;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get nint(): {
            newNInt(value: com.sphereon.kmp.LongKMP): com.sphereon.cbor.CborNInt;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborNInt;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get int(): {
            newInt(value: number): com.sphereon.cbor.AbstractCborInt<com.sphereon.kmp.LongKMP>;
            newLong(value: any/* kotlin.Long */): com.sphereon.cbor.AbstractCborInt<com.sphereon.kmp.LongKMP>;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.AbstractCborInt<com.sphereon.kmp.LongKMP>;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get bstr(): {
            newByteString(value: Int8Array): com.sphereon.cbor.CborByteString;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */, encoding?: com.sphereon.kmp.Encoding): com.sphereon.cbor.CborByteString;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get bstr_indef_length(): {
            newByteString(value: kotlin.collections.KtList<Int8Array>): com.sphereon.cbor.CborItem<kotlin.collections.KtList<Int8Array>>/* com.sphereon.cbor.CborByteStringIndefLength */;
            fromJson(value: kotlin.collections.KtList<any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonArray */, encoding?: com.sphereon.kmp.Encoding): com.sphereon.cbor.CborItem<kotlin.collections.KtList<Int8Array>>/* com.sphereon.cbor.CborByteStringIndefLength */;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get bytes(): {
            newBytes(value: Int8Array): com.sphereon.cbor.CborByteString;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */, encoding?: com.sphereon.kmp.Encoding): com.sphereon.cbor.CborByteString;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get tstr_indef_length(): {
            newStringIndefLength(value: kotlin.collections.KtList<string>): com.sphereon.cbor.CborItem<kotlin.collections.KtList<string>>/* com.sphereon.cbor.CborStringIndefLength */;
            fromJson(value: kotlin.collections.KtList<any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonArray */, encoding?: com.sphereon.kmp.Encoding): com.sphereon.cbor.CborItem<kotlin.collections.KtList<string>>/* com.sphereon.cbor.CborStringIndefLength */;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get text(): {
            newText(value: string): com.sphereon.cbor.CborString;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborString;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get tdate(): {
            newTDate(value: string): com.sphereon.cbor.CborTDate;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborTDate;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get full_date(): {
            newFullDate(value: string): com.sphereon.cbor.CborFullDate;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborFullDate;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get time(): {
            newTime(value: com.sphereon.kmp.LongKMP): com.sphereon.cbor.CborTime;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborTime;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get float16(): {
            newFloat16(value: number): com.sphereon.cbor.CborFloat16;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborFloat16;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get float32(): {
            newFloat32(value: number): com.sphereon.cbor.CborFloat32;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborFloat32;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get float64(): {
            newFloat64(value: number): com.sphereon.cbor.CborDouble;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborDouble;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get float(): {
            newFloat(value: number): com.sphereon.cbor.CborFloat32;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborFloat32;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get False(): {
            newFalse(): com.sphereon.cbor.CborFalse;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborFalse;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get True(): {
            newTrue(): com.sphereon.cbor.CborTrue;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborTrue;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get bool(): {
            newBool(value: boolean): com.sphereon.cbor.CborBool;
            fromJson(value: any/* kotlinx.serialization.json.JsonPrimitive */): com.sphereon.cbor.CborBool;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get nil(): {
            newNil(): com.sphereon.cbor.CborNull;
            fromJson(value: any/* kotlinx.serialization.json.JsonElement */): com.sphereon.cbor.CborNull;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get Null(): {
            newNull(): com.sphereon.cbor.CborNull;
            fromJson(value: any/* kotlinx.serialization.json.JsonElement */): com.sphereon.cbor.CborNull;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get undefined(): {
            newUndefined(): com.sphereon.cbor.CborUndefined;
            fromJson(value: any/* kotlinx.serialization.json.JsonElement */): com.sphereon.cbor.CborUndefined;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get map(): {
            newMap(value: kotlin.collections.KtMutableMap<com.sphereon.cbor.CborItem<any /*UnknownType **/>, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.cbor.CborItem<kotlin.collections.KtMutableMap<com.sphereon.cbor.CborItem<any /*UnknownType **/>, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>;
            fromJson(value: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */): com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborItem<any /*UnknownType **/>>;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get list(): {
            newList<T extends com.sphereon.cbor.CborItem<any /*UnknownType **/>>(value: kotlin.collections.KtMutableList<T>): com.sphereon.cbor.CborArray<T>;
            fromJson(value: kotlin.collections.KtList<any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonArray */): com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get any(): {
            newAny(value: any): com.sphereon.cbor.CborAny<any>;
            fromJson(value: any/* kotlinx.serialization.json.JsonElement */): com.sphereon.cbor.CborItem<any /*UnknownType **/>;
            newCborItemFromJson(element: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */, cddl?: Nullable<com.sphereon.cbor.CDDLType>): com.sphereon.cbor.CborItem<Nullable<any>>;
            toTag(additionalInfo?: Nullable<number>): string;
        } & com.sphereon.cbor.CDDL & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get util(): {
            get entries(): Array<com.sphereon.cbor.CDDL>;
            fromFormat(format: string): com.sphereon.cbor.CDDL;
            fromTag(tag: string): com.sphereon.cbor.CDDL;
            fromBytes(input: number): com.sphereon.cbor.CDDL;
            fromMajorType(majorType?: Nullable<com.sphereon.cbor.MajorType>, additionalInfo?: Nullable<number>): com.sphereon.cbor.CDDL;
        };
        static get Companion(): {
        };
    }
}
export declare namespace com.sphereon.cbor {
    class CborAny<Type extends any> extends com.sphereon.cbor.CborItem<Type> {
        constructor(value: Type);
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
}
export declare namespace com.sphereon.cbor {
    class CborArray<V extends com.sphereon.cbor.CborItem<any /*UnknownType **/>> extends com.sphereon.cbor.CborCollectionItem<kotlin.collections.KtMutableList<V>> {
        constructor(value?: kotlin.collections.KtMutableList<V>, indefiniteLength?: boolean);
        get indefiniteLength(): boolean;
        required<T>(idx: number): T;
        optional<T>(idx: number): Nullable<T>;
        toJsonSimple(): kotlin.collections.KtList<any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonArray */;
        toJsonWithCDDL(): kotlin.collections.KtList<any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonArray */;
        toJsonCborItem(): com.sphereon.cbor.ICborItemValueJson;
        cborEncode(): Int8Array;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        static get Static(): {
            builder<T>(subject?: Nullable<T>): com.sphereon.cbor.ArrayBuilder<com.sphereon.cbor.CborBuilder<T>>;
        };
    }
}
export declare namespace com.sphereon.cbor {
    abstract class CborBaseItem {
        protected constructor(cddl: com.sphereon.cbor.CDDLType);
        get cddl(): com.sphereon.cbor.CDDLType;
    }
}
export declare namespace com.sphereon.cbor {
    abstract class CborBool extends /* com.sphereon.cbor.CborSimple<boolean> */ com.sphereon.cbor.CborItem<boolean> {
        constructor(value: boolean, cddl: com.sphereon.cbor.CDDL);
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
    class CborTrue extends com.sphereon.cbor.CborBool {
        constructor();
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
    class CborFalse extends com.sphereon.cbor.CborBool {
        constructor();
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
}
export declare namespace com.sphereon.cbor {
    class CborBuilder<T> {
        constructor(item: com.sphereon.cbor.CborItem<any /*UnknownType **/>, subject: Nullable<T>);
        build(): com.sphereon.cbor.CborItem<any /*UnknownType **/>;
        subject(): Nullable<T>;
        encodedBuild(): Int8Array;
    }
}
export declare namespace com.sphereon.cbor {
    class CborByteString extends com.sphereon.cbor.CborItem<Int8Array> {
        constructor(value: Int8Array);
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        cborDecode<T extends com.sphereon.cbor.CborItem<any /*UnknownType **/>>(): T;
        encodeTo(encoding: com.sphereon.kmp.Encoding): string;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        static get Static(): {
            fromCborItem(value: com.sphereon.cbor.CborItem<any /*UnknownType **/>): com.sphereon.cbor.CborByteString;
        };
    }
}
export declare namespace com.sphereon.cbor {
    class CborTDate extends com.sphereon.cbor.CborTagged<string> {
        constructor(value: string);
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
    class CborFullDate extends com.sphereon.cbor.CborTagged<string> {
        constructor(value: string);
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
    function cborTDateToEpochSeconds(_this_?: com.sphereon.cbor.CborTDate, utils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>): com.sphereon.kmp.LongKMP;
    function cborFullDateToEpochSeconds(_this_?: com.sphereon.cbor.CborFullDate, utils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>): com.sphereon.kmp.LongKMP;
    function toCborFullDate(_this_?: string, utils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>): com.sphereon.cbor.CborFullDate;
    function localDateToDateStringISO(_this_?: com.sphereon.kmp.LocalDateTimeKMP, utils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>): string;
    function localDateToCborFullDate(_this_: com.sphereon.kmp.LocalDateTimeKMP): com.sphereon.cbor.CborFullDate;
}
export declare namespace com.sphereon.cbor {
    class CborHexEncodedItem extends com.sphereon.cbor.CborByteString {
        constructor(hex: string);
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
    class CborEncodedItem<Type> extends com.sphereon.cbor.CborItem<com.sphereon.cbor.CborTagged<Int8Array>> {
        constructor(decodedValue: Type, value?: com.sphereon.cbor.CborByteString);
        get decodedValue(): Type;
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJsonWithCDDL(): any/* kotlinx.serialization.json.JsonElement */;
        cborDecode<Type extends com.sphereon.cbor.CborItem<any /*UnknownType **/>>(): Type;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        static get Static(): {
            cborSerializeViewOrItem(deserializedValue: Nullable<any>): com.sphereon.cbor.CborByteString;
            fromDecodedValue<Type extends com.sphereon.cbor.CborItem<any /*UnknownType **/>>(decodedValue: Type): com.sphereon.cbor.CborEncodedItem<Type>;
            toDecodedValue<Type extends com.sphereon.cbor.CborItem<any /*UnknownType **/>>(encoded: com.sphereon.cbor.CborEncodedItem<Type>): Type;
        };
    }
}
export declare namespace com.sphereon.cbor {
    const Cbor: {
        encode(item: Nullable<com.sphereon.cbor.CborItem<any /*UnknownType **/>>): Int8Array;
        decodeWithOffset(encodedCbor: Int8Array, offset: number): any/* kotlin.Pair<number, com.sphereon.cbor.CborItem<UnknownType *>> */;
        decode<T extends com.sphereon.cbor.CborItem<any /*UnknownType **/>>(encodedCbor: Int8Array): T;
        toDiagnostics(item: com.sphereon.cbor.CborItem<any /*UnknownType **/>, options?: kotlin.collections.KtSet<com.sphereon.cbor.DiagnosticOption>): string;
        toDiagnosticsEncoded(encodedItem: Int8Array, options?: kotlin.collections.KtSet<com.sphereon.cbor.DiagnosticOption>): string;
    };
}
export declare namespace com.sphereon.cbor {
    class CborFloat extends /* com.sphereon.cbor.CborNumber<number> */ com.sphereon.cbor.CborItem<number> {
        constructor(value: number, cddl: com.sphereon.cbor.CDDLType);
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        static get Static(): {
        };
    }
    class CborFloat16 extends com.sphereon.cbor.CborFloat {
        constructor(value: number);
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
    class CborFloat32 extends com.sphereon.cbor.CborFloat {
        constructor(value: number);
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
    class CborDouble extends com.sphereon.cbor.CborItem<number> {
        constructor(value: number);
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        static get Static(): {
        };
    }
}
export declare namespace com.sphereon.cbor {
    abstract class CborItem<Type> extends com.sphereon.cbor.CborBaseItem implements com.sphereon.cbor.HasCborJsonRepresentation {
        protected constructor(value: Type, cddl: com.sphereon.cbor.CDDLType);
        get value(): Type;
        protected get HEX_DIGITS(): any /*CharArray*/;
        get majorType(): Nullable<com.sphereon.cbor.MajorType>;
        get info(): Nullable<number>;
        get asStr(): string;
        get asBool(): boolean;
        get asBstr(): Int8Array;
        get asLong(): any/* kotlin.Long */;
        get asInt(): number;
        toValue(): Type;
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        toJsonWithCDDL(): any/* kotlinx.serialization.json.JsonElement */;
        toJsonCborItem(): com.sphereon.cbor.ICborItemValueJson;
        get asMap(): kotlin.collections.KtMutableMap<any, any>;
        get asList(): kotlin.collections.KtMutableList<any>;
        get asTagged(): com.sphereon.cbor.CborItem<Type>;
        get asTaggedEncodedCbor(): com.sphereon.cbor.CborItem<Type>;
        protected validate(): void;
        toString(): string;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        readonly __doNotUseOrImplementIt: com.sphereon.cbor.HasCborJsonRepresentation["__doNotUseOrImplementIt"];
    }
    abstract class CborCollectionItem<Type> extends com.sphereon.cbor.CborItem<Type> {
        constructor(value: Type, cddl: com.sphereon.cbor.CDDLType);
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
    interface ICborItemValueJson {
        readonly cddl: com.sphereon.cbor.CDDLType;
        readonly value: any/* kotlinx.serialization.json.JsonElement */;
        readonly __doNotUseOrImplementIt: {
            readonly "com.sphereon.cbor.ICborItemValueJson": unique symbol;
        };
    }
    interface ICborItemJson extends com.sphereon.cbor.ICborItemValueJson {
        readonly key: string;
        readonly __doNotUseOrImplementIt: {
            readonly "com.sphereon.cbor.ICborItemJson": unique symbol;
        } & com.sphereon.cbor.ICborItemValueJson["__doNotUseOrImplementIt"];
    }
    interface HasCborJsonRepresentation {
        toJsonWithCDDL(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJsonCborItem(): com.sphereon.cbor.ICborItemValueJson;
        readonly __doNotUseOrImplementIt: {
            readonly "com.sphereon.cbor.HasCborJsonRepresentation": unique symbol;
        };
    }
    class CborItemJson implements com.sphereon.cbor.HasCborJsonRepresentation, com.sphereon.cbor.ICborItemJson {
        constructor(key: string, value: any/* kotlinx.serialization.json.JsonElement */, cddl: com.sphereon.cbor.CDDLType);
        get key(): string;
        get value(): any/* kotlinx.serialization.json.JsonElement */;
        get cddl(): com.sphereon.cbor.CDDLType;
        toJsonWithCDDL(): kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */;
        toJsonSimple(): kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */;
        toJson(includeCDDL?: boolean): kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */;
        toJsonCborItem(): com.sphereon.cbor.ICborItemValueJson;
        copy(key?: string, value?: any/* kotlinx.serialization.json.JsonElement */, cddl?: com.sphereon.cbor.CDDLType): com.sphereon.cbor.CborItemJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        readonly __doNotUseOrImplementIt: com.sphereon.cbor.HasCborJsonRepresentation["__doNotUseOrImplementIt"] & com.sphereon.cbor.ICborItemJson["__doNotUseOrImplementIt"];
        static get Static(): {
            isCborItemValueJson(jsonElement: any/* kotlinx.serialization.json.JsonElement */): boolean;
            isCborItemJson(jsonElement: any/* kotlinx.serialization.json.JsonElement */): boolean;
            fromJsonPrimitive(jsonPrimitive: any/* kotlinx.serialization.json.JsonPrimitive */, cddl: com.sphereon.cbor.CDDLType, key?: Nullable<string>): com.sphereon.cbor.ICborItemValueJson;
            fromJsonArray(jsonArray: kotlin.collections.KtList<any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonArray */): Array<com.sphereon.cbor.ICborItemValueJson>;
            fromJsonObjectAsCborItemJson(jsonObject: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */): com.sphereon.cbor.ICborItemJson;
            fromJsonObjectAsValueJson(jsonObject: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */): com.sphereon.cbor.ICborItemValueJson;
            fromDTO(cborItemJson: com.sphereon.cbor.ICborItemJson): com.sphereon.cbor.CborItemJson;
        };
        static get Companion(): {
        };
    }
    function jsonObjectToCborJsonItem(_this_: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */): com.sphereon.cbor.ICborItemValueJson;
}
export declare namespace com.sphereon.cbor {
    class CborMap<K extends com.sphereon.cbor.CborItem<any /*UnknownType **/>, V extends Nullable<com.sphereon.cbor.CborItem<any /*UnknownType **/>>> extends com.sphereon.cbor.CborCollectionItem<kotlin.collections.KtMutableMap<K, V>> {
        constructor(value?: kotlin.collections.KtMutableMap<K, V>, indefiniteLength?: boolean);
        get indefiniteLength(): boolean;
        get<T>(key: K): T;
        toJsonSimple(): kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */;
        toJsonWithCDDL(): kotlin.collections.KtList<any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonArray */;
        toJsonWithCDDLObject(): kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */;
        toJsonCborItem(): com.sphereon.cbor.ICborItemValueJson;
        getStringLabel<T>(key: string, required?: Nullable<boolean>): T;
        getNumberLabel<T>(key: com.sphereon.kmp.LongKMP, required?: Nullable<boolean>): T;
        cborEncode(): Int8Array;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        static get Static(): {
            builder<T>(subject: T): any/* com.sphereon.cbor.MapBuilder<com.sphereon.cbor.CborBuilder<T>> */;
        };
    }
}
export declare namespace com.sphereon.cbor {
    class CborNInt extends com.sphereon.cbor.AbstractCborInt<com.sphereon.kmp.LongKMP> {
        constructor(value: com.sphereon.kmp.LongKMP);
        static fromLong(value: any/* kotlin.Long */): com.sphereon.cbor.CborNInt;
        protected validate(): void;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        static get Static(): {
        };
    }
}
export declare namespace com.sphereon.cbor {
    class CborNil extends /* com.sphereon.cbor.CborSimple<Nullable<void>> */ com.sphereon.cbor.CborItem<Nullable<void>> {
        constructor();
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
    class CborNull extends /* com.sphereon.cbor.CborSimple<Nullable<void>> */ com.sphereon.cbor.CborItem<Nullable<void>> {
        constructor();
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
}
export declare namespace com.sphereon.cbor {
    class CborString extends com.sphereon.cbor.CborItem<string> {
        constructor(value: string);
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        static get Static(): {
        };
    }
}
export declare namespace com.sphereon.cbor {
    const CborSupport: {
        get serializer(): typeof com.sphereon.cbor.Cbor;
        itemFromValue<Type>(value: Type, cddl: com.sphereon.cbor.CDDL): com.sphereon.cbor.CborItem<Type>;
        itemToValue<Type>(value: com.sphereon.cbor.CborItem<Type>): Nullable<Type>;
        itemToByteArray<Type>(value: com.sphereon.cbor.CborItem<Type>): Int8Array;
        itemFromByteArray<Type>(value: Int8Array): com.sphereon.cbor.CborItem<Type>;
        dataItemFromValue<Type>(bytes: Int8Array, value: Type): com.sphereon.cbor.CborEncodedItem<Type>;
        dataItemToValue<Type extends com.sphereon.cbor.CborItem<any /*UnknownType **/>>(value: com.sphereon.cbor.CborEncodedItem<Type>): Type;
        dataItemToByteArray<Type>(value: com.sphereon.cbor.CborEncodedItem<Type>): Int8Array;
        dataItemFromByteArray<Type>(value: Int8Array): com.sphereon.cbor.CborEncodedItem<Type>;
    };
}
export declare namespace com.sphereon.cbor {
    class CborTagged<T> extends com.sphereon.cbor.CborItem<T> {
        constructor(tagNumber: number, taggedItem: com.sphereon.cbor.CborItem<T>);
        get tagNumber(): number;
        get taggedItem(): com.sphereon.cbor.CborItem<T>;
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        static get Static(): {
            get DATE_TIME_STRING(): number;
            get DATE_TIME_NUMBER(): number;
            get ENCODED_CBOR(): number;
            get FULL_DATE_STRING(): number;
        };
    }
}
export declare namespace com.sphereon.cbor {
    class CborTime extends com.sphereon.cbor.CborTagged<com.sphereon.kmp.LongKMP> {
        constructor(value: com.sphereon.kmp.LongKMP);
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
}
export declare namespace com.sphereon.cbor {
    class CborUInt extends com.sphereon.cbor.AbstractCborInt<com.sphereon.kmp.LongKMP> {
        constructor(value: com.sphereon.kmp.LongKMP);
        static fromNumber(value: any/* kotlin.Number */): com.sphereon.cbor.CborUInt;
        protected validate(): void;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        static get Static(): {
        };
    }
}
export declare namespace com.sphereon.cbor {
    class CborUndefined extends /* com.sphereon.cbor.CborSimple<Nullable<void>> */ com.sphereon.cbor.CborItem<Nullable<void>> {
        constructor();
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
}
export declare namespace com.sphereon.cbor {
    abstract class CborView<CborViewType, JsonViewType, CborType> extends com.sphereon.cbor.CborBaseItem {
        constructor(cddl: com.sphereon.cbor.CDDLType);
        abstract cborBuilder(): com.sphereon.cbor.CborBuilder<CborViewType>;
        cborEncode(): Int8Array;
        toCbor(): CborType;
        abstract toJson(): JsonViewType;
    }
}
export declare namespace com.sphereon.cbor {
    abstract class LabelType {
        private constructor();
        static get String(): com.sphereon.cbor.LabelType & {
            get name(): "String";
            get ordinal(): 0;
        };
        static get Int(): com.sphereon.cbor.LabelType & {
            get name(): "Int";
            get ordinal(): 1;
        };
        get name(): "String" | "Int";
        get ordinal(): 0 | 1;
        static values(): Array<com.sphereon.cbor.LabelType>;
        static valueOf(value: string): com.sphereon.cbor.LabelType;
    }
    abstract class CoseLabeled<Label extends com.sphereon.cbor.CoseLabel<any /*UnknownType **/>, CborItem extends com.sphereon.cbor.CborItem<any /*UnknownType **/>> {
        protected constructor(label: Label, value: CborItem);
        get label(): Label;
        get value(): CborItem;
    }
    abstract class CoseLabel<ItemType> extends com.sphereon.cbor.CborItem<ItemType> {
        protected constructor(value: ItemType, cddl: com.sphereon.cbor.CDDLType, type: com.sphereon.cbor.LabelType);
        get type(): com.sphereon.cbor.LabelType;
        required<T>(map: com.sphereon.cbor.CborMap<com.sphereon.cbor.CoseLabel<any /*UnknownType **/>, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): T;
        requiredAsCborMap(map: com.sphereon.cbor.CborMap<com.sphereon.cbor.CoseLabel<any /*UnknownType **/>, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.cbor.CborMap<com.sphereon.cbor.CborItem<any /*UnknownType **/>, com.sphereon.cbor.CborItem<any /*UnknownType **/>>;
        requiredAsCborArray<T extends com.sphereon.cbor.CborItem<any /*UnknownType **/>>(map: com.sphereon.cbor.CborMap<com.sphereon.cbor.CoseLabel<any /*UnknownType **/>, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.cbor.CborArray<T>;
        requiredAsListFromCborArray<T>(map: com.sphereon.cbor.CborMap<com.sphereon.cbor.CoseLabel<any /*UnknownType **/>, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): kotlin.collections.KtMutableList<T>;
        optional<T>(map: com.sphereon.cbor.CborMap<com.sphereon.cbor.CoseLabel<any /*UnknownType **/>, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): Nullable<T>;
        optionalAsCborMap(map: com.sphereon.cbor.CborMap<com.sphereon.cbor.CoseLabel<any /*UnknownType **/>, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborItem<any /*UnknownType **/>, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>;
        optionalAsCborArray(map: com.sphereon.cbor.CborMap<com.sphereon.cbor.CoseLabel<any /*UnknownType **/>, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>>;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        static get Static(): {
            fromCborItem<ItemType extends any>(cborItem: com.sphereon.cbor.CborItem<ItemType>): com.sphereon.cbor.CoseLabel<any/* kotlin.Comparable<UnknownType *> */>;
        };
    }
    class NumberLabeledMap {
        constructor(labeledItems?: com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>);
        protected get labeledItems(): com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>;
        protected putLabel<T>(label: number, cborItem: Nullable<com.sphereon.cbor.CborItem<T>>): void;
        requiredLabel<Type>(label: number): Type;
        optionalLabel<Type>(label: number): Nullable<Type>;
        hasLabel(label: number): boolean;
        getLabels(): kotlin.collections.KtSet<com.sphereon.cbor.NumberLabel>;
        protected connectLabels(): com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>;
        encode(): Int8Array;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        static get Static(): {
            decodeNumberLabeledMap(numberMappedObject: Int8Array): com.sphereon.cbor.NumberLabeledMap;
        };
    }
    function toNumberLabel(_this_: number): com.sphereon.cbor.NumberLabel;
    function longToNumberLabel(_this_: any/* kotlin.Long */): com.sphereon.cbor.NumberLabel;
    function toStringLabel(_this_: string): com.sphereon.cbor.StringLabel;
}
export declare namespace com.sphereon.cbor {
    abstract class DiagnosticOption {
        private constructor();
        static get EMBEDDED_CBOR(): com.sphereon.cbor.DiagnosticOption & {
            get name(): "EMBEDDED_CBOR";
            get ordinal(): 0;
        };
        static get PRETTY_PRINT(): com.sphereon.cbor.DiagnosticOption & {
            get name(): "PRETTY_PRINT";
            get ordinal(): 1;
        };
        static get BSTR_PRINT_LENGTH(): com.sphereon.cbor.DiagnosticOption & {
            get name(): "BSTR_PRINT_LENGTH";
            get ordinal(): 2;
        };
        get name(): "EMBEDDED_CBOR" | "PRETTY_PRINT" | "BSTR_PRINT_LENGTH";
        get ordinal(): 0 | 1 | 2;
        static values(): Array<com.sphereon.cbor.DiagnosticOption>;
        static valueOf(value: string): com.sphereon.cbor.DiagnosticOption;
    }
}
export declare namespace com.sphereon.cbor {
    abstract class MajorType {
        private constructor();
        static get UNSIGNED_INTEGER(): com.sphereon.cbor.MajorType & {
            get name(): "UNSIGNED_INTEGER";
            get ordinal(): 0;
        };
        static get NEGATIVE_INTEGER(): com.sphereon.cbor.MajorType & {
            get name(): "NEGATIVE_INTEGER";
            get ordinal(): 1;
        };
        static get BYTE_STRING(): com.sphereon.cbor.MajorType & {
            get name(): "BYTE_STRING";
            get ordinal(): 2;
        };
        static get UNICODE_STRING(): com.sphereon.cbor.MajorType & {
            get name(): "UNICODE_STRING";
            get ordinal(): 3;
        };
        static get ARRAY(): com.sphereon.cbor.MajorType & {
            get name(): "ARRAY";
            get ordinal(): 4;
        };
        static get MAP(): com.sphereon.cbor.MajorType & {
            get name(): "MAP";
            get ordinal(): 5;
        };
        static get TAG(): com.sphereon.cbor.MajorType & {
            get name(): "TAG";
            get ordinal(): 6;
        };
        static get SPECIAL(): com.sphereon.cbor.MajorType & {
            get name(): "SPECIAL";
            get ordinal(): 7;
        };
        get name(): "UNSIGNED_INTEGER" | "NEGATIVE_INTEGER" | "BYTE_STRING" | "UNICODE_STRING" | "ARRAY" | "MAP" | "TAG" | "SPECIAL";
        get ordinal(): 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
        get type(): number;
        static values(): Array<com.sphereon.cbor.MajorType>;
        static valueOf(value: string): com.sphereon.cbor.MajorType;
        static get Static(): {
            fromInt(value: number): com.sphereon.cbor.MajorType;
        };
        static get Companion(): {
        } & any/* kotlinx.serialization.internal.SerializerFactory */;
    }
}
export declare namespace com.sphereon.cbor {
    class NumberLabel extends com.sphereon.cbor.CoseLabel<com.sphereon.kmp.LongKMP> {
        constructor(value: number);
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
    }
}
export declare namespace com.sphereon.cbor {
    class StringLabel extends com.sphereon.cbor.CoseLabel<string> {
        constructor(value: string);
        toJsonSimple(): any/* kotlinx.serialization.json.JsonElement */;
        toJson(includeCDDL?: boolean): any/* kotlinx.serialization.json.JsonElement */;
        static get Static(): {
        };
    }
}
export declare namespace com.sphereon.json {
    const cborJsonSerializer: any/* kotlinx.serialization.json.Json */;
    const CborJsonSupport: {
        get module(): any/* kotlinx.serialization.modules.SerializersModule */;
        get serializer(): any/* kotlinx.serialization.json.Json */;
    };
}
export declare namespace com.sphereon.json {
    interface HasToJsonString {
        toJsonString(): string;
        readonly __doNotUseOrImplementIt: {
            readonly "com.sphereon.json.HasToJsonString": unique symbol;
        };
    }
    abstract class JsonView implements com.sphereon.json.HasToJsonString {
        constructor();
        toJsonDTO<T>(): T;
        abstract toCbor(): any;
        abstract toJsonString(): string;
        readonly __doNotUseOrImplementIt: com.sphereon.json.HasToJsonString["__doNotUseOrImplementIt"];
        static get Companion(): {
        } & any/* kotlinx.serialization.internal.SerializerFactory */;
    }
}
export declare namespace com.sphereon.json {
    function toJsonDTO<T>(subject: com.sphereon.json.HasToJsonString): T;
}
export declare namespace dev.whyoleg.cryptography.providers.webcrypto {
    /** @deprecated  */
    const initHook: any;
}
export declare namespace com.sphereon.crypto {
    abstract class KeyTypeMapping {
        protected constructor(coseKeyType: com.sphereon.crypto.cose.CoseKeyType, joseKeyType: com.sphereon.crypto.jose.JwaKeyType);
        static get OKP(): {
        } & com.sphereon.crypto.KeyTypeMapping;
        static get EC2(): {
        } & com.sphereon.crypto.KeyTypeMapping;
        static get RSA(): {
        } & com.sphereon.crypto.KeyTypeMapping;
        static get Static(): {
            get asList(): kotlin.collections.KtList<com.sphereon.crypto.KeyTypeMapping>;
            toJose(cose: com.sphereon.crypto.cose.CoseKeyType): com.sphereon.crypto.jose.JwaKeyType;
            toCose(jose: com.sphereon.crypto.jose.JwaKeyType): com.sphereon.crypto.cose.CoseKeyType;
        };
    }
    function toJoseKeyType(_this_: com.sphereon.crypto.cose.CoseKeyType): com.sphereon.crypto.jose.JwaKeyType;
    function toCoseKeyType(_this_: com.sphereon.crypto.jose.JwaKeyType): com.sphereon.crypto.cose.CoseKeyType;
    abstract class SignatureAlgorithmMapping {
        protected constructor(coseAlgorithm: com.sphereon.crypto.cose.CoseAlgorithm, joseAlgorithm: com.sphereon.crypto.jose.JwaAlgorithm);
        static get EdDSA(): {
        } & com.sphereon.crypto.SignatureAlgorithmMapping;
        static get ES256(): {
        } & com.sphereon.crypto.SignatureAlgorithmMapping;
        static get ES384(): {
        } & com.sphereon.crypto.SignatureAlgorithmMapping;
        static get ES512(): {
        } & com.sphereon.crypto.SignatureAlgorithmMapping;
        static get ES256K(): {
        } & com.sphereon.crypto.SignatureAlgorithmMapping;
        static get HS256(): {
        } & com.sphereon.crypto.SignatureAlgorithmMapping;
        static get HS384(): {
        } & com.sphereon.crypto.SignatureAlgorithmMapping;
        static get HS512(): {
        } & com.sphereon.crypto.SignatureAlgorithmMapping;
        static get PS256(): {
        } & com.sphereon.crypto.SignatureAlgorithmMapping;
        static get PS384(): {
        } & com.sphereon.crypto.SignatureAlgorithmMapping;
        static get PS512(): {
        } & com.sphereon.crypto.SignatureAlgorithmMapping;
        static get Static(): {
            get asList(): kotlin.collections.KtList<com.sphereon.crypto.SignatureAlgorithmMapping>;
            toJose(cose: com.sphereon.crypto.cose.CoseAlgorithm): com.sphereon.crypto.jose.JwaAlgorithm;
            toCose(jose: com.sphereon.crypto.jose.JwaAlgorithm): com.sphereon.crypto.cose.CoseAlgorithm;
        };
    }
    function toJoseSignatureAlgorithm(_this_: com.sphereon.crypto.cose.CoseAlgorithm): com.sphereon.crypto.jose.JwaAlgorithm;
    function toCoseSignatureAlgorithm(_this_: com.sphereon.crypto.jose.JwaAlgorithm): com.sphereon.crypto.cose.CoseAlgorithm;
    abstract class CurveMapping {
        protected constructor(coseCurve: com.sphereon.crypto.cose.CoseCurve, joseCurve: com.sphereon.crypto.jose.JwaCurve);
        static get P_256(): {
        } & com.sphereon.crypto.CurveMapping;
        static get P_384(): {
        } & com.sphereon.crypto.CurveMapping;
        static get P_521(): {
        } & com.sphereon.crypto.CurveMapping;
        static get Secp256k1(): {
        } & com.sphereon.crypto.CurveMapping;
        static get Ed25519(): {
        } & com.sphereon.crypto.CurveMapping;
        static get X25519(): {
        } & com.sphereon.crypto.CurveMapping;
        static get Static(): {
            get asList(): kotlin.collections.KtList<com.sphereon.crypto.CurveMapping>;
            toJose(cose: com.sphereon.crypto.cose.CoseCurve): com.sphereon.crypto.jose.JwaCurve;
            toCose(jose: com.sphereon.crypto.jose.JwaCurve): com.sphereon.crypto.cose.CoseCurve;
        };
    }
    function toJoseCurve(_this_: com.sphereon.crypto.cose.CoseCurve): com.sphereon.crypto.jose.JwaCurve;
    function toCoseCurve(_this_: com.sphereon.crypto.jose.JwaCurve): com.sphereon.crypto.cose.CoseCurve;
    abstract class KeyOperationsMapping {
        protected constructor(coseKeyOperations: com.sphereon.crypto.cose.CoseKeyOperations, joseKeyOperations: com.sphereon.crypto.jose.JoseKeyOperations);
        static get WRAP_KEY(): {
        } & com.sphereon.crypto.KeyOperationsMapping;
        static get DERIVE_KEY(): {
        } & com.sphereon.crypto.KeyOperationsMapping;
        static get UNWRAP_KEY(): {
        } & com.sphereon.crypto.KeyOperationsMapping;
        static get SIGN(): {
        } & com.sphereon.crypto.KeyOperationsMapping;
        static get VERIFY(): {
        } & com.sphereon.crypto.KeyOperationsMapping;
        static get DECRYPT(): {
        } & com.sphereon.crypto.KeyOperationsMapping;
        static get DERIVE_BITS(): {
        } & com.sphereon.crypto.KeyOperationsMapping;
        static get ENCRYPT(): {
        } & com.sphereon.crypto.KeyOperationsMapping;
        static get MAC_CREATE(): {
        } & com.sphereon.crypto.KeyOperationsMapping;
        static get MAC_VERIFY(): {
        } & com.sphereon.crypto.KeyOperationsMapping;
        static get Static(): {
            get asList(): kotlin.collections.KtList<com.sphereon.crypto.KeyOperationsMapping>;
            toJose(cose: com.sphereon.crypto.cose.CoseKeyOperations): com.sphereon.crypto.jose.JoseKeyOperations;
            toCose(jose: com.sphereon.crypto.jose.JoseKeyOperations): com.sphereon.crypto.cose.CoseKeyOperations;
        };
    }
    function toJoseKeyOperations(_this_: com.sphereon.crypto.cose.CoseKeyOperations): com.sphereon.crypto.jose.JoseKeyOperations;
    function toCoseKeyOperations(_this_: com.sphereon.crypto.jose.JoseKeyOperations): com.sphereon.crypto.cose.CoseKeyOperations;
}
export declare namespace com.sphereon.crypto {
    abstract class HashAlgorithm {
        private constructor();
        static get SHA256(): com.sphereon.crypto.HashAlgorithm & {
            get name(): "SHA256";
            get ordinal(): 0;
        };
        static get SHA384(): com.sphereon.crypto.HashAlgorithm & {
            get name(): "SHA384";
            get ordinal(): 1;
        };
        static get SHA512(): com.sphereon.crypto.HashAlgorithm & {
            get name(): "SHA512";
            get ordinal(): 2;
        };
        get name(): "SHA256" | "SHA384" | "SHA512";
        get ordinal(): 0 | 1 | 2;
        get hashName(): string;
        static values(): Array<com.sphereon.crypto.HashAlgorithm>;
        static valueOf(value: string): com.sphereon.crypto.HashAlgorithm;
        static get Static(): {
            fromValue(name: string): com.sphereon.crypto.HashAlgorithm;
        };
        static get Companion(): {
        } & any/* kotlinx.serialization.internal.SerializerFactory */;
    }
}
export declare namespace com.sphereon.crypto {
    abstract class X509VerificationProfile {
        private constructor();
        static get ISO_18013_5(): com.sphereon.crypto.X509VerificationProfile & {
            get name(): "ISO_18013_5";
            get ordinal(): 0;
        };
        static get RFC_5280(): com.sphereon.crypto.X509VerificationProfile & {
            get name(): "RFC_5280";
            get ordinal(): 1;
        };
        get name(): "ISO_18013_5" | "RFC_5280";
        get ordinal(): 0 | 1;
        static values(): Array<com.sphereon.crypto.X509VerificationProfile>;
        static valueOf(value: string): com.sphereon.crypto.X509VerificationProfile;
    }
    class X509VerificationResult<KeyType extends com.sphereon.crypto.IKey> extends com.sphereon.crypto.VerifyResult implements com.sphereon.crypto.IX509VerificationResult<KeyType> {
        constructor(publicKey: Nullable<KeyType> | undefined, publicKeyAlgorithm: Nullable<string> | undefined, publicKeyParams: Nullable<any> | undefined, name: string | undefined, critical: boolean, message: Nullable<string>, error: boolean);
        get publicKey(): Nullable<KeyType>;
        get publicKeyAlgorithm(): Nullable<string>;
        get publicKeyParams(): Nullable<any>;
    }
}
export declare namespace com.sphereon.crypto {
    class VerifyResults<KeyType extends com.sphereon.crypto.IKey> implements com.sphereon.crypto.IVerifyResults<KeyType> {
        constructor(error: boolean, verifications: Array<com.sphereon.crypto.VerifyResult>, keyInfo: Nullable<com.sphereon.crypto.KeyInfo<KeyType>>);
        get error(): boolean;
        get verifications(): Array<com.sphereon.crypto.VerifyResult>;
        get keyInfo(): Nullable<com.sphereon.crypto.KeyInfo<KeyType>>;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(error?: boolean, verifications?: Array<com.sphereon.crypto.VerifyResult>, keyInfo?: Nullable<com.sphereon.crypto.KeyInfo<KeyType>>): com.sphereon.crypto.VerifyResults<KeyType>;
        static get Companion(): {
            get $cachedDescriptor(): any/* kotlinx.serialization.descriptors.SerialDescriptor */;
        } & any/* kotlinx.serialization.internal.SerializerFactory */;
    }
    class VerifyResult implements com.sphereon.crypto.IVerifyResult {
        constructor(name: string, error: boolean, message?: Nullable<string>, critical?: boolean);
        get name(): string;
        get error(): boolean;
        get message(): Nullable<string>;
        get critical(): boolean;
        toString(): string;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        static get Static(): {
            fromDTO(dto: com.sphereon.crypto.IVerifyResult): com.sphereon.crypto.VerifyResult;
        };
        static get Companion(): {
        };
    }
    class VerifySignatureResult<KeyType extends com.sphereon.crypto.IKey> extends com.sphereon.crypto.VerifyResult implements com.sphereon.crypto.IVerifySignatureResult<KeyType> {
        constructor(error: boolean, name: string, critical: boolean, message: Nullable<string>, keyInfo: Nullable<com.sphereon.crypto.IKeyInfo<KeyType>>);
        get keyInfo(): Nullable<com.sphereon.crypto.IKeyInfo<KeyType>>;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
    }
    class KeyInfo<KeyType extends com.sphereon.crypto.IKey> implements com.sphereon.crypto.IKeyInfo<KeyType> {
        constructor(kid: Nullable<string>, key: Nullable<KeyType>, opts?: Nullable<kotlin.collections.KtMap<any /*UnknownType **/, any /*UnknownType **/>>);
        get kid(): Nullable<string>;
        get key(): Nullable<KeyType>;
        get opts(): Nullable<kotlin.collections.KtMap<any /*UnknownType **/, any /*UnknownType **/>>;
        hashCode(): number;
        toString(): string;
        equals(other: Nullable<any>): boolean;
        copy(kid?: Nullable<string>, key?: Nullable<KeyType>, opts?: Nullable<kotlin.collections.KtMap<any /*UnknownType **/, any /*UnknownType **/>>): com.sphereon.crypto.KeyInfo<KeyType>;
        static get Static(): {
            fromDTO<KeyType extends com.sphereon.crypto.IKey>(dto: com.sphereon.crypto.IKeyInfo<KeyType>): com.sphereon.crypto.KeyInfo<KeyType>;
        };
        static get Companion(): {
            get $cachedDescriptor(): any/* kotlinx.serialization.descriptors.SerialDescriptor */;
        } & any/* kotlinx.serialization.internal.SerializerFactory */;
    }
}
export declare namespace com.sphereon.crypto.cose {
    interface CoseAlgorithm {
        readonly name: string;
        readonly value: number;
        readonly keyType: Nullable<com.sphereon.crypto.cose.CoseKeyType>;
        readonly hash: Nullable<com.sphereon.crypto.HashAlgorithm>;
        readonly tagLength: Nullable<number>;
        readonly curve: Nullable<com.sphereon.crypto.cose.CoseCurve>;
        readonly description: string;
        readonly __doNotUseOrImplementIt: {
            readonly "com.sphereon.crypto.cose.CoseAlgorithm": unique symbol;
        };
    }
    const CoseAlgorithm: {
    } & any/* kotlinx.serialization.internal.SerializerFactory */;
    abstract class CoseSignatureAlgorithm implements com.sphereon.crypto.cose.CoseAlgorithm {
        protected constructor(name: string, value: number, keyType: Nullable<com.sphereon.crypto.cose.CoseKeyType>, hash: Nullable<com.sphereon.crypto.HashAlgorithm>, tagLength: Nullable<number>, curve: Nullable<com.sphereon.crypto.cose.CoseCurve>, description: string);
        get name(): string;
        get value(): number;
        get keyType(): Nullable<com.sphereon.crypto.cose.CoseKeyType>;
        get hash(): Nullable<com.sphereon.crypto.HashAlgorithm>;
        get tagLength(): Nullable<number>;
        get curve(): Nullable<com.sphereon.crypto.cose.CoseCurve>;
        get description(): string;
        readonly __doNotUseOrImplementIt: com.sphereon.crypto.cose.CoseAlgorithm["__doNotUseOrImplementIt"];
        static get ES256(): {
        } & com.sphereon.crypto.cose.CoseSignatureAlgorithm & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get ES256K(): {
        } & com.sphereon.crypto.cose.CoseSignatureAlgorithm & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get ES384(): {
        } & com.sphereon.crypto.cose.CoseSignatureAlgorithm & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get ES512(): {
        } & com.sphereon.crypto.cose.CoseSignatureAlgorithm & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get EdDSA(): {
        } & com.sphereon.crypto.cose.CoseSignatureAlgorithm & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get HS256_64(): {
        } & com.sphereon.crypto.cose.CoseSignatureAlgorithm & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get HS256(): {
        } & com.sphereon.crypto.cose.CoseSignatureAlgorithm & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get HS384(): {
        } & com.sphereon.crypto.cose.CoseSignatureAlgorithm & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get HS512(): {
        } & com.sphereon.crypto.cose.CoseSignatureAlgorithm & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get PS256(): {
        } & com.sphereon.crypto.cose.CoseSignatureAlgorithm & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get PS384(): {
        } & com.sphereon.crypto.cose.CoseSignatureAlgorithm & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get PS512(): {
        } & com.sphereon.crypto.cose.CoseSignatureAlgorithm & any/* kotlinx.serialization.internal.SerializerFactory */;
        static get Static(): {
            get asList(): kotlin.collections.KtList<com.sphereon.crypto.cose.CoseSignatureAlgorithm>;
            fromValue(value: Nullable<number>): Nullable<com.sphereon.crypto.cose.CoseSignatureAlgorithm>;
            fromName(name: string): com.sphereon.crypto.cose.CoseSignatureAlgorithm;
        };
        static get Companion(): {
        };
    }
}
export declare namespace com.sphereon.crypto.cose {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class CoseHeaderJson extends com.sphereon.json.JsonView {
        constructor(alg?: Nullable<com.sphereon.crypto.cose.CoseSignatureAlgorithm>, crit?: Nullable<Array<string>>, contentType?: Nullable<string>, kid?: Nullable<string>, iv?: Nullable<string>, partialIv?: Nullable<string>, x5chain?: Nullable<Array<string>>);
        get alg(): Nullable<com.sphereon.crypto.cose.CoseSignatureAlgorithm>;
        get crit(): Nullable<Array<string>>;
        get contentType(): Nullable<string>;
        get kid(): Nullable<string>;
        get iv(): Nullable<string>;
        get partialIv(): Nullable<string>;
        get x5chain(): Nullable<Array<string>>;
        toJsonString(): string;
        toCbor(): com.sphereon.crypto.cose.CoseHeaderCbor;
        copy(alg?: Nullable<com.sphereon.crypto.cose.CoseSignatureAlgorithm>, crit?: Nullable<Array<string>>, contentType?: Nullable<string>, kid?: Nullable<string>, iv?: Nullable<string>, partialIv?: Nullable<string>, x5chain?: Nullable<Array<string>>): com.sphereon.crypto.cose.CoseHeaderJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Companion(): {
        };
    }
    class CoseHeaderCbor extends com.sphereon.cbor.CborView<com.sphereon.crypto.cose.CoseHeaderCbor, com.sphereon.crypto.cose.CoseHeaderJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(alg?: Nullable<com.sphereon.crypto.cose.CoseSignatureAlgorithm>, crit?: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborString>>, contentType?: Nullable<com.sphereon.cbor.CborString>, kid?: Nullable<com.sphereon.cbor.CborByteString>, iv?: Nullable<com.sphereon.cbor.CborByteString>, partialIv?: Nullable<com.sphereon.cbor.CborByteString>, x5chain?: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborByteString>>);
        get alg(): Nullable<com.sphereon.crypto.cose.CoseSignatureAlgorithm>;
        get crit(): Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborString>>;
        get contentType(): Nullable<com.sphereon.cbor.CborString>;
        get kid(): Nullable<com.sphereon.cbor.CborByteString>;
        get iv(): Nullable<com.sphereon.cbor.CborByteString>;
        get partialIv(): Nullable<com.sphereon.cbor.CborByteString>;
        get x5chain(): Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborByteString>>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.crypto.cose.CoseHeaderCbor>;
        toJson(): com.sphereon.crypto.cose.CoseHeaderJson;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(alg?: Nullable<com.sphereon.crypto.cose.CoseSignatureAlgorithm>, crit?: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborString>>, contentType?: Nullable<com.sphereon.cbor.CborString>, kid?: Nullable<com.sphereon.cbor.CborByteString>, iv?: Nullable<com.sphereon.cbor.CborByteString>, partialIv?: Nullable<com.sphereon.cbor.CborByteString>, x5chain?: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborByteString>>): com.sphereon.crypto.cose.CoseHeaderCbor;
        static get Static(): {
            get ALG(): com.sphereon.cbor.NumberLabel;
            get CRIT(): com.sphereon.cbor.NumberLabel;
            get CONTENT_TYPE(): com.sphereon.cbor.NumberLabel;
            get KID(): com.sphereon.cbor.NumberLabel;
            get IV(): com.sphereon.cbor.NumberLabel;
            get PARTIAL_IV(): com.sphereon.cbor.NumberLabel;
            get X5CHAIN(): com.sphereon.cbor.NumberLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.crypto.cose.CoseHeaderCbor;
            cborDecode(encoded: Int8Array): com.sphereon.crypto.cose.CoseHeaderCbor;
        };
    }
}
export declare namespace com.sphereon.crypto.cose {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class CoseKeyJson extends com.sphereon.json.JsonView implements com.sphereon.crypto.cose.ICoseKeyJson {
        constructor(kty: com.sphereon.crypto.cose.CoseKeyType, kid?: Nullable<string>, alg?: Nullable<com.sphereon.crypto.cose.CoseAlgorithm>, key_ops?: Nullable<Array<com.sphereon.crypto.cose.CoseKeyOperations>>, baseIV?: Nullable<string>, crv?: Nullable<com.sphereon.crypto.cose.CoseCurve>, x?: Nullable<string>, y?: Nullable<string>, d?: Nullable<string>, x5chain?: Nullable<Array<string>>, additional?: Nullable<kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>>/* Nullable<kotlinx.serialization.json.JsonObject> */);
        get kty(): com.sphereon.crypto.cose.CoseKeyType;
        get kid(): Nullable<string>;
        get alg(): Nullable<com.sphereon.crypto.cose.CoseAlgorithm>;
        get key_ops(): Nullable<Array<com.sphereon.crypto.cose.CoseKeyOperations>>;
        get baseIV(): Nullable<string>;
        get crv(): Nullable<com.sphereon.crypto.cose.CoseCurve>;
        get x(): Nullable<string>;
        get y(): Nullable<string>;
        get d(): Nullable<string>;
        get x5chain(): Nullable<Array<string>>;
        get additional(): Nullable<kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>>/* Nullable<kotlinx.serialization.json.JsonObject> */;
        toDto(): any/* kotlinx.serialization.json.JsonElement */;
        toJsonString(): string;
        toCbor(): com.sphereon.crypto.cose.CoseKeyCbor;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        static get Static(): {
            fromDTO(dto: com.sphereon.crypto.cose.ICoseKeyJson): com.sphereon.crypto.cose.CoseKeyJson;
        };
        static get Companion(): {
        };
    }
    namespace CoseKeyJson {
        class Builder {
            constructor();
            get kid(): Nullable<string>;
            set kid(value: Nullable<string>);
            get alg(): Nullable<com.sphereon.crypto.cose.CoseAlgorithm>;
            set alg(value: Nullable<com.sphereon.crypto.cose.CoseAlgorithm>);
            get key_ops(): Nullable<Array<com.sphereon.crypto.cose.CoseKeyOperations>>;
            set key_ops(value: Nullable<Array<com.sphereon.crypto.cose.CoseKeyOperations>>);
            get baseIV(): Nullable<string>;
            set baseIV(value: Nullable<string>);
            get crv(): Nullable<com.sphereon.crypto.cose.CoseCurve>;
            set crv(value: Nullable<com.sphereon.crypto.cose.CoseCurve>);
            get x(): Nullable<string>;
            set x(value: Nullable<string>);
            get y(): Nullable<string>;
            set y(value: Nullable<string>);
            get d(): Nullable<string>;
            set d(value: Nullable<string>);
            get x5chain(): Nullable<Array<string>>;
            set x5chain(value: Nullable<Array<string>>);
            get additional(): Nullable<kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>>/* Nullable<kotlinx.serialization.json.JsonObject> */;
            set additional(value: Nullable<kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>>/* Nullable<kotlinx.serialization.json.JsonObject> */);
            withKty(kty: com.sphereon.crypto.cose.CoseKeyType): com.sphereon.crypto.cose.CoseKeyJson.Builder;
            withKid(kid: Nullable<string>): com.sphereon.crypto.cose.CoseKeyJson.Builder;
            withAlg(alg: Nullable<com.sphereon.crypto.cose.CoseAlgorithm>): com.sphereon.crypto.cose.CoseKeyJson.Builder;
            withKeyOps(key_ops: Nullable<Array<com.sphereon.crypto.cose.CoseKeyOperations>>): com.sphereon.crypto.cose.CoseKeyJson.Builder;
            withBaseIV(baseIVHex: Nullable<string>): com.sphereon.crypto.cose.CoseKeyJson.Builder;
            withCrv(crv: Nullable<com.sphereon.crypto.cose.CoseCurve>): com.sphereon.crypto.cose.CoseKeyJson.Builder;
            withX(x: Nullable<string>): com.sphereon.crypto.cose.CoseKeyJson.Builder;
            withY(y: Nullable<string>): com.sphereon.crypto.cose.CoseKeyJson.Builder;
            withD(d: Nullable<string>): com.sphereon.crypto.cose.CoseKeyJson.Builder;
            withX5Chain(x5c: Nullable<Array<string>>): com.sphereon.crypto.cose.CoseKeyJson.Builder;
            build(): com.sphereon.crypto.cose.CoseKeyJson;
        }
    }
    class CoseKeyCbor extends com.sphereon.cbor.CborView<com.sphereon.crypto.cose.CoseKeyCbor, com.sphereon.crypto.cose.CoseKeyJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> implements com.sphereon.crypto.cose.ICoseKeyCbor {
        constructor(kty: com.sphereon.cbor.CborUInt, kid?: Nullable<com.sphereon.cbor.CborByteString>, alg?: Nullable<com.sphereon.cbor.CborUInt>, key_ops?: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborUInt>>, baseIV?: Nullable<com.sphereon.cbor.CborByteString>, crv?: Nullable<com.sphereon.cbor.CborUInt>, x?: Nullable<com.sphereon.cbor.CborByteString>, y?: Nullable<com.sphereon.cbor.CborByteString>, d?: Nullable<com.sphereon.cbor.CborByteString>, x5chain?: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborByteString>>, additional?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>);
        get kty(): com.sphereon.cbor.CborUInt;
        get kid(): Nullable<com.sphereon.cbor.CborByteString>;
        get alg(): Nullable<com.sphereon.cbor.CborUInt>;
        get key_ops(): Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborUInt>>;
        get baseIV(): Nullable<com.sphereon.cbor.CborByteString>;
        get crv(): Nullable<com.sphereon.cbor.CborUInt>;
        get x(): Nullable<com.sphereon.cbor.CborByteString>;
        get y(): Nullable<com.sphereon.cbor.CborByteString>;
        get d(): Nullable<com.sphereon.cbor.CborByteString>;
        get x5chain(): Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborByteString>>;
        get additional(): Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.crypto.cose.CoseKeyCbor>;
        toJson(): com.sphereon.crypto.cose.CoseKeyJson;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        static get Static(): {
            get KTY(): com.sphereon.cbor.NumberLabel;
            get KID(): com.sphereon.cbor.NumberLabel;
            get ALG(): com.sphereon.cbor.NumberLabel;
            get KEY_OPS(): com.sphereon.cbor.NumberLabel;
            get BASE_IV(): com.sphereon.cbor.NumberLabel;
            get X5_CHAIN(): com.sphereon.cbor.NumberLabel;
            get CRV(): com.sphereon.cbor.NumberLabel;
            get X(): com.sphereon.cbor.NumberLabel;
            get Y(): com.sphereon.cbor.NumberLabel;
            get D(): com.sphereon.cbor.NumberLabel;
            get N(): com.sphereon.cbor.NumberLabel;
            get E(): com.sphereon.cbor.NumberLabel;
            get D_RSA(): com.sphereon.cbor.NumberLabel;
            get P(): com.sphereon.cbor.NumberLabel;
            get Q(): com.sphereon.cbor.NumberLabel;
            get DP(): com.sphereon.cbor.NumberLabel;
            get DQ(): com.sphereon.cbor.NumberLabel;
            get QINV(): com.sphereon.cbor.NumberLabel;
            get OTHER(): com.sphereon.cbor.NumberLabel;
            get R_I(): com.sphereon.cbor.NumberLabel;
            get D_I(): com.sphereon.cbor.NumberLabel;
            get T_I(): com.sphereon.cbor.NumberLabel;
            get labels(): kotlin.collections.KtSet<com.sphereon.cbor.NumberLabel>;
            builder(): com.sphereon.crypto.cose.CoseKeyCbor.Builder;
            fromDTO(dto: com.sphereon.crypto.cose.ICoseKeyCbor): com.sphereon.crypto.cose.CoseKeyCbor;
            cborDecode(encodedDeviceEngagement: Int8Array): com.sphereon.crypto.cose.CoseKeyCbor;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.crypto.cose.CoseKeyCbor;
        };
    }
    namespace CoseKeyCbor {
        class Builder {
            constructor();
            get kid(): Nullable<com.sphereon.cbor.CborByteString>;
            set kid(value: Nullable<com.sphereon.cbor.CborByteString>);
            get alg(): Nullable<com.sphereon.cbor.CborUInt>;
            set alg(value: Nullable<com.sphereon.cbor.CborUInt>);
            get key_ops(): Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborUInt>>;
            set key_ops(value: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborUInt>>);
            get baseIV(): Nullable<com.sphereon.cbor.CborByteString>;
            set baseIV(value: Nullable<com.sphereon.cbor.CborByteString>);
            get crv(): Nullable<com.sphereon.cbor.CborUInt>;
            set crv(value: Nullable<com.sphereon.cbor.CborUInt>);
            get x(): Nullable<com.sphereon.cbor.CborByteString>;
            set x(value: Nullable<com.sphereon.cbor.CborByteString>);
            get y(): Nullable<com.sphereon.cbor.CborByteString>;
            set y(value: Nullable<com.sphereon.cbor.CborByteString>);
            get d(): Nullable<com.sphereon.cbor.CborByteString>;
            set d(value: Nullable<com.sphereon.cbor.CborByteString>);
            get x5chain(): Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborByteString>>;
            set x5chain(value: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborByteString>>);
            get additional(): Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>;
            set additional(value: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>);
            withKty(kty: com.sphereon.crypto.cose.CoseKeyType): com.sphereon.crypto.cose.CoseKeyCbor.Builder;
            withKid(kid: Nullable<string>): com.sphereon.crypto.cose.CoseKeyCbor.Builder;
            withAlg(alg: Nullable<com.sphereon.crypto.cose.CoseAlgorithm>): com.sphereon.crypto.cose.CoseKeyCbor.Builder;
            withKeyOps(key_ops: Nullable<Array<com.sphereon.crypto.cose.CoseKeyOperations>>): com.sphereon.crypto.cose.CoseKeyCbor.Builder;
            withBaseIV(baseIVHex: Nullable<string>): com.sphereon.crypto.cose.CoseKeyCbor.Builder;
            withCrv(crv: Nullable<com.sphereon.crypto.cose.CoseCurve>): com.sphereon.crypto.cose.CoseKeyCbor.Builder;
            withX(x: Nullable<string>): com.sphereon.crypto.cose.CoseKeyCbor.Builder;
            withY(y: Nullable<string>): com.sphereon.crypto.cose.CoseKeyCbor.Builder;
            withD(d: Nullable<string>): com.sphereon.crypto.cose.CoseKeyCbor.Builder;
            withX5Chain(x5c: Nullable<Array<string>>): com.sphereon.crypto.cose.CoseKeyCbor.Builder;
            build(): com.sphereon.crypto.cose.CoseKeyCbor;
        }
    }
}
export declare namespace com.sphereon.crypto.cose {
    abstract class CoseKeyOperations {
        private constructor();
        static get SIGN(): com.sphereon.crypto.cose.CoseKeyOperations & {
            get name(): "SIGN";
            get ordinal(): 0;
        };
        static get VERIFY(): com.sphereon.crypto.cose.CoseKeyOperations & {
            get name(): "VERIFY";
            get ordinal(): 1;
        };
        static get ENCRYPT(): com.sphereon.crypto.cose.CoseKeyOperations & {
            get name(): "ENCRYPT";
            get ordinal(): 2;
        };
        static get DECRYPT(): com.sphereon.crypto.cose.CoseKeyOperations & {
            get name(): "DECRYPT";
            get ordinal(): 3;
        };
        static get WRAP_KEY(): com.sphereon.crypto.cose.CoseKeyOperations & {
            get name(): "WRAP_KEY";
            get ordinal(): 4;
        };
        static get UNWRAP_KEY(): com.sphereon.crypto.cose.CoseKeyOperations & {
            get name(): "UNWRAP_KEY";
            get ordinal(): 5;
        };
        static get DERIVE_KEY(): com.sphereon.crypto.cose.CoseKeyOperations & {
            get name(): "DERIVE_KEY";
            get ordinal(): 6;
        };
        static get DERIVE_BITS(): com.sphereon.crypto.cose.CoseKeyOperations & {
            get name(): "DERIVE_BITS";
            get ordinal(): 7;
        };
        static get MAC_CREATE(): com.sphereon.crypto.cose.CoseKeyOperations & {
            get name(): "MAC_CREATE";
            get ordinal(): 8;
        };
        static get MAC_VERIFY(): com.sphereon.crypto.cose.CoseKeyOperations & {
            get name(): "MAC_VERIFY";
            get ordinal(): 9;
        };
        get name(): "SIGN" | "VERIFY" | "ENCRYPT" | "DECRYPT" | "WRAP_KEY" | "UNWRAP_KEY" | "DERIVE_KEY" | "DERIVE_BITS" | "MAC_CREATE" | "MAC_VERIFY";
        get ordinal(): 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
        get paramName(): string;
        get value(): number;
        get description(): string;
        toCbor(): com.sphereon.cbor.CborUInt;
        static values(): Array<com.sphereon.crypto.cose.CoseKeyOperations>;
        static valueOf(value: string): com.sphereon.crypto.cose.CoseKeyOperations;
        static get Static(): {
            fromValue(value: number): com.sphereon.crypto.cose.CoseKeyOperations;
        };
    }
}
export declare namespace com.sphereon.crypto.cose {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class CoseSign1InputJson extends com.sphereon.json.JsonView {
        constructor(protectedHeader: com.sphereon.crypto.cose.CoseHeaderJson, unprotectedHeader: Nullable<com.sphereon.crypto.cose.CoseHeaderJson>, payload: Nullable<string>);
        get protectedHeader(): com.sphereon.crypto.cose.CoseHeaderJson;
        get unprotectedHeader(): Nullable<com.sphereon.crypto.cose.CoseHeaderJson>;
        get payload(): Nullable<string>;
        toJsonString(): string;
        toCbor(): com.sphereon.crypto.cose.CoseSign1InputCbor;
        copy(protectedHeader?: com.sphereon.crypto.cose.CoseHeaderJson, unprotectedHeader?: Nullable<com.sphereon.crypto.cose.CoseHeaderJson>, payload?: Nullable<string>): com.sphereon.crypto.cose.CoseSign1InputJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Companion(): {
        };
    }
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class CoseSign1Json extends com.sphereon.json.JsonView {
        constructor(protectedHeader: com.sphereon.crypto.cose.CoseHeaderJson, unprotectedHeader: Nullable<com.sphereon.crypto.cose.CoseHeaderJson>, payload: Nullable<string>, signature: string);
        get protectedHeader(): com.sphereon.crypto.cose.CoseHeaderJson;
        get unprotectedHeader(): Nullable<com.sphereon.crypto.cose.CoseHeaderJson>;
        get payload(): Nullable<string>;
        get signature(): string;
        toJsonString(): string;
        toCbor(): com.sphereon.crypto.cose.CoseSign1Cbor<any>;
        copy(protectedHeader?: com.sphereon.crypto.cose.CoseHeaderJson, unprotectedHeader?: Nullable<com.sphereon.crypto.cose.CoseHeaderJson>, payload?: Nullable<string>, signature?: string): com.sphereon.crypto.cose.CoseSign1Json;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromDTO(dto: com.sphereon.crypto.cose.CoseSign1Json): com.sphereon.crypto.cose.CoseSign1Json;
        };
        static get Companion(): {
        };
    }
    class CoseSign1InputCbor extends com.sphereon.cbor.CborView<com.sphereon.crypto.cose.CoseSign1InputCbor, com.sphereon.crypto.cose.CoseSign1InputJson, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(protectedHeader: com.sphereon.crypto.cose.CoseHeaderCbor, unprotectedHeader: Nullable<com.sphereon.crypto.cose.CoseHeaderCbor>, payload: Nullable<com.sphereon.cbor.CborByteString>);
        get protectedHeader(): com.sphereon.crypto.cose.CoseHeaderCbor;
        get unprotectedHeader(): Nullable<com.sphereon.crypto.cose.CoseHeaderCbor>;
        get payload(): Nullable<com.sphereon.cbor.CborByteString>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.crypto.cose.CoseSign1InputCbor>;
        toJson(): com.sphereon.crypto.cose.CoseSign1InputJson;
        copy(protectedHeader?: com.sphereon.crypto.cose.CoseHeaderCbor, unprotectedHeader?: Nullable<com.sphereon.crypto.cose.CoseHeaderCbor>, payload?: Nullable<com.sphereon.cbor.CborByteString>): com.sphereon.crypto.cose.CoseSign1InputCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromCborItem(a: com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.crypto.cose.CoseSign1InputCbor;
            cborDecode(encoded: Int8Array): com.sphereon.crypto.cose.CoseSign1InputCbor;
        };
    }
    class CoseSign1Cbor<CborType> extends com.sphereon.cbor.CborView<com.sphereon.crypto.cose.CoseSign1Cbor<CborType>, com.sphereon.crypto.cose.CoseSign1Json, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(protectedHeader: com.sphereon.crypto.cose.CoseHeaderCbor, unprotectedHeader: Nullable<com.sphereon.crypto.cose.CoseHeaderCbor>, payload: Nullable<com.sphereon.cbor.CborByteString>, signature: com.sphereon.cbor.CborByteString);
        get protectedHeader(): com.sphereon.crypto.cose.CoseHeaderCbor;
        get unprotectedHeader(): Nullable<com.sphereon.crypto.cose.CoseHeaderCbor>;
        get payload(): Nullable<com.sphereon.cbor.CborByteString>;
        get signature(): com.sphereon.cbor.CborByteString;
        toSignature1Structure(): com.sphereon.crypto.cose.CoseSignatureStructureCbor;
        toBeSignedCbor(key: Nullable<com.sphereon.crypto.cose.ICoseKeyCbor>, alg: Nullable<com.sphereon.crypto.cose.CoseAlgorithm>): com.sphereon.crypto.cose.ToBeSignedCbor;
        toBeSignedJson(key: Nullable<com.sphereon.crypto.cose.ICoseKeyJson>, alg: Nullable<com.sphereon.crypto.cose.CoseAlgorithm>): com.sphereon.crypto.cose.ToBeSignedJson;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.crypto.cose.CoseSign1Cbor<CborType>>;
        toJson(): com.sphereon.crypto.cose.CoseSign1Json;
        hashCode(): number;
        toString(): string;
        copy(protectedHeader?: com.sphereon.crypto.cose.CoseHeaderCbor, unprotectedHeader?: Nullable<com.sphereon.crypto.cose.CoseHeaderCbor>, payload?: Nullable<com.sphereon.cbor.CborByteString>, signature?: com.sphereon.cbor.CborByteString): com.sphereon.crypto.cose.CoseSign1Cbor<CborType>;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromCborItem<CborType>(a: com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.crypto.cose.CoseSign1Cbor<CborType>;
            cborDecode<CborType>(encoded: Int8Array): com.sphereon.crypto.cose.CoseSign1Cbor<CborType>;
        };
    }
    abstract class SigStructure {
        protected constructor(value: string);
        get value(): string;
        toCbor(): com.sphereon.cbor.CborString;
        static get Signature(): {
        } & com.sphereon.crypto.cose.SigStructure;
        static get Signature1(): {
        } & com.sphereon.crypto.cose.SigStructure;
        static get CounterSignature(): {
        } & com.sphereon.crypto.cose.SigStructure;
        static get Static(): {
            get asList(): kotlin.collections.KtList<com.sphereon.crypto.cose.SigStructure>;
            fromValue(value: string): com.sphereon.crypto.cose.SigStructure;
        };
    }
    class CoseSignatureStructureJson extends com.sphereon.json.JsonView {
        constructor(structure: com.sphereon.crypto.cose.SigStructure | undefined, bodyProtected: string, signProtected: Nullable<string> | undefined, externalAad: Nullable<string> | undefined, payload: string);
        get structure(): com.sphereon.crypto.cose.SigStructure;
        get bodyProtected(): string;
        get signProtected(): Nullable<string>;
        get externalAad(): Nullable<string>;
        get payload(): string;
        toJsonString(): string;
        toCbor(): com.sphereon.crypto.cose.CoseSignatureStructureCbor;
        copy(structure?: com.sphereon.crypto.cose.SigStructure, bodyProtected?: string, signProtected?: Nullable<string>, externalAad?: Nullable<string>, payload?: string): com.sphereon.crypto.cose.CoseSignatureStructureJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
    class CoseSignatureStructureCbor extends com.sphereon.cbor.CborView<com.sphereon.crypto.cose.CoseSignatureStructureCbor, com.sphereon.crypto.cose.CoseSignatureStructureJson, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(structure: com.sphereon.cbor.CborString | undefined, bodyProtected: com.sphereon.cbor.CborByteString, signProtected: Nullable<com.sphereon.cbor.CborByteString> | undefined, externalAad: com.sphereon.cbor.CborByteString | undefined, payload: com.sphereon.cbor.CborByteString);
        get structure(): com.sphereon.cbor.CborString;
        get bodyProtected(): com.sphereon.cbor.CborByteString;
        get signProtected(): Nullable<com.sphereon.cbor.CborByteString>;
        get externalAad(): com.sphereon.cbor.CborByteString;
        get payload(): com.sphereon.cbor.CborByteString;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.crypto.cose.CoseSignatureStructureCbor>;
        toBeSigned(key: Nullable<com.sphereon.crypto.cose.ICoseKeyCbor>, alg: Nullable<com.sphereon.crypto.cose.CoseAlgorithm>): com.sphereon.crypto.cose.ToBeSignedCbor;
        toBeSignedJson(key: Nullable<com.sphereon.crypto.cose.ICoseKeyJson>, alg: Nullable<com.sphereon.crypto.cose.CoseAlgorithm>): com.sphereon.crypto.cose.ToBeSignedJson;
        toJson(): com.sphereon.crypto.cose.CoseSignatureStructureJson;
        copy(structure?: com.sphereon.cbor.CborString, bodyProtected?: com.sphereon.cbor.CborByteString, signProtected?: Nullable<com.sphereon.cbor.CborByteString>, externalAad?: com.sphereon.cbor.CborByteString, payload?: com.sphereon.cbor.CborByteString): com.sphereon.crypto.cose.CoseSignatureStructureCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromCborItem(a: com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.crypto.cose.CoseSignatureStructureCbor;
            cborDecode(encoded: Int8Array): com.sphereon.crypto.cose.CoseSignatureStructureCbor;
        };
    }
    class ToBeSignedJson extends com.sphereon.json.JsonView {
        constructor(hexValue: string, key: Nullable<com.sphereon.crypto.cose.ICoseKeyJson>, alg: Nullable<com.sphereon.crypto.cose.CoseAlgorithm>);
        get hexValue(): string;
        get key(): Nullable<com.sphereon.crypto.cose.ICoseKeyJson>;
        get alg(): Nullable<com.sphereon.crypto.cose.CoseAlgorithm>;
        toJsonString(): string;
        toCbor(): com.sphereon.crypto.cose.ToBeSignedCbor;
        copy(hexValue?: string, key?: Nullable<com.sphereon.crypto.cose.ICoseKeyJson>, alg?: Nullable<com.sphereon.crypto.cose.CoseAlgorithm>): com.sphereon.crypto.cose.ToBeSignedJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
    class ToBeSignedCbor extends com.sphereon.cbor.CborView<com.sphereon.crypto.cose.ToBeSignedCbor, com.sphereon.crypto.cose.ToBeSignedJson, com.sphereon.cbor.CborByteString> {
        constructor(value: com.sphereon.cbor.CborByteString, key: Nullable<com.sphereon.crypto.cose.ICoseKeyCbor>, alg: Nullable<com.sphereon.crypto.cose.CoseAlgorithm>);
        get value(): com.sphereon.cbor.CborByteString;
        get key(): Nullable<com.sphereon.crypto.cose.ICoseKeyCbor>;
        get alg(): Nullable<com.sphereon.crypto.cose.CoseAlgorithm>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.crypto.cose.ToBeSignedCbor>;
        toJson(): com.sphereon.crypto.cose.ToBeSignedJson;
        copy(value?: com.sphereon.cbor.CborByteString, key?: Nullable<com.sphereon.crypto.cose.ICoseKeyCbor>, alg?: Nullable<com.sphereon.crypto.cose.CoseAlgorithm>): com.sphereon.crypto.cose.ToBeSignedCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
}
export declare namespace com.sphereon.crypto.cose {
    abstract class CoseCurve {
        private constructor();
        static get P_256(): com.sphereon.crypto.cose.CoseCurve & {
            get name(): "P_256";
            get ordinal(): 0;
        };
        static get P_384(): com.sphereon.crypto.cose.CoseCurve & {
            get name(): "P_384";
            get ordinal(): 1;
        };
        static get P_521(): com.sphereon.crypto.cose.CoseCurve & {
            get name(): "P_521";
            get ordinal(): 2;
        };
        static get X25519(): com.sphereon.crypto.cose.CoseCurve & {
            get name(): "X25519";
            get ordinal(): 3;
        };
        static get X448(): com.sphereon.crypto.cose.CoseCurve & {
            get name(): "X448";
            get ordinal(): 4;
        };
        static get Ed25519(): com.sphereon.crypto.cose.CoseCurve & {
            get name(): "Ed25519";
            get ordinal(): 5;
        };
        static get Ed448(): com.sphereon.crypto.cose.CoseCurve & {
            get name(): "Ed448";
            get ordinal(): 6;
        };
        static get secp256k1(): com.sphereon.crypto.cose.CoseCurve & {
            get name(): "secp256k1";
            get ordinal(): 7;
        };
        get name(): "P_256" | "P_384" | "P_521" | "X25519" | "X448" | "Ed25519" | "Ed448" | "secp256k1";
        get ordinal(): 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
        get curveName(): string;
        get value(): number;
        toCbor(): com.sphereon.cbor.CborUInt;
        static values(): Array<com.sphereon.crypto.cose.CoseCurve>;
        static valueOf(value: string): com.sphereon.crypto.cose.CoseCurve;
        static get Static(): {
            fromValue(value: number): com.sphereon.crypto.cose.CoseCurve;
        };
    }
}
export declare namespace com.sphereon.crypto.cose {
    abstract class CoseKeyType {
        private constructor();
        static get OKP(): com.sphereon.crypto.cose.CoseKeyType & {
            get name(): "OKP";
            get ordinal(): 0;
        };
        static get EC2(): com.sphereon.crypto.cose.CoseKeyType & {
            get name(): "EC2";
            get ordinal(): 1;
        };
        static get RSA(): com.sphereon.crypto.cose.CoseKeyType & {
            get name(): "RSA";
            get ordinal(): 2;
        };
        static get Symmetric(): com.sphereon.crypto.cose.CoseKeyType & {
            get name(): "Symmetric";
            get ordinal(): 3;
        };
        static get Reserved(): com.sphereon.crypto.cose.CoseKeyType & {
            get name(): "Reserved";
            get ordinal(): 4;
        };
        get name(): "OKP" | "EC2" | "RSA" | "Symmetric" | "Reserved";
        get ordinal(): 0 | 1 | 2 | 3 | 4;
        get value(): number;
        get description(): string;
        toCbor(): com.sphereon.cbor.CborUInt;
        static values(): Array<com.sphereon.crypto.cose.CoseKeyType>;
        static valueOf(value: string): com.sphereon.crypto.cose.CoseKeyType;
        static get Static(): {
            fromValue(value: number): com.sphereon.crypto.cose.CoseKeyType;
        };
    }
}
export declare namespace com.sphereon.crypto.jose {
    abstract class JwaAlgorithmType {
        private constructor();
        static get SIGNATURE(): com.sphereon.crypto.jose.JwaAlgorithmType & {
            get name(): "SIGNATURE";
            get ordinal(): 0;
        };
        static get ENCRYPTION(): com.sphereon.crypto.jose.JwaAlgorithmType & {
            get name(): "ENCRYPTION";
            get ordinal(): 1;
        };
        get name(): "SIGNATURE" | "ENCRYPTION";
        get ordinal(): 0 | 1;
        static values(): Array<com.sphereon.crypto.jose.JwaAlgorithmType>;
        static valueOf(value: string): com.sphereon.crypto.jose.JwaAlgorithmType;
    }
    abstract class JwaAlgorithm {
        private constructor();
        static get HS256(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "HS256";
            get ordinal(): 0;
        };
        static get HS384(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "HS384";
            get ordinal(): 1;
        };
        static get HS512(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "HS512";
            get ordinal(): 2;
        };
        static get RS256(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "RS256";
            get ordinal(): 3;
        };
        static get RS384(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "RS384";
            get ordinal(): 4;
        };
        static get RS512(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "RS512";
            get ordinal(): 5;
        };
        static get ES256(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "ES256";
            get ordinal(): 6;
        };
        static get ES384(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "ES384";
            get ordinal(): 7;
        };
        static get ES512(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "ES512";
            get ordinal(): 8;
        };
        static get ES256K(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "ES256K";
            get ordinal(): 9;
        };
        static get PS256(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "PS256";
            get ordinal(): 10;
        };
        static get PS384(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "PS384";
            get ordinal(): 11;
        };
        static get PS512(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "PS512";
            get ordinal(): 12;
        };
        static get EdDSA(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "EdDSA";
            get ordinal(): 13;
        };
        static get RSA1_5(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "RSA1_5";
            get ordinal(): 14;
        };
        static get RSA_OAEP(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "RSA_OAEP";
            get ordinal(): 15;
        };
        static get RSA_OAEP_256(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "RSA_OAEP_256";
            get ordinal(): 16;
        };
        static get A128KW(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "A128KW";
            get ordinal(): 17;
        };
        static get A192KW(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "A192KW";
            get ordinal(): 18;
        };
        static get A256KW(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "A256KW";
            get ordinal(): 19;
        };
        static get ECDH_ES(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "ECDH_ES";
            get ordinal(): 20;
        };
        static get ECDH_ES_A128KW(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "ECDH_ES_A128KW";
            get ordinal(): 21;
        };
        static get ECDH_ES_A192KW(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "ECDH_ES_A192KW";
            get ordinal(): 22;
        };
        static get ECDH_ES_A256KW(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "ECDH_ES_A256KW";
            get ordinal(): 23;
        };
        static get A128GCMKW(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "A128GCMKW";
            get ordinal(): 24;
        };
        static get A192GCMKW(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "A192GCMKW";
            get ordinal(): 25;
        };
        static get A256GCMKW(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "A256GCMKW";
            get ordinal(): 26;
        };
        static get PBES2_HS256_A128KW(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "PBES2_HS256_A128KW";
            get ordinal(): 27;
        };
        static get PBES2_HS384_A192KW(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "PBES2_HS384_A192KW";
            get ordinal(): 28;
        };
        static get PBES2_HS512_A256KW(): com.sphereon.crypto.jose.JwaAlgorithm & {
            get name(): "PBES2_HS512_A256KW";
            get ordinal(): 29;
        };
        get name(): "HS256" | "HS384" | "HS512" | "RS256" | "RS384" | "RS512" | "ES256" | "ES384" | "ES512" | "ES256K" | "PS256" | "PS384" | "PS512" | "EdDSA" | "RSA1_5" | "RSA_OAEP" | "RSA_OAEP_256" | "A128KW" | "A192KW" | "A256KW" | "ECDH_ES" | "ECDH_ES_A128KW" | "ECDH_ES_A192KW" | "ECDH_ES_A256KW" | "A128GCMKW" | "A192GCMKW" | "A256GCMKW" | "PBES2_HS256_A128KW" | "PBES2_HS384_A192KW" | "PBES2_HS512_A256KW";
        get ordinal(): 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29;
        get value(): string;
        get type(): com.sphereon.crypto.jose.JwaAlgorithmType;
        static values(): Array<com.sphereon.crypto.jose.JwaAlgorithm>;
        static valueOf(value: string): com.sphereon.crypto.jose.JwaAlgorithm;
        static get Static(): {
            fromValue(value: Nullable<string>): Nullable<com.sphereon.crypto.jose.JwaAlgorithm>;
        };
        static get Companion(): {
        } & any/* kotlinx.serialization.internal.SerializerFactory */;
    }
}
export declare namespace com.sphereon.crypto.jose {
    abstract class JwaCurve {
        private constructor();
        static get P_256(): com.sphereon.crypto.jose.JwaCurve & {
            get name(): "P_256";
            get ordinal(): 0;
        };
        static get P_384(): com.sphereon.crypto.jose.JwaCurve & {
            get name(): "P_384";
            get ordinal(): 1;
        };
        static get P_521(): com.sphereon.crypto.jose.JwaCurve & {
            get name(): "P_521";
            get ordinal(): 2;
        };
        static get Ed25519(): com.sphereon.crypto.jose.JwaCurve & {
            get name(): "Ed25519";
            get ordinal(): 3;
        };
        static get X25519(): com.sphereon.crypto.jose.JwaCurve & {
            get name(): "X25519";
            get ordinal(): 4;
        };
        static get Secp256k1(): com.sphereon.crypto.jose.JwaCurve & {
            get name(): "Secp256k1";
            get ordinal(): 5;
        };
        get name(): "P_256" | "P_384" | "P_521" | "Ed25519" | "X25519" | "Secp256k1";
        get ordinal(): 0 | 1 | 2 | 3 | 4 | 5;
        get value(): string;
        static values(): Array<com.sphereon.crypto.jose.JwaCurve>;
        static valueOf(value: string): com.sphereon.crypto.jose.JwaCurve;
        static get Static(): {
            fromValue(value: Nullable<string>): Nullable<com.sphereon.crypto.jose.JwaCurve>;
        };
        static get Companion(): {
        } & any/* kotlinx.serialization.internal.SerializerFactory */;
    }
}
export declare namespace com.sphereon.crypto.jose {
    class Jwt {
        constructor(header: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */, payload: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */);
        get header(): kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */;
        get payload(): kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */;
        static from(header: com.sphereon.crypto.jose.JwtHeader, payload: com.sphereon.crypto.jose.JwtPayload): com.sphereon.crypto.jose.Jwt;
        getHeaderObject(): com.sphereon.crypto.jose.JwtHeader;
        getPayloadObject(): com.sphereon.crypto.jose.JwtPayload;
        toJson(): kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */;
        toJsonString(): string;
        copy(header?: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */, payload?: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */): com.sphereon.crypto.jose.Jwt;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            from(header: com.sphereon.crypto.jose.JwtHeader, payload: com.sphereon.crypto.jose.JwtPayload): com.sphereon.crypto.jose.Jwt;
        };
        static get Companion(): {
        };
    }
    class JwtHeader extends com.sphereon.crypto.jose.JwtBase {
        constructor(underlying?: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */);
        get kid(): Nullable<string>;
        set kid(value: Nullable<string>);
        get x5c(): Nullable<Array<string>>;
        set x5c(value: Nullable<Array<string>>);
        get jwk(): Nullable<com.sphereon.crypto.jose.Jwk>;
        set jwk(value: Nullable<com.sphereon.crypto.jose.Jwk>);
        get epk(): Nullable<com.sphereon.crypto.jose.Jwk>;
        set epk(value: Nullable<com.sphereon.crypto.jose.Jwk>);
        get apu(): Nullable<string>;
        set apu(value: Nullable<string>);
        get apv(): Nullable<string>;
        set apv(value: Nullable<string>);
    }
    class JwtPayload extends com.sphereon.crypto.jose.JwtBase {
        constructor(underlying?: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */);
        get iss(): Nullable<string>;
        set iss(value: Nullable<string>);
        get sub(): Nullable<string>;
        set sub(value: Nullable<string>);
        get exp(): Nullable<number>;
        set exp(value: Nullable<number>);
        get nbf(): Nullable<number>;
        set nbf(value: Nullable<number>);
        get iat(): Nullable<number>;
        set iat(value: Nullable<number>);
        get jti(): Nullable<string>;
        set jti(value: Nullable<string>);
    }
    abstract class JwtBase implements kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */> {
        protected constructor(underlying?: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */);
        get underlying(): kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */;
        set underlying(value: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */);
        toJson(): kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */;
        toJsonString(): string;
        getPrimitive(key: string): Nullable<any>/* Nullable<kotlinx.serialization.json.JsonPrimitive> */;
        getString(key: string): Nullable<string>;
        getBoolean(key: string): Nullable<boolean>;
        put(key: string, value: Nullable<any>/* Nullable<kotlinx.serialization.json.JsonElement> */): com.sphereon.crypto.jose.JwtBase;
        putString(key: string, value: Nullable<string>): com.sphereon.crypto.jose.JwtBase;
        putNumber(key: string, value: Nullable<any>/* Nullable<kotlin.Number> */): com.sphereon.crypto.jose.JwtBase;
        asJsReadonlyMapView(): ReadonlyMap<string, any/* kotlinx.serialization.json.JsonElement */>;
        readonly __doNotUseOrImplementIt: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>["__doNotUseOrImplementIt"];
    }
}
export declare namespace com.sphereon.crypto.jose {
    class Jwk implements com.sphereon.crypto.jose.IJwk {
        constructor(alg: Nullable<com.sphereon.crypto.jose.JwaAlgorithm> | undefined, crv: Nullable<com.sphereon.crypto.jose.JwaCurve> | undefined, d: Nullable<string> | undefined, e: Nullable<string> | undefined, k: Nullable<string> | undefined, key_ops: Nullable<Array<com.sphereon.crypto.jose.JoseKeyOperations>> | undefined, kid: Nullable<string> | undefined, kty: com.sphereon.crypto.jose.JwaKeyType, n?: Nullable<string>, use?: Nullable<string>, x?: Nullable<string>, x5c?: Nullable<Array<string>>, x5t?: Nullable<string>, x5u?: Nullable<string>, x5t_S256?: Nullable<string>, y?: Nullable<string>);
        get alg(): Nullable<com.sphereon.crypto.jose.JwaAlgorithm>;
        get crv(): Nullable<com.sphereon.crypto.jose.JwaCurve>;
        get d(): Nullable<string>;
        get e(): Nullable<string>;
        get k(): Nullable<string>;
        get key_ops(): Nullable<Array<com.sphereon.crypto.jose.JoseKeyOperations>>;
        get kid(): Nullable<string>;
        get kty(): com.sphereon.crypto.jose.JwaKeyType;
        get n(): Nullable<string>;
        get use(): Nullable<string>;
        get x(): Nullable<string>;
        get x5c(): Nullable<Array<string>>;
        get x5t(): Nullable<string>;
        get x5u(): Nullable<string>;
        get x5t_S256(): Nullable<string>;
        get y(): Nullable<string>;
        get additional(): Nullable<kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>>/* Nullable<kotlinx.serialization.json.JsonObject> */;
        jwkToCoseKeyJson(): com.sphereon.crypto.cose.CoseKeyJson;
        jwkToCoseKeyCbor(): com.sphereon.crypto.cose.CoseKeyCbor;
        toJsonObject(): kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */;
        copy(alg?: Nullable<com.sphereon.crypto.jose.JwaAlgorithm>, crv?: Nullable<com.sphereon.crypto.jose.JwaCurve>, d?: Nullable<string>, e?: Nullable<string>, k?: Nullable<string>, key_ops?: Nullable<Array<com.sphereon.crypto.jose.JoseKeyOperations>>, kid?: Nullable<string>, kty?: com.sphereon.crypto.jose.JwaKeyType, n?: Nullable<string>, use?: Nullable<string>, x?: Nullable<string>, x5c?: Nullable<Array<string>>, x5t?: Nullable<string>, x5u?: Nullable<string>, x5t_S256?: Nullable<string>, y?: Nullable<string>): com.sphereon.crypto.jose.Jwk;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromJson(jwk: IJwkJson): com.sphereon.crypto.jose.Jwk;
            fromJsonObject(jwk: kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */): com.sphereon.crypto.jose.Jwk;
            fromDTO(jwk: com.sphereon.crypto.jose.IJwk): com.sphereon.crypto.jose.Jwk;
            fromCoseKeyJson(coseKey: com.sphereon.crypto.cose.ICoseKeyJson): com.sphereon.crypto.jose.Jwk;
            fromCoseKey(coseKey: com.sphereon.crypto.cose.ICoseKeyCbor): com.sphereon.crypto.jose.Jwk;
        };
        static get Companion(): {
        };
    }
    namespace Jwk {
        class Builder {
            constructor();
            get alg(): Nullable<com.sphereon.crypto.jose.JwaAlgorithm>;
            set alg(value: Nullable<com.sphereon.crypto.jose.JwaAlgorithm>);
            get crv(): Nullable<com.sphereon.crypto.jose.JwaCurve>;
            set crv(value: Nullable<com.sphereon.crypto.jose.JwaCurve>);
            get d(): Nullable<string>;
            set d(value: Nullable<string>);
            get e(): Nullable<string>;
            set e(value: Nullable<string>);
            get k(): Nullable<string>;
            set k(value: Nullable<string>);
            get key_ops(): Nullable<Array<com.sphereon.crypto.jose.JoseKeyOperations>>;
            set key_ops(value: Nullable<Array<com.sphereon.crypto.jose.JoseKeyOperations>>);
            get kid(): Nullable<string>;
            set kid(value: Nullable<string>);
            get kty(): Nullable<com.sphereon.crypto.jose.JwaKeyType>;
            set kty(value: Nullable<com.sphereon.crypto.jose.JwaKeyType>);
            get n(): Nullable<string>;
            set n(value: Nullable<string>);
            get use(): Nullable<string>;
            set use(value: Nullable<string>);
            get x(): Nullable<string>;
            set x(value: Nullable<string>);
            get x5c(): Nullable<Array<string>>;
            set x5c(value: Nullable<Array<string>>);
            get x5t(): Nullable<string>;
            set x5t(value: Nullable<string>);
            get x5u(): Nullable<string>;
            set x5u(value: Nullable<string>);
            get x5t_S256(): Nullable<string>;
            set x5t_S256(value: Nullable<string>);
            get y(): Nullable<string>;
            set y(value: Nullable<string>);
            withAlg(alg?: Nullable<com.sphereon.crypto.jose.JwaAlgorithm>): com.sphereon.crypto.jose.Jwk.Builder;
            withCrv(crv: Nullable<com.sphereon.crypto.jose.JwaCurve>): com.sphereon.crypto.jose.Jwk.Builder;
            withD(d: Nullable<string>): com.sphereon.crypto.jose.Jwk.Builder;
            withE(e: Nullable<string>): com.sphereon.crypto.jose.Jwk.Builder;
            withK(k: Nullable<string>): com.sphereon.crypto.jose.Jwk.Builder;
            withKeyOps(key_ops: Nullable<Array<com.sphereon.crypto.jose.JoseKeyOperations>>): com.sphereon.crypto.jose.Jwk.Builder;
            withKid(kid: Nullable<string>): com.sphereon.crypto.jose.Jwk.Builder;
            withKty(kty: Nullable<com.sphereon.crypto.jose.JwaKeyType>): com.sphereon.crypto.jose.Jwk.Builder;
            withN(n: Nullable<string>): com.sphereon.crypto.jose.Jwk.Builder;
            withUse(use: Nullable<string>): com.sphereon.crypto.jose.Jwk.Builder;
            withX(x: Nullable<string>): com.sphereon.crypto.jose.Jwk.Builder;
            withX5c(x5c: Nullable<Array<string>>): com.sphereon.crypto.jose.Jwk.Builder;
            withX5t(x5t: Nullable<string>): com.sphereon.crypto.jose.Jwk.Builder;
            withX5u(x5u: Nullable<string>): com.sphereon.crypto.jose.Jwk.Builder;
            withX5t_S256(x5t_S256: Nullable<string>): com.sphereon.crypto.jose.Jwk.Builder;
            withY(y: Nullable<string>): com.sphereon.crypto.jose.Jwk.Builder;
            build(): com.sphereon.crypto.jose.Jwk;
        }
    }
    function cborToJwk(_this_: com.sphereon.crypto.cose.CoseKeyCbor): com.sphereon.crypto.jose.Jwk;
    function jsonToJwk(_this_: com.sphereon.crypto.cose.CoseKeyJson): com.sphereon.crypto.jose.Jwk;
}
export declare namespace com.sphereon.crypto.jose {
    abstract class JoseKeyOperations {
        private constructor();
        static get SIGN(): com.sphereon.crypto.jose.JoseKeyOperations & {
            get name(): "SIGN";
            get ordinal(): 0;
        };
        static get VERIFY(): com.sphereon.crypto.jose.JoseKeyOperations & {
            get name(): "VERIFY";
            get ordinal(): 1;
        };
        static get ENCRYPT(): com.sphereon.crypto.jose.JoseKeyOperations & {
            get name(): "ENCRYPT";
            get ordinal(): 2;
        };
        static get DECRYPT(): com.sphereon.crypto.jose.JoseKeyOperations & {
            get name(): "DECRYPT";
            get ordinal(): 3;
        };
        static get WRAP_KEY(): com.sphereon.crypto.jose.JoseKeyOperations & {
            get name(): "WRAP_KEY";
            get ordinal(): 4;
        };
        static get UNWRAP_KEY(): com.sphereon.crypto.jose.JoseKeyOperations & {
            get name(): "UNWRAP_KEY";
            get ordinal(): 5;
        };
        static get DERIVE_KEY(): com.sphereon.crypto.jose.JoseKeyOperations & {
            get name(): "DERIVE_KEY";
            get ordinal(): 6;
        };
        static get DERIVE_BITS(): com.sphereon.crypto.jose.JoseKeyOperations & {
            get name(): "DERIVE_BITS";
            get ordinal(): 7;
        };
        static get MAC_CREATE(): com.sphereon.crypto.jose.JoseKeyOperations & {
            get name(): "MAC_CREATE";
            get ordinal(): 8;
        };
        static get MAC_VERIFY(): com.sphereon.crypto.jose.JoseKeyOperations & {
            get name(): "MAC_VERIFY";
            get ordinal(): 9;
        };
        get name(): "SIGN" | "VERIFY" | "ENCRYPT" | "DECRYPT" | "WRAP_KEY" | "UNWRAP_KEY" | "DERIVE_KEY" | "DERIVE_BITS" | "MAC_CREATE" | "MAC_VERIFY";
        get ordinal(): 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
        get value(): string;
        get description(): string;
        static values(): Array<com.sphereon.crypto.jose.JoseKeyOperations>;
        static valueOf(value: string): com.sphereon.crypto.jose.JoseKeyOperations;
        static get Static(): {
            fromValue(value: string): com.sphereon.crypto.jose.JoseKeyOperations;
        };
        static get Companion(): {
        } & any/* kotlinx.serialization.internal.SerializerFactory */;
    }
}
export declare namespace com.sphereon.crypto.jose {
    abstract class JwaKeyType {
        private constructor();
        static get EC(): com.sphereon.crypto.jose.JwaKeyType & {
            get name(): "EC";
            get ordinal(): 0;
        };
        static get RSA(): com.sphereon.crypto.jose.JwaKeyType & {
            get name(): "RSA";
            get ordinal(): 1;
        };
        static get oct(): com.sphereon.crypto.jose.JwaKeyType & {
            get name(): "oct";
            get ordinal(): 2;
        };
        static get OKP(): com.sphereon.crypto.jose.JwaKeyType & {
            get name(): "OKP";
            get ordinal(): 3;
        };
        get name(): "EC" | "RSA" | "oct" | "OKP";
        get ordinal(): 0 | 1 | 2 | 3;
        get value(): string;
        static values(): Array<com.sphereon.crypto.jose.JwaKeyType>;
        static valueOf(value: string): com.sphereon.crypto.jose.JwaKeyType;
        static get Static(): {
            fromValue(value: string): com.sphereon.crypto.jose.JwaKeyType;
        };
        static get Companion(): {
        } & any/* kotlinx.serialization.internal.SerializerFactory */;
    }
}
export declare namespace com.sphereon.json {
    const cryptoJsonSerializer: any/* kotlinx.serialization.json.Json */;
    const CryptoJsonSupport: {
        get module(): any/* kotlinx.serialization.modules.SerializersModule */;
        get serializer(): any/* kotlinx.serialization.json.Json */;
    };
}
export declare namespace com.sphereon.crypto {
    interface ICoseCryptoCallbackJS {
        sign1<CborType>(input: com.sphereon.crypto.cose.CoseSign1InputCbor, keyInfo: Nullable<com.sphereon.crypto.IKeyInfo<com.sphereon.crypto.cose.ICoseKeyCbor>>): Promise<com.sphereon.crypto.cose.CoseSign1Cbor<CborType>>;
        verify1<CborType>(input: com.sphereon.crypto.cose.CoseSign1Cbor<CborType>, keyInfo: Nullable<com.sphereon.crypto.IKeyInfo<com.sphereon.crypto.cose.ICoseKeyCbor>>): Promise<com.sphereon.crypto.IVerifySignatureResult<com.sphereon.crypto.cose.ICoseKeyCbor>>;
    }
}
export declare namespace com.sphereon.crypto {
    const CoseCryptoServiceJS: {
        disable(): typeof com.sphereon.crypto.CoseCryptoServiceJS;
        enable(): typeof com.sphereon.crypto.CoseCryptoServiceJS;
        isEnabled(): boolean;
        register(platformCallback: com.sphereon.crypto.ICoseCryptoCallbackJS): typeof com.sphereon.crypto.CoseCryptoServiceJS;
        sign1<CborType>(input: com.sphereon.crypto.cose.CoseSign1InputCbor, keyInfo: Nullable<com.sphereon.crypto.IKeyInfo<com.sphereon.crypto.cose.ICoseKeyCbor>>): Promise<com.sphereon.crypto.cose.CoseSign1Cbor<CborType>>;
        verify1<CborType>(input: com.sphereon.crypto.cose.CoseSign1Cbor<CborType>, keyInfo: Nullable<com.sphereon.crypto.IKeyInfo<com.sphereon.crypto.cose.ICoseKeyCbor>>): Promise<com.sphereon.crypto.IVerifySignatureResult<com.sphereon.crypto.cose.ICoseKeyCbor>>;
    } & com.sphereon.crypto.ICallbackServiceJS<com.sphereon.crypto.ICoseCryptoCallbackJS> & com.sphereon.crypto.ICoseCryptoCallbackJS;
}
export declare namespace com.sphereon.crypto {
    interface ICallbackServiceJS<PlatformCallbackType> {
        disable(): PlatformCallbackType;
        enable(): PlatformCallbackType;
        isEnabled(): boolean;
        register(platformCallback: PlatformCallbackType): com.sphereon.crypto.ICallbackServiceJS<PlatformCallbackType>;
    }
}
export declare namespace com.sphereon.crypto {
    const CryptoServiceJS: {
        get X509(): typeof com.sphereon.crypto.X509ServiceObjectJS;
        get COSE(): typeof com.sphereon.crypto.CoseCryptoServiceJS;
    };
}
export declare namespace com.sphereon.crypto {
    interface IKey {
        readonly kty: any;
        readonly kid?: Nullable<any>;
        readonly alg?: Nullable<any>;
        readonly key_ops?: Nullable<any>;
        readonly crv?: Nullable<any>;
        readonly x?: Nullable<any>;
        readonly y?: Nullable<any>;
        readonly additional?: Nullable<any>;
        readonly d?: Nullable<any>;
    }
}
export declare namespace com.sphereon.crypto {
    interface IX509VerificationResult<KeyType extends com.sphereon.crypto.IKey> extends com.sphereon.crypto.IVerifyResult {
        readonly publicKey?: Nullable<KeyType>;
        readonly publicKeyAlgorithm?: Nullable<string>;
        readonly publicKeyParams?: Nullable<any>;
    }
}
export declare namespace com.sphereon.crypto {
    interface IVerifyResult {
        readonly name: string;
        readonly error: boolean;
        readonly message?: Nullable<string>;
        readonly critical: boolean;
    }
    interface IVerifySignatureResult<KeyType extends com.sphereon.crypto.IKey> extends com.sphereon.crypto.IVerifyResult {
        readonly keyInfo?: Nullable<com.sphereon.crypto.IKeyInfo<KeyType>>;
    }
    interface IKeyInfo<KeyType extends com.sphereon.crypto.IKey> {
        readonly kid?: Nullable<string>;
        readonly key?: Nullable<KeyType>;
        readonly opts?: Nullable<kotlin.collections.KtMap<any /*UnknownType **/, any /*UnknownType **/>>;
    }
    interface IVerifyResults<KeyType extends com.sphereon.crypto.IKey> {
        readonly error: boolean;
        readonly verifications: Array<com.sphereon.crypto.IVerifyResult>;
        readonly keyInfo?: Nullable<com.sphereon.crypto.IKeyInfo<KeyType>>;
    }
}
export declare namespace com.sphereon.crypto {
    interface IX509ServiceJS {
        verifyCertificateChainJS<KeyType extends com.sphereon.crypto.IKey>(chainDER: Nullable<Array<Int8Array>>, chainPEM: Nullable<Array<string>>, trustedCerts: Nullable<Array<string>>, verificationProfile: Nullable<com.sphereon.crypto.X509VerificationProfile>): Promise<com.sphereon.crypto.IX509VerificationResult<KeyType>>;
        getTrustedCerts(): Nullable<Array<string>>;
    }
}
export declare namespace com.sphereon.crypto {
    const X509ServiceObjectJS: {
        disable(): com.sphereon.crypto.IX509ServiceJS;
        enable(): com.sphereon.crypto.IX509ServiceJS;
        isEnabled(): boolean;
        register(platformCallback: com.sphereon.crypto.IX509ServiceJS): typeof com.sphereon.crypto.X509ServiceObjectJS;
        verifyCertificateChainJS<KeyType extends com.sphereon.crypto.IKey>(chainDER: Nullable<Array<Int8Array>>, chainPEM: Nullable<Array<string>>, trustedCerts: Nullable<Array<string>>, verificationProfile: Nullable<com.sphereon.crypto.X509VerificationProfile>): Promise<com.sphereon.crypto.IX509VerificationResult<KeyType>>;
        setTrustedCerts(trustedCerts?: Nullable<Array<string>>): void;
        getTrustedCerts(): Nullable<Array<string>>;
    } & com.sphereon.crypto.ICallbackServiceJS<com.sphereon.crypto.IX509ServiceJS> & com.sphereon.crypto.IX509ServiceJS;
}
export declare namespace com.sphereon.crypto.cose {
    interface ICoseKeyJson extends com.sphereon.crypto.IKey {
        readonly kty: com.sphereon.crypto.cose.CoseKeyType;
        readonly kid?: Nullable<string>;
        readonly alg?: Nullable<com.sphereon.crypto.cose.CoseAlgorithm>;
        readonly key_ops?: Nullable<Array<com.sphereon.crypto.cose.CoseKeyOperations>>;
        readonly baseIV?: Nullable<string>;
        readonly crv?: Nullable<com.sphereon.crypto.cose.CoseCurve>;
        readonly x?: Nullable<string>;
        readonly y?: Nullable<string>;
        readonly d?: Nullable<string>;
        readonly x5chain?: Nullable<Array<string>>;
        readonly additional?: Nullable<kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>>/* Nullable<kotlinx.serialization.json.JsonObject> */;
    }
    interface ICoseKeyCbor extends com.sphereon.crypto.IKey {
        readonly kty: com.sphereon.cbor.CborUInt;
        readonly kid?: Nullable<com.sphereon.cbor.CborByteString>;
        readonly alg?: Nullable<com.sphereon.cbor.CborUInt>;
        readonly key_ops?: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborUInt>>;
        readonly baseIV?: Nullable<com.sphereon.cbor.CborByteString>;
        readonly crv?: Nullable<com.sphereon.cbor.CborUInt>;
        readonly x?: Nullable<com.sphereon.cbor.CborByteString>;
        readonly y?: Nullable<com.sphereon.cbor.CborByteString>;
        readonly d?: Nullable<com.sphereon.cbor.CborByteString>;
        readonly x5chain?: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborByteString>>;
        readonly additional?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>;
    }
}
export declare namespace com.sphereon.crypto.jose {
    interface IJwk extends com.sphereon.crypto.IKey {
        readonly alg?: Nullable<com.sphereon.crypto.jose.JwaAlgorithm>;
        readonly crv?: Nullable<com.sphereon.crypto.jose.JwaCurve>;
        readonly d?: Nullable<string>;
        readonly e?: Nullable<string>;
        readonly k?: Nullable<string>;
        readonly key_ops?: Nullable<Array<com.sphereon.crypto.jose.JoseKeyOperations>>;
        readonly kid?: Nullable<string>;
        readonly kty: com.sphereon.crypto.jose.JwaKeyType;
        readonly n?: Nullable<string>;
        readonly use?: Nullable<string>;
        readonly x?: Nullable<string>;
        readonly x5c?: Nullable<Array<string>>;
        readonly x5t?: Nullable<string>;
        readonly x5u?: Nullable<string>;
        readonly x5t_S256?: Nullable<string>;
        readonly y?: Nullable<string>;
    }
}
export declare namespace com.sphereon.json {
    const mdocJsonSerializer: any/* kotlinx.serialization.json.Json */;
    const MdocJsonSupport: {
        get module(): any/* kotlinx.serialization.modules.SerializersModule */;
        get serializer(): any/* kotlinx.serialization.json.Json */;
    };
}
export declare namespace com.sphereon.json {
    const oid4vpJsonSerializer: any/* kotlinx.serialization.json.Json */;
    const Oid4vpJsonSupport: {
        get serializer(): any/* kotlinx.serialization.json.Json */;
    };
}
export declare namespace com.sphereon.mdoc.data {
    abstract class MdocVerification {
        private constructor();
        static get CERTIFICATE_CHAIN(): com.sphereon.mdoc.data.MdocVerification & {
            get name(): "CERTIFICATE_CHAIN";
            get ordinal(): 0;
        };
        static get ISSUER_AUTH_SIGNATURE(): com.sphereon.mdoc.data.MdocVerification & {
            get name(): "ISSUER_AUTH_SIGNATURE";
            get ordinal(): 1;
        };
        static get DIGEST_VALUES(): com.sphereon.mdoc.data.MdocVerification & {
            get name(): "DIGEST_VALUES";
            get ordinal(): 2;
        };
        static get DOC_TYPE(): com.sphereon.mdoc.data.MdocVerification & {
            get name(): "DOC_TYPE";
            get ordinal(): 3;
        };
        static get VALIDITY(): com.sphereon.mdoc.data.MdocVerification & {
            get name(): "VALIDITY";
            get ordinal(): 4;
        };
        get name(): "CERTIFICATE_CHAIN" | "ISSUER_AUTH_SIGNATURE" | "DIGEST_VALUES" | "DOC_TYPE" | "VALIDITY";
        get ordinal(): 0 | 1 | 2 | 3 | 4;
        static values(): Array<com.sphereon.mdoc.data.MdocVerification>;
        static valueOf(value: string): com.sphereon.mdoc.data.MdocVerification;
        static get Static(): {
            get ALL(): kotlin.collections.KtSet<com.sphereon.mdoc.data.MdocVerification>;
            get ISSUER_AUTH(): kotlin.collections.KtSet<com.sphereon.mdoc.data.MdocVerification>;
            get DOCUMENT(): kotlin.collections.KtSet<com.sphereon.mdoc.data.MdocVerification>;
        };
    }
}
export declare namespace com.sphereon.mdoc.data.device {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class DeviceAuthJson extends com.sphereon.json.JsonView {
        constructor(deviceSignature: string, deviceMac: string);
        get deviceSignature(): string;
        get deviceMac(): string;
        toJsonString(): string;
        toCbor(): any;
        copy(deviceSignature?: string, deviceMac?: string): com.sphereon.mdoc.data.device.DeviceAuthJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Companion(): {
        };
    }
    class DeviceAuthCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.device.DeviceAuthCbor, com.sphereon.mdoc.data.device.DeviceAuthJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(deviceSignature: string, deviceMac: string);
        get deviceSignature(): string;
        get deviceMac(): string;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.device.DeviceAuthCbor>;
        toJson(): com.sphereon.mdoc.data.device.DeviceAuthJson;
        copy(deviceSignature?: string, deviceMac?: string): com.sphereon.mdoc.data.device.DeviceAuthCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
}
export declare namespace com.sphereon.mdoc.data.device {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class DeviceItemsRequestJson extends com.sphereon.json.JsonView {
        constructor(docType: string, nameSpaces?: kotlin.collections.KtMutableMap<string, kotlin.collections.KtMutableMap<string, boolean>>, requestInfo?: Nullable<kotlin.collections.KtMutableMap<string, string>>);
        get docType(): string;
        get nameSpaces(): kotlin.collections.KtMutableMap<string, kotlin.collections.KtMutableMap<string, boolean>>;
        get requestInfo(): Nullable<kotlin.collections.KtMutableMap<string, string>>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor;
        getIdentifiers(nameSpace: string): kotlin.collections.KtMap<string, boolean>;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(docType?: string, nameSpaces?: kotlin.collections.KtMutableMap<string, kotlin.collections.KtMutableMap<string, boolean>>, requestInfo?: Nullable<kotlin.collections.KtMutableMap<string, string>>): com.sphereon.mdoc.data.device.DeviceItemsRequestJson;
        static get Companion(): {
        };
    }
    class DeviceItemsRequestCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.device.DeviceItemsRequestCbor, com.sphereon.mdoc.data.device.DeviceItemsRequestJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(docType: com.sphereon.cbor.CborString, nameSpaces: com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborBool>>, requestInfo?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>);
        get docType(): com.sphereon.cbor.CborString;
        get nameSpaces(): com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborBool>>;
        get requestInfo(): Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.device.DeviceItemsRequestCbor>;
        toJson(): com.sphereon.mdoc.data.device.DeviceItemsRequestJson;
        getNameSpaces(): Array<string>;
        getIdentifiers(nameSpace: string): kotlin.collections.KtMap<string, boolean>;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(docType?: com.sphereon.cbor.CborString, nameSpaces?: com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborBool>>, requestInfo?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor;
        static get Static(): {
            get DOC_TYPE(): com.sphereon.cbor.StringLabel;
            get NAME_SPACES(): com.sphereon.cbor.StringLabel;
            get REQUEST_INFO(): com.sphereon.cbor.StringLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor;
            decodeCbor(encoded: Int8Array): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor;
        };
    }
    namespace DeviceItemsRequestCbor {
        class Builder {
            constructor(docRequestBuilder?: Nullable<com.sphereon.mdoc.data.device.DocRequestCbor.Builder>, docType?: Nullable<com.sphereon.cbor.CborString>, requestInfo?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborString>>);
            get docRequestBuilder(): Nullable<com.sphereon.mdoc.data.device.DocRequestCbor.Builder>;
            set docRequestBuilder(value: Nullable<com.sphereon.mdoc.data.device.DocRequestCbor.Builder>);
            withDocType(docType: string): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder;
            withRequestInfo(requestInfo: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborString>>): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder;
            nameSpace(nameSpace: string): com.sphereon.mdoc.data.device.DeviceRequestNameSpace.Builder;
            addUsingElements(nameSpace: string, elements: Array<com.sphereon.mdoc.data.DataElementCbor>): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder;
            add(nameSpace: string, identifier: string, intentToRetain?: boolean): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder;
            addUsingBuilder(builders: Array<com.sphereon.mdoc.data.device.DeviceRequestNameSpace.Builder>): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder;
            build(): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor;
            buildDocRequest(): com.sphereon.mdoc.data.device.DocRequestCbor;
            toString(): string;
            copy(docRequestBuilder?: Nullable<com.sphereon.mdoc.data.device.DocRequestCbor.Builder>, docType?: Nullable<com.sphereon.cbor.CborString>, requestInfo?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborString>>): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder;
            hashCode(): number;
            equals(other: Nullable<any>): boolean;
        }
    }
    class DeviceRequestNameSpace {
        constructor(nameSpace: com.sphereon.cbor.CborString, dataElements: kotlin.collections.KtMutableMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborBool>);
        get nameSpace(): com.sphereon.cbor.CborString;
        get dataElements(): kotlin.collections.KtMutableMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborBool>;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(nameSpace?: com.sphereon.cbor.CborString, dataElements?: kotlin.collections.KtMutableMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborBool>): com.sphereon.mdoc.data.device.DeviceRequestNameSpace;
    }
    namespace DeviceRequestNameSpace {
        class Builder {
            constructor(itemsRequestBuilder?: Nullable<com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder>, nameSpace?: com.sphereon.cbor.CborString, dataElements?: kotlin.collections.KtMutableMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborBool>);
            get itemsRequestBuilder(): Nullable<com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder>;
            get nameSpace(): com.sphereon.cbor.CborString;
            get dataElements(): kotlin.collections.KtMutableMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborBool>;
            add(identifier: string, intentToRetain?: boolean): com.sphereon.mdoc.data.device.DeviceRequestNameSpace.Builder;
            addElements(elements: Array<com.sphereon.mdoc.data.DataElementCbor>): com.sphereon.mdoc.data.device.DeviceRequestNameSpace.Builder;
            end(): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder;
            build(): com.sphereon.mdoc.data.device.DeviceRequestNameSpace;
        }
    }
}
export declare namespace com.sphereon.mdoc.data.device {
    class DeviceRequestJson extends com.sphereon.json.JsonView {
        constructor(version: string, docRequests: kotlin.collections.KtMutableList<com.sphereon.mdoc.data.device.DocRequestJson>);
        get version(): string;
        get docRequests(): kotlin.collections.KtMutableList<com.sphereon.mdoc.data.device.DocRequestJson>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.device.DeviceRequestCbor;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(version?: string, docRequests?: kotlin.collections.KtMutableList<com.sphereon.mdoc.data.device.DocRequestJson>): com.sphereon.mdoc.data.device.DeviceRequestJson;
    }
    class DeviceRequestCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.device.DeviceRequestCbor, com.sphereon.mdoc.data.device.DeviceRequestJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(version: com.sphereon.cbor.CborString | undefined, docRequests: Array<com.sphereon.mdoc.data.device.DocRequestCbor>);
        get version(): com.sphereon.cbor.CborString;
        get docRequests(): Array<com.sphereon.mdoc.data.device.DocRequestCbor>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.device.DeviceRequestCbor>;
        toJson(): com.sphereon.mdoc.data.device.DeviceRequestJson;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(version?: com.sphereon.cbor.CborString, docRequests?: Array<com.sphereon.mdoc.data.device.DocRequestCbor>): com.sphereon.mdoc.data.device.DeviceRequestCbor;
        static get Static(): {
            get VERSION(): com.sphereon.cbor.StringLabel;
            get DOC_REQUESTS(): com.sphereon.cbor.StringLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.data.device.DeviceRequestCbor;
            cborDecode(encoded: Int8Array): com.sphereon.mdoc.data.device.DeviceRequestCbor;
        };
    }
    namespace DeviceRequestCbor {
        class Builder {
            constructor();
        }
    }
}
export declare namespace com.sphereon.mdoc.data.device {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class DeviceResponseJson extends com.sphereon.json.JsonView {
        constructor(version: string | undefined, documents: Nullable<Array<com.sphereon.mdoc.data.device.DocumentJson>>, documentErrors: Nullable<Array<kotlin.collections.KtMap<string, number>>>, status?: com.sphereon.kmp.LongKMP);
        get version(): string;
        get documents(): Nullable<Array<com.sphereon.mdoc.data.device.DocumentJson>>;
        get documentErrors(): Nullable<Array<kotlin.collections.KtMap<string, number>>>;
        get status(): com.sphereon.kmp.LongKMP;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.device.DeviceResponseCbor;
        copy(version?: string, documents?: Nullable<Array<com.sphereon.mdoc.data.device.DocumentJson>>, documentErrors?: Nullable<Array<kotlin.collections.KtMap<string, number>>>, status?: com.sphereon.kmp.LongKMP): com.sphereon.mdoc.data.device.DeviceResponseJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Companion(): {
        };
    }
    class DeviceResponseCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.device.DeviceResponseCbor, com.sphereon.mdoc.data.device.DeviceResponseJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(version: com.sphereon.cbor.CborString | undefined, documents: Nullable<Array<com.sphereon.mdoc.data.device.DocumentCbor>>, documentErrors?: Nullable<Array<kotlin.collections.KtMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborInt>>>, status?: com.sphereon.cbor.CborUInt);
        get version(): com.sphereon.cbor.CborString;
        get documents(): Nullable<Array<com.sphereon.mdoc.data.device.DocumentCbor>>;
        get documentErrors(): Nullable<Array<kotlin.collections.KtMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborInt>>>;
        get status(): com.sphereon.cbor.CborUInt;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.device.DeviceResponseCbor>;
        toJson(): com.sphereon.mdoc.data.device.DeviceResponseJson;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        copy(version?: com.sphereon.cbor.CborString, documents?: Nullable<Array<com.sphereon.mdoc.data.device.DocumentCbor>>, documentErrors?: Nullable<Array<kotlin.collections.KtMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborInt>>>, status?: com.sphereon.cbor.CborUInt): com.sphereon.mdoc.data.device.DeviceResponseCbor;
        toString(): string;
        static get Static(): {
            get VERSION(): com.sphereon.cbor.StringLabel;
            get DOCUMENTS(): com.sphereon.cbor.StringLabel;
            get DOCUMENT_ERRORS(): com.sphereon.cbor.StringLabel;
            get STATUS(): com.sphereon.cbor.StringLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.data.device.DeviceResponseCbor;
            cborDecode(encoded: Int8Array): com.sphereon.mdoc.data.device.DeviceResponseCbor;
        };
    }
}
export declare namespace com.sphereon.mdoc.data.device {
    abstract class DeviceRetrievalStatusCode {
        private constructor();
        static get OK(): com.sphereon.mdoc.data.device.DeviceRetrievalStatusCode & {
            get name(): "OK";
            get ordinal(): 0;
        };
        static get GENERAL_ERROR(): com.sphereon.mdoc.data.device.DeviceRetrievalStatusCode & {
            get name(): "GENERAL_ERROR";
            get ordinal(): 1;
        };
        static get CBOR_DECODING_ERROR(): com.sphereon.mdoc.data.device.DeviceRetrievalStatusCode & {
            get name(): "CBOR_DECODING_ERROR";
            get ordinal(): 2;
        };
        static get CBOR_VALIDATION_ERROR(): com.sphereon.mdoc.data.device.DeviceRetrievalStatusCode & {
            get name(): "CBOR_VALIDATION_ERROR";
            get ordinal(): 3;
        };
        get name(): "OK" | "GENERAL_ERROR" | "CBOR_DECODING_ERROR" | "CBOR_VALIDATION_ERROR";
        get ordinal(): 0 | 1 | 2 | 3;
        get statusCode(): com.sphereon.kmp.LongKMP;
        get statusMessage(): string;
        get description(): string;
        get actionsRequired(): string;
        static values(): Array<com.sphereon.mdoc.data.device.DeviceRetrievalStatusCode>;
        static valueOf(value: string): com.sphereon.mdoc.data.device.DeviceRetrievalStatusCode;
        static get Static(): {
            fromStatusCode(statusCode: com.sphereon.kmp.LongKMP): com.sphereon.mdoc.data.device.DeviceRetrievalStatusCode;
        };
    }
}
export declare namespace com.sphereon.mdoc.data.device {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class DeviceSignedJson extends com.sphereon.json.JsonView {
        constructor(nameSpaces: kotlin.collections.KtMap<string, string>, deviceAuth: com.sphereon.mdoc.data.device.DeviceAuthJson);
        get nameSpaces(): kotlin.collections.KtMap<string, string>;
        get deviceAuth(): com.sphereon.mdoc.data.device.DeviceAuthJson;
        toJsonString(): string;
        toCbor(): any;
        copy(nameSpaces?: kotlin.collections.KtMap<string, string>, deviceAuth?: com.sphereon.mdoc.data.device.DeviceAuthJson): com.sphereon.mdoc.data.device.DeviceSignedJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Companion(): {
        };
    }
    class DeviceSignedCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.device.DeviceSignedCbor, com.sphereon.mdoc.data.device.DeviceSignedJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(nameSpaces: kotlin.collections.KtMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborItem<any>>, deviceAuth: com.sphereon.mdoc.data.device.DeviceAuthCbor);
        get nameSpaces(): kotlin.collections.KtMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborItem<any>>;
        get deviceAuth(): com.sphereon.mdoc.data.device.DeviceAuthCbor;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.device.DeviceSignedCbor>;
        toJson(): com.sphereon.mdoc.data.device.DeviceSignedJson;
        copy(nameSpaces?: kotlin.collections.KtMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborItem<any>>, deviceAuth?: com.sphereon.mdoc.data.device.DeviceAuthCbor): com.sphereon.mdoc.data.device.DeviceSignedCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
}
export declare namespace com.sphereon.mdoc.data.device {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class DocRequestJson extends com.sphereon.json.JsonView {
        constructor(itemsRequest: com.sphereon.mdoc.data.device.DeviceItemsRequestJson, readerAuth?: Nullable<com.sphereon.crypto.cose.CoseSign1Json>);
        get itemsRequest(): com.sphereon.mdoc.data.device.DeviceItemsRequestJson;
        get readerAuth(): Nullable<com.sphereon.crypto.cose.CoseSign1Json>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.device.DocRequestCbor;
        getNameSpaces(): Array<string>;
        getDocType(): string;
        getIdentifiers(nameSpace: string): kotlin.collections.KtMap<string, boolean>;
        limitDisclosures(issuerSigned: com.sphereon.mdoc.data.device.IssuerSignedJson): com.sphereon.mdoc.data.device.IssuerSignedJson;
        copy(itemsRequest?: com.sphereon.mdoc.data.device.DeviceItemsRequestJson, readerAuth?: Nullable<com.sphereon.crypto.cose.CoseSign1Json>): com.sphereon.mdoc.data.device.DocRequestJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Companion(): {
        };
    }
    class DocRequestCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.device.DocRequestCbor, com.sphereon.mdoc.data.device.DocRequestJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(itemsRequest: com.sphereon.mdoc.data.device.DeviceItemsRequestCbor, readerAuth?: Nullable<com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor>>);
        get itemsRequest(): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor;
        get readerAuth(): Nullable<com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor>>;
        getNameSpaces(): Array<string>;
        getDocType(): string;
        getIdentifiers(nameSpace: string): kotlin.collections.KtMap<string, boolean>;
        limitDisclosures(issuerSigned: com.sphereon.mdoc.data.device.IssuerSignedCbor): com.sphereon.mdoc.data.device.IssuerSignedCbor;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.device.DocRequestCbor>;
        toJson(): com.sphereon.mdoc.data.device.DocRequestJson;
        copy(itemsRequest?: com.sphereon.mdoc.data.device.DeviceItemsRequestCbor, readerAuth?: Nullable<com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor>>): com.sphereon.mdoc.data.device.DocRequestCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            get ITEMS_REQUEST(): com.sphereon.cbor.StringLabel;
            get READER_AUTH(): com.sphereon.cbor.StringLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.data.device.DocRequestCbor;
            cborDecode(encoded: Int8Array): com.sphereon.mdoc.data.device.DocRequestCbor;
        };
    }
    namespace DocRequestCbor {
        class Builder {
            constructor(deviceItemsRequestBuilder?: Nullable<com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder>, readerAuth?: Nullable<com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor>>);
            get deviceItemsRequestBuilder(): Nullable<com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder>;
            set deviceItemsRequestBuilder(value: Nullable<com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder>);
            get readerAuth(): Nullable<com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor>>;
            set readerAuth(value: Nullable<com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor>>);
            docType(docType: string, requestInfo?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborString>>): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder;
            withReaderAuth(readerAuth: com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor>): com.sphereon.mdoc.data.device.DocRequestCbor.Builder;
            build(): com.sphereon.mdoc.data.device.DocRequestCbor;
            toString(): string;
            copy(deviceItemsRequestBuilder?: Nullable<com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder>, readerAuth?: Nullable<com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor>>): com.sphereon.mdoc.data.device.DocRequestCbor.Builder;
            hashCode(): number;
            equals(other: Nullable<any>): boolean;
        }
    }
}
export declare namespace com.sphereon.mdoc.data.device {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class DocumentJson extends com.sphereon.json.JsonView {
        constructor(docType: string, issuerSigned: com.sphereon.mdoc.data.device.IssuerSignedJson, deviceSigned?: Nullable<com.sphereon.mdoc.data.device.DeviceSignedJson>, errors?: Nullable<kotlin.collections.KtMap<string, kotlin.collections.KtMap<string, number>>>);
        get docType(): string;
        get issuerSigned(): com.sphereon.mdoc.data.device.IssuerSignedJson;
        get deviceSigned(): Nullable<com.sphereon.mdoc.data.device.DeviceSignedJson>;
        get errors(): Nullable<kotlin.collections.KtMap<string, kotlin.collections.KtMap<string, number>>>;
        get MSO(): Nullable<com.sphereon.mdoc.data.mso.MobileSecurityObjectJson>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.device.DocumentCbor;
        fromIssuerSigned(issuerSigned: com.sphereon.mdoc.data.device.IssuerSignedJson): com.sphereon.mdoc.data.device.DocumentJson;
        copy(docType?: string, issuerSigned?: com.sphereon.mdoc.data.device.IssuerSignedJson, deviceSigned?: Nullable<com.sphereon.mdoc.data.device.DeviceSignedJson>, errors?: Nullable<kotlin.collections.KtMap<string, kotlin.collections.KtMap<string, number>>>): com.sphereon.mdoc.data.device.DocumentJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Companion(): {
        };
    }
    class DocumentCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.device.DocumentCbor, com.sphereon.mdoc.data.device.DocumentJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(docType: com.sphereon.cbor.CborString, issuerSigned: com.sphereon.mdoc.data.device.IssuerSignedCbor, deviceSigned?: Nullable<com.sphereon.mdoc.data.device.DeviceSignedCbor>, errors?: Nullable<kotlin.collections.KtMap<com.sphereon.cbor.CborString, kotlin.collections.KtMap<com.sphereon.cbor.CborString, com.sphereon.kmp.LongKMP>>>);
        get docType(): com.sphereon.cbor.CborString;
        get issuerSigned(): com.sphereon.mdoc.data.device.IssuerSignedCbor;
        get deviceSigned(): Nullable<com.sphereon.mdoc.data.device.DeviceSignedCbor>;
        get errors(): Nullable<kotlin.collections.KtMap<com.sphereon.cbor.CborString, kotlin.collections.KtMap<com.sphereon.cbor.CborString, com.sphereon.kmp.LongKMP>>>;
        get MSO(): Nullable<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.device.DocumentCbor>;
        toJson(): com.sphereon.mdoc.data.device.DocumentJson;
        limitDisclosures(docRequest: com.sphereon.mdoc.data.device.DocRequestCbor): com.sphereon.mdoc.data.device.IssuerSignedCbor;
        toSingleDocDeviceResponse(presentationDefinition: com.sphereon.mdoc.oid4vp.IOid4VPPresentationDefinition): com.sphereon.mdoc.data.device.DeviceResponseCbor;
        getNameSpaces(): Array<string>;
        copy(docType?: com.sphereon.cbor.CborString, issuerSigned?: com.sphereon.mdoc.data.device.IssuerSignedCbor, deviceSigned?: Nullable<com.sphereon.mdoc.data.device.DeviceSignedCbor>, errors?: Nullable<kotlin.collections.KtMap<com.sphereon.cbor.CborString, kotlin.collections.KtMap<com.sphereon.cbor.CborString, com.sphereon.kmp.LongKMP>>>): com.sphereon.mdoc.data.device.DocumentCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            get DOC_TYPE(): com.sphereon.cbor.StringLabel;
            get ISSUER_SIGNED(): com.sphereon.cbor.StringLabel;
            get DEVICE_SIGNED(): com.sphereon.cbor.StringLabel;
            get ERRORS(): com.sphereon.cbor.StringLabel;
            fromIssuerSigned(issuerSigned: com.sphereon.mdoc.data.device.IssuerSignedCbor): com.sphereon.mdoc.data.device.DocumentCbor;
            fromDeviceResponse(items: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>>): Nullable<Array<com.sphereon.mdoc.data.device.DocumentCbor>>;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.data.device.DocumentCbor;
            cborDecode(data: Int8Array): com.sphereon.mdoc.data.device.DocumentCbor;
        };
    }
}
export declare namespace com.sphereon.mdoc.data.device {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class IssuerSignedJson extends com.sphereon.json.JsonView {
        constructor(nameSpaces: Nullable<kotlin.collections.KtMutableMap<string, Array<com.sphereon.mdoc.data.device.IssuerSignedItemJson>>>, issuerAuth: com.sphereon.crypto.cose.CoseSign1Json);
        get nameSpaces(): Nullable<kotlin.collections.KtMutableMap<string, Array<com.sphereon.mdoc.data.device.IssuerSignedItemJson>>>;
        get issuerAuth(): com.sphereon.crypto.cose.CoseSign1Json;
        get MSO(): Nullable<com.sphereon.mdoc.data.mso.MobileSecurityObjectJson>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.device.IssuerSignedCbor;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        toDocument(): com.sphereon.mdoc.data.device.DocumentJson;
        limitDisclosures(docRequest: com.sphereon.mdoc.data.device.DocRequestJson): com.sphereon.mdoc.data.device.IssuerSignedJson;
        copy(nameSpaces?: Nullable<kotlin.collections.KtMutableMap<string, Array<com.sphereon.mdoc.data.device.IssuerSignedItemJson>>>, issuerAuth?: com.sphereon.crypto.cose.CoseSign1Json): com.sphereon.mdoc.data.device.IssuerSignedJson;
        static get Companion(): {
        };
    }
    class IssuerSignedCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.device.IssuerSignedCbor, com.sphereon.mdoc.data.device.IssuerSignedJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(nameSpaces: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborEncodedItem<com.sphereon.mdoc.data.device.IssuerSignedItemCbor<any>>>>> | undefined, issuerAuth: com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>);
        get nameSpaces(): Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborEncodedItem<com.sphereon.mdoc.data.device.IssuerSignedItemCbor<any>>>>>;
        get issuerAuth(): com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>;
        get MSO(): Nullable<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>;
        limitDisclosures(docRequest: com.sphereon.mdoc.data.device.DocRequestCbor): com.sphereon.mdoc.data.device.IssuerSignedCbor;
        toDocument(): com.sphereon.mdoc.data.device.DocumentCbor;
        toDocumentJson(): com.sphereon.mdoc.data.device.DocumentJson;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.device.IssuerSignedCbor>;
        toJsonDTO(): com.sphereon.mdoc.data.device.IssuerSignedJson;
        toJson(): com.sphereon.mdoc.data.device.IssuerSignedJson;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(nameSpaces?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborEncodedItem<com.sphereon.mdoc.data.device.IssuerSignedItemCbor<any>>>>>, issuerAuth?: com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>): com.sphereon.mdoc.data.device.IssuerSignedCbor;
        static get Static(): {
            get NAME_SPACES(): com.sphereon.cbor.StringLabel;
            get ISSUER_AUTH(): com.sphereon.cbor.StringLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.data.device.IssuerSignedCbor;
            cborDecode(encoded: Int8Array): com.sphereon.mdoc.data.device.IssuerSignedCbor;
        };
    }
    namespace IssuerSignedCbor {
        class Builder {
            constructor(nameSpaces?: kotlin.collections.KtMutableMap<com.sphereon.cbor.CborString, kotlin.collections.KtList<com.sphereon.mdoc.data.device.IssuerSignedItemCbor<any>>>);
            get nameSpaces(): kotlin.collections.KtMutableMap<com.sphereon.cbor.CborString, kotlin.collections.KtList<com.sphereon.mdoc.data.device.IssuerSignedItemCbor<any>>>;
            addNameSpace(nameSpace: com.sphereon.cbor.CborString, issuerSignedItems: Array<com.sphereon.mdoc.data.device.IssuerSignedItemCbor<any>>): com.sphereon.mdoc.data.device.IssuerSignedCbor.Builder;
        }
    }
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class IssuerSignedItemJson extends com.sphereon.json.JsonView {
        constructor(digestID: com.sphereon.kmp.LongKMP, random: string, key: string, value: any/* kotlinx.serialization.json.JsonElement */, cddl: com.sphereon.cbor.CDDLType);
        get digestID(): com.sphereon.kmp.LongKMP;
        get random(): string;
        get key(): string;
        get value(): any/* kotlinx.serialization.json.JsonElement */;
        get cddl(): com.sphereon.cbor.CDDLType;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.device.IssuerSignedItemCbor<any>;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(digestID?: com.sphereon.kmp.LongKMP, random?: string, key?: string, value?: any/* kotlinx.serialization.json.JsonElement */, cddl?: com.sphereon.cbor.CDDLType): com.sphereon.mdoc.data.device.IssuerSignedItemJson;
        static get Companion(): {
        };
    }
    class IssuerSignedItemCbor<Type extends any> extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.device.IssuerSignedItemCbor<Type>, com.sphereon.mdoc.data.device.IssuerSignedItemJson, kotlin.collections.KtMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(digestID: com.sphereon.cbor.CborUInt, random: com.sphereon.cbor.CborByteString, elementIdentifier: com.sphereon.cbor.CborString, elementValue: com.sphereon.cbor.CborItem<Type>);
        get digestID(): com.sphereon.cbor.CborUInt;
        get random(): com.sphereon.cbor.CborByteString;
        get elementIdentifier(): com.sphereon.cbor.CborString;
        get elementValue(): com.sphereon.cbor.CborItem<Type>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.device.IssuerSignedItemCbor<Type>>;
        toJsonDTO(): com.sphereon.mdoc.data.device.IssuerSignedItemJson;
        toJson(): com.sphereon.mdoc.data.device.IssuerSignedItemJson;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(digestID?: com.sphereon.cbor.CborUInt, random?: com.sphereon.cbor.CborByteString, elementIdentifier?: com.sphereon.cbor.CborString, elementValue?: com.sphereon.cbor.CborItem<Type>): com.sphereon.mdoc.data.device.IssuerSignedItemCbor<Type>;
        static get static(): {
            get DIGEST_ID(): com.sphereon.cbor.StringLabel;
            get RANDOM(): com.sphereon.cbor.StringLabel;
            get ELEMENT_IDENTIFIER(): com.sphereon.cbor.StringLabel;
            get ELEMENT_VALUE(): com.sphereon.cbor.StringLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.data.device.IssuerSignedItemCbor<any>;
            cborDecode(data: Int8Array): com.sphereon.mdoc.data.device.IssuerSignedItemCbor<any /*UnknownType **/>;
        };
    }
}
export declare namespace com.sphereon.mdoc.data.mdl {
    class DataElementDef {
        constructor(nameSpace: string, identifier: string, presence: com.sphereon.mdoc.data.mdl.Presence, cddl: com.sphereon.cbor.CDDL, cddls: Array<com.sphereon.cbor.CDDL>);
        get nameSpace(): string;
        get identifier(): string;
        get presence(): com.sphereon.mdoc.data.mdl.Presence;
        get cddl(): com.sphereon.cbor.CDDL;
        get cddls(): Array<com.sphereon.cbor.CDDL>;
        toElement(intentToRetain?: boolean): com.sphereon.mdoc.data.DataElementCbor;
        toOid4VPConstraintField(intentToRetain?: boolean): com.sphereon.mdoc.oid4vp.Oid4VPConstraintField;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(nameSpace?: string, identifier?: string, presence?: com.sphereon.mdoc.data.mdl.Presence, cddl?: com.sphereon.cbor.CDDL, cddls?: Array<com.sphereon.cbor.CDDL>): com.sphereon.mdoc.data.mdl.DataElementDef;
    }
    abstract class Presence {
        private constructor();
        static get MANDATORY(): com.sphereon.mdoc.data.mdl.Presence & {
            get name(): "MANDATORY";
            get ordinal(): 0;
        };
        static get OPTIONAL(): com.sphereon.mdoc.data.mdl.Presence & {
            get name(): "OPTIONAL";
            get ordinal(): 1;
        };
        get name(): "MANDATORY" | "OPTIONAL";
        get ordinal(): 0 | 1;
        get value(): string;
        get mandatory(): boolean;
        static values(): Array<com.sphereon.mdoc.data.mdl.Presence>;
        static valueOf(value: string): com.sphereon.mdoc.data.mdl.Presence;
    }
}
export declare namespace com.sphereon.mdoc.data.mdl {
    class DrivingPrivilegesCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor, com.sphereon.mdoc.data.mdl.DrivingPrivilegesJson, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>> implements kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor> {
        constructor(backing?: kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor>);
        static fromVarArgs(drivingPrivileges: Array<com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor>): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor;
        static fromCborArray(list: com.sphereon.cbor.CborArray<com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor>;
        toJson(): com.sphereon.mdoc.data.mdl.DrivingPrivilegesJson;
        toString(): string;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        copy(backing?: kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor>): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor;
        asJsReadonlyArrayView(): ReadonlyArray<com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor>;
        readonly __doNotUseOrImplementIt: kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor>["__doNotUseOrImplementIt"];
        static get Static(): {
            fromJson(simple: com.sphereon.mdoc.data.mdl.DrivingPrivilegesJson): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor;
            cborDecode(encodedDrivingPrivilegesCbor: Int8Array): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor;
        };
    }
    namespace DrivingPrivilegesCbor {
        class Builder {
            constructor(privilegeBuilders?: kotlin.collections.KtMutableList<com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder>);
            get privilegeBuilders(): kotlin.collections.KtMutableList<com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder>;
            newPrivilege(): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            build(): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor;
            copy(privilegeBuilders?: kotlin.collections.KtMutableList<com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder>): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor.Builder;
            toString(): string;
            hashCode(): number;
            equals(other: Nullable<any>): boolean;
        }
    }
    class DrivingPrivilegesJson extends com.sphereon.json.JsonView implements kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegeJson> {
        constructor(backing?: kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegeJson>);
        get backing(): kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegeJson>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor;
        copy(backing?: kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegeJson>): com.sphereon.mdoc.data.mdl.DrivingPrivilegesJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        asJsReadonlyArrayView(): ReadonlyArray<com.sphereon.mdoc.data.mdl.DrivingPrivilegeJson>;
        readonly __doNotUseOrImplementIt: kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegeJson>["__doNotUseOrImplementIt"] & com.sphereon.json.JsonView["__doNotUseOrImplementIt"];
    }
    class DrivingPrivilegeJson extends com.sphereon.json.JsonView {
        constructor(vehicle_category_code: string, issue_date?: Nullable<com.sphereon.kmp.LocalDateTimeKMP>, expiry_date?: Nullable<com.sphereon.kmp.LocalDateTimeKMP>, codes?: Nullable<kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeJson>>);
        get vehicle_category_code(): string;
        get issue_date(): Nullable<com.sphereon.kmp.LocalDateTimeKMP>;
        get expiry_date(): Nullable<com.sphereon.kmp.LocalDateTimeKMP>;
        get codes(): Nullable<kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeJson>>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(vehicle_category_code?: string, issue_date?: Nullable<com.sphereon.kmp.LocalDateTimeKMP>, expiry_date?: Nullable<com.sphereon.kmp.LocalDateTimeKMP>, codes?: Nullable<kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeJson>>): com.sphereon.mdoc.data.mdl.DrivingPrivilegeJson;
    }
    class DrivingPrivilegeCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor, com.sphereon.mdoc.data.mdl.DrivingPrivilegeJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(vehicle_category_code: com.sphereon.cbor.CborString, issue_date?: Nullable<com.sphereon.cbor.CborFullDate>, expiry_date?: Nullable<com.sphereon.cbor.CborFullDate>, codes?: Nullable<kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeCbor>>);
        get vehicle_category_code(): com.sphereon.cbor.CborString;
        get issue_date(): Nullable<com.sphereon.cbor.CborFullDate>;
        get expiry_date(): Nullable<com.sphereon.cbor.CborFullDate>;
        get codes(): Nullable<kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeCbor>>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor>;
        toJson(): com.sphereon.mdoc.data.mdl.DrivingPrivilegeJson;
        toString(): string;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        copy(vehicle_category_code?: com.sphereon.cbor.CborString, issue_date?: Nullable<com.sphereon.cbor.CborFullDate>, expiry_date?: Nullable<com.sphereon.cbor.CborFullDate>, codes?: Nullable<kotlin.collections.KtList<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeCbor>>): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor;
        static get Static(): {
            get VEHICLE_CATEGORY_CODE(): com.sphereon.cbor.StringLabel;
            get ISSUE_DATE(): com.sphereon.cbor.StringLabel;
            get EXPIRY_DATE(): com.sphereon.cbor.StringLabel;
            get CODES(): com.sphereon.cbor.StringLabel;
            fromJson(simple: com.sphereon.mdoc.data.mdl.DrivingPrivilegeJson): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor;
            cborDecode(encodedDrivingPrivilegeCbor: Int8Array): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor;
        };
    }
    namespace DrivingPrivilegeCbor {
        class Builder {
            constructor(parent?: Nullable<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor.Builder>, vehicleCategoryCode?: Nullable<com.sphereon.cbor.CborString>, issueDate?: Nullable<com.sphereon.cbor.CborFullDate>, expiryDate?: Nullable<com.sphereon.cbor.CborFullDate>, codes?: Nullable<kotlin.collections.KtMutableList<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeCbor>>);
            get parent(): Nullable<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor.Builder>;
            get vehicleCategoryCode(): Nullable<com.sphereon.cbor.CborString>;
            set vehicleCategoryCode(value: Nullable<com.sphereon.cbor.CborString>);
            get issueDate(): Nullable<com.sphereon.cbor.CborFullDate>;
            set issueDate(value: Nullable<com.sphereon.cbor.CborFullDate>);
            get expiryDate(): Nullable<com.sphereon.cbor.CborFullDate>;
            set expiryDate(value: Nullable<com.sphereon.cbor.CborFullDate>);
            get codes(): Nullable<kotlin.collections.KtMutableList<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeCbor>>;
            set codes(value: Nullable<kotlin.collections.KtMutableList<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeCbor>>);
            newPrivilege(): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            buildPrivileges(): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor;
            withVehicleCategoryCode(vehicleCategoryCode: string): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            withIssueDateUsingLocalDateTime(issueDate: com.sphereon.kmp.LocalDateTimeKMP, utils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            withIssueDateUsingLocalDate(issueDate: any/* kotlinx.datetime.LocalDate */, utils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            withIssueDateUsingEpochSeconds(epochSeconds: number, utils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            withIssueDate(issueDate: string): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            withExpiryDateUsingLocalDateTime(issueDate: com.sphereon.kmp.LocalDateTimeKMP, utils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            withExpiryDateUsingLocalDate(issueDate: any/* kotlinx.datetime.LocalDate */, utils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            withExpiryDateUsingInstant(issueDate: any/* kotlinx.datetime.Instant */, utils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            withExpiryDate(expiryDate: string): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            withDates(issueDate: Nullable<string>, expiryDate: Nullable<string>): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            addCodes(codes: Array<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeJson>): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            addCode(code: string, sign?: Nullable<string>, value?: Nullable<string>): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            withCodes(codes: Array<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeJson>): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            end(): Nullable<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor.Builder>;
            build(): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor;
            copy(parent?: Nullable<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCbor.Builder>, vehicleCategoryCode?: Nullable<com.sphereon.cbor.CborString>, issueDate?: Nullable<com.sphereon.cbor.CborFullDate>, expiryDate?: Nullable<com.sphereon.cbor.CborFullDate>, codes?: Nullable<kotlin.collections.KtMutableList<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeCbor>>): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor.Builder;
            toString(): string;
            hashCode(): number;
            equals(other: Nullable<any>): boolean;
        }
    }
    class DrivingPrivilegesCodeCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeCbor, com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(code: com.sphereon.cbor.CborString, sign: Nullable<com.sphereon.cbor.CborString>, value: Nullable<com.sphereon.cbor.CborString>);
        get code(): com.sphereon.cbor.CborString;
        get sign(): Nullable<com.sphereon.cbor.CborString>;
        get value(): Nullable<com.sphereon.cbor.CborString>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeCbor>;
        toJson(): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeJson;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(code?: com.sphereon.cbor.CborString, sign?: Nullable<com.sphereon.cbor.CborString>, value?: Nullable<com.sphereon.cbor.CborString>): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeCbor;
        static get Static(): {
            get CODE(): com.sphereon.cbor.StringLabel;
            get SIGN(): com.sphereon.cbor.StringLabel;
            get VALUE(): com.sphereon.cbor.StringLabel;
            fromJson(simple: com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeJson): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeCbor;
            cborDecode(encoded: Int8Array): com.sphereon.mdoc.data.mdl.DrivingPrivilegeCbor;
        };
    }
    class DrivingPrivilegesCodeJson extends com.sphereon.json.JsonView {
        constructor(code: string, sign: Nullable<string>, value: Nullable<string>);
        get code(): string;
        get sign(): Nullable<string>;
        get value(): Nullable<string>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeCbor;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toString(): string;
        copy(code?: string, sign?: Nullable<string>, value?: Nullable<string>): com.sphereon.mdoc.data.mdl.DrivingPrivilegesCodeJson;
    }
}
export declare namespace com.sphereon.mdoc.data.mdl {
    const Mdl: {
        get MDL_NAMESPACE(): string;
        get MDL_NAMESPACE_CBOR(): com.sphereon.cbor.CborString;
    };
    abstract class MdlDefs {
        private constructor();
        static get family_name(): com.sphereon.mdoc.data.mdl.MdlDefs & {
            get name(): "family_name";
            get ordinal(): 0;
        };
        static get given_name(): com.sphereon.mdoc.data.mdl.MdlDefs & {
            get name(): "given_name";
            get ordinal(): 1;
        };
        static get birth_date(): com.sphereon.mdoc.data.mdl.MdlDefs & {
            get name(): "birth_date";
            get ordinal(): 2;
        };
        static get issue_date(): com.sphereon.mdoc.data.mdl.MdlDefs & {
            get name(): "issue_date";
            get ordinal(): 3;
        };
        static get expiry_date(): com.sphereon.mdoc.data.mdl.MdlDefs & {
            get name(): "expiry_date";
            get ordinal(): 4;
        };
        static get issuing_country(): com.sphereon.mdoc.data.mdl.MdlDefs & {
            get name(): "issuing_country";
            get ordinal(): 5;
        };
        static get issuing_authority(): com.sphereon.mdoc.data.mdl.MdlDefs & {
            get name(): "issuing_authority";
            get ordinal(): 6;
        };
        static get document_number(): com.sphereon.mdoc.data.mdl.MdlDefs & {
            get name(): "document_number";
            get ordinal(): 7;
        };
        static get portrait(): com.sphereon.mdoc.data.mdl.MdlDefs & {
            get name(): "portrait";
            get ordinal(): 8;
        };
        get name(): "family_name" | "given_name" | "birth_date" | "issue_date" | "expiry_date" | "issuing_country" | "issuing_authority" | "document_number" | "portrait";
        get ordinal(): 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
        get definition(): com.sphereon.mdoc.data.mdl.DataElementDef;
        get identifier(): string;
        get nameSpace(): string;
        intentToRetain(intentToRetain?: boolean): com.sphereon.mdoc.data.DataElementCbor;
        static values(): Array<com.sphereon.mdoc.data.mdl.MdlDefs>;
        static valueOf(value: string): com.sphereon.mdoc.data.mdl.MdlDefs;
    }
}
export declare namespace com.sphereon.mdoc.data.mso {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class DeviceKeyInfoJson extends com.sphereon.json.JsonView {
        constructor(deviceKey: com.sphereon.crypto.cose.CoseKeyJson, keyAuthorizations?: Nullable<com.sphereon.mdoc.data.mso.KeyAuthorizationsJson>, keyInfo?: Nullable<kotlin.collections.KtMutableMap<com.sphereon.kmp.LongKMP, string>>);
        get deviceKey(): com.sphereon.crypto.cose.CoseKeyJson;
        get keyAuthorizations(): Nullable<com.sphereon.mdoc.data.mso.KeyAuthorizationsJson>;
        get keyInfo(): Nullable<kotlin.collections.KtMutableMap<com.sphereon.kmp.LongKMP, string>>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.mso.DeviceKeyInfoCbor;
        copy(deviceKey?: com.sphereon.crypto.cose.CoseKeyJson, keyAuthorizations?: Nullable<com.sphereon.mdoc.data.mso.KeyAuthorizationsJson>, keyInfo?: Nullable<kotlin.collections.KtMutableMap<com.sphereon.kmp.LongKMP, string>>): com.sphereon.mdoc.data.mso.DeviceKeyInfoJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Companion(): {
        };
    }
    class DeviceKeyInfoCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.mso.DeviceKeyInfoCbor, com.sphereon.mdoc.data.mso.DeviceKeyInfoJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(deviceKey: com.sphereon.crypto.cose.CoseKeyCbor, keyAuthorizations?: Nullable<com.sphereon.mdoc.data.mso.KeyAuthorizationsCbor>, keyInfo?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>);
        get deviceKey(): com.sphereon.crypto.cose.CoseKeyCbor;
        get keyAuthorizations(): Nullable<com.sphereon.mdoc.data.mso.KeyAuthorizationsCbor>;
        get keyInfo(): Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.mso.DeviceKeyInfoCbor>;
        toJson(): com.sphereon.mdoc.data.mso.DeviceKeyInfoJson;
        copy(deviceKey?: com.sphereon.crypto.cose.CoseKeyCbor, keyAuthorizations?: Nullable<com.sphereon.mdoc.data.mso.KeyAuthorizationsCbor>, keyInfo?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>): com.sphereon.mdoc.data.mso.DeviceKeyInfoCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            get DEVICE_KEY(): com.sphereon.cbor.StringLabel;
            get KEY_AUTHORIZATIONS(): com.sphereon.cbor.StringLabel;
            get KEY_INFO(): com.sphereon.cbor.StringLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.data.mso.DeviceKeyInfoCbor;
            cborDecode(data: Int8Array): com.sphereon.mdoc.data.mso.DeviceKeyInfoCbor;
        };
    }
}
export declare namespace com.sphereon.mdoc.data.mso {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class KeyAuthorizationsJson extends com.sphereon.json.JsonView {
        constructor(nameSpaces?: Nullable<Array<string>>, dataElements?: Nullable<kotlin.collections.KtMap<string, kotlin.collections.KtMap<string, Array<string>>>>);
        get nameSpaces(): Nullable<Array<string>>;
        get dataElements(): Nullable<kotlin.collections.KtMap<string, kotlin.collections.KtMap<string, Array<string>>>>;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.mso.KeyAuthorizationsCbor;
        copy(nameSpaces?: Nullable<Array<string>>, dataElements?: Nullable<kotlin.collections.KtMap<string, kotlin.collections.KtMap<string, Array<string>>>>): com.sphereon.mdoc.data.mso.KeyAuthorizationsJson;
        toString(): string;
        static get Companion(): {
        };
    }
    class KeyAuthorizationsCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.mso.KeyAuthorizationsCbor, com.sphereon.mdoc.data.mso.KeyAuthorizationsJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(nameSpaces?: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborString>>, dataElements?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborString>>>);
        get nameSpaces(): Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborString>>;
        get dataElements(): Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborString>>>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.mso.KeyAuthorizationsCbor>;
        toJson(): com.sphereon.mdoc.data.mso.KeyAuthorizationsJson;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        copy(nameSpaces?: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborString>>, dataElements?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborString>>>): com.sphereon.mdoc.data.mso.KeyAuthorizationsCbor;
        toString(): string;
        static get Static(): {
            get NAME_SPACES(): com.sphereon.cbor.StringLabel;
            get DATA_ELEMENTS(): com.sphereon.cbor.StringLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.data.mso.KeyAuthorizationsCbor;
            cborDecode(data: Int8Array): com.sphereon.mdoc.data.mso.KeyAuthorizationsCbor;
        };
    }
}
export declare namespace com.sphereon.mdoc.data.mso {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class MobileSecurityObjectJson extends com.sphereon.json.JsonView {
        constructor(version: string | undefined, digestAlgorithm: string, valueDigests: kotlin.collections.KtMap<string, kotlin.collections.KtMap<com.sphereon.kmp.LongKMP, string>>, deviceKeyInfo: com.sphereon.mdoc.data.mso.DeviceKeyInfoJson, docType: string, validityInfo: com.sphereon.mdoc.data.mso.ValidityInfoJson);
        get version(): string;
        get digestAlgorithm(): string;
        get valueDigests(): kotlin.collections.KtMap<string, kotlin.collections.KtMap<com.sphereon.kmp.LongKMP, string>>;
        get deviceKeyInfo(): com.sphereon.mdoc.data.mso.DeviceKeyInfoJson;
        get docType(): string;
        get validityInfo(): com.sphereon.mdoc.data.mso.ValidityInfoJson;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor;
        copy(version?: string, digestAlgorithm?: string, valueDigests?: kotlin.collections.KtMap<string, kotlin.collections.KtMap<com.sphereon.kmp.LongKMP, string>>, deviceKeyInfo?: com.sphereon.mdoc.data.mso.DeviceKeyInfoJson, docType?: string, validityInfo?: com.sphereon.mdoc.data.mso.ValidityInfoJson): com.sphereon.mdoc.data.mso.MobileSecurityObjectJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            decodeCoseSign1(sign: com.sphereon.crypto.cose.CoseSign1Json): Nullable<com.sphereon.mdoc.data.mso.MobileSecurityObjectJson>;
            cborDecode(data: Nullable<Int8Array>): Nullable<com.sphereon.mdoc.data.mso.MobileSecurityObjectJson>;
        };
        static get Companion(): {
        };
    }
    class MobileSecurityObjectCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor, com.sphereon.mdoc.data.mso.MobileSecurityObjectJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(version: com.sphereon.cbor.CborString | undefined, digestAlgorithm: com.sphereon.cbor.CborString, valueDigests: com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborMap<com.sphereon.cbor.CborUInt, com.sphereon.cbor.CborByteString>>, deviceKeyInfo: com.sphereon.mdoc.data.mso.DeviceKeyInfoCbor, docType: com.sphereon.cbor.CborString, validityInfo: com.sphereon.mdoc.data.mso.ValidityInfoCbor);
        get version(): com.sphereon.cbor.CborString;
        get digestAlgorithm(): com.sphereon.cbor.CborString;
        get valueDigests(): com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborMap<com.sphereon.cbor.CborUInt, com.sphereon.cbor.CborByteString>>;
        get deviceKeyInfo(): com.sphereon.mdoc.data.mso.DeviceKeyInfoCbor;
        get docType(): com.sphereon.cbor.CborString;
        get validityInfo(): com.sphereon.mdoc.data.mso.ValidityInfoCbor;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>;
        toJson(): com.sphereon.mdoc.data.mso.MobileSecurityObjectJson;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        copy(version?: com.sphereon.cbor.CborString, digestAlgorithm?: com.sphereon.cbor.CborString, valueDigests?: com.sphereon.cbor.CborMap<com.sphereon.cbor.CborString, com.sphereon.cbor.CborMap<com.sphereon.cbor.CborUInt, com.sphereon.cbor.CborByteString>>, deviceKeyInfo?: com.sphereon.mdoc.data.mso.DeviceKeyInfoCbor, docType?: com.sphereon.cbor.CborString, validityInfo?: com.sphereon.mdoc.data.mso.ValidityInfoCbor): com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor;
        toString(): string;
        static get Static(): {
            get VERSION(): com.sphereon.cbor.StringLabel;
            get DIGEST_ALGORITHM(): com.sphereon.cbor.StringLabel;
            get VALUE_DIGESTS(): com.sphereon.cbor.StringLabel;
            get DEVICE_KEY_INFO(): com.sphereon.cbor.StringLabel;
            get DOC_TYPE(): com.sphereon.cbor.StringLabel;
            get VALIDITY_INFO(): com.sphereon.cbor.StringLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor;
            decodeCoseSign1(sign: com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>): Nullable<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>;
            cborDecode(data: Nullable<Int8Array>): Nullable<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>;
        };
    }
}
export declare namespace com.sphereon.mdoc.data.mso {
    /* @ts-ignore: https://github.com/microsoft/TypeScript/issues/4628 */
    class ValidityInfoJson extends com.sphereon.json.JsonView {
        constructor(signed: string, validFrom: string, validUntil: string, expectedUpdate?: Nullable<string>);
        get signed(): string;
        get validFrom(): string;
        get validUntil(): string;
        get expectedUpdate(): Nullable<string>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.data.mso.ValidityInfoCbor;
        copy(signed?: string, validFrom?: string, validUntil?: string, expectedUpdate?: Nullable<string>): com.sphereon.mdoc.data.mso.ValidityInfoJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Companion(): {
        };
    }
    class ValidityInfoCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.data.mso.ValidityInfoCbor, com.sphereon.mdoc.data.mso.ValidityInfoJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborTDate>> {
        constructor(signed: com.sphereon.cbor.CborTDate, validFrom: com.sphereon.cbor.CborTDate, validUntil: com.sphereon.cbor.CborTDate, expectedUpdate?: Nullable<com.sphereon.cbor.CborTDate>);
        get signed(): com.sphereon.cbor.CborTDate;
        get validFrom(): com.sphereon.cbor.CborTDate;
        get validUntil(): com.sphereon.cbor.CborTDate;
        get expectedUpdate(): Nullable<com.sphereon.cbor.CborTDate>;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.data.mso.ValidityInfoCbor>;
        toJson(): com.sphereon.mdoc.data.mso.ValidityInfoJson;
        copy(signed?: com.sphereon.cbor.CborTDate, validFrom?: com.sphereon.cbor.CborTDate, validUntil?: com.sphereon.cbor.CborTDate, expectedUpdate?: Nullable<com.sphereon.cbor.CborTDate>): com.sphereon.mdoc.data.mso.ValidityInfoCbor;
        toString(): string;
        static get Static(): {
            get SIGNED(): com.sphereon.cbor.StringLabel;
            get VALID_FROM(): com.sphereon.cbor.StringLabel;
            get VALID_UNTIL(): com.sphereon.cbor.StringLabel;
            get EXPECTED_UPDATE(): com.sphereon.cbor.StringLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.data.mso.ValidityInfoCbor;
            cborDecode(encoded: Int8Array): com.sphereon.mdoc.data.mso.ValidityInfoCbor;
        };
    }
}
export declare namespace com.sphereon.mdoc.data {
    class DataElementCbor {
        constructor(identifier: com.sphereon.cbor.CborString, intentToRetain?: com.sphereon.cbor.CborBool);
        get identifier(): com.sphereon.cbor.CborString;
        get intentToRetain(): com.sphereon.cbor.CborBool;
        toPair(): any/* kotlin.Pair<com.sphereon.cbor.CborString, com.sphereon.cbor.CborBool> */;
        copy(identifier?: com.sphereon.cbor.CborString, intentToRetain?: com.sphereon.cbor.CborBool): com.sphereon.mdoc.data.DataElementCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
    class DataElementSimple {
        constructor(identifier: string, intentToRetain?: boolean);
        get identifier(): string;
        get intentToRetain(): boolean;
        copy(identifier?: string, intentToRetain?: boolean): com.sphereon.mdoc.data.DataElementSimple;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
}
export declare namespace com.sphereon.mdoc.oid4vp {
    class Oid4VPPresentationDefinition implements com.sphereon.mdoc.oid4vp.IOid4VPPresentationDefinition, com.sphereon.json.HasToJsonString {
        constructor(id: string, input_descriptors: Array<com.sphereon.mdoc.oid4vp.Oid4VPInputDescriptor>);
        get id(): string;
        get input_descriptors(): Array<com.sphereon.mdoc.oid4vp.Oid4VPInputDescriptor>;
        toDocRequest(): com.sphereon.mdoc.data.device.DocRequestCbor;
        toJsonObject(): kotlin.collections.KtMap<string, any/* kotlinx.serialization.json.JsonElement */>/* kotlinx.serialization.json.JsonObject */;
        toDTO(): com.sphereon.mdoc.oid4vp.IOid4VPPresentationDefinition;
        toDocRequestJson(): com.sphereon.mdoc.data.device.DocRequestJson;
        toJsonString(): string;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        copy(id?: string, input_descriptors?: Array<com.sphereon.mdoc.oid4vp.Oid4VPInputDescriptor>): com.sphereon.mdoc.oid4vp.Oid4VPPresentationDefinition;
        toString(): string;
        readonly __doNotUseOrImplementIt: com.sphereon.json.HasToJsonString["__doNotUseOrImplementIt"];
        static get Static(): {
            fromDTO(presentationDefinition: com.sphereon.mdoc.oid4vp.IOid4VPPresentationDefinition): com.sphereon.mdoc.oid4vp.Oid4VPPresentationDefinition;
        };
        static get Companion(): {
        };
    }
    class Oid4VPInputDescriptor implements com.sphereon.mdoc.oid4vp.IOid4VPInputDescriptor {
        constructor(id: string, format: com.sphereon.mdoc.oid4vp.Oid4VPFormat, constraints: com.sphereon.mdoc.oid4vp.Oid4VPConstraints);
        get id(): string;
        get format(): com.sphereon.mdoc.oid4vp.Oid4VPFormat;
        get constraints(): com.sphereon.mdoc.oid4vp.Oid4VPConstraints;
        toDeviceItemsRequest(builder: com.sphereon.mdoc.data.device.DeviceItemsRequestCbor.Builder): void;
        copy(id?: string, format?: com.sphereon.mdoc.oid4vp.Oid4VPFormat, constraints?: com.sphereon.mdoc.oid4vp.Oid4VPConstraints): com.sphereon.mdoc.oid4vp.Oid4VPInputDescriptor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromDTO(inputDescriptor: com.sphereon.mdoc.oid4vp.IOid4VPInputDescriptor): com.sphereon.mdoc.oid4vp.Oid4VPInputDescriptor;
        };
        static get Companion(): {
        };
    }
    class Oid4VPFormat implements com.sphereon.mdoc.oid4vp.IOid4VPFormat {
        constructor(mso_mdoc: com.sphereon.mdoc.oid4vp.Oid4VPSupportedAlgorithm);
        get mso_mdoc(): com.sphereon.mdoc.oid4vp.Oid4VPSupportedAlgorithm;
        copy(mso_mdoc?: com.sphereon.mdoc.oid4vp.Oid4VPSupportedAlgorithm): com.sphereon.mdoc.oid4vp.Oid4VPFormat;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromDTO(dto: com.sphereon.mdoc.oid4vp.IOid4VPFormat): com.sphereon.mdoc.oid4vp.Oid4VPFormat;
        };
        static get Companion(): {
        };
    }
    class Oid4VPSupportedAlgorithm implements com.sphereon.mdoc.oid4vp.IOid4VPSupportedAlgorithm {
        constructor(alg: Array<string>);
        get alg(): Array<string>;
        get algorithmObjects(): Array<com.sphereon.crypto.cose.CoseSignatureAlgorithm>;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        copy(alg?: Array<string>): com.sphereon.mdoc.oid4vp.Oid4VPSupportedAlgorithm;
        toString(): string;
        static get Static(): {
            fromDTO(dto: com.sphereon.mdoc.oid4vp.IOid4VPSupportedAlgorithm): com.sphereon.mdoc.oid4vp.Oid4VPSupportedAlgorithm;
        };
        static get Companion(): {
        };
    }
    class Oid4VPConstraints implements com.sphereon.mdoc.oid4vp.IOid4VPConstraints {
        constructor(fields: Array<com.sphereon.mdoc.oid4vp.Oid4VPConstraintField>);
        get fields(): Array<com.sphereon.mdoc.oid4vp.Oid4VPConstraintField>;
        get limit_disclosure(): string;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        copy(fields?: Array<com.sphereon.mdoc.oid4vp.Oid4VPConstraintField>): com.sphereon.mdoc.oid4vp.Oid4VPConstraints;
        toString(): string;
        static get Static(): {
            fromDTO(constraints: com.sphereon.mdoc.oid4vp.IOid4VPConstraints): com.sphereon.mdoc.oid4vp.Oid4VPConstraints;
        };
        static get Companion(): {
        };
    }
    class Oid4VPConstraintField implements com.sphereon.mdoc.oid4vp.IOid4VPConstraintField {
        constructor(path: Array<string> | undefined, intent_to_retain: boolean);
        get path(): Array<string>;
        get intent_to_retain(): boolean;
        copy(path?: Array<string>, intent_to_retain?: boolean): com.sphereon.mdoc.oid4vp.Oid4VPConstraintField;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromElementIdentifiers(nameSpace: string, elementIdentifiers: Array<string>, intentToRetain: boolean): com.sphereon.mdoc.oid4vp.Oid4VPConstraintField;
            fromIssuerSignedItemJson(nameSpace: string, issuerSignedItemJson: com.sphereon.mdoc.data.device.IssuerSignedItemJson, intentToRetain: boolean): com.sphereon.mdoc.oid4vp.Oid4VPConstraintField;
            fromIssuerSignedItemCbor(nameSpace: string, issuerSignedItemCbor: com.sphereon.mdoc.data.device.IssuerSignedItemCbor<any /*UnknownType **/>, intentToRetain: boolean): com.sphereon.mdoc.oid4vp.Oid4VPConstraintField;
            fromDTO(dto: com.sphereon.mdoc.oid4vp.IOid4VPConstraintField): com.sphereon.mdoc.oid4vp.Oid4VPConstraintField;
            fromDataElementDef(dataElementDef: com.sphereon.mdoc.data.mdl.DataElementDef, intentToRetain: boolean): com.sphereon.mdoc.oid4vp.Oid4VPConstraintField;
        };
        static get Companion(): {
        };
    }
    abstract class Oid4VPFormats {
        private constructor();
        static get MSO_MDOC(): com.sphereon.mdoc.oid4vp.Oid4VPFormats & {
            get name(): "MSO_MDOC";
            get ordinal(): 0;
        };
        get name(): "MSO_MDOC";
        get ordinal(): 0;
        get value(): string;
        static values(): Array<com.sphereon.mdoc.oid4vp.Oid4VPFormats>;
        static valueOf(value: string): com.sphereon.mdoc.oid4vp.Oid4VPFormats;
        static get Static(): {
            fromValue(value: string): Nullable<com.sphereon.mdoc.oid4vp.Oid4VPFormats>;
        };
        static get Companion(): {
        } & any/* kotlinx.serialization.internal.SerializerFactory */;
    }
    class Oid4VPPresentationSubmission implements com.sphereon.mdoc.oid4vp.IOid4VPPresentationSubmission {
        constructor(definition_id: string, id: string, descriptor_map: Array<com.sphereon.mdoc.oid4vp.Oid4vpSubmissionDescriptor>);
        get definition_id(): string;
        get id(): string;
        get descriptor_map(): Array<com.sphereon.mdoc.oid4vp.Oid4vpSubmissionDescriptor>;
        assertValid(pd: com.sphereon.mdoc.oid4vp.IOid4VPPresentationDefinition): void;
        copy(definition_id?: string, id?: string, descriptor_map?: Array<com.sphereon.mdoc.oid4vp.Oid4vpSubmissionDescriptor>): com.sphereon.mdoc.oid4vp.Oid4VPPresentationSubmission;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromPresentationDefinition(pd: com.sphereon.mdoc.oid4vp.IOid4VPPresentationDefinition, id?: string): com.sphereon.mdoc.oid4vp.Oid4VPPresentationSubmission;
            fromDTO(dto: com.sphereon.mdoc.oid4vp.IOid4VPPresentationSubmission): com.sphereon.mdoc.oid4vp.Oid4VPPresentationSubmission;
        };
        static get Companion(): {
        };
    }
    class Oid4vpSubmissionDescriptor implements com.sphereon.mdoc.oid4vp.IOid4vpSubmissionDescriptor {
        constructor(id: string, format?: string, path?: string);
        get id(): string;
        get format(): string;
        get path(): string;
        copy(id?: string, format?: string, path?: string): com.sphereon.mdoc.oid4vp.Oid4vpSubmissionDescriptor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromInputDescriptor(descriptor: com.sphereon.mdoc.oid4vp.IOid4VPInputDescriptor): com.sphereon.mdoc.oid4vp.Oid4vpSubmissionDescriptor;
            fromDTO(dto: com.sphereon.mdoc.oid4vp.IOid4vpSubmissionDescriptor): com.sphereon.mdoc.oid4vp.Oid4vpSubmissionDescriptor;
        };
        static get Companion(): {
        };
    }
}
export declare namespace com.sphereon.mdoc.tx.device {
    class DeviceEngagementJson extends com.sphereon.json.JsonView {
        constructor(version: string | undefined, security: com.sphereon.mdoc.tx.device.DeviceEngagementSecurityCbor, deviceRetrievalMethods?: Nullable<Array<com.sphereon.mdoc.tx.device.DeviceRetrievalMethodCbor>>, serverRetrievalMethod?: Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalMethodsCbor>, protocolInfo?: Nullable<com.sphereon.cbor.CborItem<any /*UnknownType **/>>, additionalItems?: Nullable<kotlin.collections.KtMutableMap<com.sphereon.kmp.LongKMP, any>>);
        get version(): string;
        get security(): com.sphereon.mdoc.tx.device.DeviceEngagementSecurityCbor;
        get deviceRetrievalMethods(): Nullable<Array<com.sphereon.mdoc.tx.device.DeviceRetrievalMethodCbor>>;
        get serverRetrievalMethod(): Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalMethodsCbor>;
        get protocolInfo(): Nullable<com.sphereon.cbor.CborItem<any /*UnknownType **/>>;
        get additionalItems(): Nullable<kotlin.collections.KtMutableMap<com.sphereon.kmp.LongKMP, any>>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.tx.device.DeviceEngagementCbor;
        copy(version?: string, security?: com.sphereon.mdoc.tx.device.DeviceEngagementSecurityCbor, deviceRetrievalMethods?: Nullable<Array<com.sphereon.mdoc.tx.device.DeviceRetrievalMethodCbor>>, serverRetrievalMethod?: Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalMethodsCbor>, protocolInfo?: Nullable<com.sphereon.cbor.CborItem<any /*UnknownType **/>>, additionalItems?: Nullable<kotlin.collections.KtMutableMap<com.sphereon.kmp.LongKMP, any>>): com.sphereon.mdoc.tx.device.DeviceEngagementJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
    class DeviceEngagementCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.tx.device.DeviceEngagementCbor, com.sphereon.mdoc.tx.device.DeviceEngagementJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(version: com.sphereon.cbor.CborString | undefined, security: com.sphereon.mdoc.tx.device.DeviceEngagementSecurityCbor, deviceRetrievalMethods?: Nullable<Array<com.sphereon.mdoc.tx.device.DeviceRetrievalMethodCbor>>, serverRetrievalMethod?: Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalMethodsCbor>, protocolInfo?: Nullable<com.sphereon.cbor.CborItem<any /*UnknownType **/>>, additionalItems?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>);
        get version(): com.sphereon.cbor.CborString;
        get security(): com.sphereon.mdoc.tx.device.DeviceEngagementSecurityCbor;
        get deviceRetrievalMethods(): Nullable<Array<com.sphereon.mdoc.tx.device.DeviceRetrievalMethodCbor>>;
        get serverRetrievalMethod(): Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalMethodsCbor>;
        get protocolInfo(): Nullable<com.sphereon.cbor.CborItem<any /*UnknownType **/>>;
        get additionalItems(): Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.tx.device.DeviceEngagementCbor>;
        toJson(): com.sphereon.mdoc.tx.device.DeviceEngagementJson;
        equals(other: Nullable<any>): boolean;
        hashCode(): number;
        copy(version?: com.sphereon.cbor.CborString, security?: com.sphereon.mdoc.tx.device.DeviceEngagementSecurityCbor, deviceRetrievalMethods?: Nullable<Array<com.sphereon.mdoc.tx.device.DeviceRetrievalMethodCbor>>, serverRetrievalMethod?: Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalMethodsCbor>, protocolInfo?: Nullable<com.sphereon.cbor.CborItem<any /*UnknownType **/>>, additionalItems?: Nullable<com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>>): com.sphereon.mdoc.tx.device.DeviceEngagementCbor;
        toString(): string;
        static get Static(): {
            get VERSION(): com.sphereon.cbor.NumberLabel;
            get SECURITY(): com.sphereon.cbor.NumberLabel;
            get DEVICE_RETRIEVAL_METHODS(): com.sphereon.cbor.NumberLabel;
            get SERVER_RETRIEVAL_METHOD(): com.sphereon.cbor.NumberLabel;
            get PROTOCOL_INFO(): com.sphereon.cbor.NumberLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.tx.device.DeviceEngagementCbor;
            cborDecode(encodedDeviceEngagement: Int8Array): com.sphereon.mdoc.tx.device.DeviceEngagementCbor;
        };
    }
    class ServerRetrievalMethodsJson extends com.sphereon.json.JsonView {
        constructor(Oidc: Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalInfo>, WebApi: Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalInfo>);
        get Oidc(): Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalInfo>;
        get WebApi(): Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalInfo>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.tx.device.ServerRetrievalMethodsCbor;
        copy(Oidc?: Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalInfo>, WebApi?: Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalInfo>): com.sphereon.mdoc.tx.device.ServerRetrievalMethodsJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
    class ServerRetrievalMethodsCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.tx.device.ServerRetrievalMethodsCbor, com.sphereon.mdoc.tx.device.ServerRetrievalMethodsJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.StringLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(Oidc: Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalInfo>, WebApi: Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalInfo>);
        get Oidc(): Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalInfo>;
        get WebApi(): Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalInfo>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.tx.device.ServerRetrievalMethodsCbor>;
        toJson(): com.sphereon.mdoc.tx.device.ServerRetrievalMethodsJson;
        copy(Oidc?: Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalInfo>, WebApi?: Nullable<com.sphereon.mdoc.tx.device.ServerRetrievalInfo>): com.sphereon.mdoc.tx.device.ServerRetrievalMethodsCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            get OIDC(): com.sphereon.cbor.StringLabel;
            get WEB_API(): com.sphereon.cbor.StringLabel;
            fromCbor(encodedServerRetrievalMethods: Int8Array): void;
        };
    }
    class ServerRetrievalInfo {
        constructor(version: com.sphereon.cbor.CborUInt, issuerUrl: com.sphereon.cbor.CborString, serverRetrievalToken: com.sphereon.cbor.CborString);
        get version(): com.sphereon.cbor.CborUInt;
        get issuerUrl(): com.sphereon.cbor.CborString;
        get serverRetrievalToken(): com.sphereon.cbor.CborString;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.tx.device.ServerRetrievalInfo>;
        toCbor(): Int8Array;
        copy(version?: com.sphereon.cbor.CborUInt, issuerUrl?: com.sphereon.cbor.CborString, serverRetrievalToken?: com.sphereon.cbor.CborString): com.sphereon.mdoc.tx.device.ServerRetrievalInfo;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromCbor(serverRetrievalInfo: Int8Array): com.sphereon.mdoc.tx.device.ServerRetrievalInfo;
        };
    }
    class DeviceEngagementSecurityJson extends com.sphereon.json.JsonView {
        constructor(cypherSuite: com.sphereon.kmp.LongKMP, eDeviceKeyBytes: com.sphereon.crypto.cose.CoseKeyJson);
        get cypherSuite(): com.sphereon.kmp.LongKMP;
        get eDeviceKeyBytes(): com.sphereon.crypto.cose.CoseKeyJson;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.tx.device.DeviceEngagementSecurityCbor;
        copy(cypherSuite?: com.sphereon.kmp.LongKMP, eDeviceKeyBytes?: com.sphereon.crypto.cose.CoseKeyJson): com.sphereon.mdoc.tx.device.DeviceEngagementSecurityJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
    class DeviceEngagementSecurityCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.tx.device.DeviceEngagementSecurityCbor, com.sphereon.mdoc.tx.device.DeviceEngagementSecurityJson, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(cypherSuite: com.sphereon.cbor.CborUInt, eDeviceKeyBytes: com.sphereon.crypto.cose.CoseKeyCbor);
        get cypherSuite(): com.sphereon.cbor.CborUInt;
        get eDeviceKeyBytes(): com.sphereon.crypto.cose.CoseKeyCbor;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.tx.device.DeviceEngagementSecurityCbor>;
        toJson(): com.sphereon.mdoc.tx.device.DeviceEngagementSecurityJson;
        copy(cypherSuite?: com.sphereon.cbor.CborUInt, eDeviceKeyBytes?: com.sphereon.crypto.cose.CoseKeyCbor): com.sphereon.mdoc.tx.device.DeviceEngagementSecurityCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromCborItem(a: com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.tx.device.DeviceEngagementSecurityCbor;
            cborDecode(deviceEngagementSecurity: Int8Array): com.sphereon.mdoc.tx.device.DeviceEngagementSecurityCbor;
        };
    }
    class DeviceRetrievalMethodJson extends com.sphereon.json.JsonView {
        constructor(type: com.sphereon.kmp.LongKMP, version: com.sphereon.kmp.LongKMP, retrievalOptions: com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsCbor);
        get type(): com.sphereon.kmp.LongKMP;
        get version(): com.sphereon.kmp.LongKMP;
        get retrievalOptions(): com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsCbor;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.tx.device.DeviceRetrievalMethodCbor;
        copy(type?: com.sphereon.kmp.LongKMP, version?: com.sphereon.kmp.LongKMP, retrievalOptions?: com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsCbor): com.sphereon.mdoc.tx.device.DeviceRetrievalMethodJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
    class DeviceRetrievalMethodCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.tx.device.DeviceRetrievalMethodCbor, com.sphereon.mdoc.tx.device.DeviceRetrievalMethodJson, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(type: com.sphereon.cbor.CborUInt, version: com.sphereon.cbor.CborUInt, retrievalOptions: com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsCbor);
        get type(): com.sphereon.cbor.CborUInt;
        get version(): com.sphereon.cbor.CborUInt;
        get retrievalOptions(): com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsCbor;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.tx.device.DeviceRetrievalMethodCbor>;
        toJson(): com.sphereon.mdoc.tx.device.DeviceRetrievalMethodJson;
        copy(type?: com.sphereon.cbor.CborUInt, version?: com.sphereon.cbor.CborUInt, retrievalOptions?: com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsCbor): com.sphereon.mdoc.tx.device.DeviceRetrievalMethodCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromDeviceEngagementCborItem(items: Nullable<com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>>): Nullable<Array<com.sphereon.mdoc.tx.device.DeviceRetrievalMethodCbor>>;
            fromCborItem(items: com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.tx.device.DeviceRetrievalMethodCbor;
            cborDecode(deviceRetrievalMethod: Int8Array): com.sphereon.mdoc.tx.device.DeviceRetrievalMethodCbor;
        };
    }
    abstract class DeviceRetrievalOptionsJson extends com.sphereon.json.JsonView {
        protected constructor();
        abstract toJsonString(): string;
    }
    abstract class DeviceRetrievalOptionsCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsCbor, com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsJson, com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        protected constructor();
    }
    class WifiOptionsCbor extends com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsCbor {
        constructor(passPhrase: Nullable<com.sphereon.cbor.CborString>, channelInfoOperatingClass?: Nullable<com.sphereon.cbor.CborUInt>, channelInfoChannelNumber?: Nullable<com.sphereon.cbor.CborUInt>, supportedBands?: Nullable<com.sphereon.cbor.CborByteString>);
        get passPhrase(): Nullable<com.sphereon.cbor.CborString>;
        get channelInfoOperatingClass(): Nullable<com.sphereon.cbor.CborUInt>;
        get channelInfoChannelNumber(): Nullable<com.sphereon.cbor.CborUInt>;
        get supportedBands(): Nullable<com.sphereon.cbor.CborByteString>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsCbor>;
        toJson(): com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsJson;
        copy(passPhrase?: Nullable<com.sphereon.cbor.CborString>, channelInfoOperatingClass?: Nullable<com.sphereon.cbor.CborUInt>, channelInfoChannelNumber?: Nullable<com.sphereon.cbor.CborUInt>, supportedBands?: Nullable<com.sphereon.cbor.CborByteString>): com.sphereon.mdoc.tx.device.WifiOptionsCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            get PASS_PHRASE(): com.sphereon.cbor.NumberLabel;
            get CHANNEL_INFO_OPERATING_CLASS(): com.sphereon.cbor.NumberLabel;
            get CHANNEL_INFO_CHANNEL_NUMBER(): com.sphereon.cbor.NumberLabel;
            get SUPPORTED_BANDS(): com.sphereon.cbor.NumberLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.tx.device.WifiOptionsCbor;
            cborDecode(encodedWifiOptions: Int8Array): com.sphereon.mdoc.tx.device.WifiOptionsCbor;
        };
    }
    class BleOptionsCbor extends com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsCbor {
        constructor(peripheralServerMode: com.sphereon.cbor.CborBool, centralClientMode: com.sphereon.cbor.CborBool, peripheralServerModeUUID?: Nullable<com.sphereon.cbor.CborByteString>, centralClientModeUUID?: Nullable<com.sphereon.cbor.CborByteString>, peripheralServerModeDeviceAddress?: Nullable<com.sphereon.cbor.CborByteString>);
        get peripheralServerMode(): com.sphereon.cbor.CborBool;
        get centralClientMode(): com.sphereon.cbor.CborBool;
        get peripheralServerModeUUID(): Nullable<com.sphereon.cbor.CborByteString>;
        get centralClientModeUUID(): Nullable<com.sphereon.cbor.CborByteString>;
        get peripheralServerModeDeviceAddress(): Nullable<com.sphereon.cbor.CborByteString>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsCbor>;
        toJson(): com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsJson;
        copy(peripheralServerMode?: com.sphereon.cbor.CborBool, centralClientMode?: com.sphereon.cbor.CborBool, peripheralServerModeUUID?: Nullable<com.sphereon.cbor.CborByteString>, centralClientModeUUID?: Nullable<com.sphereon.cbor.CborByteString>, peripheralServerModeDeviceAddress?: Nullable<com.sphereon.cbor.CborByteString>): com.sphereon.mdoc.tx.device.BleOptionsCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            get PERIPHERAL_SERVER_MODE(): com.sphereon.cbor.NumberLabel;
            get CENTRAL_CLIENT_MODE(): com.sphereon.cbor.NumberLabel;
            get PERIPHERAL_SERVER_MODE_UUID(): com.sphereon.cbor.NumberLabel;
            get CENTRAL_CLIENT_MODE_UUID(): com.sphereon.cbor.NumberLabel;
            get PERIPHERAL_SERVER_MODE_DEVICE_ADDRESS(): com.sphereon.cbor.NumberLabel;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.tx.device.BleOptionsCbor;
            cborDecode(encodedBleOptions: Int8Array): com.sphereon.mdoc.tx.device.BleOptionsCbor;
        };
    }
    class NfcOptionsJson extends com.sphereon.json.JsonView {
        constructor(maxCommandDataFieldLength: com.sphereon.kmp.LongKMP, maxResponseDataFieldLength: com.sphereon.kmp.LongKMP);
        get maxCommandDataFieldLength(): com.sphereon.kmp.LongKMP;
        get maxResponseDataFieldLength(): com.sphereon.kmp.LongKMP;
        static newInstance(maxCommandDataFieldLength: number, maxResponseDataFieldLength: number): com.sphereon.mdoc.tx.device.NfcOptionsJson;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.tx.device.NfcOptionsCbor;
        copy(maxCommandDataFieldLength?: com.sphereon.kmp.LongKMP, maxResponseDataFieldLength?: com.sphereon.kmp.LongKMP): com.sphereon.mdoc.tx.device.NfcOptionsJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
    class NfcOptionsCbor extends com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsCbor {
        constructor(maxCommandDataFieldLength: com.sphereon.cbor.CborUInt, maxResponseDataFieldLength: com.sphereon.cbor.CborUInt);
        get maxCommandDataFieldLength(): com.sphereon.cbor.CborUInt;
        get maxResponseDataFieldLength(): com.sphereon.cbor.CborUInt;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsCbor>;
        toJson(): com.sphereon.mdoc.tx.device.DeviceRetrievalOptionsJson;
        copy(maxCommandDataFieldLength?: com.sphereon.cbor.CborUInt, maxResponseDataFieldLength?: com.sphereon.cbor.CborUInt): com.sphereon.mdoc.tx.device.NfcOptionsCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            get MAX_COMMAND_DATA_FIELD_LENGTH(): com.sphereon.cbor.NumberLabel;
            get MAX_RESPONSE_DATA_FIELD_LENGTH(): com.sphereon.cbor.NumberLabel;
            fromSimple(nfcOptions: com.sphereon.mdoc.tx.device.NfcOptionsJson): com.sphereon.mdoc.tx.device.NfcOptionsCbor;
            fromCborItem(m: com.sphereon.cbor.CborMap<com.sphereon.cbor.NumberLabel, com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.tx.device.NfcOptionsCbor;
            fromCbor(encodedNfcOptions: Int8Array): com.sphereon.mdoc.tx.device.NfcOptionsCbor;
        };
    }
}
export declare namespace com.sphereon.mdoc.tx.device {
    class ReaderAuthenticationJson extends com.sphereon.json.JsonView {
        constructor(sessionTranscript: com.sphereon.mdoc.tx.device.SessionTranscriptJson, itemsRequest: com.sphereon.mdoc.data.device.DeviceItemsRequestJson);
        get sessionTranscript(): com.sphereon.mdoc.tx.device.SessionTranscriptJson;
        get itemsRequest(): com.sphereon.mdoc.data.device.DeviceItemsRequestJson;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor;
        copy(sessionTranscript?: com.sphereon.mdoc.tx.device.SessionTranscriptJson, itemsRequest?: com.sphereon.mdoc.data.device.DeviceItemsRequestJson): com.sphereon.mdoc.tx.device.ReaderAuthenticationJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
    class ReaderAuthenticationCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor, com.sphereon.mdoc.tx.device.ReaderAuthenticationJson, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(sessionTranscript: com.sphereon.mdoc.tx.device.SessionTranscriptCbor, itemsRequest: com.sphereon.mdoc.data.device.DeviceItemsRequestCbor);
        get sessionTranscript(): com.sphereon.mdoc.tx.device.SessionTranscriptCbor;
        get itemsRequest(): com.sphereon.mdoc.data.device.DeviceItemsRequestCbor;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor>;
        toJson(): com.sphereon.mdoc.tx.device.ReaderAuthenticationJson;
        copy(sessionTranscript?: com.sphereon.mdoc.tx.device.SessionTranscriptCbor, itemsRequest?: com.sphereon.mdoc.data.device.DeviceItemsRequestCbor): com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            get READER_AUTHENTICATION(): com.sphereon.cbor.CborString;
            fromCborItem(a: com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor;
            cborDecode(data: Int8Array): com.sphereon.mdoc.tx.device.ReaderAuthenticationCbor;
        };
    }
    class SessionTranscriptJson extends com.sphereon.json.JsonView {
        constructor(deviceEngagement: Nullable<com.sphereon.mdoc.tx.device.DeviceEngagementJson> | undefined, eReaderKey: Nullable<com.sphereon.crypto.cose.CoseKeyJson> | undefined, handover: com.sphereon.mdoc.tx.device.HandoverJson<any /*UnknownType **/>);
        get deviceEngagement(): Nullable<com.sphereon.mdoc.tx.device.DeviceEngagementJson>;
        get eReaderKey(): Nullable<com.sphereon.crypto.cose.CoseKeyJson>;
        get handover(): com.sphereon.mdoc.tx.device.HandoverJson<any /*UnknownType **/>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.tx.device.SessionTranscriptCbor;
        copy(deviceEngagement?: Nullable<com.sphereon.mdoc.tx.device.DeviceEngagementJson>, eReaderKey?: Nullable<com.sphereon.crypto.cose.CoseKeyJson>, handover?: com.sphereon.mdoc.tx.device.HandoverJson<any /*UnknownType **/>): com.sphereon.mdoc.tx.device.SessionTranscriptJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
    class SessionTranscriptCbor extends com.sphereon.cbor.CborView<com.sphereon.mdoc.tx.device.SessionTranscriptCbor, com.sphereon.mdoc.tx.device.SessionTranscriptJson, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        constructor(deviceEngagement: Nullable<com.sphereon.mdoc.tx.device.DeviceEngagementCbor> | undefined, eReaderKey: Nullable<com.sphereon.crypto.cose.CoseKeyCbor> | undefined, handover: com.sphereon.mdoc.tx.device.HandoverCbor<any /*UnknownType **/, any /*UnknownType **/>);
        get deviceEngagement(): Nullable<com.sphereon.mdoc.tx.device.DeviceEngagementCbor>;
        get eReaderKey(): Nullable<com.sphereon.crypto.cose.CoseKeyCbor>;
        get handover(): com.sphereon.mdoc.tx.device.HandoverCbor<any /*UnknownType **/, any /*UnknownType **/>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.tx.device.SessionTranscriptCbor>;
        toJson(): com.sphereon.mdoc.tx.device.SessionTranscriptJson;
        copy(deviceEngagement?: Nullable<com.sphereon.mdoc.tx.device.DeviceEngagementCbor>, eReaderKey?: Nullable<com.sphereon.crypto.cose.CoseKeyCbor>, handover?: com.sphereon.mdoc.tx.device.HandoverCbor<any /*UnknownType **/, any /*UnknownType **/>): com.sphereon.mdoc.tx.device.SessionTranscriptCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            get DEVICE_ENGAGEMENT(): number;
            get ENGAGEMENT_READER_KEY(): number;
            get HANDOVER(): number;
            fromCborItem(a: com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.tx.device.SessionTranscriptCbor;
            fromOid4vpHandover(handover: com.sphereon.mdoc.tx.device.OID4VPHandoverCbor): com.sphereon.mdoc.tx.device.SessionTranscriptCbor;
            fromOid4vpClientIdAndResponseUri(clientId: string, responseUri: string, mdocNonce: string | undefined, authorizationRequestNonce: string): com.sphereon.mdoc.tx.device.SessionTranscriptCbor;
            cborDecode(data: Int8Array): com.sphereon.mdoc.tx.device.SessionTranscriptCbor;
        };
    }
    abstract class HandoverJson<CborType extends com.sphereon.mdoc.tx.device.HandoverCbor<any /*UnknownType **/, any /*UnknownType **/>> extends com.sphereon.json.JsonView {
        protected constructor();
        abstract toJsonString(): string;
    }
    abstract class HandoverCbor<CborType extends any, JsonType> extends com.sphereon.cbor.CborView<CborType, com.sphereon.json.JsonView, com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>> {
        protected constructor();
    }
    class QrHandoverJson extends com.sphereon.mdoc.tx.device.HandoverJson<com.sphereon.mdoc.tx.device.QrHandoverCbor> {
        constructor();
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.tx.device.QrHandoverCbor;
    }
    class QrHandoverCbor extends com.sphereon.mdoc.tx.device.HandoverCbor<com.sphereon.mdoc.tx.device.QrHandoverCbor, com.sphereon.mdoc.tx.device.QrHandoverJson> {
        constructor();
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.tx.device.QrHandoverCbor>;
        toJson(): com.sphereon.mdoc.tx.device.QrHandoverJson;
    }
    class NfcHandoverJson extends com.sphereon.mdoc.tx.device.HandoverJson<com.sphereon.mdoc.tx.device.NfcHandoverCbor> {
        constructor(handoverSelectMessage: Nullable<com.sphereon.cbor.CborByteString>);
        get handoverSelectMessage(): Nullable<com.sphereon.cbor.CborByteString>;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.tx.device.NfcHandoverCbor;
        copy(handoverSelectMessage?: Nullable<com.sphereon.cbor.CborByteString>): com.sphereon.mdoc.tx.device.NfcHandoverJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
    }
    class NfcHandoverCbor extends com.sphereon.mdoc.tx.device.HandoverCbor<com.sphereon.mdoc.tx.device.NfcHandoverCbor, com.sphereon.mdoc.tx.device.NfcHandoverJson> {
        constructor(handoverSelectMessage: com.sphereon.cbor.CborByteString, handoverRequestMessage: Nullable<com.sphereon.cbor.CborByteString>);
        get handoverSelectMessage(): com.sphereon.cbor.CborByteString;
        get handoverRequestMessage(): Nullable<com.sphereon.cbor.CborByteString>;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.tx.device.NfcHandoverCbor>;
        toJson(): com.sphereon.mdoc.tx.device.NfcHandoverJson;
        copy(handoverSelectMessage?: com.sphereon.cbor.CborByteString, handoverRequestMessage?: Nullable<com.sphereon.cbor.CborByteString>): com.sphereon.mdoc.tx.device.NfcHandoverCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            get HANDOVER_SELECT_MESSAGE(): number;
            get HANDOVER_REQUEST_MESSAGE(): number;
            fromCborItem(a: com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.tx.device.NfcHandoverCbor;
            cborDecode(data: Int8Array): com.sphereon.mdoc.tx.device.NfcHandoverCbor;
        };
    }
    class OID4VPHandoverJson extends com.sphereon.mdoc.tx.device.HandoverJson<com.sphereon.mdoc.tx.device.OID4VPHandoverCbor> {
        constructor(clientIdHash: string, responseUriHash: string, nonce: string);
        get clientIdHash(): string;
        get responseUriHash(): string;
        get nonce(): string;
        toJsonString(): string;
        toCbor(): com.sphereon.mdoc.tx.device.OID4VPHandoverCbor;
        copy(clientIdHash?: string, responseUriHash?: string, nonce?: string): com.sphereon.mdoc.tx.device.OID4VPHandoverJson;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            fromClientIdAndResponseUri(clientId: string, responseUri: string, mdocNonce: string | undefined, authorizationRequestNonce: string): com.sphereon.mdoc.tx.device.OID4VPHandoverJson;
        };
    }
    class OID4VPHandoverCbor extends com.sphereon.mdoc.tx.device.HandoverCbor<com.sphereon.mdoc.tx.device.OID4VPHandoverCbor, com.sphereon.mdoc.tx.device.OID4VPHandoverJson> {
        constructor(clientIdHash: com.sphereon.cbor.CborByteString, responseUriHash: com.sphereon.cbor.CborByteString, nonce: com.sphereon.cbor.CborString);
        get clientIdHash(): com.sphereon.cbor.CborByteString;
        get responseUriHash(): com.sphereon.cbor.CborByteString;
        get nonce(): com.sphereon.cbor.CborString;
        cborBuilder(): com.sphereon.cbor.CborBuilder<com.sphereon.mdoc.tx.device.OID4VPHandoverCbor>;
        toJson(): com.sphereon.mdoc.tx.device.OID4VPHandoverJson;
        copy(clientIdHash?: com.sphereon.cbor.CborByteString, responseUriHash?: com.sphereon.cbor.CborByteString, nonce?: com.sphereon.cbor.CborString): com.sphereon.mdoc.tx.device.OID4VPHandoverCbor;
        toString(): string;
        hashCode(): number;
        equals(other: Nullable<any>): boolean;
        static get Static(): {
            get CLIENT_ID_HASH(): number;
            get RESPONSE_URI_HASH(): number;
            get NONCE(): number;
            fromCborItem(a: com.sphereon.cbor.CborArray<com.sphereon.cbor.CborItem<any /*UnknownType **/>>): com.sphereon.mdoc.tx.device.OID4VPHandoverCbor;
            fromClientIdAndResponseUri(clientId: string, responseUri: string, mdocNonce: string | undefined, authorizationRequestNonce: string): com.sphereon.mdoc.tx.device.OID4VPHandoverCbor;
            cborDecode(data: Int8Array): com.sphereon.mdoc.tx.device.OID4VPHandoverCbor;
        };
    }
}
export declare namespace com.sphereon.mdoc {
    const IssuerAuthValidationJS: {
        verifyCertificateChainAsync(issuerAuth: com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>, trustedCerts: Nullable<Array<string>>): Promise<com.sphereon.crypto.IX509VerificationResult<com.sphereon.crypto.cose.ICoseKeyCbor>>;
        verifySign1Async(issuerAuth: com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>, coseCryptoService: typeof com.sphereon.crypto.CoseCryptoServiceJS | undefined, keyInfo: Nullable<com.sphereon.crypto.IKeyInfo<com.sphereon.crypto.cose.ICoseKeyCbor>>): Promise<com.sphereon.crypto.IVerifySignatureResult<com.sphereon.crypto.cose.ICoseKeyCbor>>;
        verifyDigestsAsync(issuerAuth: com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>): Promise<com.sphereon.crypto.IVerifyResult>;
        verifyDocTypeAsync(document: com.sphereon.mdoc.data.device.DocumentCbor): Promise<com.sphereon.crypto.IVerifyResult>;
        verifyValidityInfoAsync(issuerAuth: com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>, allowExpiredDocuments?: Nullable<boolean>, dateTimeUtils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>, clockSkewAllowedInSec?: number): Promise<com.sphereon.crypto.IVerifyResult>;
    };
}
export declare namespace com.sphereon.mdoc {
    const ValidationsJS: {
        fromDocumentAsync(document: com.sphereon.mdoc.data.device.DocumentCbor, keyInfo?: Nullable<com.sphereon.crypto.IKeyInfo<com.sphereon.crypto.cose.ICoseKeyCbor>>, trustedCerts?: Nullable<Array<string>>, allowExpiredDocuments?: Nullable<boolean>, dateTimeUtils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>, clockSkewAllowedInSec?: number): Promise<com.sphereon.crypto.IVerifyResults<com.sphereon.crypto.cose.ICoseKeyCbor>>;
        fromIssuerAuthAsync(issuerAuth: com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>, keyInfo?: Nullable<com.sphereon.crypto.IKeyInfo<com.sphereon.crypto.cose.ICoseKeyCbor>>, trustedCerts?: Nullable<Array<string>>, allowExpiredDocuments?: Nullable<boolean>, dateTimeUtils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>, clockSkewAllowedInSec?: number): Promise<com.sphereon.crypto.IVerifyResults<com.sphereon.crypto.cose.ICoseKeyCbor>>;
        withParamsAsync(issuerAuth?: Nullable<com.sphereon.crypto.cose.CoseSign1Cbor<com.sphereon.mdoc.data.mso.MobileSecurityObjectCbor>>, document?: Nullable<com.sphereon.mdoc.data.device.DocumentCbor>, mdocVerificationTypes?: kotlin.collections.KtSet<com.sphereon.mdoc.data.MdocVerification>, keyInfo?: Nullable<com.sphereon.crypto.IKeyInfo<com.sphereon.crypto.cose.ICoseKeyCbor>>, trustedCerts?: Nullable<Array<string>>, allowExpiredDocuments?: Nullable<boolean>, dateTimeUtils?: com.sphereon.kmp.DateTimeUtils, timeZoneId?: Nullable<string>, clockSkewAllowedInSec?: number): Promise<com.sphereon.crypto.IVerifyResults<com.sphereon.crypto.cose.ICoseKeyCbor>>;
    };
}
export declare namespace com.sphereon.mdoc.oid4vp {
    interface IOid4VPFormat {
        readonly mso_mdoc: com.sphereon.mdoc.oid4vp.IOid4VPSupportedAlgorithm;
    }
    interface IOid4VPSupportedAlgorithm {
        readonly alg: Array<string>;
    }
    interface IOid4VPPresentationDefinition {
        readonly id: string;
        readonly input_descriptors: Array<com.sphereon.mdoc.oid4vp.IOid4VPInputDescriptor>;
    }
    interface IOid4VPInputDescriptor {
        readonly id: string;
        readonly format: com.sphereon.mdoc.oid4vp.IOid4VPFormat;
        readonly constraints: com.sphereon.mdoc.oid4vp.IOid4VPConstraints;
    }
    interface IOid4VPConstraints {
        readonly limit_disclosure: string;
        readonly fields: Array<com.sphereon.mdoc.oid4vp.IOid4VPConstraintField>;
    }
    interface IOid4VPConstraintField {
        readonly path: Array<string>;
        readonly intent_to_retain: boolean;
    }
    interface IOid4VPPresentationSubmission {
        readonly definition_id: string;
        readonly id: string;
        readonly descriptor_map: Array<com.sphereon.mdoc.oid4vp.IOid4vpSubmissionDescriptor>;
    }
    interface IOid4vpSubmissionDescriptor {
        readonly id: string;
        readonly format: string;
        readonly path: string;
    }
}
export as namespace com_sphereon_sphereon_kmp_mdl_mdoc;