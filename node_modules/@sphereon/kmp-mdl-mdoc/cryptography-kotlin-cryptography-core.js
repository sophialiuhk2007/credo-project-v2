(function (factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', './kotlin-kotlin-stdlib.js'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('./kotlin-kotlin-stdlib.js'));
  else {
    if (typeof globalThis['kotlin-kotlin-stdlib'] === 'undefined') {
      throw new Error("Error loading module 'cryptography-kotlin-cryptography-core'. Its dependency 'kotlin-kotlin-stdlib' was not found. Please, check whether 'kotlin-kotlin-stdlib' is loaded prior to 'cryptography-kotlin-cryptography-core'.");
    }
    globalThis['cryptography-kotlin-cryptography-core'] = factory(typeof globalThis['cryptography-kotlin-cryptography-core'] === 'undefined' ? {} : globalThis['cryptography-kotlin-cryptography-core'], globalThis['kotlin-kotlin-stdlib']);
  }
}(function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var protoOf = kotlin_kotlin.$_$.ia;
  var initMetadataForInterface = kotlin_kotlin.$_$.l9;
  var initMetadataForClass = kotlin_kotlin.$_$.i9;
  var toString = kotlin_kotlin.$_$.ma;
  var captureStack = kotlin_kotlin.$_$.t8;
  var VOID = kotlin_kotlin.$_$.e;
  var RuntimeException_init_$Init$ = kotlin_kotlin.$_$.t1;
  var objectCreate = kotlin_kotlin.$_$.ha;
  var RuntimeException = kotlin_kotlin.$_$.ld;
  var firstOrNull = kotlin_kotlin.$_$.cb;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.m1;
  var Unit_instance = kotlin_kotlin.$_$.k4;
  var toMutableList = kotlin_kotlin.$_$.o7;
  var toList = kotlin_kotlin.$_$.k7;
  var asSequence = kotlin_kotlin.$_$.c5;
  var map = kotlin_kotlin.$_$.db;
  var initMetadataForObject = kotlin_kotlin.$_$.n9;
  var lazy = kotlin_kotlin.$_$.ie;
  var initMetadataForCompanion = kotlin_kotlin.$_$.j9;
  var KProperty1 = kotlin_kotlin.$_$.ab;
  var getPropertyCallableRef = kotlin_kotlin.$_$.f9;
  var emptyList = kotlin_kotlin.$_$.y5;
  //endregion
  //region block: pre-declaration
  initMetadataForInterface(CryptographyAlgorithm, 'CryptographyAlgorithm');
  initMetadataForClass(CryptographyAlgorithmId, 'CryptographyAlgorithmId');
  initMetadataForClass(CryptographyException, 'CryptographyException', VOID, RuntimeException);
  initMetadataForClass(CryptographyAlgorithmNotFoundException, 'CryptographyAlgorithmNotFoundException', VOID, CryptographyException);
  initMetadataForObject(Registry, 'Registry');
  initMetadataForCompanion(Companion);
  initMetadataForClass(CryptographyProvider, 'CryptographyProvider');
  initMetadataForCompanion(Companion_0, CryptographyAlgorithmId);
  initMetadataForCompanion(Companion_1, CryptographyAlgorithmId);
  initMetadataForCompanion(Companion_2, CryptographyAlgorithmId);
  initMetadataForCompanion(Companion_3, CryptographyAlgorithmId);
  initMetadataForObject(SHA1, 'SHA1', VOID, CryptographyAlgorithmId);
  initMetadataForObject(SHA256, 'SHA256', VOID, CryptographyAlgorithmId);
  initMetadataForObject(SHA384, 'SHA384', VOID, CryptographyAlgorithmId);
  initMetadataForObject(SHA512, 'SHA512', VOID, CryptographyAlgorithmId);
  initMetadataForCompanion(Companion_4, CryptographyAlgorithmId);
  initMetadataForCompanion(Companion_5, CryptographyAlgorithmId);
  initMetadataForCompanion(Companion_6, CryptographyAlgorithmId);
  initMetadataForCompanion(Companion_7, CryptographyAlgorithmId);
  //endregion
  function CryptographyAlgorithm() {
  }
  function CryptographyAlgorithmId(name) {
    this.a2q_1 = name;
  }
  function CryptographyAlgorithmNotFoundException(algorithm) {
    CryptographyException_init_$Init$('Algorithm not found: ' + toString(algorithm), this);
    captureStack(this, CryptographyAlgorithmNotFoundException);
  }
  function CryptographyException_init_$Init$(message, $this) {
    RuntimeException_init_$Init$(message, $this);
    CryptographyException.call($this);
    return $this;
  }
  function CryptographyException_init_$Create$(message) {
    var tmp = CryptographyException_init_$Init$(message, objectCreate(protoOf(CryptographyException)));
    captureStack(tmp, CryptographyException_init_$Create$);
    return tmp;
  }
  function CryptographyException() {
    captureStack(this, CryptographyException);
  }
  function CryptographyProvider$Companion$Default$delegate$lambda() {
    var tmp$ret$1;
    $l$block: {
      // Inline function 'kotlin.checkNotNull' call
      var value = firstOrNull(Registry_getInstance().c2q());
      // Inline function 'kotlin.contracts.contract' call
      if (value == null) {
        // Inline function 'dev.whyoleg.cryptography.Companion.Default$delegate.<anonymous>.<anonymous>' call
        var message = 'No providers registered. Please provide a dependency or register provider explicitly';
        throw IllegalStateException_init_$Create$(toString(message));
      } else {
        tmp$ret$1 = value;
        break $l$block;
      }
    }
    return tmp$ret$1;
  }
  function Registry() {
    Registry_instance = this;
    this.b2q_1 = toMutableList(initProviders());
  }
  protoOf(Registry).c2q = function () {
    return map(asSequence(toList(this.b2q_1)), value$factory());
  };
  protoOf(Registry).d2q = function (provider) {
    this.b2q_1.l(provider);
  };
  var Registry_instance;
  function Registry_getInstance() {
    if (Registry_instance == null)
      new Registry();
    return Registry_instance;
  }
  function Companion() {
    Companion_instance = this;
    var tmp = this;
    tmp.e2q_1 = lazy(CryptographyProvider$Companion$Default$delegate$lambda);
  }
  protoOf(Companion).f2q = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.e2q_1;
    Default$factory();
    return this_0.d2();
  };
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function CryptographyProvider() {
    Companion_getInstance();
  }
  protoOf(CryptographyProvider).h2q = function (identifier) {
    var tmp0_elvis_lhs = this.g2q(identifier);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw new CryptographyAlgorithmNotFoundException(identifier);
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  };
  function value$factory() {
    return getPropertyCallableRef('value', 1, KProperty1, function (receiver) {
      return receiver.d2();
    }, null);
  }
  function Default$factory() {
    return getPropertyCallableRef('Default', 1, KProperty1, function (receiver) {
      return receiver.f2q();
    }, null);
  }
  function Companion_0() {
    Companion_instance_0 = this;
    CryptographyAlgorithmId.call(this, 'ECDSA');
  }
  var Companion_instance_0;
  function Companion_getInstance_0() {
    if (Companion_instance_0 == null)
      new Companion_0();
    return Companion_instance_0;
  }
  function Companion_1() {
    Companion_instance_1 = this;
    CryptographyAlgorithmId.call(this, 'RSA-OAEP');
  }
  var Companion_instance_1;
  function Companion_getInstance_1() {
    if (Companion_instance_1 == null)
      new Companion_1();
    return Companion_instance_1;
  }
  function Companion_2() {
    Companion_instance_2 = this;
    CryptographyAlgorithmId.call(this, 'RSA-PSS');
  }
  var Companion_instance_2;
  function Companion_getInstance_2() {
    if (Companion_instance_2 == null)
      new Companion_2();
    return Companion_instance_2;
  }
  function Companion_3() {
    Companion_instance_3 = this;
    CryptographyAlgorithmId.call(this, 'RSA-PKCS1-V1.5');
  }
  var Companion_instance_3;
  function Companion_getInstance_3() {
    if (Companion_instance_3 == null)
      new Companion_3();
    return Companion_instance_3;
  }
  function SHA1() {
    SHA1_instance = this;
    CryptographyAlgorithmId.call(this, 'SHA-1');
  }
  var SHA1_instance;
  function SHA1_getInstance() {
    if (SHA1_instance == null)
      new SHA1();
    return SHA1_instance;
  }
  function SHA256() {
    SHA256_instance = this;
    CryptographyAlgorithmId.call(this, 'SHA-256');
  }
  var SHA256_instance;
  function SHA256_getInstance() {
    if (SHA256_instance == null)
      new SHA256();
    return SHA256_instance;
  }
  function SHA384() {
    SHA384_instance = this;
    CryptographyAlgorithmId.call(this, 'SHA-384');
  }
  var SHA384_instance;
  function SHA384_getInstance() {
    if (SHA384_instance == null)
      new SHA384();
    return SHA384_instance;
  }
  function SHA512() {
    SHA512_instance = this;
    CryptographyAlgorithmId.call(this, 'SHA-512');
  }
  var SHA512_instance;
  function SHA512_getInstance() {
    if (SHA512_instance == null)
      new SHA512();
    return SHA512_instance;
  }
  function Companion_4() {
    Companion_instance_4 = this;
    CryptographyAlgorithmId.call(this, 'AES-CBC');
  }
  var Companion_instance_4;
  function Companion_getInstance_4() {
    if (Companion_instance_4 == null)
      new Companion_4();
    return Companion_instance_4;
  }
  function Companion_5() {
    Companion_instance_5 = this;
    CryptographyAlgorithmId.call(this, 'AES-CTR');
  }
  var Companion_instance_5;
  function Companion_getInstance_5() {
    if (Companion_instance_5 == null)
      new Companion_5();
    return Companion_instance_5;
  }
  function Companion_6() {
    Companion_instance_6 = this;
    CryptographyAlgorithmId.call(this, 'AES-GCM');
  }
  var Companion_instance_6;
  function Companion_getInstance_6() {
    if (Companion_instance_6 == null)
      new Companion_6();
    return Companion_instance_6;
  }
  function Companion_7() {
    Companion_instance_7 = this;
    CryptographyAlgorithmId.call(this, 'HMAC');
  }
  var Companion_instance_7;
  function Companion_getInstance_7() {
    if (Companion_instance_7 == null)
      new Companion_7();
    return Companion_instance_7;
  }
  function initProviders() {
    return emptyList();
  }
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = CryptographyAlgorithm;
  _.$_$.b = CryptographyProvider;
  _.$_$.c = CryptographyException_init_$Create$;
  _.$_$.d = Companion_getInstance_0;
  _.$_$.e = Companion_getInstance_1;
  _.$_$.f = Companion_getInstance_3;
  _.$_$.g = Companion_getInstance_2;
  _.$_$.h = SHA1_getInstance;
  _.$_$.i = SHA256_getInstance;
  _.$_$.j = SHA384_getInstance;
  _.$_$.k = SHA512_getInstance;
  _.$_$.l = Companion_getInstance_4;
  _.$_$.m = Companion_getInstance_5;
  _.$_$.n = Companion_getInstance_6;
  _.$_$.o = Companion_getInstance_7;
  _.$_$.p = Companion_getInstance;
  _.$_$.q = Registry_getInstance;
  //endregion
  return _;
}));

//# sourceMappingURL=cryptography-kotlin-cryptography-core.js.map
