(function (factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', './kotlin-kotlin-stdlib.js'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('./kotlin-kotlin-stdlib.js'));
  else {
    if (typeof globalThis['kotlin-kotlin-stdlib'] === 'undefined') {
      throw new Error("Error loading module 'Kermit-kermit-core'. Its dependency 'kotlin-kotlin-stdlib' was not found. Please, check whether 'kotlin-kotlin-stdlib' is loaded prior to 'Kermit-kermit-core'.");
    }
    globalThis['Kermit-kermit-core'] = factory(typeof globalThis['Kermit-kermit-core'] === 'undefined' ? {} : globalThis['Kermit-kermit-core'], globalThis['kotlin-kotlin-stdlib']);
  }
}(function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var protoOf = kotlin_kotlin.$_$.ia;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.m1;
  var isInterface = kotlin_kotlin.$_$.w9;
  var Unit_instance = kotlin_kotlin.$_$.k4;
  var initMetadataForClass = kotlin_kotlin.$_$.i9;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.y;
  var charSequenceLength = kotlin_kotlin.$_$.w8;
  var initMetadataForInterface = kotlin_kotlin.$_$.l9;
  var initMetadataForObject = kotlin_kotlin.$_$.n9;
  var VOID = kotlin_kotlin.$_$.e;
  var getStringHashCode = kotlin_kotlin.$_$.g9;
  var THROW_CCE = kotlin_kotlin.$_$.md;
  var Enum = kotlin_kotlin.$_$.bd;
  var objectCreate = kotlin_kotlin.$_$.ha;
  var stackTraceToString = kotlin_kotlin.$_$.le;
  //endregion
  //region block: pre-declaration
  initMetadataForClass(BaseLogger, 'BaseLogger');
  initMetadataForClass(LogWriter, 'LogWriter');
  function formatSeverity(severity) {
    return severity.toString() + ':';
  }
  function formatTag(tag) {
    return '(' + _Tag___get_tag__impl__7z9hd6(tag) + ')';
  }
  function formatMessage(severity, tag, message) {
    var tmp;
    if (severity == null) {
      var tmp_0 = tag;
      tmp = (tmp_0 == null ? null : new Tag(tmp_0)) == null;
    } else {
      tmp = false;
    }
    if (tmp)
      return _Message___get_message__impl__3t69n4(message);
    var sb = StringBuilder_init_$Create$();
    if (!(severity == null)) {
      sb.s8(this.j2c(severity)).s8(' ');
    }
    var tmp_1;
    var tmp_2 = tag;
    if (!((tmp_2 == null ? null : new Tag(tmp_2)) == null)) {
      // Inline function 'kotlin.text.isNotEmpty' call
      var this_0 = _Tag___get_tag__impl__7z9hd6(tag);
      tmp_1 = charSequenceLength(this_0) > 0;
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      sb.s8(this.k2c(tag)).s8(' ');
    }
    sb.s8(_Message___get_message__impl__3t69n4(message));
    return sb.toString();
  }
  initMetadataForInterface(MessageStringFormatter, 'MessageStringFormatter');
  initMetadataForObject(DefaultFormatter, 'DefaultFormatter', VOID, VOID, [MessageStringFormatter]);
  initMetadataForClass(Tag, 'Tag');
  initMetadataForInterface(MutableLoggerConfig, 'MutableLoggerConfig');
  initMetadataForClass(Severity, 'Severity', VOID, Enum);
  initMetadataForClass(ConsoleWriter, 'ConsoleWriter', ConsoleWriter_init_$Create$, LogWriter);
  initMetadataForClass(JsMutableLoggerConfig, 'JsMutableLoggerConfig', VOID, VOID, [MutableLoggerConfig]);
  initMetadataForObject(ConsoleActual, 'ConsoleActual');
  //endregion
  function get_DEFAULT_MIN_SEVERITY() {
    _init_properties_BaseLogger_kt__lobnq7();
    return DEFAULT_MIN_SEVERITY;
  }
  var DEFAULT_MIN_SEVERITY;
  function BaseLogger(config) {
    this.c2c_1 = config;
  }
  protoOf(BaseLogger).d2c = function () {
    return this.c2c_1;
  };
  protoOf(BaseLogger).e2c = function () {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'co.touchlab.kermit.BaseLogger.<get-mutableConfig>.<anonymous>' call
    var it = this.d2c();
    if (!isInterface(it, MutableLoggerConfig)) {
      throw IllegalStateException_init_$Create$('Logger config is not mutable');
    }
    return it;
  };
  protoOf(BaseLogger).f2c = function (severity, tag, throwable, message) {
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = this.d2c().g2c().n();
    while (tmp0_iterator.o()) {
      var element = tmp0_iterator.p();
      // Inline function 'co.touchlab.kermit.BaseLogger.processLog.<anonymous>' call
      if (element.i2c(tag, severity)) {
        element.h2c(severity, message, tag, throwable);
      }
    }
  };
  var properties_initialized_BaseLogger_kt_e6qv19;
  function _init_properties_BaseLogger_kt__lobnq7() {
    if (!properties_initialized_BaseLogger_kt_e6qv19) {
      properties_initialized_BaseLogger_kt_e6qv19 = true;
      DEFAULT_MIN_SEVERITY = Severity_Verbose_getInstance();
    }
  }
  function LogWriter() {
  }
  protoOf(LogWriter).i2c = function (tag, severity) {
    return true;
  };
  function MessageStringFormatter() {
  }
  function DefaultFormatter() {
  }
  var DefaultFormatter_instance;
  function DefaultFormatter_getInstance() {
    return DefaultFormatter_instance;
  }
  function _Tag___init__impl__opaqzl(tag) {
    return tag;
  }
  function _Tag___get_tag__impl__7z9hd6($this) {
    return $this;
  }
  function Tag__toString_impl_tvevk7($this) {
    return 'Tag(tag=' + $this + ')';
  }
  function Tag__hashCode_impl_848yrc($this) {
    return getStringHashCode($this);
  }
  function Tag__equals_impl_6ocp5g($this, other) {
    if (!(other instanceof Tag))
      return false;
    if (!($this === (other instanceof Tag ? other.m2c_1 : THROW_CCE())))
      return false;
    return true;
  }
  function Tag(tag) {
    this.m2c_1 = tag;
  }
  protoOf(Tag).toString = function () {
    return Tag__toString_impl_tvevk7(this.m2c_1);
  };
  protoOf(Tag).hashCode = function () {
    return Tag__hashCode_impl_848yrc(this.m2c_1);
  };
  protoOf(Tag).equals = function (other) {
    return Tag__equals_impl_6ocp5g(this.m2c_1, other);
  };
  function _Message___init__impl__p3e8y6(message) {
    return message;
  }
  function _Message___get_message__impl__3t69n4($this) {
    return $this;
  }
  function MutableLoggerConfig() {
  }
  var Severity_Verbose_instance;
  var Severity_Debug_instance;
  var Severity_Info_instance;
  var Severity_Warn_instance;
  var Severity_Error_instance;
  var Severity_Assert_instance;
  var Severity_entriesInitialized;
  function Severity_initEntries() {
    if (Severity_entriesInitialized)
      return Unit_instance;
    Severity_entriesInitialized = true;
    Severity_Verbose_instance = new Severity('Verbose', 0);
    Severity_Debug_instance = new Severity('Debug', 1);
    Severity_Info_instance = new Severity('Info', 2);
    Severity_Warn_instance = new Severity('Warn', 3);
    Severity_Error_instance = new Severity('Error', 4);
    Severity_Assert_instance = new Severity('Assert', 5);
  }
  function Severity(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function Severity_Verbose_getInstance() {
    Severity_initEntries();
    return Severity_Verbose_instance;
  }
  function Severity_Debug_getInstance() {
    Severity_initEntries();
    return Severity_Debug_instance;
  }
  function Severity_Info_getInstance() {
    Severity_initEntries();
    return Severity_Info_instance;
  }
  function Severity_Warn_getInstance() {
    Severity_initEntries();
    return Severity_Warn_instance;
  }
  function Severity_Error_getInstance() {
    Severity_initEntries();
    return Severity_Error_instance;
  }
  function ConsoleWriter_init_$Init$(messageStringFormatter, $this) {
    messageStringFormatter = messageStringFormatter === VOID ? DefaultFormatter_instance : messageStringFormatter;
    ConsoleWriter.call($this, messageStringFormatter, ConsoleActual_instance);
    return $this;
  }
  function ConsoleWriter_init_$Create$(messageStringFormatter) {
    return ConsoleWriter_init_$Init$(messageStringFormatter, objectCreate(protoOf(ConsoleWriter)));
  }
  function ConsoleWriter(messageStringFormatter, console) {
    LogWriter.call(this);
    this.o2c_1 = messageStringFormatter;
    this.p2c_1 = console;
  }
  protoOf(ConsoleWriter).h2c = function (severity, message, tag, throwable) {
    var output = this.o2c_1.l2c(null, _Tag___init__impl__opaqzl(tag), _Message___init__impl__p3e8y6(message));
    if (throwable == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      output = output + (' ' + stackTraceToString(throwable));
    }
    switch (severity.v2_1) {
      case 5:
      case 4:
        this.p2c_1.q2c(output);
        break;
      case 3:
        this.p2c_1.r2c(output);
        break;
      case 2:
        this.p2c_1.s2c(output);
        break;
      case 1:
      case 0:
        this.p2c_1.t2c(output);
        break;
    }
  };
  function JsMutableLoggerConfig(logWriters) {
    this.u2c_1 = get_DEFAULT_MIN_SEVERITY();
    this.v2c_1 = logWriters;
  }
  protoOf(JsMutableLoggerConfig).n2c = function (_set____db54di) {
    this.u2c_1 = _set____db54di;
  };
  protoOf(JsMutableLoggerConfig).w2c = function () {
    return this.u2c_1;
  };
  protoOf(JsMutableLoggerConfig).g2c = function () {
    return this.v2c_1;
  };
  function mutableLoggerConfigInit(logWriters) {
    return new JsMutableLoggerConfig(logWriters);
  }
  function platformLogWriter(messageStringFormatter) {
    messageStringFormatter = messageStringFormatter === VOID ? DefaultFormatter_instance : messageStringFormatter;
    return ConsoleWriter_init_$Create$();
  }
  function ConsoleActual() {
  }
  protoOf(ConsoleActual).q2c = function (output) {
    console.error(output);
  };
  protoOf(ConsoleActual).r2c = function (output) {
    console.warn(output);
  };
  protoOf(ConsoleActual).s2c = function (output) {
    console.info(output);
  };
  protoOf(ConsoleActual).t2c = function (output) {
    console.log(output);
  };
  var ConsoleActual_instance;
  function ConsoleActual_getInstance() {
    return ConsoleActual_instance;
  }
  //region block: post-declaration
  protoOf(DefaultFormatter).j2c = formatSeverity;
  protoOf(DefaultFormatter).k2c = formatTag;
  protoOf(DefaultFormatter).l2c = formatMessage;
  //endregion
  //region block: init
  DefaultFormatter_instance = new DefaultFormatter();
  ConsoleActual_instance = new ConsoleActual();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = BaseLogger;
  _.$_$.b = mutableLoggerConfigInit;
  _.$_$.c = platformLogWriter;
  _.$_$.d = Severity_Debug_getInstance;
  _.$_$.e = Severity_Error_getInstance;
  _.$_$.f = Severity_Info_getInstance;
  _.$_$.g = Severity_Warn_getInstance;
  //endregion
  return _;
}));

//# sourceMappingURL=Kermit-kermit-core.js.map
