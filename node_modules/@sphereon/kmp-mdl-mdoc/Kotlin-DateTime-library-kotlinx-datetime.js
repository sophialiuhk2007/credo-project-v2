(function (factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', '@js-joda/core', './kotlin-kotlin-stdlib.js', './kotlinx-serialization-kotlinx-serialization-core.js'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('@js-joda/core'), require('./kotlin-kotlin-stdlib.js'), require('./kotlinx-serialization-kotlinx-serialization-core.js'));
  else {
    if (typeof globalThis['@js-joda/core'] === 'undefined') {
      throw new Error("Error loading module 'Kotlin-DateTime-library-kotlinx-datetime'. Its dependency '@js-joda/core' was not found. Please, check whether '@js-joda/core' is loaded prior to 'Kotlin-DateTime-library-kotlinx-datetime'.");
    }
    if (typeof globalThis['kotlin-kotlin-stdlib'] === 'undefined') {
      throw new Error("Error loading module 'Kotlin-DateTime-library-kotlinx-datetime'. Its dependency 'kotlin-kotlin-stdlib' was not found. Please, check whether 'kotlin-kotlin-stdlib' is loaded prior to 'Kotlin-DateTime-library-kotlinx-datetime'.");
    }
    if (typeof globalThis['kotlinx-serialization-kotlinx-serialization-core'] === 'undefined') {
      throw new Error("Error loading module 'Kotlin-DateTime-library-kotlinx-datetime'. Its dependency 'kotlinx-serialization-kotlinx-serialization-core' was not found. Please, check whether 'kotlinx-serialization-kotlinx-serialization-core' is loaded prior to 'Kotlin-DateTime-library-kotlinx-datetime'.");
    }
    globalThis['Kotlin-DateTime-library-kotlinx-datetime'] = factory(typeof globalThis['Kotlin-DateTime-library-kotlinx-datetime'] === 'undefined' ? {} : globalThis['Kotlin-DateTime-library-kotlinx-datetime'], globalThis['@js-joda/core'], globalThis['kotlin-kotlin-stdlib'], globalThis['kotlinx-serialization-kotlinx-serialization-core']);
  }
}(function (_, $module$_js_joda_core_gcv2k, kotlin_kotlin, kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var Instant = $module$_js_joda_core_gcv2k.Instant;
  var Clock = $module$_js_joda_core_gcv2k.Clock;
  var LocalDate = $module$_js_joda_core_gcv2k.LocalDate;
  var LocalDateTime = $module$_js_joda_core_gcv2k.LocalDateTime;
  var LocalTime = $module$_js_joda_core_gcv2k.LocalTime;
  var ZoneOffset = $module$_js_joda_core_gcv2k.ZoneOffset;
  var ZoneId = $module$_js_joda_core_gcv2k.ZoneId;
  var ChronoField = $module$_js_joda_core_gcv2k.ChronoField;
  var DateTimeFormatterBuilder = $module$_js_joda_core_gcv2k.DateTimeFormatterBuilder;
  var ResolverStyle = $module$_js_joda_core_gcv2k.ResolverStyle;
  var protoOf = kotlin_kotlin.$_$.ia;
  var initMetadataForObject = kotlin_kotlin.$_$.n9;
  var toString = kotlin_kotlin.$_$.ma;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.j1;
  var IllegalArgumentException_init_$Init$ = kotlin_kotlin.$_$.g1;
  var objectCreate = kotlin_kotlin.$_$.ha;
  var captureStack = kotlin_kotlin.$_$.t8;
  var IllegalArgumentException_init_$Init$_0 = kotlin_kotlin.$_$.i1;
  var IllegalArgumentException_init_$Init$_1 = kotlin_kotlin.$_$.e1;
  var IllegalArgumentException_init_$Init$_2 = kotlin_kotlin.$_$.k1;
  var IllegalArgumentException = kotlin_kotlin.$_$.ed;
  var initMetadataForClass = kotlin_kotlin.$_$.i9;
  var RuntimeException_init_$Init$ = kotlin_kotlin.$_$.s1;
  var RuntimeException_init_$Init$_0 = kotlin_kotlin.$_$.r1;
  var RuntimeException = kotlin_kotlin.$_$.ld;
  var VOID = kotlin_kotlin.$_$.e;
  var getStringHashCode = kotlin_kotlin.$_$.g9;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.y1;
  var Unit_instance = kotlin_kotlin.$_$.k4;
  var initMetadataForCompanion = kotlin_kotlin.$_$.j9;
  var ensureNotNull = kotlin_kotlin.$_$.de;
  var toLong = kotlin_kotlin.$_$.ka;
  var Long = kotlin_kotlin.$_$.gd;
  var ArithmeticException = kotlin_kotlin.$_$.vc;
  var THROW_CCE = kotlin_kotlin.$_$.md;
  var KMutableProperty1 = kotlin_kotlin.$_$.ya;
  var getPropertyCallableRef = kotlin_kotlin.$_$.f9;
  var KMutableProperty0 = kotlin_kotlin.$_$.xa;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.y;
  var Enum = kotlin_kotlin.$_$.bd;
  var initMetadataForInterface = kotlin_kotlin.$_$.l9;
  var toString_0 = kotlin_kotlin.$_$.b2;
  var IllegalStateException_init_$Create$ = kotlin_kotlin.$_$.m1;
  var isInterface = kotlin_kotlin.$_$.w9;
  var isArray = kotlin_kotlin.$_$.o9;
  var ArrayList_init_$Create$ = kotlin_kotlin.$_$.h;
  var hashCode = kotlin_kotlin.$_$.h9;
  var listOf = kotlin_kotlin.$_$.r6;
  var get_indices = kotlin_kotlin.$_$.j6;
  var charSequenceLength = kotlin_kotlin.$_$.w8;
  var joinToString = kotlin_kotlin.$_$.k6;
  var equals = kotlin_kotlin.$_$.b9;
  var getBooleanHashCode = kotlin_kotlin.$_$.e9;
  var KProperty0 = kotlin_kotlin.$_$.za;
  var lazy = kotlin_kotlin.$_$.ie;
  var padStart = kotlin_kotlin.$_$.tb;
  var abs = kotlin_kotlin.$_$.na;
  var ArrayList_init_$Create$_0 = kotlin_kotlin.$_$.i;
  var getOrNull = kotlin_kotlin.$_$.e6;
  var listOf_0 = kotlin_kotlin.$_$.q6;
  var emptyList = kotlin_kotlin.$_$.y5;
  var toString_1 = kotlin_kotlin.$_$.pe;
  var charSequenceGet = kotlin_kotlin.$_$.v8;
  var isDigit = kotlin_kotlin.$_$.pb;
  var get_lastIndex = kotlin_kotlin.$_$.rb;
  var toSet = kotlin_kotlin.$_$.r7;
  var collectionSizeOrDefault = kotlin_kotlin.$_$.f5;
  var distinct = kotlin_kotlin.$_$.w5;
  var to = kotlin_kotlin.$_$.qe;
  var single = kotlin_kotlin.$_$.e7;
  var Collection = kotlin_kotlin.$_$.m4;
  var Char = kotlin_kotlin.$_$.wc;
  var numberRangeToNumber = kotlin_kotlin.$_$.ca;
  var toIntOrNull = kotlin_kotlin.$_$.kc;
  var mutableListOf = kotlin_kotlin.$_$.u6;
  var removeLastOrNull = kotlin_kotlin.$_$.a7;
  var sortWith = kotlin_kotlin.$_$.g7;
  var FunctionAdapter = kotlin_kotlin.$_$.p8;
  var Comparator = kotlin_kotlin.$_$.yc;
  var compareValues = kotlin_kotlin.$_$.u7;
  var Exception = kotlin_kotlin.$_$.dd;
  var Exception_init_$Init$ = kotlin_kotlin.$_$.d1;
  var StringBuilder_init_$Create$_0 = kotlin_kotlin.$_$.x;
  var joinTo = kotlin_kotlin.$_$.l6;
  var plus = kotlin_kotlin.$_$.y6;
  var toMutableList = kotlin_kotlin.$_$.o7;
  var addAll = kotlin_kotlin.$_$.y4;
  var firstOrNull = kotlin_kotlin.$_$.d6;
  var drop = kotlin_kotlin.$_$.x5;
  var repeat = kotlin_kotlin.$_$.wb;
  var sortedWith = kotlin_kotlin.$_$.h7;
  var charSequenceSubSequence = kotlin_kotlin.$_$.x8;
  var binarySearch = kotlin_kotlin.$_$.d5;
  var startsWith = kotlin_kotlin.$_$.bc;
  var checkCountOverflow = kotlin_kotlin.$_$.e5;
  var compareTo = kotlin_kotlin.$_$.y8;
  var removePrefix = kotlin_kotlin.$_$.ub;
  var UnsupportedOperationException_init_$Create$ = kotlin_kotlin.$_$.w1;
  var Comparable = kotlin_kotlin.$_$.xc;
  var STRING_getInstance = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.g;
  var PrimitiveSerialDescriptor = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.a1;
  var KSerializer = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.j2;
  var SerializationException_init_$Create$ = kotlin_org_jetbrains_kotlinx_kotlinx_serialization_core.$_$.c;
  var enumEntries = kotlin_kotlin.$_$.n8;
  var numberToLong = kotlin_kotlin.$_$.ga;
  var IllegalArgumentException_init_$Create$_0 = kotlin_kotlin.$_$.f1;
  var numberToInt = kotlin_kotlin.$_$.fa;
  var ArithmeticException_init_$Create$ = kotlin_kotlin.$_$.z;
  //endregion
  //region block: pre-declaration
  initMetadataForObject(System, 'System');
  initMetadataForClass(DateTimeFormatException, 'DateTimeFormatException', DateTimeFormatException_init_$Create$, IllegalArgumentException);
  initMetadataForClass(DateTimeArithmeticException, 'DateTimeArithmeticException', DateTimeArithmeticException_init_$Create$, RuntimeException);
  initMetadataForClass(IllegalTimeZoneException, 'IllegalTimeZoneException', IllegalTimeZoneException_init_$Create$, IllegalArgumentException);
  function set_fractionOfSecond(value) {
    this.h18(value == null ? null : value.v1e(9));
  }
  function get_fractionOfSecond() {
    var tmp0_safe_receiver = this.i18();
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.datetime.format.TimeFieldContainer.<get-fractionOfSecond>.<anonymous>' call
      tmp = new DecimalFraction(tmp0_safe_receiver, 9);
    }
    return tmp;
  }
  initMetadataForInterface(TimeFieldContainer, 'TimeFieldContainer');
  initMetadataForInterface(UtcOffsetFieldContainer, 'UtcOffsetFieldContainer');
  initMetadataForClass(DateTimeComponentsContents, 'DateTimeComponentsContents', VOID, VOID, [TimeFieldContainer, UtcOffsetFieldContainer]);
  initMetadataForCompanion(Companion);
  initMetadataForObject(Formats, 'Formats');
  initMetadataForClass(DateTimeComponents, 'DateTimeComponents');
  function appendAlternativeParsingImpl(otherFormats, mainFormat) {
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(otherFormats.length);
    var inductionVariable = 0;
    var last = otherFormats.length;
    while (inductionVariable < last) {
      var item = otherFormats[inductionVariable];
      inductionVariable = inductionVariable + 1 | 0;
      // Inline function 'kotlinx.datetime.format.AbstractDateTimeFormatBuilder.appendAlternativeParsingImpl.<anonymous>' call
      // Inline function 'kotlin.also' call
      var this_0 = this.z1a();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.datetime.format.AbstractDateTimeFormatBuilder.appendAlternativeParsingImpl.<anonymous>.<anonymous>' call
      item(this_0);
      var tmp$ret$1 = this_0.u1a().q19();
      destination.l(tmp$ret$1);
    }
    var others = destination;
    // Inline function 'kotlin.also' call
    var this_1 = this.z1a();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.format.AbstractDateTimeFormatBuilder.appendAlternativeParsingImpl.<anonymous>' call
    mainFormat(this_1);
    var main = this_1.u1a().q19();
    this.u1a().x1a(new AlternativesParsingFormatStructure(main, others));
  }
  function appendOptionalImpl(onZero, format) {
    var tmp = this.u1a();
    // Inline function 'kotlin.also' call
    var this_0 = this.z1a();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.format.AbstractDateTimeFormatBuilder.appendOptionalImpl.<anonymous>' call
    format(this_0);
    tmp.x1a(new OptionalFormatStructure(onZero, this_0.u1a().q19()));
  }
  function chars(value) {
    return this.u1a().x1a(new ConstantFormatStructure(value));
  }
  function build() {
    return new CachedFormatStructure(this.u1a().q19().g1c_1);
  }
  initMetadataForInterface(AbstractDateTimeFormatBuilder, 'AbstractDateTimeFormatBuilder');
  function year$default(padding, $super) {
    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;
    var tmp;
    if ($super === VOID) {
      this.e1b(padding);
      tmp = Unit_instance;
    } else {
      tmp = $super.e1b.call(this, padding);
    }
    return tmp;
  }
  function monthNumber$default(padding, $super) {
    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;
    var tmp;
    if ($super === VOID) {
      this.f1b(padding);
      tmp = Unit_instance;
    } else {
      tmp = $super.f1b.call(this, padding);
    }
    return tmp;
  }
  function dayOfMonth$default(padding, $super) {
    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;
    var tmp;
    if ($super === VOID) {
      this.f19(padding);
      tmp = Unit_instance;
    } else {
      tmp = $super.f19.call(this, padding);
    }
    return tmp;
  }
  initMetadataForInterface(WithDate, 'WithDate');
  function year(padding) {
    return this.c1b(new BasicFormatStructure(new YearDirective(padding)));
  }
  function monthNumber(padding) {
    return this.c1b(new BasicFormatStructure(new MonthDirective(padding)));
  }
  function monthName(names) {
    return this.c1b(new BasicFormatStructure(new MonthNameDirective(names)));
  }
  function dayOfMonth(padding) {
    return this.c1b(new BasicFormatStructure(new DayDirective(padding)));
  }
  function dayOfWeek(names) {
    return this.c1b(new BasicFormatStructure(new DayOfWeekDirective(names)));
  }
  function date(format) {
    var tmp;
    if (format instanceof LocalDateFormat) {
      this.c1b(format.n1c_1);
      tmp = Unit_instance;
    }
    return tmp;
  }
  initMetadataForInterface(AbstractWithDateBuilder, 'AbstractWithDateBuilder', VOID, VOID, [WithDate]);
  function hour$default(padding, $super) {
    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;
    var tmp;
    if ($super === VOID) {
      this.i1b(padding);
      tmp = Unit_instance;
    } else {
      tmp = $super.i1b.call(this, padding);
    }
    return tmp;
  }
  function minute$default(padding, $super) {
    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;
    var tmp;
    if ($super === VOID) {
      this.j1b(padding);
      tmp = Unit_instance;
    } else {
      tmp = $super.j1b.call(this, padding);
    }
    return tmp;
  }
  function second$default(padding, $super) {
    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;
    var tmp;
    if ($super === VOID) {
      this.k1b(padding);
      tmp = Unit_instance;
    } else {
      tmp = $super.k1b.call(this, padding);
    }
    return tmp;
  }
  initMetadataForInterface(WithTime, 'WithTime');
  function hour(padding) {
    return this.d1b(new BasicFormatStructure(new HourDirective(padding)));
  }
  function minute(padding) {
    return this.d1b(new BasicFormatStructure(new MinuteDirective(padding)));
  }
  function second(padding) {
    return this.d1b(new BasicFormatStructure(new SecondDirective(padding)));
  }
  function secondFraction(minLength, maxLength) {
    return this.d1b(new BasicFormatStructure(new FractionalSecondDirective(minLength, maxLength)));
  }
  function time(format) {
    var tmp;
    if (format instanceof LocalTimeFormat) {
      this.d1b(format.y1e_1);
      tmp = Unit_instance;
    }
    return tmp;
  }
  initMetadataForInterface(AbstractWithTimeBuilder, 'AbstractWithTimeBuilder', VOID, VOID, [WithTime]);
  function addFormatStructureForDate(structure) {
    this.v1a(structure);
  }
  function addFormatStructureForTime(structure) {
    this.v1a(structure);
  }
  initMetadataForInterface(AbstractWithDateTimeBuilder, 'AbstractWithDateTimeBuilder', VOID, VOID, [AbstractWithDateBuilder, AbstractWithTimeBuilder, WithTime, WithDate]);
  function offsetHours$default(padding, $super) {
    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;
    var tmp;
    if ($super === VOID) {
      this.m1b(padding);
      tmp = Unit_instance;
    } else {
      tmp = $super.m1b.call(this, padding);
    }
    return tmp;
  }
  function offsetMinutesOfHour$default(padding, $super) {
    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;
    var tmp;
    if ($super === VOID) {
      this.n1b(padding);
      tmp = Unit_instance;
    } else {
      tmp = $super.n1b.call(this, padding);
    }
    return tmp;
  }
  function offsetSecondsOfMinute$default(padding, $super) {
    padding = padding === VOID ? Padding_ZERO_getInstance() : padding;
    var tmp;
    if ($super === VOID) {
      this.p1b(padding);
      tmp = Unit_instance;
    } else {
      tmp = $super.p1b.call(this, padding);
    }
    return tmp;
  }
  initMetadataForInterface(WithUtcOffset, 'WithUtcOffset');
  function offsetHours(padding) {
    return this.y1a(new SignedFormatStructure(new BasicFormatStructure(new UtcOffsetWholeHoursDirective(padding)), true));
  }
  function offsetMinutesOfHour(padding) {
    return this.y1a(new BasicFormatStructure(new UtcOffsetMinuteOfHourDirective(padding)));
  }
  function offsetSecondsOfMinute(padding) {
    return this.y1a(new BasicFormatStructure(new UtcOffsetSecondOfMinuteDirective(padding)));
  }
  function offset(format) {
    var tmp;
    if (format instanceof UtcOffsetFormat) {
      this.y1a(format.u1g_1);
      tmp = Unit_instance;
    }
    return tmp;
  }
  initMetadataForInterface(AbstractWithOffsetBuilder, 'AbstractWithOffsetBuilder', VOID, VOID, [WithUtcOffset]);
  initMetadataForClass(Builder, 'Builder', VOID, VOID, [AbstractDateTimeFormatBuilder, AbstractWithDateTimeBuilder, AbstractWithOffsetBuilder, WithTime, WithUtcOffset, WithDate]);
  initMetadataForClass(AbstractDateTimeFormat, 'AbstractDateTimeFormat');
  initMetadataForClass(DateTimeComponentsFormat, 'DateTimeComponentsFormat', VOID, AbstractDateTimeFormat);
  initMetadataForClass(TwoDigitNumber, 'TwoDigitNumber');
  initMetadataForClass(Padding, 'Padding', VOID, Enum);
  initMetadataForClass(IncompleteLocalDate, 'IncompleteLocalDate', IncompleteLocalDate);
  initMetadataForCompanion(Companion_0);
  initMetadataForClass(MonthNames, 'MonthNames');
  initMetadataForCompanion(Companion_1);
  initMetadataForClass(DayOfWeekNames, 'DayOfWeekNames');
  initMetadataForCompanion(Companion_2);
  initMetadataForClass(Builder_0, 'Builder', VOID, VOID, [AbstractDateTimeFormatBuilder, AbstractWithDateBuilder]);
  initMetadataForClass(LocalDateFormat, 'LocalDateFormat', VOID, AbstractDateTimeFormat);
  initMetadataForClass(SignedIntFieldFormatDirective, 'SignedIntFieldFormatDirective');
  initMetadataForClass(YearDirective, 'YearDirective', VOID, SignedIntFieldFormatDirective);
  initMetadataForClass(UnsignedIntFieldFormatDirective, 'UnsignedIntFieldFormatDirective');
  initMetadataForClass(MonthDirective, 'MonthDirective', VOID, UnsignedIntFieldFormatDirective);
  initMetadataForClass(NamedUnsignedIntFieldFormatDirective, 'NamedUnsignedIntFieldFormatDirective');
  initMetadataForClass(MonthNameDirective, 'MonthNameDirective', VOID, NamedUnsignedIntFieldFormatDirective);
  initMetadataForClass(DayDirective, 'DayDirective', VOID, UnsignedIntFieldFormatDirective);
  initMetadataForClass(DayOfWeekDirective, 'DayOfWeekDirective', VOID, NamedUnsignedIntFieldFormatDirective);
  initMetadataForObject(DateFields, 'DateFields');
  initMetadataForCompanion(Companion_3);
  initMetadataForClass(Builder_1, 'Builder', VOID, VOID, [AbstractDateTimeFormatBuilder, AbstractWithDateTimeBuilder]);
  initMetadataForClass(LocalDateTimeFormat, 'LocalDateTimeFormat', VOID, AbstractDateTimeFormat);
  initMetadataForClass(IncompleteLocalDateTime, 'IncompleteLocalDateTime', IncompleteLocalDateTime, VOID, [TimeFieldContainer]);
  initMetadataForClass(IncompleteLocalTime, 'IncompleteLocalTime', IncompleteLocalTime, VOID, [TimeFieldContainer]);
  initMetadataForClass(AmPmMarker, 'AmPmMarker', VOID, Enum);
  initMetadataForCompanion(Companion_4);
  initMetadataForClass(Builder_2, 'Builder', VOID, VOID, [AbstractDateTimeFormatBuilder, AbstractWithTimeBuilder]);
  initMetadataForClass(LocalTimeFormat, 'LocalTimeFormat', VOID, AbstractDateTimeFormat);
  initMetadataForClass(HourDirective, 'HourDirective', VOID, UnsignedIntFieldFormatDirective);
  initMetadataForClass(MinuteDirective, 'MinuteDirective', VOID, UnsignedIntFieldFormatDirective);
  initMetadataForClass(SecondDirective, 'SecondDirective', VOID, UnsignedIntFieldFormatDirective);
  initMetadataForCompanion(Companion_5);
  initMetadataForClass(DecimalFractionFieldFormatDirective, 'DecimalFractionFieldFormatDirective');
  initMetadataForClass(FractionalSecondDirective, 'FractionalSecondDirective', VOID, DecimalFractionFieldFormatDirective);
  initMetadataForObject(TimeFields, 'TimeFields');
  initMetadataForClass(IncompleteUtcOffset, 'IncompleteUtcOffset', IncompleteUtcOffset, VOID, [UtcOffsetFieldContainer]);
  initMetadataForClass(UtcOffsetWholeHoursDirective, 'UtcOffsetWholeHoursDirective', VOID, UnsignedIntFieldFormatDirective);
  initMetadataForCompanion(Companion_6);
  initMetadataForClass(Builder_3, 'Builder', VOID, VOID, [AbstractDateTimeFormatBuilder, AbstractWithOffsetBuilder]);
  initMetadataForClass(UtcOffsetFormat, 'UtcOffsetFormat', VOID, AbstractDateTimeFormat);
  initMetadataForClass(OffsetFields$sign$1);
  initMetadataForObject(OffsetFields, 'OffsetFields');
  initMetadataForClass(UtcOffsetMinuteOfHourDirective, 'UtcOffsetMinuteOfHourDirective', VOID, UnsignedIntFieldFormatDirective);
  initMetadataForClass(UtcOffsetSecondOfMinuteDirective, 'UtcOffsetSecondOfMinuteDirective', VOID, UnsignedIntFieldFormatDirective);
  initMetadataForClass(AppendableFormatStructure, 'AppendableFormatStructure', AppendableFormatStructure);
  initMetadataForClass(AssignableString, 'AssignableString');
  initMetadataForClass(AbstractFieldSpec, 'AbstractFieldSpec');
  initMetadataForClass(GenericFieldSpec, 'GenericFieldSpec', VOID, AbstractFieldSpec);
  function getterNotNull(container) {
    var tmp0_elvis_lhs = this.e1i(container);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      throw IllegalStateException_init_$Create$('Field ' + this.w2() + ' is not set');
    } else {
      tmp = tmp0_elvis_lhs;
    }
    return tmp;
  }
  initMetadataForInterface(Accessor, 'Accessor');
  initMetadataForClass(PropertyAccessor, 'PropertyAccessor', VOID, VOID, [Accessor]);
  initMetadataForClass(UnsignedFieldSpec, 'UnsignedFieldSpec', VOID, AbstractFieldSpec);
  initMetadataForClass(ConcatenatedFormatStructure, 'ConcatenatedFormatStructure');
  initMetadataForClass(CachedFormatStructure, 'CachedFormatStructure', VOID, ConcatenatedFormatStructure);
  initMetadataForInterface(NonConcatenatedFormatStructure, 'NonConcatenatedFormatStructure');
  initMetadataForClass(BasicFormatStructure, 'BasicFormatStructure', VOID, VOID, [NonConcatenatedFormatStructure]);
  initMetadataForClass(ConstantFormatStructure, 'ConstantFormatStructure', VOID, VOID, [NonConcatenatedFormatStructure]);
  initMetadataForClass(SignedFormatStructure, 'SignedFormatStructure', VOID, VOID, [NonConcatenatedFormatStructure]);
  initMetadataForCompanion(Companion_7);
  initMetadataForClass(PropertyWithDefault, 'PropertyWithDefault');
  initMetadataForClass(OptionalFormatStructure, 'OptionalFormatStructure', VOID, VOID, [NonConcatenatedFormatStructure]);
  initMetadataForClass(AlternativesParsingFormatStructure, 'AlternativesParsingFormatStructure', VOID, VOID, [NonConcatenatedFormatStructure]);
  initMetadataForClass(ComparisonPredicate, 'ComparisonPredicate');
  initMetadataForObject(Truth, 'Truth');
  initMetadataForClass(ConjunctionPredicate, 'ConjunctionPredicate');
  function format$default(obj, builder, minusNotRequired, $super) {
    minusNotRequired = minusNotRequired === VOID ? false : minusNotRequired;
    var tmp;
    if ($super === VOID) {
      this.x1i(obj, builder, minusNotRequired);
      tmp = Unit_instance;
    } else {
      tmp = $super.x1i.call(this, obj, builder, minusNotRequired);
    }
    return tmp;
  }
  initMetadataForInterface(FormatterStructure, 'FormatterStructure');
  initMetadataForClass(SpacePaddedFormatter, 'SpacePaddedFormatter', VOID, VOID, [FormatterStructure]);
  initMetadataForClass(SignedFormatter, 'SignedFormatter', VOID, VOID, [FormatterStructure]);
  initMetadataForClass(ConditionalFormatter, 'ConditionalFormatter', VOID, VOID, [FormatterStructure]);
  initMetadataForClass(ConcatenatedFormatter, 'ConcatenatedFormatter', VOID, VOID, [FormatterStructure]);
  initMetadataForClass(SignedIntFormatterStructure, 'SignedIntFormatterStructure', VOID, VOID, [FormatterStructure]);
  initMetadataForClass(UnsignedIntFormatterStructure, 'UnsignedIntFormatterStructure', VOID, VOID, [FormatterStructure]);
  initMetadataForClass(StringFormatterStructure, 'StringFormatterStructure', VOID, VOID, [FormatterStructure]);
  initMetadataForClass(DecimalFractionFormatterStructure, 'DecimalFractionFormatterStructure', VOID, VOID, [FormatterStructure]);
  initMetadataForClass(ConstantStringFormatterStructure, 'ConstantStringFormatterStructure', VOID, VOID, [FormatterStructure]);
  initMetadataForClass(NumberConsumer, 'NumberConsumer');
  initMetadataForClass(FractionPartConsumer, 'FractionPartConsumer', VOID, NumberConsumer);
  initMetadataForClass(ConstantNumberConsumer, 'ConstantNumberConsumer', VOID, NumberConsumer);
  initMetadataForObject(ExpectedInt, 'ExpectedInt');
  initMetadataForClass(TooManyDigits, 'TooManyDigits');
  initMetadataForClass(TooFewDigits, 'TooFewDigits');
  initMetadataForClass(WrongConstant, 'WrongConstant');
  initMetadataForClass(Conflicting, 'Conflicting');
  initMetadataForClass(UnsignedIntConsumer, 'UnsignedIntConsumer', VOID, NumberConsumer);
  initMetadataForClass(ParseError, 'ParseError');
  initMetadataForCompanion(Companion_8);
  initMetadataForClass(ParserState, 'ParserState');
  initMetadataForClass(sam$kotlin_Comparator$0, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForClass(Parser, 'Parser');
  initMetadataForClass(ParserStructure, 'ParserStructure');
  initMetadataForClass(ParseException, 'ParseException', VOID, Exception);
  initMetadataForClass(TrieNode, 'TrieNode', TrieNode);
  initMetadataForClass(sam$kotlin_Comparator$0_0, 'sam$kotlin_Comparator$0', VOID, VOID, [Comparator, FunctionAdapter]);
  initMetadataForClass(StringSetParserOperation, 'StringSetParserOperation');
  initMetadataForClass(NumberSpanParserOperation, 'NumberSpanParserOperation');
  initMetadataForClass(PlainStringParserOperation, 'PlainStringParserOperation');
  initMetadataForClass(SignParser, 'SignParser');
  initMetadataForClass(UnconditionalModification, 'UnconditionalModification');
  initMetadataForClass(DecimalFraction, 'DecimalFraction', VOID, VOID, [Comparable]);
  initMetadataForObject(InstantIso8601Serializer, 'InstantIso8601Serializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(LocalDateIso8601Serializer, 'LocalDateIso8601Serializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(LocalDateTimeIso8601Serializer, 'LocalDateTimeIso8601Serializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(LocalTimeIso8601Serializer, 'LocalTimeIso8601Serializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(UtcOffsetSerializer, 'UtcOffsetSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(TimeZoneSerializer, 'TimeZoneSerializer', VOID, VOID, [KSerializer]);
  initMetadataForObject(FixedOffsetTimeZoneSerializer, 'FixedOffsetTimeZoneSerializer', VOID, VOID, [KSerializer]);
  initMetadataForClass(DayOfWeek_0, 'DayOfWeek', VOID, Enum);
  initMetadataForCompanion(Companion_9);
  initMetadataForClass(Instant_0, 'Instant', VOID, VOID, [Comparable], VOID, VOID, {0: InstantIso8601Serializer_getInstance});
  initMetadataForCompanion(Companion_10);
  initMetadataForObject(Formats_0, 'Formats');
  initMetadataForClass(LocalDate_0, 'LocalDate', VOID, VOID, [Comparable], VOID, VOID, {0: LocalDateIso8601Serializer_getInstance});
  initMetadataForCompanion(Companion_11);
  initMetadataForObject(Formats_1, 'Formats');
  initMetadataForClass(LocalDateTime_0, 'LocalDateTime', VOID, VOID, [Comparable], VOID, VOID, {0: LocalDateTimeIso8601Serializer_getInstance});
  initMetadataForCompanion(Companion_12);
  initMetadataForObject(Formats_2, 'Formats');
  initMetadataForClass(LocalTime_0, 'LocalTime', VOID, VOID, [Comparable], VOID, VOID, {0: LocalTimeIso8601Serializer_getInstance});
  initMetadataForCompanion(Companion_13);
  initMetadataForClass(TimeZone, 'TimeZone', VOID, VOID, VOID, VOID, VOID, {0: TimeZoneSerializer_getInstance});
  initMetadataForCompanion(Companion_14);
  initMetadataForClass(FixedOffsetTimeZone, 'FixedOffsetTimeZone', VOID, TimeZone, VOID, VOID, VOID, {0: FixedOffsetTimeZoneSerializer_getInstance});
  initMetadataForCompanion(Companion_15);
  initMetadataForObject(Formats_3, 'Formats');
  initMetadataForClass(UtcOffset, 'UtcOffset', VOID, VOID, VOID, VOID, VOID, {0: UtcOffsetSerializer_getInstance});
  //endregion
  function System() {
  }
  protoOf(System).r16 = function () {
    return Companion_getInstance_9().r16();
  };
  var System_instance;
  function System_getInstance() {
    return System_instance;
  }
  function get_isoDayNumber(_this__u8e3s4) {
    return _this__u8e3s4.v2_1 + 1 | 0;
  }
  function DayOfWeek(isoDayNumber) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(1 <= isoDayNumber ? isoDayNumber <= 7 : false)) {
      // Inline function 'kotlinx.datetime.DayOfWeek.<anonymous>' call
      var message = 'Expected ISO day-of-week number in 1..7, got ' + isoDayNumber;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return get_entries().r(isoDayNumber - 1 | 0);
  }
  function DateTimeFormatException_init_$Init$($this) {
    IllegalArgumentException_init_$Init$($this);
    DateTimeFormatException.call($this);
    return $this;
  }
  function DateTimeFormatException_init_$Create$() {
    var tmp = DateTimeFormatException_init_$Init$(objectCreate(protoOf(DateTimeFormatException)));
    captureStack(tmp, DateTimeFormatException_init_$Create$);
    return tmp;
  }
  function DateTimeFormatException_init_$Init$_0(message, $this) {
    IllegalArgumentException_init_$Init$_0(message, $this);
    DateTimeFormatException.call($this);
    return $this;
  }
  function DateTimeFormatException_init_$Create$_0(message) {
    var tmp = DateTimeFormatException_init_$Init$_0(message, objectCreate(protoOf(DateTimeFormatException)));
    captureStack(tmp, DateTimeFormatException_init_$Create$_0);
    return tmp;
  }
  function DateTimeFormatException_init_$Init$_1(cause, $this) {
    IllegalArgumentException_init_$Init$_1(cause, $this);
    DateTimeFormatException.call($this);
    return $this;
  }
  function DateTimeFormatException_init_$Create$_1(cause) {
    var tmp = DateTimeFormatException_init_$Init$_1(cause, objectCreate(protoOf(DateTimeFormatException)));
    captureStack(tmp, DateTimeFormatException_init_$Create$_1);
    return tmp;
  }
  function DateTimeFormatException_init_$Init$_2(message, cause, $this) {
    IllegalArgumentException_init_$Init$_2(message, cause, $this);
    DateTimeFormatException.call($this);
    return $this;
  }
  function DateTimeFormatException_init_$Create$_2(message, cause) {
    var tmp = DateTimeFormatException_init_$Init$_2(message, cause, objectCreate(protoOf(DateTimeFormatException)));
    captureStack(tmp, DateTimeFormatException_init_$Create$_2);
    return tmp;
  }
  function DateTimeFormatException() {
    captureStack(this, DateTimeFormatException);
  }
  function DateTimeArithmeticException_init_$Init$($this) {
    RuntimeException_init_$Init$($this);
    DateTimeArithmeticException.call($this);
    return $this;
  }
  function DateTimeArithmeticException_init_$Create$() {
    var tmp = DateTimeArithmeticException_init_$Init$(objectCreate(protoOf(DateTimeArithmeticException)));
    captureStack(tmp, DateTimeArithmeticException_init_$Create$);
    return tmp;
  }
  function DateTimeArithmeticException_init_$Init$_0(cause, $this) {
    RuntimeException_init_$Init$_0(cause, $this);
    DateTimeArithmeticException.call($this);
    return $this;
  }
  function DateTimeArithmeticException_init_$Create$_0(cause) {
    var tmp = DateTimeArithmeticException_init_$Init$_0(cause, objectCreate(protoOf(DateTimeArithmeticException)));
    captureStack(tmp, DateTimeArithmeticException_init_$Create$_0);
    return tmp;
  }
  function DateTimeArithmeticException() {
    captureStack(this, DateTimeArithmeticException);
  }
  function IllegalTimeZoneException_init_$Init$($this) {
    IllegalArgumentException_init_$Init$($this);
    IllegalTimeZoneException.call($this);
    return $this;
  }
  function IllegalTimeZoneException_init_$Create$() {
    var tmp = IllegalTimeZoneException_init_$Init$(objectCreate(protoOf(IllegalTimeZoneException)));
    captureStack(tmp, IllegalTimeZoneException_init_$Create$);
    return tmp;
  }
  function IllegalTimeZoneException_init_$Init$_0(cause, $this) {
    IllegalArgumentException_init_$Init$_1(cause, $this);
    IllegalTimeZoneException.call($this);
    return $this;
  }
  function IllegalTimeZoneException_init_$Create$_0(cause) {
    var tmp = IllegalTimeZoneException_init_$Init$_0(cause, objectCreate(protoOf(IllegalTimeZoneException)));
    captureStack(tmp, IllegalTimeZoneException_init_$Create$_0);
    return tmp;
  }
  function IllegalTimeZoneException() {
    captureStack(this, IllegalTimeZoneException);
  }
  function getIsoDateFormat() {
    return Formats_getInstance_0().x16();
  }
  function format(_this__u8e3s4, format) {
    return format.y16(_this__u8e3s4);
  }
  function atTime(_this__u8e3s4, hour, minute, second, nanosecond) {
    second = second === VOID ? 0 : second;
    nanosecond = nanosecond === VOID ? 0 : nanosecond;
    return LocalDateTime_init_$Create$(_this__u8e3s4.a17(), _this__u8e3s4.b17(), _this__u8e3s4.c17(), hour, minute, second, nanosecond);
  }
  function getIsoDateTimeFormat() {
    return Formats_getInstance_1().d17_1;
  }
  function getIsoTimeFormat() {
    return Formats_instance_2.x16();
  }
  function getIsoUtcOffsetFormat() {
    return Formats_instance_3.x16();
  }
  function asTimeZone(_this__u8e3s4) {
    return FixedOffsetTimeZone_init_$Create$(_this__u8e3s4);
  }
  var timeZoneField;
  function get_emptyDateTimeComponentsContents() {
    _init_properties_DateTimeComponents_kt__9iimb5();
    return emptyDateTimeComponentsContents;
  }
  var emptyDateTimeComponentsContents;
  function DateTimeComponentsContents(date, time, offset, timeZoneId) {
    date = date === VOID ? new IncompleteLocalDate() : date;
    time = time === VOID ? new IncompleteLocalTime() : time;
    offset = offset === VOID ? new IncompleteUtcOffset() : offset;
    timeZoneId = timeZoneId === VOID ? null : timeZoneId;
    this.e17_1 = date;
    this.f17_1 = time;
    this.g17_1 = offset;
    this.h17_1 = timeZoneId;
  }
  protoOf(DateTimeComponentsContents).i17 = function (_set____db54di) {
    this.e17_1.l17_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).c17 = function () {
    return this.e17_1.l17_1;
  };
  protoOf(DateTimeComponentsContents).n17 = function (_set____db54di) {
    this.e17_1.m17_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).o17 = function () {
    return this.e17_1.m17_1;
  };
  protoOf(DateTimeComponentsContents).p17 = function (_set____db54di) {
    this.e17_1.k17_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).b17 = function () {
    return this.e17_1.k17_1;
  };
  protoOf(DateTimeComponentsContents).q17 = function (_set____db54di) {
    this.e17_1.j17_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).a17 = function () {
    return this.e17_1.j17_1;
  };
  protoOf(DateTimeComponentsContents).r17 = function (_set____db54di) {
    this.f17_1.u17_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).y17 = function () {
    return this.f17_1.u17_1;
  };
  protoOf(DateTimeComponentsContents).z17 = function (value) {
    this.f17_1.z17(value);
  };
  protoOf(DateTimeComponentsContents).a18 = function () {
    return this.f17_1.a18();
  };
  protoOf(DateTimeComponentsContents).b18 = function (_set____db54di) {
    this.f17_1.s17_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).c18 = function () {
    return this.f17_1.s17_1;
  };
  protoOf(DateTimeComponentsContents).d18 = function (_set____db54di) {
    this.f17_1.t17_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).e18 = function () {
    return this.f17_1.t17_1;
  };
  protoOf(DateTimeComponentsContents).f18 = function (_set____db54di) {
    this.f17_1.v17_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).g18 = function () {
    return this.f17_1.v17_1;
  };
  protoOf(DateTimeComponentsContents).h18 = function (_set____db54di) {
    this.f17_1.x17_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).i18 = function () {
    return this.f17_1.x17_1;
  };
  protoOf(DateTimeComponentsContents).j18 = function (_set____db54di) {
    this.f17_1.w17_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).k18 = function () {
    return this.f17_1.w17_1;
  };
  protoOf(DateTimeComponentsContents).l18 = function (_set____db54di) {
    this.g17_1.m18_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).q18 = function () {
    return this.g17_1.m18_1;
  };
  protoOf(DateTimeComponentsContents).r18 = function (_set____db54di) {
    this.g17_1.o18_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).s18 = function () {
    return this.g17_1.o18_1;
  };
  protoOf(DateTimeComponentsContents).t18 = function (_set____db54di) {
    this.g17_1.p18_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).u18 = function () {
    return this.g17_1.p18_1;
  };
  protoOf(DateTimeComponentsContents).v18 = function (_set____db54di) {
    this.g17_1.n18_1 = _set____db54di;
  };
  protoOf(DateTimeComponentsContents).w18 = function () {
    return this.g17_1.n18_1;
  };
  protoOf(DateTimeComponentsContents).x18 = function () {
    return new DateTimeComponentsContents(this.e17_1.x18(), this.f17_1.x18(), this.g17_1.x18(), this.h17_1);
  };
  protoOf(DateTimeComponentsContents).equals = function (other) {
    var tmp;
    var tmp_0;
    var tmp_1;
    var tmp_2;
    if (other instanceof DateTimeComponentsContents) {
      tmp_2 = other.e17_1.equals(this.e17_1);
    } else {
      tmp_2 = false;
    }
    if (tmp_2) {
      tmp_1 = other.f17_1.equals(this.f17_1);
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = other.g17_1.equals(this.g17_1);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = other.h17_1 == this.h17_1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(DateTimeComponentsContents).hashCode = function () {
    var tmp = this.e17_1.hashCode() ^ this.f17_1.hashCode() ^ this.g17_1.hashCode();
    var tmp0_safe_receiver = this.h17_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : getStringHashCode(tmp0_safe_receiver);
    return tmp ^ (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs);
  };
  function DateTimeComponents$Formats$ISO_DATE_TIME_OFFSET$lambda($this$Format) {
    $this$Format.y18(get_ISO_DATE());
    var tmp = [DateTimeComponents$Formats$ISO_DATE_TIME_OFFSET$lambda$lambda];
    alternativeParsing($this$Format, tmp, DateTimeComponents$Formats$ISO_DATE_TIME_OFFSET$lambda$lambda_0);
    $this$Format.z18();
    char($this$Format, _Char___init__impl__6a9atx(58));
    $this$Format.a19();
    char($this$Format, _Char___init__impl__6a9atx(58));
    $this$Format.b19();
    optional($this$Format, VOID, DateTimeComponents$Formats$ISO_DATE_TIME_OFFSET$lambda$lambda_1);
    var tmp_0 = [DateTimeComponents$Formats$ISO_DATE_TIME_OFFSET$lambda$lambda_2];
    alternativeParsing($this$Format, tmp_0, DateTimeComponents$Formats$ISO_DATE_TIME_OFFSET$lambda$lambda_3);
    return Unit_instance;
  }
  function DateTimeComponents$Formats$ISO_DATE_TIME_OFFSET$lambda$lambda($this$alternativeParsing) {
    char($this$alternativeParsing, _Char___init__impl__6a9atx(116));
    return Unit_instance;
  }
  function DateTimeComponents$Formats$ISO_DATE_TIME_OFFSET$lambda$lambda_0($this$alternativeParsing) {
    char($this$alternativeParsing, _Char___init__impl__6a9atx(84));
    return Unit_instance;
  }
  function DateTimeComponents$Formats$ISO_DATE_TIME_OFFSET$lambda$lambda_1($this$optional) {
    char($this$optional, _Char___init__impl__6a9atx(46));
    $this$optional.c19(1, 9);
    return Unit_instance;
  }
  function DateTimeComponents$Formats$ISO_DATE_TIME_OFFSET$lambda$lambda_2($this$alternativeParsing) {
    $this$alternativeParsing.d19();
    return Unit_instance;
  }
  function DateTimeComponents$Formats$ISO_DATE_TIME_OFFSET$lambda$lambda_3($this$alternativeParsing) {
    $this$alternativeParsing.e19(Formats_instance_3.x16());
    return Unit_instance;
  }
  function DateTimeComponents$Formats$RFC_1123$lambda($this$Format) {
    var tmp = [DateTimeComponents$Formats$RFC_1123$lambda$lambda];
    alternativeParsing($this$Format, tmp, DateTimeComponents$Formats$RFC_1123$lambda$lambda_0);
    $this$Format.f19(Padding_NONE_getInstance());
    char($this$Format, _Char___init__impl__6a9atx(32));
    $this$Format.i19(Companion_getInstance_0().h19_1);
    char($this$Format, _Char___init__impl__6a9atx(32));
    $this$Format.j19();
    char($this$Format, _Char___init__impl__6a9atx(32));
    $this$Format.z18();
    char($this$Format, _Char___init__impl__6a9atx(58));
    $this$Format.a19();
    optional($this$Format, VOID, DateTimeComponents$Formats$RFC_1123$lambda$lambda_1);
    $this$Format.k19(' ');
    var tmp_0 = DateTimeComponents$Formats$RFC_1123$lambda$lambda_2;
    var tmp_1 = [tmp_0, DateTimeComponents$Formats$RFC_1123$lambda$lambda_3];
    alternativeParsing($this$Format, tmp_1, DateTimeComponents$Formats$RFC_1123$lambda$lambda_4);
    return Unit_instance;
  }
  function DateTimeComponents$Formats$RFC_1123$lambda$lambda($this$alternativeParsing) {
    return Unit_instance;
  }
  function DateTimeComponents$Formats$RFC_1123$lambda$lambda_0($this$alternativeParsing) {
    $this$alternativeParsing.n19(Companion_getInstance_1().m19_1);
    $this$alternativeParsing.k19(', ');
    return Unit_instance;
  }
  function DateTimeComponents$Formats$RFC_1123$lambda$lambda_1($this$optional) {
    char($this$optional, _Char___init__impl__6a9atx(58));
    $this$optional.b19();
    return Unit_instance;
  }
  function DateTimeComponents$Formats$RFC_1123$lambda$lambda_2($this$alternativeParsing) {
    $this$alternativeParsing.k19('UT');
    return Unit_instance;
  }
  function DateTimeComponents$Formats$RFC_1123$lambda$lambda_3($this$alternativeParsing) {
    $this$alternativeParsing.k19('Z');
    return Unit_instance;
  }
  function DateTimeComponents$Formats$RFC_1123$lambda$lambda_4($this$alternativeParsing) {
    optional($this$alternativeParsing, 'GMT', DateTimeComponents$Formats$RFC_1123$lambda$lambda$lambda);
    return Unit_instance;
  }
  function DateTimeComponents$Formats$RFC_1123$lambda$lambda$lambda($this$optional) {
    $this$optional.e19(Formats_instance_3.o19());
    return Unit_instance;
  }
  function Companion() {
  }
  protoOf(Companion).p19 = function (block) {
    var builder = new Builder(new AppendableFormatStructure());
    block(builder);
    return new DateTimeComponentsFormat(builder.q19());
  };
  var Companion_instance;
  function Companion_getInstance() {
    return Companion_instance;
  }
  function Formats() {
    Formats_instance = this;
    var tmp = this;
    var tmp_0 = Companion_instance;
    tmp.r19_1 = tmp_0.p19(DateTimeComponents$Formats$ISO_DATE_TIME_OFFSET$lambda);
    var tmp_1 = this;
    var tmp_2 = Companion_instance;
    tmp_1.s19_1 = tmp_2.p19(DateTimeComponents$Formats$RFC_1123$lambda);
  }
  var Formats_instance;
  function Formats_getInstance() {
    if (Formats_instance == null)
      new Formats();
    return Formats_instance;
  }
  function DateTimeComponents(contents) {
    contents = contents === VOID ? new DateTimeComponentsContents() : contents;
    this.t19_1 = contents;
    this.u19_1 = year$factory(this.t19_1.e17_1);
    this.v19_1 = new TwoDigitNumber(monthNumber$factory(this.t19_1.e17_1));
    this.w19_1 = new TwoDigitNumber(dayOfMonth$factory(this.t19_1.e17_1));
    this.x19_1 = new TwoDigitNumber(hour$factory(this.t19_1.f17_1));
    this.y19_1 = new TwoDigitNumber(hourOfAmPm$factory(this.t19_1.f17_1));
    this.z19_1 = amPm$factory(this.t19_1.f17_1);
    this.a1a_1 = new TwoDigitNumber(minute$factory(this.t19_1.f17_1));
    this.b1a_1 = new TwoDigitNumber(second$factory(this.t19_1.f17_1));
    this.c1a_1 = isNegative$factory(this.t19_1.g17_1);
    this.d1a_1 = new TwoDigitNumber(totalHoursAbs$factory(this.t19_1.g17_1));
    this.e1a_1 = new TwoDigitNumber(minutesOfHour$factory(this.t19_1.g17_1));
    this.f1a_1 = new TwoDigitNumber(secondsOfMinute$factory(this.t19_1.g17_1));
    this.g1a_1 = timeZoneId$factory_0(this.t19_1);
  }
  protoOf(DateTimeComponents).q17 = function (_set____db54di) {
    var this_0 = this.u19_1;
    year$factory_0();
    this_0.set(_set____db54di);
    return Unit_instance;
  };
  protoOf(DateTimeComponents).a17 = function () {
    // Inline function 'kotlin.getValue' call
    var this_0 = this.u19_1;
    year$factory_1();
    return this_0.get();
  };
  protoOf(DateTimeComponents).i18 = function () {
    return this.t19_1.f17_1.x17_1;
  };
  protoOf(DateTimeComponents).h1a = function () {
    return this.t19_1.g17_1.h1a();
  };
  protoOf(DateTimeComponents).i1a = function () {
    return this.t19_1.f17_1.i1a();
  };
  protoOf(DateTimeComponents).j1a = function () {
    var offset = this.h1a();
    var time = this.i1a();
    var truncatedDate = this.t19_1.e17_1.x18();
    truncatedDate.j17_1 = requireParsedField(truncatedDate.j17_1, 'year') % 10000 | 0;
    var tmp;
    try {
      var secDelta = safeMultiply(toLong(ensureNotNull(this.a17()) / 10000 | 0), new Long(2036907392, 73));
      var epochDays = toLong(truncatedDate.k1a().l1a());
      // Inline function 'kotlin.Long.minus' call
      // Inline function 'kotlin.Long.plus' call
      // Inline function 'kotlin.Long.times' call
      var this_0 = epochDays.f3(toLong(86400));
      var other = time.n1a();
      var this_1 = this_0.d3(toLong(other));
      var other_0 = offset.p1a();
      var tmp$ret$2 = this_1.e3(toLong(other_0));
      tmp = safeAdd(secDelta, tmp$ret$2);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof ArithmeticException) {
        var e = $p;
        throw DateTimeFormatException_init_$Create$_2('The parsed date is outside the range representable by Instant', e);
      } else {
        throw $p;
      }
    }
    var totalSeconds = tmp;
    if (totalSeconds.g1(Companion_getInstance_9().u16_1.r1a()) < 0 || totalSeconds.g1(Companion_getInstance_9().v16_1.r1a()) > 0)
      throw DateTimeFormatException_init_$Create$_0('The parsed date is outside the range representable by Instant');
    var tmp_1 = Companion_getInstance_9();
    var tmp0_elvis_lhs = this.i18();
    return tmp_1.s1a(totalSeconds, tmp0_elvis_lhs == null ? 0 : tmp0_elvis_lhs);
  };
  function Builder(actualBuilder) {
    this.t1a_1 = actualBuilder;
  }
  protoOf(Builder).u1a = function () {
    return this.t1a_1;
  };
  protoOf(Builder).v1a = function (structure) {
    this.t1a_1.x1a(structure);
  };
  protoOf(Builder).y1a = function (structure) {
    this.t1a_1.x1a(structure);
  };
  protoOf(Builder).z1a = function () {
    return new Builder(new AppendableFormatStructure());
  };
  function DateTimeComponentsFormat(actualFormat) {
    AbstractDateTimeFormat.call(this);
    this.r1b_1 = actualFormat;
  }
  protoOf(DateTimeComponentsFormat).s1b = function () {
    return this.r1b_1;
  };
  protoOf(DateTimeComponentsFormat).t1b = function (value) {
    return value.t19_1;
  };
  protoOf(DateTimeComponentsFormat).u1b = function (value) {
    return this.t1b(value instanceof DateTimeComponents ? value : THROW_CCE());
  };
  protoOf(DateTimeComponentsFormat).v1b = function (intermediate) {
    return new DateTimeComponents(intermediate);
  };
  protoOf(DateTimeComponentsFormat).w1b = function (intermediate) {
    return this.v1b(intermediate instanceof DateTimeComponentsContents ? intermediate : THROW_CCE());
  };
  protoOf(DateTimeComponentsFormat).x1b = function () {
    return get_emptyDateTimeComponentsContents();
  };
  function TwoDigitNumber(reference) {
    this.z1b_1 = reference;
  }
  function timeZoneId$factory() {
    return getPropertyCallableRef('timeZoneId', 1, KMutableProperty1, function (receiver) {
      return receiver.h17_1;
    }, function (receiver, value) {
      receiver.h17_1 = value;
      return Unit_instance;
    });
  }
  function year$factory($b0) {
    return getPropertyCallableRef('year', 0, KMutableProperty0, function () {
      return $b0.j17_1;
    }, function (value) {
      $b0.j17_1 = value;
      return Unit_instance;
    });
  }
  function monthNumber$factory($b0) {
    return getPropertyCallableRef('monthNumber', 0, KMutableProperty0, function () {
      return $b0.k17_1;
    }, function (value) {
      $b0.k17_1 = value;
      return Unit_instance;
    });
  }
  function dayOfMonth$factory($b0) {
    return getPropertyCallableRef('dayOfMonth', 0, KMutableProperty0, function () {
      return $b0.l17_1;
    }, function (value) {
      $b0.l17_1 = value;
      return Unit_instance;
    });
  }
  function hour$factory($b0) {
    return getPropertyCallableRef('hour', 0, KMutableProperty0, function () {
      return $b0.s17_1;
    }, function (value) {
      $b0.s17_1 = value;
      return Unit_instance;
    });
  }
  function hourOfAmPm$factory($b0) {
    return getPropertyCallableRef('hourOfAmPm', 0, KMutableProperty0, function () {
      return $b0.t17_1;
    }, function (value) {
      $b0.t17_1 = value;
      return Unit_instance;
    });
  }
  function amPm$factory($b0) {
    return getPropertyCallableRef('amPm', 0, KMutableProperty0, function () {
      return $b0.u17_1;
    }, function (value) {
      $b0.u17_1 = value;
      return Unit_instance;
    });
  }
  function minute$factory($b0) {
    return getPropertyCallableRef('minute', 0, KMutableProperty0, function () {
      return $b0.v17_1;
    }, function (value) {
      $b0.v17_1 = value;
      return Unit_instance;
    });
  }
  function second$factory($b0) {
    return getPropertyCallableRef('second', 0, KMutableProperty0, function () {
      return $b0.w17_1;
    }, function (value) {
      $b0.w17_1 = value;
      return Unit_instance;
    });
  }
  function isNegative$factory($b0) {
    return getPropertyCallableRef('isNegative', 0, KMutableProperty0, function () {
      return $b0.m18_1;
    }, function (value) {
      $b0.m18_1 = value;
      return Unit_instance;
    });
  }
  function totalHoursAbs$factory($b0) {
    return getPropertyCallableRef('totalHoursAbs', 0, KMutableProperty0, function () {
      return $b0.n18_1;
    }, function (value) {
      $b0.n18_1 = value;
      return Unit_instance;
    });
  }
  function minutesOfHour$factory($b0) {
    return getPropertyCallableRef('minutesOfHour', 0, KMutableProperty0, function () {
      return $b0.o18_1;
    }, function (value) {
      $b0.o18_1 = value;
      return Unit_instance;
    });
  }
  function secondsOfMinute$factory($b0) {
    return getPropertyCallableRef('secondsOfMinute', 0, KMutableProperty0, function () {
      return $b0.p18_1;
    }, function (value) {
      $b0.p18_1 = value;
      return Unit_instance;
    });
  }
  function timeZoneId$factory_0($b0) {
    return getPropertyCallableRef('timeZoneId', 0, KMutableProperty0, function () {
      return $b0.h17_1;
    }, function (value) {
      $b0.h17_1 = value;
      return Unit_instance;
    });
  }
  function year$factory_0() {
    return getPropertyCallableRef('year', 1, KMutableProperty1, function (receiver) {
      return receiver.a17();
    }, function (receiver, value) {
      return receiver.q17(value);
    });
  }
  function year$factory_1() {
    return getPropertyCallableRef('year', 1, KMutableProperty1, function (receiver) {
      return receiver.a17();
    }, function (receiver, value) {
      return receiver.q17(value);
    });
  }
  var properties_initialized_DateTimeComponents_kt_io5e5;
  function _init_properties_DateTimeComponents_kt__9iimb5() {
    if (!properties_initialized_DateTimeComponents_kt_io5e5) {
      properties_initialized_DateTimeComponents_kt_io5e5 = true;
      timeZoneField = new GenericFieldSpec(new PropertyAccessor(timeZoneId$factory()));
      emptyDateTimeComponentsContents = new DateTimeComponentsContents();
    }
  }
  function AbstractDateTimeFormat() {
  }
  protoOf(AbstractDateTimeFormat).y16 = function (value) {
    // Inline function 'kotlin.also' call
    var this_0 = StringBuilder_init_$Create$();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.format.AbstractDateTimeFormat.format.<anonymous>' call
    this.s1b().d1c().e1c(this.u1b(value), this_0);
    return this_0.toString();
  };
  protoOf(AbstractDateTimeFormat).y1b = function (input) {
    var tmp;
    try {
      tmp = Parser__match$default_impl_x2xlti(_Parser___init__impl__gdyfby(this.s1b().f1c()), input, this.x1b());
    } catch ($p) {
      var tmp_0;
      if ($p instanceof ParseException) {
        var e = $p;
        throw DateTimeFormatException_init_$Create$_2("Failed to parse value from '" + toString(input) + "'", e);
      } else {
        throw $p;
      }
    }
    var matched = tmp;
    try {
      return this.w1b(matched);
    } catch ($p) {
      if ($p instanceof IllegalArgumentException) {
        var e_0 = $p;
        var message = e_0.message;
        throw DateTimeFormatException_init_$Create$_2(message == null ? "The value parsed from '" + toString(input) + "' is invalid" : '' + message + " (when parsing '" + toString(input) + "')", e_0);
      } else {
        throw $p;
      }
    }
  };
  var Padding_NONE_instance;
  var Padding_ZERO_instance;
  var Padding_SPACE_instance;
  var Padding_entriesInitialized;
  function Padding_initEntries() {
    if (Padding_entriesInitialized)
      return Unit_instance;
    Padding_entriesInitialized = true;
    Padding_NONE_instance = new Padding('NONE', 0);
    Padding_ZERO_instance = new Padding('ZERO', 1);
    Padding_SPACE_instance = new Padding('SPACE', 2);
  }
  function Padding(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function Padding_NONE_getInstance() {
    Padding_initEntries();
    return Padding_NONE_instance;
  }
  function Padding_ZERO_getInstance() {
    Padding_initEntries();
    return Padding_ZERO_instance;
  }
  function Padding_SPACE_getInstance() {
    Padding_initEntries();
    return Padding_SPACE_instance;
  }
  function WithDate() {
  }
  function WithTime() {
  }
  function WithUtcOffset() {
  }
  function char(_this__u8e3s4, value) {
    return _this__u8e3s4.k19(toString_0(value));
  }
  function optional(_this__u8e3s4, ifZero, format) {
    ifZero = ifZero === VOID ? '' : ifZero;
    var tmp;
    if (isInterface(_this__u8e3s4, AbstractDateTimeFormatBuilder)) {
      _this__u8e3s4.b1b(ifZero, typeof format === 'function' ? format : THROW_CCE());
      tmp = Unit_instance;
    } else {
      throw IllegalStateException_init_$Create$('impossible');
    }
    return tmp;
  }
  function alternativeParsing(_this__u8e3s4, alternativeFormats, primaryFormat) {
    var tmp;
    if (isInterface(_this__u8e3s4, AbstractDateTimeFormatBuilder)) {
      var tmp_0 = (isArray(alternativeFormats) ? alternativeFormats : THROW_CCE()).slice();
      _this__u8e3s4.a1b(tmp_0, typeof primaryFormat === 'function' ? primaryFormat : THROW_CCE());
      tmp = Unit_instance;
    } else {
      throw IllegalStateException_init_$Create$('impossible');
    }
    return tmp;
  }
  function AbstractDateTimeFormatBuilder() {
  }
  function get_ISO_DATE() {
    _init_properties_LocalDateFormat_kt__k1uk9u();
    // Inline function 'kotlin.getValue' call
    var this_0 = ISO_DATE$delegate;
    ISO_DATE$factory();
    return this_0.d2();
  }
  var ISO_DATE$delegate;
  function get_ISO_DATE_BASIC() {
    _init_properties_LocalDateFormat_kt__k1uk9u();
    // Inline function 'kotlin.getValue' call
    var this_0 = ISO_DATE_BASIC$delegate;
    ISO_DATE_BASIC$factory();
    return this_0.d2();
  }
  var ISO_DATE_BASIC$delegate;
  function get_emptyIncompleteLocalDate() {
    _init_properties_LocalDateFormat_kt__k1uk9u();
    return emptyIncompleteLocalDate;
  }
  var emptyIncompleteLocalDate;
  function IncompleteLocalDate(year, monthNumber, dayOfMonth, isoDayOfWeek) {
    year = year === VOID ? null : year;
    monthNumber = monthNumber === VOID ? null : monthNumber;
    dayOfMonth = dayOfMonth === VOID ? null : dayOfMonth;
    isoDayOfWeek = isoDayOfWeek === VOID ? null : isoDayOfWeek;
    this.j17_1 = year;
    this.k17_1 = monthNumber;
    this.l17_1 = dayOfMonth;
    this.m17_1 = isoDayOfWeek;
  }
  protoOf(IncompleteLocalDate).q17 = function (_set____db54di) {
    this.j17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDate).a17 = function () {
    return this.j17_1;
  };
  protoOf(IncompleteLocalDate).p17 = function (_set____db54di) {
    this.k17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDate).b17 = function () {
    return this.k17_1;
  };
  protoOf(IncompleteLocalDate).i17 = function (_set____db54di) {
    this.l17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDate).c17 = function () {
    return this.l17_1;
  };
  protoOf(IncompleteLocalDate).n17 = function (_set____db54di) {
    this.m17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDate).o17 = function () {
    return this.m17_1;
  };
  protoOf(IncompleteLocalDate).k1a = function () {
    var date = LocalDate_init_$Create$(requireParsedField(this.j17_1, 'year'), requireParsedField(this.k17_1, 'monthNumber'), requireParsedField(this.l17_1, 'dayOfMonth'));
    var tmp0_safe_receiver = this.m17_1;
    if (tmp0_safe_receiver == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      if (!(tmp0_safe_receiver === get_isoDayNumber(date.h1c()))) {
        throw DateTimeFormatException_init_$Create$_0('Can not create a LocalDate from the given input: ' + ('the day of week is ' + DayOfWeek(tmp0_safe_receiver).toString() + ' but the date is ' + date.toString() + ', which is a ' + date.h1c().toString()));
      }
    }
    return date;
  };
  protoOf(IncompleteLocalDate).i1c = function (date) {
    this.j17_1 = date.a17();
    this.k17_1 = date.b17();
    this.l17_1 = date.c17();
    this.m17_1 = get_isoDayNumber(date.h1c());
  };
  protoOf(IncompleteLocalDate).x18 = function () {
    return new IncompleteLocalDate(this.j17_1, this.k17_1, this.l17_1, this.m17_1);
  };
  protoOf(IncompleteLocalDate).equals = function (other) {
    var tmp;
    var tmp_0;
    var tmp_1;
    var tmp_2;
    if (other instanceof IncompleteLocalDate) {
      tmp_2 = this.j17_1 == other.j17_1;
    } else {
      tmp_2 = false;
    }
    if (tmp_2) {
      tmp_1 = this.k17_1 == other.k17_1;
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = this.l17_1 == other.l17_1;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = this.m17_1 == other.m17_1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(IncompleteLocalDate).hashCode = function () {
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = this.j17_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    var tmp$ret$0 = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    var tmp = imul(tmp$ret$0, 31);
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver_0 = this.k17_1;
    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);
    var tmp$ret$1 = tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0;
    var tmp_0 = tmp + imul(tmp$ret$1, 31) | 0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver_1 = this.l17_1;
    var tmp1_elvis_lhs_1 = tmp0_safe_receiver_1 == null ? null : hashCode(tmp0_safe_receiver_1);
    var tmp$ret$2 = tmp1_elvis_lhs_1 == null ? 0 : tmp1_elvis_lhs_1;
    var tmp_1 = tmp_0 + imul(tmp$ret$2, 31) | 0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver_2 = this.m17_1;
    var tmp1_elvis_lhs_2 = tmp0_safe_receiver_2 == null ? null : hashCode(tmp0_safe_receiver_2);
    var tmp$ret$3 = tmp1_elvis_lhs_2 == null ? 0 : tmp1_elvis_lhs_2;
    return tmp_1 + imul(tmp$ret$3, 31) | 0;
  };
  protoOf(IncompleteLocalDate).toString = function () {
    var tmp0_elvis_lhs = this.j17_1;
    var tmp = toString(tmp0_elvis_lhs == null ? '??' : tmp0_elvis_lhs);
    var tmp1_elvis_lhs = this.k17_1;
    var tmp_0 = toString(tmp1_elvis_lhs == null ? '??' : tmp1_elvis_lhs);
    var tmp2_elvis_lhs = this.l17_1;
    var tmp_1 = toString(tmp2_elvis_lhs == null ? '??' : tmp2_elvis_lhs);
    var tmp3_elvis_lhs = this.m17_1;
    return tmp + '-' + tmp_0 + '-' + tmp_1 + ' (day of week is ' + toString(tmp3_elvis_lhs == null ? '??' : tmp3_elvis_lhs) + ')';
  };
  function Companion_0() {
    Companion_instance_0 = this;
    this.g19_1 = new MonthNames(listOf(['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']));
    this.h19_1 = new MonthNames(listOf(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']));
  }
  var Companion_instance_0;
  function Companion_getInstance_0() {
    if (Companion_instance_0 == null)
      new Companion_0();
    return Companion_instance_0;
  }
  function String$toString$ref() {
    var l = function (p0) {
      return toString(p0);
    };
    l.callableName = 'toString';
    return l;
  }
  function MonthNames(names) {
    Companion_getInstance_0();
    this.j1c_1 = names;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.j1c_1.q() === 12)) {
      // Inline function 'kotlinx.datetime.format.MonthNames.<anonymous>' call
      var message = 'Month names must contain exactly 12 elements';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.collections.forEach' call
    var progression = get_indices(this.j1c_1);
    var inductionVariable = progression.a1_1;
    var last = progression.b1_1;
    if (inductionVariable <= last)
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlinx.datetime.format.MonthNames.<anonymous>' call
        var ix = element;
        // Inline function 'kotlin.require' call
        // Inline function 'kotlin.text.isNotEmpty' call
        var this_0 = this.j1c_1.r(ix);
        // Inline function 'kotlin.contracts.contract' call
        if (!(charSequenceLength(this_0) > 0)) {
          // Inline function 'kotlinx.datetime.format.MonthNames.<anonymous>.<anonymous>' call
          var message_0 = 'A month name can not be empty';
          throw IllegalArgumentException_init_$Create$(toString(message_0));
        }
        var inductionVariable_0 = 0;
        if (inductionVariable_0 < ix)
          do {
            var ix2 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            // Inline function 'kotlin.require' call
            // Inline function 'kotlin.contracts.contract' call
            if (!!(this.j1c_1.r(ix) === this.j1c_1.r(ix2))) {
              // Inline function 'kotlinx.datetime.format.MonthNames.<anonymous>.<anonymous>' call
              var message_1 = "Month names must be unique, but '" + this.j1c_1.r(ix) + "' was repeated";
              throw IllegalArgumentException_init_$Create$(toString(message_1));
            }
          }
           while (inductionVariable_0 < ix);
      }
       while (!(element === last));
  }
  protoOf(MonthNames).toString = function () {
    return joinToString(this.j1c_1, ', ', 'MonthNames(', ')', VOID, VOID, String$toString$ref());
  };
  protoOf(MonthNames).equals = function (other) {
    var tmp;
    if (other instanceof MonthNames) {
      tmp = equals(this.j1c_1, other.j1c_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(MonthNames).hashCode = function () {
    return hashCode(this.j1c_1);
  };
  function Companion_1() {
    Companion_instance_1 = this;
    this.l19_1 = new DayOfWeekNames(listOf(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']));
    this.m19_1 = new DayOfWeekNames(listOf(['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']));
  }
  var Companion_instance_1;
  function Companion_getInstance_1() {
    if (Companion_instance_1 == null)
      new Companion_1();
    return Companion_instance_1;
  }
  function String$toString$ref_0() {
    var l = function (p0) {
      return toString(p0);
    };
    l.callableName = 'toString';
    return l;
  }
  function DayOfWeekNames(names) {
    Companion_getInstance_1();
    this.k1c_1 = names;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.k1c_1.q() === 7)) {
      // Inline function 'kotlinx.datetime.format.DayOfWeekNames.<anonymous>' call
      var message = 'Day of week names must contain exactly 7 elements';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.collections.forEach' call
    var progression = get_indices(this.k1c_1);
    var inductionVariable = progression.a1_1;
    var last = progression.b1_1;
    if (inductionVariable <= last)
      do {
        var element = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlinx.datetime.format.DayOfWeekNames.<anonymous>' call
        var ix = element;
        // Inline function 'kotlin.require' call
        // Inline function 'kotlin.text.isNotEmpty' call
        var this_0 = this.k1c_1.r(ix);
        // Inline function 'kotlin.contracts.contract' call
        if (!(charSequenceLength(this_0) > 0)) {
          // Inline function 'kotlinx.datetime.format.DayOfWeekNames.<anonymous>.<anonymous>' call
          var message_0 = 'A day-of-week name can not be empty';
          throw IllegalArgumentException_init_$Create$(toString(message_0));
        }
        var inductionVariable_0 = 0;
        if (inductionVariable_0 < ix)
          do {
            var ix2 = inductionVariable_0;
            inductionVariable_0 = inductionVariable_0 + 1 | 0;
            // Inline function 'kotlin.require' call
            // Inline function 'kotlin.contracts.contract' call
            if (!!(this.k1c_1.r(ix) === this.k1c_1.r(ix2))) {
              // Inline function 'kotlinx.datetime.format.DayOfWeekNames.<anonymous>.<anonymous>' call
              var message_1 = "Day-of-week names must be unique, but '" + this.k1c_1.r(ix) + "' was repeated";
              throw IllegalArgumentException_init_$Create$(toString(message_1));
            }
          }
           while (inductionVariable_0 < ix);
      }
       while (!(element === last));
  }
  protoOf(DayOfWeekNames).toString = function () {
    return joinToString(this.k1c_1, ', ', 'DayOfWeekNames(', ')', VOID, VOID, String$toString$ref_0());
  };
  protoOf(DayOfWeekNames).equals = function (other) {
    var tmp;
    if (other instanceof DayOfWeekNames) {
      tmp = equals(this.k1c_1, other.k1c_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(DayOfWeekNames).hashCode = function () {
    return hashCode(this.k1c_1);
  };
  function Companion_2() {
  }
  protoOf(Companion_2).l1c = function (block) {
    var builder = new Builder_0(new AppendableFormatStructure());
    block(builder);
    return new LocalDateFormat(builder.q19());
  };
  var Companion_instance_2;
  function Companion_getInstance_2() {
    return Companion_instance_2;
  }
  function Builder_0(actualBuilder) {
    this.m1c_1 = actualBuilder;
  }
  protoOf(Builder_0).u1a = function () {
    return this.m1c_1;
  };
  protoOf(Builder_0).c1b = function (structure) {
    return this.m1c_1.x1a(structure);
  };
  protoOf(Builder_0).z1a = function () {
    return new Builder_0(new AppendableFormatStructure());
  };
  function LocalDateFormat(actualFormat) {
    AbstractDateTimeFormat.call(this);
    this.n1c_1 = actualFormat;
  }
  protoOf(LocalDateFormat).s1b = function () {
    return this.n1c_1;
  };
  protoOf(LocalDateFormat).o1c = function (value) {
    // Inline function 'kotlin.apply' call
    var this_0 = new IncompleteLocalDate();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.format.LocalDateFormat.intermediateFromValue.<anonymous>' call
    this_0.i1c(value);
    return this_0;
  };
  protoOf(LocalDateFormat).u1b = function (value) {
    return this.o1c(value instanceof LocalDate_0 ? value : THROW_CCE());
  };
  protoOf(LocalDateFormat).p1c = function (intermediate) {
    return intermediate.k1a();
  };
  protoOf(LocalDateFormat).w1b = function (intermediate) {
    return this.p1c(intermediate instanceof IncompleteLocalDate ? intermediate : THROW_CCE());
  };
  protoOf(LocalDateFormat).x1b = function () {
    return get_emptyIncompleteLocalDate();
  };
  function requireParsedField(field, name) {
    _init_properties_LocalDateFormat_kt__k1uk9u();
    if (field == null) {
      throw DateTimeFormatException_init_$Create$_0('Can not create a ' + name + ' from the given input: the field ' + name + ' is missing');
    }
    return field;
  }
  function AbstractWithDateBuilder() {
  }
  function YearDirective(padding, isYearOfEra) {
    isYearOfEra = isYearOfEra === VOID ? false : isYearOfEra;
    var tmp = DateFields_getInstance().q1c_1;
    // Inline function 'kotlinx.datetime.format.minDigits' call
    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 4 : 1;
    // Inline function 'kotlinx.datetime.format.spaces' call
    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 4 : null;
    SignedIntFieldFormatDirective.call(this, tmp, tmp_0, null, tmp$ret$1, 4);
    this.z1c_1 = padding;
    this.a1d_1 = isYearOfEra;
  }
  protoOf(YearDirective).equals = function (other) {
    var tmp;
    var tmp_0;
    if (other instanceof YearDirective) {
      tmp_0 = this.z1c_1.equals(other.z1c_1);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = this.a1d_1 === other.a1d_1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(YearDirective).hashCode = function () {
    return imul(this.z1c_1.hashCode(), 31) + getBooleanHashCode(this.a1d_1) | 0;
  };
  function MonthDirective(padding) {
    var tmp = DateFields_getInstance().r1c_1;
    // Inline function 'kotlinx.datetime.format.minDigits' call
    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;
    // Inline function 'kotlinx.datetime.format.spaces' call
    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;
    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);
    this.l1d_1 = padding;
  }
  protoOf(MonthDirective).equals = function (other) {
    var tmp;
    if (other instanceof MonthDirective) {
      tmp = this.l1d_1.equals(other.l1d_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(MonthDirective).hashCode = function () {
    return this.l1d_1.hashCode();
  };
  function MonthNameDirective(names) {
    NamedUnsignedIntFieldFormatDirective.call(this, DateFields_getInstance().r1c_1, names.j1c_1, 'monthName');
    this.t1d_1 = names;
  }
  protoOf(MonthNameDirective).equals = function (other) {
    var tmp;
    if (other instanceof MonthNameDirective) {
      tmp = equals(this.t1d_1.j1c_1, other.t1d_1.j1c_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(MonthNameDirective).hashCode = function () {
    return hashCode(this.t1d_1.j1c_1);
  };
  function DayDirective(padding) {
    var tmp = DateFields_getInstance().s1c_1;
    // Inline function 'kotlinx.datetime.format.minDigits' call
    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;
    // Inline function 'kotlinx.datetime.format.spaces' call
    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;
    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);
    this.b1e_1 = padding;
  }
  protoOf(DayDirective).equals = function (other) {
    var tmp;
    if (other instanceof DayDirective) {
      tmp = this.b1e_1.equals(other.b1e_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(DayDirective).hashCode = function () {
    return this.b1e_1.hashCode();
  };
  function DayOfWeekDirective(names) {
    NamedUnsignedIntFieldFormatDirective.call(this, DateFields_getInstance().t1c_1, names.k1c_1, 'dayOfWeekName');
    this.f1e_1 = names;
  }
  protoOf(DayOfWeekDirective).equals = function (other) {
    var tmp;
    if (other instanceof DayOfWeekDirective) {
      tmp = equals(this.f1e_1.k1c_1, other.f1e_1.k1c_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(DayOfWeekDirective).hashCode = function () {
    return hashCode(this.f1e_1.k1c_1);
  };
  function DateFields() {
    DateFields_instance = this;
    this.q1c_1 = new GenericFieldSpec(new PropertyAccessor(year$factory_2()));
    this.r1c_1 = new UnsignedFieldSpec(new PropertyAccessor(monthNumber$factory_0()), 1, 12);
    this.s1c_1 = new UnsignedFieldSpec(new PropertyAccessor(dayOfMonth$factory_0()), 1, 31);
    this.t1c_1 = new UnsignedFieldSpec(new PropertyAccessor(isoDayOfWeek$factory()), 1, 7);
  }
  var DateFields_instance;
  function DateFields_getInstance() {
    if (DateFields_instance == null)
      new DateFields();
    return DateFields_instance;
  }
  function ISO_DATE$delegate$lambda() {
    _init_properties_LocalDateFormat_kt__k1uk9u();
    var tmp = Companion_instance_2;
    return tmp.l1c(ISO_DATE$delegate$lambda$lambda);
  }
  function ISO_DATE$delegate$lambda$lambda($this$build) {
    _init_properties_LocalDateFormat_kt__k1uk9u();
    $this$build.j19();
    char($this$build, _Char___init__impl__6a9atx(45));
    $this$build.g1b();
    char($this$build, _Char___init__impl__6a9atx(45));
    $this$build.h1b();
    return Unit_instance;
  }
  function ISO_DATE_BASIC$delegate$lambda() {
    _init_properties_LocalDateFormat_kt__k1uk9u();
    var tmp = Companion_instance_2;
    return tmp.l1c(ISO_DATE_BASIC$delegate$lambda$lambda);
  }
  function ISO_DATE_BASIC$delegate$lambda$lambda($this$build) {
    _init_properties_LocalDateFormat_kt__k1uk9u();
    $this$build.j19();
    $this$build.g1b();
    $this$build.h1b();
    return Unit_instance;
  }
  function ISO_DATE$factory() {
    return getPropertyCallableRef('ISO_DATE', 0, KProperty0, function () {
      return get_ISO_DATE();
    }, null);
  }
  function ISO_DATE_BASIC$factory() {
    return getPropertyCallableRef('ISO_DATE_BASIC', 0, KProperty0, function () {
      return get_ISO_DATE_BASIC();
    }, null);
  }
  function year$factory_2() {
    return getPropertyCallableRef('year', 1, KMutableProperty1, function (receiver) {
      return receiver.a17();
    }, function (receiver, value) {
      return receiver.q17(value);
    });
  }
  function monthNumber$factory_0() {
    return getPropertyCallableRef('monthNumber', 1, KMutableProperty1, function (receiver) {
      return receiver.b17();
    }, function (receiver, value) {
      return receiver.p17(value);
    });
  }
  function dayOfMonth$factory_0() {
    return getPropertyCallableRef('dayOfMonth', 1, KMutableProperty1, function (receiver) {
      return receiver.c17();
    }, function (receiver, value) {
      return receiver.i17(value);
    });
  }
  function isoDayOfWeek$factory() {
    return getPropertyCallableRef('isoDayOfWeek', 1, KMutableProperty1, function (receiver) {
      return receiver.o17();
    }, function (receiver, value) {
      return receiver.n17(value);
    });
  }
  var properties_initialized_LocalDateFormat_kt_fmnlhc;
  function _init_properties_LocalDateFormat_kt__k1uk9u() {
    if (!properties_initialized_LocalDateFormat_kt_fmnlhc) {
      properties_initialized_LocalDateFormat_kt_fmnlhc = true;
      ISO_DATE$delegate = lazy(ISO_DATE$delegate$lambda);
      ISO_DATE_BASIC$delegate = lazy(ISO_DATE_BASIC$delegate$lambda);
      emptyIncompleteLocalDate = new IncompleteLocalDate();
    }
  }
  function get_ISO_DATETIME() {
    _init_properties_LocalDateTimeFormat_kt__aloigl();
    // Inline function 'kotlin.getValue' call
    var this_0 = ISO_DATETIME$delegate;
    ISO_DATETIME$factory();
    return this_0.d2();
  }
  var ISO_DATETIME$delegate;
  function get_emptyIncompleteLocalDateTime() {
    _init_properties_LocalDateTimeFormat_kt__aloigl();
    return emptyIncompleteLocalDateTime;
  }
  var emptyIncompleteLocalDateTime;
  function Companion_3() {
  }
  protoOf(Companion_3).g1e = function (block) {
    var builder = new Builder_1(new AppendableFormatStructure());
    block(builder);
    return new LocalDateTimeFormat(builder.q19());
  };
  var Companion_instance_3;
  function Companion_getInstance_3() {
    return Companion_instance_3;
  }
  function Builder_1(actualBuilder) {
    this.h1e_1 = actualBuilder;
  }
  protoOf(Builder_1).u1a = function () {
    return this.h1e_1;
  };
  protoOf(Builder_1).v1a = function (structure) {
    this.h1e_1.x1a(structure);
  };
  protoOf(Builder_1).z1a = function () {
    return new Builder_1(new AppendableFormatStructure());
  };
  function LocalDateTimeFormat(actualFormat) {
    AbstractDateTimeFormat.call(this);
    this.i1e_1 = actualFormat;
  }
  protoOf(LocalDateTimeFormat).s1b = function () {
    return this.i1e_1;
  };
  protoOf(LocalDateTimeFormat).j1e = function (value) {
    // Inline function 'kotlin.apply' call
    var this_0 = new IncompleteLocalDateTime();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.format.LocalDateTimeFormat.intermediateFromValue.<anonymous>' call
    this_0.m1e(value);
    return this_0;
  };
  protoOf(LocalDateTimeFormat).u1b = function (value) {
    return this.j1e(value instanceof LocalDateTime_0 ? value : THROW_CCE());
  };
  protoOf(LocalDateTimeFormat).n1e = function (intermediate) {
    return intermediate.o1e();
  };
  protoOf(LocalDateTimeFormat).w1b = function (intermediate) {
    return this.n1e(intermediate instanceof IncompleteLocalDateTime ? intermediate : THROW_CCE());
  };
  protoOf(LocalDateTimeFormat).x1b = function () {
    return get_emptyIncompleteLocalDateTime();
  };
  function IncompleteLocalDateTime(date, time) {
    date = date === VOID ? new IncompleteLocalDate() : date;
    time = time === VOID ? new IncompleteLocalTime() : time;
    this.k1e_1 = date;
    this.l1e_1 = time;
  }
  protoOf(IncompleteLocalDateTime).i17 = function (_set____db54di) {
    this.k1e_1.l17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDateTime).c17 = function () {
    return this.k1e_1.l17_1;
  };
  protoOf(IncompleteLocalDateTime).n17 = function (_set____db54di) {
    this.k1e_1.m17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDateTime).o17 = function () {
    return this.k1e_1.m17_1;
  };
  protoOf(IncompleteLocalDateTime).p17 = function (_set____db54di) {
    this.k1e_1.k17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDateTime).b17 = function () {
    return this.k1e_1.k17_1;
  };
  protoOf(IncompleteLocalDateTime).q17 = function (_set____db54di) {
    this.k1e_1.j17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDateTime).a17 = function () {
    return this.k1e_1.j17_1;
  };
  protoOf(IncompleteLocalDateTime).r17 = function (_set____db54di) {
    this.l1e_1.u17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDateTime).y17 = function () {
    return this.l1e_1.u17_1;
  };
  protoOf(IncompleteLocalDateTime).z17 = function (value) {
    this.l1e_1.z17(value);
  };
  protoOf(IncompleteLocalDateTime).a18 = function () {
    return this.l1e_1.a18();
  };
  protoOf(IncompleteLocalDateTime).b18 = function (_set____db54di) {
    this.l1e_1.s17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDateTime).c18 = function () {
    return this.l1e_1.s17_1;
  };
  protoOf(IncompleteLocalDateTime).d18 = function (_set____db54di) {
    this.l1e_1.t17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDateTime).e18 = function () {
    return this.l1e_1.t17_1;
  };
  protoOf(IncompleteLocalDateTime).f18 = function (_set____db54di) {
    this.l1e_1.v17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDateTime).g18 = function () {
    return this.l1e_1.v17_1;
  };
  protoOf(IncompleteLocalDateTime).h18 = function (_set____db54di) {
    this.l1e_1.x17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDateTime).i18 = function () {
    return this.l1e_1.x17_1;
  };
  protoOf(IncompleteLocalDateTime).j18 = function (_set____db54di) {
    this.l1e_1.w17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalDateTime).k18 = function () {
    return this.l1e_1.w17_1;
  };
  protoOf(IncompleteLocalDateTime).o1e = function () {
    return LocalDateTime_init_$Create$_0(this.k1e_1.k1a(), this.l1e_1.i1a());
  };
  protoOf(IncompleteLocalDateTime).m1e = function (dateTime) {
    this.k1e_1.i1c(dateTime.q1e());
    this.l1e_1.s1e(dateTime.r1e());
  };
  protoOf(IncompleteLocalDateTime).x18 = function () {
    return new IncompleteLocalDateTime(this.k1e_1.x18(), this.l1e_1.x18());
  };
  function AbstractWithDateTimeBuilder() {
  }
  function ISO_DATETIME$delegate$lambda() {
    _init_properties_LocalDateTimeFormat_kt__aloigl();
    var tmp = Companion_instance_3;
    return tmp.g1e(ISO_DATETIME$delegate$lambda$lambda);
  }
  function ISO_DATETIME$delegate$lambda$lambda($this$build) {
    _init_properties_LocalDateTimeFormat_kt__aloigl();
    $this$build.y18(get_ISO_DATE());
    var tmp = [ISO_DATETIME$delegate$lambda$lambda$lambda];
    alternativeParsing($this$build, tmp, ISO_DATETIME$delegate$lambda$lambda$lambda_0);
    $this$build.l1b(get_ISO_TIME());
    return Unit_instance;
  }
  function ISO_DATETIME$delegate$lambda$lambda$lambda($this$alternativeParsing) {
    _init_properties_LocalDateTimeFormat_kt__aloigl();
    char($this$alternativeParsing, _Char___init__impl__6a9atx(116));
    return Unit_instance;
  }
  function ISO_DATETIME$delegate$lambda$lambda$lambda_0($this$alternativeParsing) {
    _init_properties_LocalDateTimeFormat_kt__aloigl();
    char($this$alternativeParsing, _Char___init__impl__6a9atx(84));
    return Unit_instance;
  }
  function ISO_DATETIME$factory() {
    return getPropertyCallableRef('ISO_DATETIME', 0, KProperty0, function () {
      return get_ISO_DATETIME();
    }, null);
  }
  var properties_initialized_LocalDateTimeFormat_kt_67ys6r;
  function _init_properties_LocalDateTimeFormat_kt__aloigl() {
    if (!properties_initialized_LocalDateTimeFormat_kt_67ys6r) {
      properties_initialized_LocalDateTimeFormat_kt_67ys6r = true;
      ISO_DATETIME$delegate = lazy(ISO_DATETIME$delegate$lambda);
      emptyIncompleteLocalDateTime = new IncompleteLocalDateTime();
    }
  }
  function get_ISO_TIME() {
    _init_properties_LocalTimeFormat_kt__5i3lfh();
    // Inline function 'kotlin.getValue' call
    var this_0 = ISO_TIME$delegate;
    ISO_TIME$factory();
    return this_0.d2();
  }
  var ISO_TIME$delegate;
  function get_emptyIncompleteLocalTime() {
    _init_properties_LocalTimeFormat_kt__5i3lfh();
    return emptyIncompleteLocalTime;
  }
  var emptyIncompleteLocalTime;
  function TimeFieldContainer() {
  }
  function IncompleteLocalTime(hour, hourOfAmPm, amPm, minute, second, nanosecond) {
    hour = hour === VOID ? null : hour;
    hourOfAmPm = hourOfAmPm === VOID ? null : hourOfAmPm;
    amPm = amPm === VOID ? null : amPm;
    minute = minute === VOID ? null : minute;
    second = second === VOID ? null : second;
    nanosecond = nanosecond === VOID ? null : nanosecond;
    this.s17_1 = hour;
    this.t17_1 = hourOfAmPm;
    this.u17_1 = amPm;
    this.v17_1 = minute;
    this.w17_1 = second;
    this.x17_1 = nanosecond;
  }
  protoOf(IncompleteLocalTime).b18 = function (_set____db54di) {
    this.s17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalTime).c18 = function () {
    return this.s17_1;
  };
  protoOf(IncompleteLocalTime).d18 = function (_set____db54di) {
    this.t17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalTime).e18 = function () {
    return this.t17_1;
  };
  protoOf(IncompleteLocalTime).r17 = function (_set____db54di) {
    this.u17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalTime).y17 = function () {
    return this.u17_1;
  };
  protoOf(IncompleteLocalTime).f18 = function (_set____db54di) {
    this.v17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalTime).g18 = function () {
    return this.v17_1;
  };
  protoOf(IncompleteLocalTime).j18 = function (_set____db54di) {
    this.w17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalTime).k18 = function () {
    return this.w17_1;
  };
  protoOf(IncompleteLocalTime).h18 = function (_set____db54di) {
    this.x17_1 = _set____db54di;
  };
  protoOf(IncompleteLocalTime).i18 = function () {
    return this.x17_1;
  };
  protoOf(IncompleteLocalTime).i1a = function () {
    var tmp0_safe_receiver = this.s17_1;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.datetime.format.IncompleteLocalTime.toLocalTime.<anonymous>' call
      var tmp0_safe_receiver_0 = this.t17_1;
      if (tmp0_safe_receiver_0 == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlin.require' call
        // Inline function 'kotlin.contracts.contract' call
        if (!((((tmp0_safe_receiver + 11 | 0) % 12 | 0) + 1 | 0) === tmp0_safe_receiver_0)) {
          // Inline function 'kotlinx.datetime.format.IncompleteLocalTime.toLocalTime.<anonymous>.<anonymous>.<anonymous>' call
          var message = 'Inconsistent hour and hour-of-am-pm: hour is ' + tmp0_safe_receiver + ', but hour-of-am-pm is ' + tmp0_safe_receiver_0;
          throw IllegalArgumentException_init_$Create$(toString(message));
        }
      }
      var tmp1_safe_receiver = this.u17_1;
      if (tmp1_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlin.require' call
        // Inline function 'kotlin.contracts.contract' call
        if (!(tmp1_safe_receiver.equals(AmPmMarker_PM_getInstance()) === tmp0_safe_receiver >= 12)) {
          // Inline function 'kotlinx.datetime.format.IncompleteLocalTime.toLocalTime.<anonymous>.<anonymous>.<anonymous>' call
          var message_0 = 'Inconsistent hour and the AM/PM marker: hour is ' + tmp0_safe_receiver + ', but the AM/PM marker is ' + tmp1_safe_receiver.toString();
          throw IllegalArgumentException_init_$Create$(toString(message_0));
        }
      }
      tmp = tmp0_safe_receiver;
    }
    var tmp2_elvis_lhs = tmp;
    var tmp_0;
    if (tmp2_elvis_lhs == null) {
      var tmp1_safe_receiver_0 = this.t17_1;
      var tmp_1;
      if (tmp1_safe_receiver_0 == null) {
        tmp_1 = null;
      } else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        // Inline function 'kotlinx.datetime.format.IncompleteLocalTime.toLocalTime.<anonymous>' call
        var tmp0_safe_receiver_1 = this.u17_1;
        var tmp_2;
        if (tmp0_safe_receiver_1 == null) {
          tmp_2 = null;
        } else {
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'kotlinx.datetime.format.IncompleteLocalTime.toLocalTime.<anonymous>.<anonymous>' call
          // Inline function 'kotlin.let' call
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'kotlinx.datetime.format.IncompleteLocalTime.toLocalTime.<anonymous>.<anonymous>.<anonymous>' call
          tmp_2 = (tmp1_safe_receiver_0 === 12 ? 0 : tmp1_safe_receiver_0) + (tmp0_safe_receiver_1.equals(AmPmMarker_PM_getInstance()) ? 12 : 0) | 0;
        }
        tmp_1 = tmp_2;
      }
      tmp_0 = tmp_1;
    } else {
      tmp_0 = tmp2_elvis_lhs;
    }
    var tmp3_elvis_lhs = tmp_0;
    var tmp_3;
    if (tmp3_elvis_lhs == null) {
      throw DateTimeFormatException_init_$Create$_0('Incomplete time: missing hour');
    } else {
      tmp_3 = tmp3_elvis_lhs;
    }
    var hour = tmp_3;
    var tmp_4 = requireParsedField(this.v17_1, 'minute');
    var tmp4_elvis_lhs = this.w17_1;
    var tmp_5 = tmp4_elvis_lhs == null ? 0 : tmp4_elvis_lhs;
    var tmp5_elvis_lhs = this.x17_1;
    return LocalTime_init_$Create$(hour, tmp_4, tmp_5, tmp5_elvis_lhs == null ? 0 : tmp5_elvis_lhs);
  };
  protoOf(IncompleteLocalTime).s1e = function (localTime) {
    this.s17_1 = localTime.c18();
    this.t17_1 = ((localTime.c18() + 11 | 0) % 12 | 0) + 1 | 0;
    this.u17_1 = localTime.c18() >= 12 ? AmPmMarker_PM_getInstance() : AmPmMarker_AM_getInstance();
    this.v17_1 = localTime.g18();
    this.w17_1 = localTime.k18();
    this.x17_1 = localTime.i18();
  };
  protoOf(IncompleteLocalTime).x18 = function () {
    return new IncompleteLocalTime(this.s17_1, this.t17_1, this.u17_1, this.v17_1, this.w17_1, this.x17_1);
  };
  protoOf(IncompleteLocalTime).equals = function (other) {
    var tmp;
    var tmp_0;
    var tmp_1;
    var tmp_2;
    var tmp_3;
    var tmp_4;
    if (other instanceof IncompleteLocalTime) {
      tmp_4 = this.s17_1 == other.s17_1;
    } else {
      tmp_4 = false;
    }
    if (tmp_4) {
      tmp_3 = this.t17_1 == other.t17_1;
    } else {
      tmp_3 = false;
    }
    if (tmp_3) {
      tmp_2 = equals(this.u17_1, other.u17_1);
    } else {
      tmp_2 = false;
    }
    if (tmp_2) {
      tmp_1 = this.v17_1 == other.v17_1;
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = this.w17_1 == other.w17_1;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = this.x17_1 == other.x17_1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(IncompleteLocalTime).hashCode = function () {
    var tmp6_elvis_lhs = this.s17_1;
    var tmp = imul(tmp6_elvis_lhs == null ? 0 : tmp6_elvis_lhs, 31);
    var tmp5_elvis_lhs = this.t17_1;
    var tmp_0 = tmp + imul(tmp5_elvis_lhs == null ? 0 : tmp5_elvis_lhs, 31) | 0;
    var tmp3_safe_receiver = this.u17_1;
    var tmp4_elvis_lhs = tmp3_safe_receiver == null ? null : tmp3_safe_receiver.hashCode();
    var tmp_1 = tmp_0 + imul(tmp4_elvis_lhs == null ? 0 : tmp4_elvis_lhs, 31) | 0;
    var tmp2_elvis_lhs = this.v17_1;
    var tmp_2 = tmp_1 + imul(tmp2_elvis_lhs == null ? 0 : tmp2_elvis_lhs, 31) | 0;
    var tmp1_elvis_lhs = this.w17_1;
    var tmp_3 = tmp_2 + imul(tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs, 31) | 0;
    var tmp0_elvis_lhs = this.x17_1;
    return tmp_3 + (tmp0_elvis_lhs == null ? 0 : tmp0_elvis_lhs) | 0;
  };
  protoOf(IncompleteLocalTime).toString = function () {
    var tmp0_elvis_lhs = this.s17_1;
    var tmp = toString(tmp0_elvis_lhs == null ? '??' : tmp0_elvis_lhs);
    var tmp1_elvis_lhs = this.v17_1;
    var tmp_0 = toString(tmp1_elvis_lhs == null ? '??' : tmp1_elvis_lhs);
    var tmp2_elvis_lhs = this.w17_1;
    var tmp_1 = toString(tmp2_elvis_lhs == null ? '??' : tmp2_elvis_lhs);
    var tmp3_safe_receiver = this.x17_1;
    var tmp_2;
    if (tmp3_safe_receiver == null) {
      tmp_2 = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.datetime.format.IncompleteLocalTime.toString.<anonymous>' call
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.datetime.format.IncompleteLocalTime.toString.<anonymous>.<anonymous>' call
      var it = tmp3_safe_receiver.toString();
      tmp_2 = padStart(it, 9 - it.length | 0, _Char___init__impl__6a9atx(48));
    }
    var tmp4_elvis_lhs = tmp_2;
    return tmp + ':' + tmp_0 + ':' + tmp_1 + '.' + (tmp4_elvis_lhs == null ? '???' : tmp4_elvis_lhs);
  };
  var AmPmMarker_AM_instance;
  var AmPmMarker_PM_instance;
  var AmPmMarker_entriesInitialized;
  function AmPmMarker_initEntries() {
    if (AmPmMarker_entriesInitialized)
      return Unit_instance;
    AmPmMarker_entriesInitialized = true;
    AmPmMarker_AM_instance = new AmPmMarker('AM', 0);
    AmPmMarker_PM_instance = new AmPmMarker('PM', 1);
  }
  function AmPmMarker(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function Companion_4() {
  }
  protoOf(Companion_4).w1e = function (block) {
    var builder = new Builder_2(new AppendableFormatStructure());
    block(builder);
    return new LocalTimeFormat(builder.q19());
  };
  var Companion_instance_4;
  function Companion_getInstance_4() {
    return Companion_instance_4;
  }
  function Builder_2(actualBuilder) {
    this.x1e_1 = actualBuilder;
  }
  protoOf(Builder_2).u1a = function () {
    return this.x1e_1;
  };
  protoOf(Builder_2).d1b = function (structure) {
    this.x1e_1.x1a(structure);
  };
  protoOf(Builder_2).z1a = function () {
    return new Builder_2(new AppendableFormatStructure());
  };
  function LocalTimeFormat(actualFormat) {
    AbstractDateTimeFormat.call(this);
    this.y1e_1 = actualFormat;
  }
  protoOf(LocalTimeFormat).s1b = function () {
    return this.y1e_1;
  };
  protoOf(LocalTimeFormat).z1e = function (value) {
    // Inline function 'kotlin.apply' call
    var this_0 = new IncompleteLocalTime();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.format.LocalTimeFormat.intermediateFromValue.<anonymous>' call
    this_0.s1e(value);
    return this_0;
  };
  protoOf(LocalTimeFormat).u1b = function (value) {
    return this.z1e(value instanceof LocalTime_0 ? value : THROW_CCE());
  };
  protoOf(LocalTimeFormat).a1f = function (intermediate) {
    return intermediate.i1a();
  };
  protoOf(LocalTimeFormat).w1b = function (intermediate) {
    return this.a1f(intermediate instanceof IncompleteLocalTime ? intermediate : THROW_CCE());
  };
  protoOf(LocalTimeFormat).x1b = function () {
    return get_emptyIncompleteLocalTime();
  };
  function AbstractWithTimeBuilder() {
  }
  function HourDirective(padding) {
    var tmp = TimeFields_getInstance().b1f_1;
    // Inline function 'kotlinx.datetime.format.minDigits' call
    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;
    // Inline function 'kotlinx.datetime.format.spaces' call
    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;
    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);
    this.l1f_1 = padding;
  }
  protoOf(HourDirective).equals = function (other) {
    var tmp;
    if (other instanceof HourDirective) {
      tmp = this.l1f_1.equals(other.l1f_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(HourDirective).hashCode = function () {
    return this.l1f_1.hashCode();
  };
  function MinuteDirective(padding) {
    var tmp = TimeFields_getInstance().c1f_1;
    // Inline function 'kotlinx.datetime.format.minDigits' call
    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;
    // Inline function 'kotlinx.datetime.format.spaces' call
    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;
    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);
    this.q1f_1 = padding;
  }
  protoOf(MinuteDirective).equals = function (other) {
    var tmp;
    if (other instanceof MinuteDirective) {
      tmp = this.q1f_1.equals(other.q1f_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(MinuteDirective).hashCode = function () {
    return this.q1f_1.hashCode();
  };
  function SecondDirective(padding) {
    var tmp = TimeFields_getInstance().d1f_1;
    // Inline function 'kotlinx.datetime.format.minDigits' call
    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;
    // Inline function 'kotlinx.datetime.format.spaces' call
    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;
    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);
    this.v1f_1 = padding;
  }
  protoOf(SecondDirective).equals = function (other) {
    var tmp;
    if (other instanceof SecondDirective) {
      tmp = this.v1f_1.equals(other.v1f_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(SecondDirective).hashCode = function () {
    return this.v1f_1.hashCode();
  };
  function Companion_5() {
    Companion_instance_5 = this;
    this.w1f_1 = listOf([0, 0, 0, 0, 0, 0, 0, 0, 0]);
    this.x1f_1 = listOf([2, 1, 0, 2, 1, 0, 2, 1, 0]);
  }
  var Companion_instance_5;
  function Companion_getInstance_5() {
    if (Companion_instance_5 == null)
      new Companion_5();
    return Companion_instance_5;
  }
  function FractionalSecondDirective(minDigits, maxDigits, zerosToAdd) {
    Companion_getInstance_5();
    zerosToAdd = zerosToAdd === VOID ? Companion_getInstance_5().w1f_1 : zerosToAdd;
    DecimalFractionFieldFormatDirective.call(this, TimeFields_getInstance().e1f_1, minDigits, maxDigits, zerosToAdd);
    this.c1g_1 = minDigits;
    this.d1g_1 = maxDigits;
  }
  protoOf(FractionalSecondDirective).equals = function (other) {
    var tmp;
    var tmp_0;
    if (other instanceof FractionalSecondDirective) {
      tmp_0 = this.c1g_1 === other.c1g_1;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = this.d1g_1 === other.d1g_1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(FractionalSecondDirective).hashCode = function () {
    return imul(31, this.c1g_1) + this.d1g_1 | 0;
  };
  function TimeFields() {
    TimeFields_instance = this;
    this.b1f_1 = new UnsignedFieldSpec(new PropertyAccessor(hour$factory_0()), 0, 23);
    this.c1f_1 = new UnsignedFieldSpec(new PropertyAccessor(minute$factory_0()), 0, 59);
    this.d1f_1 = new UnsignedFieldSpec(new PropertyAccessor(second$factory_0()), 0, 59, VOID, 0);
    this.e1f_1 = new GenericFieldSpec(new PropertyAccessor(fractionOfSecond$factory()), VOID, new DecimalFraction(0, 9));
    this.f1f_1 = new GenericFieldSpec(new PropertyAccessor(amPm$factory_0()));
    this.g1f_1 = new UnsignedFieldSpec(new PropertyAccessor(hourOfAmPm$factory_0()), 1, 12);
  }
  var TimeFields_instance;
  function TimeFields_getInstance() {
    if (TimeFields_instance == null)
      new TimeFields();
    return TimeFields_instance;
  }
  function ISO_TIME$delegate$lambda() {
    _init_properties_LocalTimeFormat_kt__5i3lfh();
    var tmp = Companion_instance_4;
    return tmp.w1e(ISO_TIME$delegate$lambda$lambda);
  }
  function ISO_TIME$delegate$lambda$lambda($this$build) {
    _init_properties_LocalTimeFormat_kt__5i3lfh();
    $this$build.z18();
    char($this$build, _Char___init__impl__6a9atx(58));
    $this$build.a19();
    var tmp = [ISO_TIME$delegate$lambda$lambda$lambda];
    alternativeParsing($this$build, tmp, ISO_TIME$delegate$lambda$lambda$lambda_0);
    return Unit_instance;
  }
  function ISO_TIME$delegate$lambda$lambda$lambda($this$alternativeParsing) {
    _init_properties_LocalTimeFormat_kt__5i3lfh();
    return Unit_instance;
  }
  function ISO_TIME$delegate$lambda$lambda$lambda_0($this$alternativeParsing) {
    _init_properties_LocalTimeFormat_kt__5i3lfh();
    char($this$alternativeParsing, _Char___init__impl__6a9atx(58));
    $this$alternativeParsing.b19();
    optional($this$alternativeParsing, VOID, ISO_TIME$delegate$lambda$lambda$lambda$lambda);
    return Unit_instance;
  }
  function ISO_TIME$delegate$lambda$lambda$lambda$lambda($this$optional) {
    _init_properties_LocalTimeFormat_kt__5i3lfh();
    char($this$optional, _Char___init__impl__6a9atx(46));
    $this$optional.c19(1, 9);
    return Unit_instance;
  }
  function AmPmMarker_AM_getInstance() {
    AmPmMarker_initEntries();
    return AmPmMarker_AM_instance;
  }
  function AmPmMarker_PM_getInstance() {
    AmPmMarker_initEntries();
    return AmPmMarker_PM_instance;
  }
  function ISO_TIME$factory() {
    return getPropertyCallableRef('ISO_TIME', 0, KProperty0, function () {
      return get_ISO_TIME();
    }, null);
  }
  function hour$factory_0() {
    return getPropertyCallableRef('hour', 1, KMutableProperty1, function (receiver) {
      return receiver.c18();
    }, function (receiver, value) {
      return receiver.b18(value);
    });
  }
  function minute$factory_0() {
    return getPropertyCallableRef('minute', 1, KMutableProperty1, function (receiver) {
      return receiver.g18();
    }, function (receiver, value) {
      return receiver.f18(value);
    });
  }
  function second$factory_0() {
    return getPropertyCallableRef('second', 1, KMutableProperty1, function (receiver) {
      return receiver.k18();
    }, function (receiver, value) {
      return receiver.j18(value);
    });
  }
  function fractionOfSecond$factory() {
    return getPropertyCallableRef('fractionOfSecond', 1, KMutableProperty1, function (receiver) {
      return receiver.a18();
    }, function (receiver, value) {
      return receiver.z17(value);
    });
  }
  function amPm$factory_0() {
    return getPropertyCallableRef('amPm', 1, KMutableProperty1, function (receiver) {
      return receiver.y17();
    }, function (receiver, value) {
      return receiver.r17(value);
    });
  }
  function hourOfAmPm$factory_0() {
    return getPropertyCallableRef('hourOfAmPm', 1, KMutableProperty1, function (receiver) {
      return receiver.e18();
    }, function (receiver, value) {
      return receiver.d18(value);
    });
  }
  var properties_initialized_LocalTimeFormat_kt_l1b0w1;
  function _init_properties_LocalTimeFormat_kt__5i3lfh() {
    if (!properties_initialized_LocalTimeFormat_kt_l1b0w1) {
      properties_initialized_LocalTimeFormat_kt_l1b0w1 = true;
      ISO_TIME$delegate = lazy(ISO_TIME$delegate$lambda);
      emptyIncompleteLocalTime = new IncompleteLocalTime();
    }
  }
  function get_ISO_OFFSET() {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    // Inline function 'kotlin.getValue' call
    var this_0 = ISO_OFFSET$delegate;
    ISO_OFFSET$factory();
    return this_0.d2();
  }
  var ISO_OFFSET$delegate;
  function get_ISO_OFFSET_BASIC() {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    // Inline function 'kotlin.getValue' call
    var this_0 = ISO_OFFSET_BASIC$delegate;
    ISO_OFFSET_BASIC$factory();
    return this_0.d2();
  }
  var ISO_OFFSET_BASIC$delegate;
  function get_FOUR_DIGIT_OFFSET() {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    // Inline function 'kotlin.getValue' call
    var this_0 = FOUR_DIGIT_OFFSET$delegate;
    FOUR_DIGIT_OFFSET$factory();
    return this_0.d2();
  }
  var FOUR_DIGIT_OFFSET$delegate;
  function get_emptyIncompleteUtcOffset() {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    return emptyIncompleteUtcOffset;
  }
  var emptyIncompleteUtcOffset;
  function UtcOffsetFieldContainer() {
  }
  function IncompleteUtcOffset(isNegative, totalHoursAbs, minutesOfHour, secondsOfMinute) {
    isNegative = isNegative === VOID ? null : isNegative;
    totalHoursAbs = totalHoursAbs === VOID ? null : totalHoursAbs;
    minutesOfHour = minutesOfHour === VOID ? null : minutesOfHour;
    secondsOfMinute = secondsOfMinute === VOID ? null : secondsOfMinute;
    this.m18_1 = isNegative;
    this.n18_1 = totalHoursAbs;
    this.o18_1 = minutesOfHour;
    this.p18_1 = secondsOfMinute;
  }
  protoOf(IncompleteUtcOffset).l18 = function (_set____db54di) {
    this.m18_1 = _set____db54di;
  };
  protoOf(IncompleteUtcOffset).q18 = function () {
    return this.m18_1;
  };
  protoOf(IncompleteUtcOffset).v18 = function (_set____db54di) {
    this.n18_1 = _set____db54di;
  };
  protoOf(IncompleteUtcOffset).w18 = function () {
    return this.n18_1;
  };
  protoOf(IncompleteUtcOffset).r18 = function (_set____db54di) {
    this.o18_1 = _set____db54di;
  };
  protoOf(IncompleteUtcOffset).s18 = function () {
    return this.o18_1;
  };
  protoOf(IncompleteUtcOffset).t18 = function (_set____db54di) {
    this.p18_1 = _set____db54di;
  };
  protoOf(IncompleteUtcOffset).u18 = function () {
    return this.p18_1;
  };
  protoOf(IncompleteUtcOffset).h1a = function () {
    var sign = this.m18_1 === true ? -1 : 1;
    var tmp0_safe_receiver = this.n18_1;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.datetime.format.IncompleteUtcOffset.toUtcOffset.<anonymous>' call
      tmp = imul(tmp0_safe_receiver, sign);
    }
    var tmp_0 = tmp;
    var tmp1_safe_receiver = this.o18_1;
    var tmp_1;
    if (tmp1_safe_receiver == null) {
      tmp_1 = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.datetime.format.IncompleteUtcOffset.toUtcOffset.<anonymous>' call
      tmp_1 = imul(tmp1_safe_receiver, sign);
    }
    var tmp_2 = tmp_1;
    var tmp2_safe_receiver = this.p18_1;
    var tmp_3;
    if (tmp2_safe_receiver == null) {
      tmp_3 = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.datetime.format.IncompleteUtcOffset.toUtcOffset.<anonymous>' call
      tmp_3 = imul(tmp2_safe_receiver, sign);
    }
    return UtcOffset_0(tmp_0, tmp_2, tmp_3);
  };
  protoOf(IncompleteUtcOffset).i1g = function (offset) {
    this.m18_1 = offset.p1a() < 0;
    // Inline function 'kotlin.math.absoluteValue' call
    var this_0 = offset.p1a();
    var totalSecondsAbs = abs(this_0);
    this.n18_1 = totalSecondsAbs / 3600 | 0;
    this.o18_1 = (totalSecondsAbs / 60 | 0) % 60 | 0;
    this.p18_1 = totalSecondsAbs % 60 | 0;
  };
  protoOf(IncompleteUtcOffset).equals = function (other) {
    var tmp;
    var tmp_0;
    var tmp_1;
    var tmp_2;
    if (other instanceof IncompleteUtcOffset) {
      tmp_2 = this.m18_1 == other.m18_1;
    } else {
      tmp_2 = false;
    }
    if (tmp_2) {
      tmp_1 = this.n18_1 == other.n18_1;
    } else {
      tmp_1 = false;
    }
    if (tmp_1) {
      tmp_0 = this.o18_1 == other.o18_1;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = this.p18_1 == other.p18_1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(IncompleteUtcOffset).hashCode = function () {
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver = this.m18_1;
    var tmp1_elvis_lhs = tmp0_safe_receiver == null ? null : hashCode(tmp0_safe_receiver);
    var tmp = tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver_0 = this.n18_1;
    var tmp1_elvis_lhs_0 = tmp0_safe_receiver_0 == null ? null : hashCode(tmp0_safe_receiver_0);
    var tmp_0 = tmp + (tmp1_elvis_lhs_0 == null ? 0 : tmp1_elvis_lhs_0) | 0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver_1 = this.o18_1;
    var tmp1_elvis_lhs_1 = tmp0_safe_receiver_1 == null ? null : hashCode(tmp0_safe_receiver_1);
    var tmp_1 = tmp_0 + (tmp1_elvis_lhs_1 == null ? 0 : tmp1_elvis_lhs_1) | 0;
    // Inline function 'kotlin.hashCode' call
    var tmp0_safe_receiver_2 = this.p18_1;
    var tmp1_elvis_lhs_2 = tmp0_safe_receiver_2 == null ? null : hashCode(tmp0_safe_receiver_2);
    return tmp_1 + (tmp1_elvis_lhs_2 == null ? 0 : tmp1_elvis_lhs_2) | 0;
  };
  protoOf(IncompleteUtcOffset).x18 = function () {
    return new IncompleteUtcOffset(this.m18_1, this.n18_1, this.o18_1, this.p18_1);
  };
  protoOf(IncompleteUtcOffset).toString = function () {
    var tmp0_safe_receiver = this.m18_1;
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.datetime.format.IncompleteUtcOffset.toString.<anonymous>' call
      tmp = tmp0_safe_receiver ? '-' : '+';
    }
    var tmp1_elvis_lhs = tmp;
    var tmp_0 = tmp1_elvis_lhs == null ? ' ' : tmp1_elvis_lhs;
    var tmp2_elvis_lhs = this.n18_1;
    var tmp_1 = toString(tmp2_elvis_lhs == null ? '??' : tmp2_elvis_lhs);
    var tmp3_elvis_lhs = this.o18_1;
    var tmp_2 = toString(tmp3_elvis_lhs == null ? '??' : tmp3_elvis_lhs);
    var tmp4_elvis_lhs = this.p18_1;
    return tmp_0 + tmp_1 + ':' + tmp_2 + ':' + toString(tmp4_elvis_lhs == null ? '??' : tmp4_elvis_lhs);
  };
  function UtcOffsetWholeHoursDirective(padding) {
    var tmp = OffsetFields_getInstance().k1g_1;
    // Inline function 'kotlinx.datetime.format.minDigits' call
    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;
    // Inline function 'kotlinx.datetime.format.spaces' call
    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;
    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);
    this.r1g_1 = padding;
  }
  protoOf(UtcOffsetWholeHoursDirective).equals = function (other) {
    var tmp;
    if (other instanceof UtcOffsetWholeHoursDirective) {
      tmp = this.r1g_1.equals(other.r1g_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(UtcOffsetWholeHoursDirective).hashCode = function () {
    return this.r1g_1.hashCode();
  };
  function Companion_6() {
  }
  protoOf(Companion_6).s1g = function (block) {
    var builder = new Builder_3(new AppendableFormatStructure());
    block(builder);
    return new UtcOffsetFormat(builder.q19());
  };
  var Companion_instance_6;
  function Companion_getInstance_6() {
    return Companion_instance_6;
  }
  function Builder_3(actualBuilder) {
    this.t1g_1 = actualBuilder;
  }
  protoOf(Builder_3).u1a = function () {
    return this.t1g_1;
  };
  protoOf(Builder_3).y1a = function (structure) {
    this.t1g_1.x1a(structure);
  };
  protoOf(Builder_3).z1a = function () {
    return new Builder_3(new AppendableFormatStructure());
  };
  function UtcOffsetFormat(actualFormat) {
    AbstractDateTimeFormat.call(this);
    this.u1g_1 = actualFormat;
  }
  protoOf(UtcOffsetFormat).s1b = function () {
    return this.u1g_1;
  };
  protoOf(UtcOffsetFormat).v1g = function (value) {
    // Inline function 'kotlin.apply' call
    var this_0 = new IncompleteUtcOffset();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.format.UtcOffsetFormat.intermediateFromValue.<anonymous>' call
    this_0.i1g(value);
    return this_0;
  };
  protoOf(UtcOffsetFormat).u1b = function (value) {
    return this.v1g(value instanceof UtcOffset ? value : THROW_CCE());
  };
  protoOf(UtcOffsetFormat).w1g = function (intermediate) {
    return intermediate.h1a();
  };
  protoOf(UtcOffsetFormat).w1b = function (intermediate) {
    return this.w1g(intermediate instanceof IncompleteUtcOffset ? intermediate : THROW_CCE());
  };
  protoOf(UtcOffsetFormat).x1b = function () {
    return get_emptyIncompleteUtcOffset();
  };
  function OffsetFields$sign$1() {
    this.x1g_1 = new PropertyAccessor(isNegative$factory_0());
  }
  protoOf(OffsetFields$sign$1).q18 = function () {
    return this.x1g_1;
  };
  protoOf(OffsetFields$sign$1).y1g = function (obj) {
    var tmp;
    var tmp_0;
    var tmp0_elvis_lhs = obj.w18();
    if ((tmp0_elvis_lhs == null ? 0 : tmp0_elvis_lhs) === 0) {
      var tmp1_elvis_lhs = obj.s18();
      tmp_0 = (tmp1_elvis_lhs == null ? 0 : tmp1_elvis_lhs) === 0;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      var tmp2_elvis_lhs = obj.u18();
      tmp = (tmp2_elvis_lhs == null ? 0 : tmp2_elvis_lhs) === 0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(OffsetFields$sign$1).z1g = function (obj) {
    return this.y1g((!(obj == null) ? isInterface(obj, UtcOffsetFieldContainer) : false) ? obj : THROW_CCE());
  };
  function OffsetFields() {
    OffsetFields_instance = this;
    var tmp = this;
    tmp.j1g_1 = new OffsetFields$sign$1();
    var tmp_0 = this;
    var tmp0_accessor = new PropertyAccessor(totalHoursAbs$factory_0());
    var tmp1_sign = this.j1g_1;
    tmp_0.k1g_1 = new UnsignedFieldSpec(tmp0_accessor, 0, 18, VOID, 0, tmp1_sign);
    var tmp_1 = this;
    var tmp0_accessor_0 = new PropertyAccessor(minutesOfHour$factory_0());
    var tmp1_sign_0 = this.j1g_1;
    tmp_1.l1g_1 = new UnsignedFieldSpec(tmp0_accessor_0, 0, 59, VOID, 0, tmp1_sign_0);
    var tmp_2 = this;
    var tmp0_accessor_1 = new PropertyAccessor(secondsOfMinute$factory_0());
    var tmp1_sign_1 = this.j1g_1;
    tmp_2.m1g_1 = new UnsignedFieldSpec(tmp0_accessor_1, 0, 59, VOID, 0, tmp1_sign_1);
  }
  var OffsetFields_instance;
  function OffsetFields_getInstance() {
    if (OffsetFields_instance == null)
      new OffsetFields();
    return OffsetFields_instance;
  }
  function AbstractWithOffsetBuilder() {
  }
  function UtcOffsetMinuteOfHourDirective(padding) {
    var tmp = OffsetFields_getInstance().l1g_1;
    // Inline function 'kotlinx.datetime.format.minDigits' call
    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;
    // Inline function 'kotlinx.datetime.format.spaces' call
    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;
    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);
    this.e1h_1 = padding;
  }
  protoOf(UtcOffsetMinuteOfHourDirective).equals = function (other) {
    var tmp;
    if (other instanceof UtcOffsetMinuteOfHourDirective) {
      tmp = this.e1h_1.equals(other.e1h_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(UtcOffsetMinuteOfHourDirective).hashCode = function () {
    return this.e1h_1.hashCode();
  };
  function UtcOffsetSecondOfMinuteDirective(padding) {
    var tmp = OffsetFields_getInstance().m1g_1;
    // Inline function 'kotlinx.datetime.format.minDigits' call
    var tmp_0 = padding.equals(Padding_ZERO_getInstance()) ? 2 : 1;
    // Inline function 'kotlinx.datetime.format.spaces' call
    var tmp$ret$1 = padding.equals(Padding_SPACE_getInstance()) ? 2 : null;
    UnsignedIntFieldFormatDirective.call(this, tmp, tmp_0, tmp$ret$1);
    this.j1h_1 = padding;
  }
  protoOf(UtcOffsetSecondOfMinuteDirective).equals = function (other) {
    var tmp;
    if (other instanceof UtcOffsetSecondOfMinuteDirective) {
      tmp = this.j1h_1.equals(other.j1h_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(UtcOffsetSecondOfMinuteDirective).hashCode = function () {
    return this.j1h_1.hashCode();
  };
  function ISO_OFFSET$delegate$lambda() {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    var tmp = Companion_instance_6;
    return tmp.s1g(ISO_OFFSET$delegate$lambda$lambda);
  }
  function ISO_OFFSET$delegate$lambda$lambda($this$build) {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    var tmp = [ISO_OFFSET$delegate$lambda$lambda$lambda];
    alternativeParsing($this$build, tmp, ISO_OFFSET$delegate$lambda$lambda$lambda_0);
    return Unit_instance;
  }
  function ISO_OFFSET$delegate$lambda$lambda$lambda($this$alternativeParsing) {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    $this$alternativeParsing.k19('z');
    return Unit_instance;
  }
  function ISO_OFFSET$delegate$lambda$lambda$lambda_0($this$alternativeParsing) {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    optional($this$alternativeParsing, 'Z', ISO_OFFSET$delegate$lambda$lambda$lambda$lambda);
    return Unit_instance;
  }
  function ISO_OFFSET$delegate$lambda$lambda$lambda$lambda($this$optional) {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    $this$optional.d19();
    char($this$optional, _Char___init__impl__6a9atx(58));
    $this$optional.o1b();
    optional($this$optional, VOID, ISO_OFFSET$delegate$lambda$lambda$lambda$lambda$lambda);
    return Unit_instance;
  }
  function ISO_OFFSET$delegate$lambda$lambda$lambda$lambda$lambda($this$optional) {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    char($this$optional, _Char___init__impl__6a9atx(58));
    $this$optional.q1b();
    return Unit_instance;
  }
  function ISO_OFFSET_BASIC$delegate$lambda() {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    var tmp = Companion_instance_6;
    return tmp.s1g(ISO_OFFSET_BASIC$delegate$lambda$lambda);
  }
  function ISO_OFFSET_BASIC$delegate$lambda$lambda($this$build) {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    var tmp = [ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda];
    alternativeParsing($this$build, tmp, ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda_0);
    return Unit_instance;
  }
  function ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda($this$alternativeParsing) {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    $this$alternativeParsing.k19('z');
    return Unit_instance;
  }
  function ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda_0($this$alternativeParsing) {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    optional($this$alternativeParsing, 'Z', ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda$lambda);
    return Unit_instance;
  }
  function ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda$lambda($this$optional) {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    $this$optional.d19();
    optional($this$optional, VOID, ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda$lambda$lambda);
    return Unit_instance;
  }
  function ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda$lambda$lambda($this$optional) {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    $this$optional.o1b();
    optional($this$optional, VOID, ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda$lambda$lambda$lambda);
    return Unit_instance;
  }
  function ISO_OFFSET_BASIC$delegate$lambda$lambda$lambda$lambda$lambda$lambda($this$optional) {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    $this$optional.q1b();
    return Unit_instance;
  }
  function FOUR_DIGIT_OFFSET$delegate$lambda() {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    var tmp = Companion_instance_6;
    return tmp.s1g(FOUR_DIGIT_OFFSET$delegate$lambda$lambda);
  }
  function FOUR_DIGIT_OFFSET$delegate$lambda$lambda($this$build) {
    _init_properties_UtcOffsetFormat_kt__9r9ddw();
    $this$build.d19();
    $this$build.o1b();
    return Unit_instance;
  }
  function ISO_OFFSET$factory() {
    return getPropertyCallableRef('ISO_OFFSET', 0, KProperty0, function () {
      return get_ISO_OFFSET();
    }, null);
  }
  function ISO_OFFSET_BASIC$factory() {
    return getPropertyCallableRef('ISO_OFFSET_BASIC', 0, KProperty0, function () {
      return get_ISO_OFFSET_BASIC();
    }, null);
  }
  function FOUR_DIGIT_OFFSET$factory() {
    return getPropertyCallableRef('FOUR_DIGIT_OFFSET', 0, KProperty0, function () {
      return get_FOUR_DIGIT_OFFSET();
    }, null);
  }
  function totalHoursAbs$factory_0() {
    return getPropertyCallableRef('totalHoursAbs', 1, KMutableProperty1, function (receiver) {
      return receiver.w18();
    }, function (receiver, value) {
      return receiver.v18(value);
    });
  }
  function minutesOfHour$factory_0() {
    return getPropertyCallableRef('minutesOfHour', 1, KMutableProperty1, function (receiver) {
      return receiver.s18();
    }, function (receiver, value) {
      return receiver.r18(value);
    });
  }
  function secondsOfMinute$factory_0() {
    return getPropertyCallableRef('secondsOfMinute', 1, KMutableProperty1, function (receiver) {
      return receiver.u18();
    }, function (receiver, value) {
      return receiver.t18(value);
    });
  }
  function isNegative$factory_0() {
    return getPropertyCallableRef('isNegative', 1, KMutableProperty1, function (receiver) {
      return receiver.q18();
    }, function (receiver, value) {
      return receiver.l18(value);
    });
  }
  var properties_initialized_UtcOffsetFormat_kt_6y9jku;
  function _init_properties_UtcOffsetFormat_kt__9r9ddw() {
    if (!properties_initialized_UtcOffsetFormat_kt_6y9jku) {
      properties_initialized_UtcOffsetFormat_kt_6y9jku = true;
      ISO_OFFSET$delegate = lazy(ISO_OFFSET$delegate$lambda);
      ISO_OFFSET_BASIC$delegate = lazy(ISO_OFFSET_BASIC$delegate$lambda);
      FOUR_DIGIT_OFFSET$delegate = lazy(FOUR_DIGIT_OFFSET$delegate$lambda);
      emptyIncompleteUtcOffset = new IncompleteUtcOffset();
    }
  }
  function AppendableFormatStructure() {
    var tmp = this;
    // Inline function 'kotlin.collections.mutableListOf' call
    tmp.w1a_1 = ArrayList_init_$Create$_0();
  }
  protoOf(AppendableFormatStructure).q19 = function () {
    return new ConcatenatedFormatStructure(this.w1a_1);
  };
  protoOf(AppendableFormatStructure).x1a = function (format) {
    if (isInterface(format, NonConcatenatedFormatStructure)) {
      this.w1a_1.l(format);
    } else {
      if (format instanceof ConcatenatedFormatStructure) {
        // Inline function 'kotlin.collections.forEach' call
        var tmp0_iterator = format.g1c_1.n();
        while (tmp0_iterator.o()) {
          var element = tmp0_iterator.p();
          // Inline function 'kotlinx.datetime.internal.format.AppendableFormatStructure.add.<anonymous>' call
          this.w1a_1.l(element);
        }
      }
    }
  };
  function Accessor$getterNotNull$ref($boundThis) {
    var l = function (p0) {
      return $boundThis.k1h(p0);
    };
    l.callableName = 'getterNotNull';
    return l;
  }
  function SignedIntFieldFormatDirective(field, minDigits, maxDigits, spacePadding, outputPlusOnExceededWidth) {
    this.b1d_1 = field;
    this.c1d_1 = minDigits;
    this.d1d_1 = maxDigits;
    this.e1d_1 = spacePadding;
    this.f1d_1 = outputPlusOnExceededWidth;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.c1d_1 == null || this.c1d_1 >= 0)) {
      // Inline function 'kotlinx.datetime.internal.format.SignedIntFieldFormatDirective.<anonymous>' call
      var message = 'The minimum number of digits (' + this.c1d_1 + ') is negative';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.d1d_1 == null || this.c1d_1 == null || this.d1d_1 >= this.c1d_1)) {
      // Inline function 'kotlinx.datetime.internal.format.SignedIntFieldFormatDirective.<anonymous>' call
      var message_0 = 'The maximum number of digits (' + this.d1d_1 + ') is less than the minimum number of digits (' + this.c1d_1 + ')';
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
  }
  protoOf(SignedIntFieldFormatDirective).g1d = function () {
    return this.b1d_1;
  };
  protoOf(SignedIntFieldFormatDirective).d1c = function () {
    var tmp = Accessor$getterNotNull$ref(this.b1d_1.l1h());
    var tmp0_elvis_lhs = this.c1d_1;
    var formatter = new SignedIntFormatterStructure(tmp, tmp0_elvis_lhs == null ? 0 : tmp0_elvis_lhs, this.f1d_1);
    return !(this.e1d_1 == null) ? new SpacePaddedFormatter(formatter, this.e1d_1) : formatter;
  };
  protoOf(SignedIntFieldFormatDirective).f1c = function () {
    return SignedIntParser(this.c1d_1, this.d1d_1, this.e1d_1, this.b1d_1.l1h(), this.b1d_1.w2(), this.f1d_1);
  };
  function Accessor$getterNotNull$ref_0($boundThis) {
    var l = function (p0) {
      return $boundThis.k1h(p0);
    };
    l.callableName = 'getterNotNull';
    return l;
  }
  function UnsignedIntFieldFormatDirective(field, minDigits, spacePadding) {
    this.m1d_1 = field;
    this.n1d_1 = minDigits;
    this.o1d_1 = spacePadding;
    this.p1d_1 = this.m1d_1.s1h_1;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.n1d_1 >= 0)) {
      // Inline function 'kotlinx.datetime.internal.format.UnsignedIntFieldFormatDirective.<anonymous>' call
      var message = 'The minimum number of digits (' + this.n1d_1 + ') is negative';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.p1d_1 >= this.n1d_1)) {
      // Inline function 'kotlinx.datetime.internal.format.UnsignedIntFieldFormatDirective.<anonymous>' call
      var message_0 = 'The maximum number of digits (' + this.p1d_1 + ') is less than the minimum number of digits (' + this.n1d_1 + ')';
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
    if (!(this.o1d_1 == null)) {
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.contracts.contract' call
      if (!(this.o1d_1 > this.n1d_1)) {
        // Inline function 'kotlinx.datetime.internal.format.UnsignedIntFieldFormatDirective.<anonymous>' call
        var message_1 = 'The space padding (' + this.o1d_1 + ') should be more than the minimum number of digits (' + this.n1d_1 + ')';
        throw IllegalArgumentException_init_$Create$(toString(message_1));
      }
    }
  }
  protoOf(UnsignedIntFieldFormatDirective).g1d = function () {
    return this.m1d_1;
  };
  protoOf(UnsignedIntFieldFormatDirective).d1c = function () {
    var formatter = new UnsignedIntFormatterStructure(Accessor$getterNotNull$ref_0(this.m1d_1.m1h_1), this.n1d_1);
    return !(this.o1d_1 == null) ? new SpacePaddedFormatter(formatter, this.o1d_1) : formatter;
  };
  protoOf(UnsignedIntFieldFormatDirective).f1c = function () {
    return spaceAndZeroPaddedUnsignedInt(this.n1d_1, this.p1d_1, this.o1d_1, this.m1d_1.m1h_1, this.m1d_1.p1h_1);
  };
  function getStringValue($this, target) {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.internal.format.NamedUnsignedIntFieldFormatDirective.getStringValue.<anonymous>' call
    var it = $this.u1d_1.m1h_1.k1h(target);
    var tmp0_elvis_lhs = getOrNull($this.v1d_1, it - $this.u1d_1.n1h_1 | 0);
    return tmp0_elvis_lhs == null ? 'The value ' + it + ' of ' + $this.u1d_1.p1h_1 + ' does not have a corresponding string representation' : tmp0_elvis_lhs;
  }
  function AssignableString($outer) {
    this.t1h_1 = $outer;
  }
  protoOf(AssignableString).u1h = function (container, newValue) {
    var tmp0_safe_receiver = this.t1h_1.u1d_1.m1h_1.v1h(container, this.t1h_1.v1d_1.y1(newValue) + this.t1h_1.u1d_1.n1h_1 | 0);
    var tmp;
    if (tmp0_safe_receiver == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.datetime.internal.format.AssignableString.trySetWithoutReassigning.<anonymous>' call
      tmp = this.t1h_1.v1d_1.r(tmp0_safe_receiver - this.t1h_1.u1d_1.n1h_1 | 0);
    }
    return tmp;
  };
  protoOf(AssignableString).v1h = function (container, newValue) {
    var tmp = (container == null ? true : !(container == null)) ? container : THROW_CCE();
    return this.u1h(tmp, (!(newValue == null) ? typeof newValue === 'string' : false) ? newValue : THROW_CCE());
  };
  protoOf(AssignableString).w2 = function () {
    return this.t1h_1.w1d_1;
  };
  function NamedUnsignedIntFieldFormatDirective$getStringValue$ref($boundThis) {
    var l = function (p0) {
      return getStringValue($boundThis, p0);
    };
    l.callableName = 'getStringValue';
    return l;
  }
  function NamedUnsignedIntFieldFormatDirective(field, values, name) {
    this.u1d_1 = field;
    this.v1d_1 = values;
    this.w1d_1 = name;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.v1d_1.q() === ((this.u1d_1.o1h_1 - this.u1d_1.n1h_1 | 0) + 1 | 0))) {
      // Inline function 'kotlinx.datetime.internal.format.NamedUnsignedIntFieldFormatDirective.<anonymous>' call
      var message = 'The number of values (' + this.v1d_1.q() + ') in ' + toString(this.v1d_1) + ' does not match the range of the field (' + ((this.u1d_1.o1h_1 - this.u1d_1.n1h_1 | 0) + 1 | 0) + ')';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(NamedUnsignedIntFieldFormatDirective).g1d = function () {
    return this.u1d_1;
  };
  protoOf(NamedUnsignedIntFieldFormatDirective).d1c = function () {
    return new StringFormatterStructure(NamedUnsignedIntFieldFormatDirective$getStringValue$ref(this));
  };
  protoOf(NamedUnsignedIntFieldFormatDirective).f1c = function () {
    return new ParserStructure(listOf_0(new StringSetParserOperation(this.v1d_1, new AssignableString(this), 'one of ' + toString(this.v1d_1) + ' for ' + this.w1d_1)), emptyList());
  };
  function Accessor$getterNotNull$ref_1($boundThis) {
    var l = function (p0) {
      return $boundThis.k1h(p0);
    };
    l.callableName = 'getterNotNull';
    return l;
  }
  function DecimalFractionFieldFormatDirective(field, minDigits, maxDigits, zerosToAdd) {
    this.e1g_1 = field;
    this.f1g_1 = minDigits;
    this.g1g_1 = maxDigits;
    this.h1g_1 = zerosToAdd;
  }
  protoOf(DecimalFractionFieldFormatDirective).g1d = function () {
    return this.e1g_1;
  };
  protoOf(DecimalFractionFieldFormatDirective).d1c = function () {
    return new DecimalFractionFormatterStructure(Accessor$getterNotNull$ref_1(this.e1g_1.l1h()), this.f1g_1, this.g1g_1, this.h1g_1);
  };
  protoOf(DecimalFractionFieldFormatDirective).f1c = function () {
    return new ParserStructure(listOf_0(new NumberSpanParserOperation(listOf_0(new FractionPartConsumer(this.f1g_1, this.g1g_1, this.e1g_1.l1h(), this.e1g_1.w2())))), emptyList());
  };
  function GenericFieldSpec(accessor, name, defaultValue, sign) {
    name = name === VOID ? accessor.w2() : name;
    defaultValue = defaultValue === VOID ? null : defaultValue;
    sign = sign === VOID ? null : sign;
    AbstractFieldSpec.call(this);
    this.w1h_1 = accessor;
    this.x1h_1 = name;
    this.y1h_1 = defaultValue;
    this.z1h_1 = sign;
  }
  protoOf(GenericFieldSpec).l1h = function () {
    return this.w1h_1;
  };
  protoOf(GenericFieldSpec).w2 = function () {
    return this.x1h_1;
  };
  protoOf(GenericFieldSpec).a1i = function () {
    return this.y1h_1;
  };
  protoOf(GenericFieldSpec).b1i = function () {
    return this.z1h_1;
  };
  function PropertyAccessor(property) {
    this.c1i_1 = property;
  }
  protoOf(PropertyAccessor).w2 = function () {
    return this.c1i_1.callableName;
  };
  protoOf(PropertyAccessor).d1i = function (container, newValue) {
    var oldValue = this.c1i_1.get(container);
    var tmp;
    if (oldValue === null) {
      this.c1i_1.set(container, newValue);
      tmp = null;
    } else if (equals(oldValue, newValue)) {
      tmp = null;
    } else {
      tmp = oldValue;
    }
    return tmp;
  };
  protoOf(PropertyAccessor).v1h = function (container, newValue) {
    var tmp = (container == null ? true : !(container == null)) ? container : THROW_CCE();
    return this.d1i(tmp, (newValue == null ? true : !(newValue == null)) ? newValue : THROW_CCE());
  };
  protoOf(PropertyAccessor).e1i = function (container) {
    return this.c1i_1.get(container);
  };
  function UnsignedFieldSpec(accessor, minValue, maxValue, name, defaultValue, sign) {
    name = name === VOID ? accessor.w2() : name;
    defaultValue = defaultValue === VOID ? null : defaultValue;
    sign = sign === VOID ? null : sign;
    AbstractFieldSpec.call(this);
    this.m1h_1 = accessor;
    this.n1h_1 = minValue;
    this.o1h_1 = maxValue;
    this.p1h_1 = name;
    this.q1h_1 = defaultValue;
    this.r1h_1 = sign;
    var tmp = this;
    var tmp_0;
    if (this.o1h_1 < 10) {
      tmp_0 = 1;
    } else if (this.o1h_1 < 100) {
      tmp_0 = 2;
    } else if (this.o1h_1 < 1000) {
      tmp_0 = 3;
    } else {
      throw IllegalArgumentException_init_$Create$('Max value ' + this.o1h_1 + ' is too large');
    }
    tmp.s1h_1 = tmp_0;
  }
  protoOf(UnsignedFieldSpec).l1h = function () {
    return this.m1h_1;
  };
  protoOf(UnsignedFieldSpec).w2 = function () {
    return this.p1h_1;
  };
  protoOf(UnsignedFieldSpec).a1i = function () {
    return this.q1h_1;
  };
  protoOf(UnsignedFieldSpec).b1i = function () {
    return this.r1h_1;
  };
  function Accessor() {
  }
  function AbstractFieldSpec() {
  }
  protoOf(AbstractFieldSpec).toString = function () {
    return 'The field ' + this.w2() + ' (default value is ' + toString_1(this.a1i()) + ')';
  };
  function CachedFormatStructure(formats) {
    ConcatenatedFormatStructure.call(this, formats);
    this.b1c_1 = protoOf(ConcatenatedFormatStructure).d1c.call(this);
    this.c1c_1 = protoOf(ConcatenatedFormatStructure).f1c.call(this);
  }
  protoOf(CachedFormatStructure).d1c = function () {
    return this.b1c_1;
  };
  protoOf(CachedFormatStructure).f1c = function () {
    return this.c1c_1;
  };
  function BasicFormatStructure(directive) {
    this.f1i_1 = directive;
  }
  protoOf(BasicFormatStructure).toString = function () {
    return 'BasicFormatStructure(' + toString(this.f1i_1) + ')';
  };
  protoOf(BasicFormatStructure).equals = function (other) {
    var tmp;
    if (other instanceof BasicFormatStructure) {
      tmp = equals(this.f1i_1, other.f1i_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(BasicFormatStructure).hashCode = function () {
    return hashCode(this.f1i_1);
  };
  protoOf(BasicFormatStructure).f1c = function () {
    return this.f1i_1.f1c();
  };
  protoOf(BasicFormatStructure).d1c = function () {
    return this.f1i_1.d1c();
  };
  function ConstantFormatStructure(string) {
    this.g1i_1 = string;
  }
  protoOf(ConstantFormatStructure).toString = function () {
    return 'ConstantFormatStructure(' + this.g1i_1 + ')';
  };
  protoOf(ConstantFormatStructure).equals = function (other) {
    var tmp;
    if (other instanceof ConstantFormatStructure) {
      tmp = this.g1i_1 === other.g1i_1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(ConstantFormatStructure).hashCode = function () {
    return getStringHashCode(this.g1i_1);
  };
  protoOf(ConstantFormatStructure).f1c = function () {
    var tmp;
    // Inline function 'kotlin.text.isEmpty' call
    var this_0 = this.g1i_1;
    if (charSequenceLength(this_0) === 0) {
      tmp = emptyList();
    } else {
      // Inline function 'kotlin.collections.buildList' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlin.collections.buildListInternal' call
      // Inline function 'kotlin.apply' call
      var this_1 = ArrayList_init_$Create$_0();
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.datetime.internal.format.ConstantFormatStructure.parser.<anonymous>' call
      var tmp_0;
      if (isDigit(charSequenceGet(this.g1i_1, 0))) {
        var tmp$ret$4;
        $l$block: {
          // Inline function 'kotlin.text.takeWhile' call
          var this_2 = this.g1i_1;
          var inductionVariable = 0;
          var last = this_2.length;
          if (inductionVariable < last)
            do {
              var index = inductionVariable;
              inductionVariable = inductionVariable + 1 | 0;
              // Inline function 'kotlinx.datetime.internal.format.ConstantFormatStructure.parser.<anonymous>.<anonymous>' call
              var it = charSequenceGet(this_2, index);
              if (!isDigit(it)) {
                // Inline function 'kotlin.text.substring' call
                // Inline function 'kotlin.js.asDynamic' call
                tmp$ret$4 = this_2.substring(0, index);
                break $l$block;
              }
            }
             while (inductionVariable < last);
          tmp$ret$4 = this_2;
        }
        this_1.l(new NumberSpanParserOperation(listOf_0(new ConstantNumberConsumer(tmp$ret$4))));
        var tmp$ret$8;
        $l$block_0: {
          // Inline function 'kotlin.text.dropWhile' call
          var this_3 = this.g1i_1;
          var inductionVariable_0 = 0;
          var last_0 = charSequenceLength(this_3) - 1 | 0;
          if (inductionVariable_0 <= last_0)
            do {
              var index_0 = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + 1 | 0;
              // Inline function 'kotlinx.datetime.internal.format.ConstantFormatStructure.parser.<anonymous>.<anonymous>' call
              var it_0 = charSequenceGet(this_3, index_0);
              if (!isDigit(it_0)) {
                // Inline function 'kotlin.text.substring' call
                // Inline function 'kotlin.js.asDynamic' call
                tmp$ret$8 = this_3.substring(index_0);
                break $l$block_0;
              }
            }
             while (inductionVariable_0 <= last_0);
          tmp$ret$8 = '';
        }
        tmp_0 = tmp$ret$8;
      } else {
        tmp_0 = this.g1i_1;
      }
      var suffix = tmp_0;
      // Inline function 'kotlin.text.isNotEmpty' call
      if (charSequenceLength(suffix) > 0) {
        if (isDigit(charSequenceGet(suffix, suffix.length - 1 | 0))) {
          var tmp$ret$13;
          $l$block_1: {
            // Inline function 'kotlin.text.dropLastWhile' call
            var inductionVariable_1 = get_lastIndex(suffix);
            if (0 <= inductionVariable_1)
              do {
                var index_1 = inductionVariable_1;
                inductionVariable_1 = inductionVariable_1 + -1 | 0;
                // Inline function 'kotlinx.datetime.internal.format.ConstantFormatStructure.parser.<anonymous>.<anonymous>' call
                var it_1 = charSequenceGet(suffix, index_1);
                if (!isDigit(it_1)) {
                  // Inline function 'kotlin.text.substring' call
                  var endIndex = index_1 + 1 | 0;
                  // Inline function 'kotlin.js.asDynamic' call
                  tmp$ret$13 = suffix.substring(0, endIndex);
                  break $l$block_1;
                }
              }
               while (0 <= inductionVariable_1);
            tmp$ret$13 = '';
          }
          this_1.l(new PlainStringParserOperation(tmp$ret$13));
          var tmp$ret$17;
          $l$block_2: {
            // Inline function 'kotlin.text.takeLastWhile' call
            var inductionVariable_2 = get_lastIndex(suffix);
            if (0 <= inductionVariable_2)
              do {
                var index_2 = inductionVariable_2;
                inductionVariable_2 = inductionVariable_2 + -1 | 0;
                // Inline function 'kotlinx.datetime.internal.format.ConstantFormatStructure.parser.<anonymous>.<anonymous>' call
                var it_2 = charSequenceGet(suffix, index_2);
                if (!isDigit(it_2)) {
                  // Inline function 'kotlin.text.substring' call
                  var startIndex = index_2 + 1 | 0;
                  // Inline function 'kotlin.js.asDynamic' call
                  tmp$ret$17 = suffix.substring(startIndex);
                  break $l$block_2;
                }
              }
               while (0 <= inductionVariable_2);
            tmp$ret$17 = suffix;
          }
          this_1.l(new NumberSpanParserOperation(listOf_0(new ConstantNumberConsumer(tmp$ret$17))));
        } else {
          this_1.l(new PlainStringParserOperation(suffix));
        }
      }
      tmp = this_1.y3();
    }
    return new ParserStructure(tmp, emptyList());
  };
  protoOf(ConstantFormatStructure).d1c = function () {
    return new ConstantStringFormatterStructure(this.g1i_1);
  };
  function formatter$checkIfAllNegative(this$0, value) {
    var seenNonZero = false;
    var tmp0_iterator = this$0.j1i_1.n();
    $l$loop: while (tmp0_iterator.o()) {
      var check = tmp0_iterator.p();
      if (check.q18().e1i(value) === true)
        seenNonZero = true;
      else if (check.z1g(value))
        continue $l$loop;
      else
        return false;
    }
    return seenNonZero;
  }
  function SignedFormatStructure$parser$lambda(this$0) {
    return function (value, isNegative) {
      var tmp0_iterator = this$0.j1i_1.n();
      while (tmp0_iterator.o()) {
        var field = tmp0_iterator.p();
        var wasNegative = field.q18().e1i(value) === true;
        field.q18().v1h(value, !(isNegative === wasNegative));
      }
      return Unit_instance;
    };
  }
  function SignedFormatStructure$formatter$checkIfAllNegative$ref(this$0) {
    var l = function (p0) {
      return formatter$checkIfAllNegative(this$0, p0);
    };
    l.callableName = 'checkIfAllNegative';
    return l;
  }
  function SignedFormatStructure(format, withPlusSign) {
    this.h1i_1 = format;
    this.i1i_1 = withPlusSign;
    var tmp = this;
    // Inline function 'kotlin.collections.mapNotNull' call
    // Inline function 'kotlin.collections.mapNotNullTo' call
    var this_0 = basicFormats(this.h1i_1);
    var destination = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.collections.forEach' call
    var tmp0_iterator = this_0.n();
    while (tmp0_iterator.o()) {
      var element = tmp0_iterator.p();
      // Inline function 'kotlin.collections.mapNotNullTo.<anonymous>' call
      // Inline function 'kotlinx.datetime.internal.format.SignedFormatStructure.fieldSigns.<anonymous>' call
      var tmp0_safe_receiver = element.g1d().b1i();
      if (tmp0_safe_receiver == null)
        null;
      else {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlin.contracts.contract' call
        destination.l(tmp0_safe_receiver);
      }
    }
    tmp.j1i_1 = toSet(destination);
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.collections.isNotEmpty' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!this.j1i_1.i()) {
      // Inline function 'kotlinx.datetime.internal.format.SignedFormatStructure.<anonymous>' call
      var message = 'Signed format must contain at least one field with a sign';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(SignedFormatStructure).toString = function () {
    return 'SignedFormatStructure(' + toString(this.h1i_1) + ')';
  };
  protoOf(SignedFormatStructure).equals = function (other) {
    var tmp;
    var tmp_0;
    if (other instanceof SignedFormatStructure) {
      tmp_0 = equals(this.h1i_1, other.h1i_1);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = this.i1i_1 === other.i1i_1;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(SignedFormatStructure).hashCode = function () {
    return imul(31, hashCode(this.h1i_1)) + getBooleanHashCode(this.i1i_1) | 0;
  };
  protoOf(SignedFormatStructure).f1c = function () {
    return concat(listOf([new ParserStructure(listOf_0(new SignParser(SignedFormatStructure$parser$lambda(this), this.i1i_1, 'sign for ' + toString(this.j1i_1))), emptyList()), this.h1i_1.f1c()]));
  };
  protoOf(SignedFormatStructure).d1c = function () {
    var innerFormat = this.h1i_1.d1c();
    return new SignedFormatter(innerFormat, SignedFormatStructure$formatter$checkIfAllNegative$ref(this), this.i1i_1);
  };
  function Companion_7() {
  }
  protoOf(Companion_7).k1i = function (field) {
    var default_0 = field.a1i();
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!(default_0 == null)) {
      // Inline function 'kotlinx.datetime.internal.format.Companion.fromField.<anonymous>' call
      var message = "The field '" + field.w2() + "' does not define a default value";
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return new PropertyWithDefault(field.l1h(), default_0);
  };
  var Companion_instance_7;
  function Companion_getInstance_7() {
    return Companion_instance_7;
  }
  function PropertyWithDefault(accessor, defaultValue) {
    this.l1i_1 = accessor;
    this.m1i_1 = defaultValue;
  }
  function OptionalFormatStructure$parser$lambda(this$0) {
    return function (it) {
      var tmp0_iterator = this$0.p1i_1.n();
      while (tmp0_iterator.o()) {
        var field = tmp0_iterator.p();
        // Inline function 'kotlinx.datetime.internal.format.PropertyWithDefault.assignDefault' call
        field.l1i_1.v1h(it, field.m1i_1);
      }
      return Unit_instance;
    };
  }
  function Accessor$getter$ref($boundThis) {
    var l = function (p0) {
      return $boundThis.e1i(p0);
    };
    l.callableName = 'getter';
    return l;
  }
  function Predicate$test$ref($boundThis) {
    var l = function (p0) {
      return $boundThis.q1i(p0);
    };
    l.callableName = 'test';
    return l;
  }
  function Truth$test$ref($boundThis) {
    var l = function (p0) {
      return $boundThis.r1i(p0);
    };
    l.callableName = 'test';
    return l;
  }
  function OptionalFormatStructure(onZero, format) {
    this.n1i_1 = onZero;
    this.o1i_1 = format;
    var tmp = this;
    // Inline function 'kotlin.collections.map' call
    // Inline function 'kotlin.collections.map' call
    var this_0 = basicFormats(this.o1i_1);
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.n();
    while (tmp0_iterator.o()) {
      var item = tmp0_iterator.p();
      // Inline function 'kotlinx.datetime.internal.format.OptionalFormatStructure.fields.<anonymous>' call
      var tmp$ret$0 = item.g1d();
      destination.l(tmp$ret$0);
    }
    var this_1 = distinct(destination);
    // Inline function 'kotlin.collections.mapTo' call
    var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(this_1, 10));
    var tmp0_iterator_0 = this_1.n();
    while (tmp0_iterator_0.o()) {
      var item_0 = tmp0_iterator_0.p();
      // Inline function 'kotlinx.datetime.internal.format.OptionalFormatStructure.fields.<anonymous>' call
      var tmp$ret$3 = Companion_instance_7.k1i(item_0);
      destination_0.l(tmp$ret$3);
    }
    tmp.p1i_1 = destination_0;
  }
  protoOf(OptionalFormatStructure).toString = function () {
    return 'Optional(' + this.n1i_1 + ', ' + toString(this.o1i_1) + ')';
  };
  protoOf(OptionalFormatStructure).equals = function (other) {
    var tmp;
    var tmp_0;
    if (other instanceof OptionalFormatStructure) {
      tmp_0 = this.n1i_1 === other.n1i_1;
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = equals(this.o1i_1, other.o1i_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(OptionalFormatStructure).hashCode = function () {
    return imul(31, getStringHashCode(this.n1i_1)) + hashCode(this.o1i_1) | 0;
  };
  protoOf(OptionalFormatStructure).f1c = function () {
    var tmp = emptyList();
    var tmp_0 = this.o1i_1.f1c();
    var tmp_1 = (new ConstantFormatStructure(this.n1i_1)).f1c();
    var tmp_2;
    if (this.p1i_1.i()) {
      tmp_2 = emptyList();
    } else {
      tmp_2 = listOf_0(new UnconditionalModification(OptionalFormatStructure$parser$lambda(this)));
    }
    return new ParserStructure(tmp, listOf([tmp_0, concat(listOf([tmp_1, new ParserStructure(tmp_2, emptyList())]))]));
  };
  protoOf(OptionalFormatStructure).d1c = function () {
    var formatter = this.o1i_1.d1c();
    // Inline function 'kotlin.collections.map' call
    var this_0 = this.p1i_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.n();
    while (tmp0_iterator.o()) {
      var item = tmp0_iterator.p();
      // Inline function 'kotlinx.datetime.internal.format.OptionalFormatStructure.formatter.<anonymous>' call
      // Inline function 'kotlinx.datetime.internal.format.PropertyWithDefault.isDefaultComparisonPredicate' call
      var tmp$ret$1 = new ComparisonPredicate(item.m1i_1, Accessor$getter$ref(item.l1i_1));
      destination.l(tmp$ret$1);
    }
    var predicate = conjunctionPredicate(destination);
    var tmp;
    if (predicate instanceof Truth) {
      tmp = new ConstantStringFormatterStructure(this.n1i_1);
    } else {
      var tmp_0 = to(Predicate$test$ref(predicate), new ConstantStringFormatterStructure(this.n1i_1));
      tmp = new ConditionalFormatter(listOf([tmp_0, to(Truth$test$ref(Truth_instance), formatter)]));
    }
    return tmp;
  };
  function AlternativesParsingFormatStructure(mainFormat, formats) {
    this.s1i_1 = mainFormat;
    this.t1i_1 = formats;
  }
  protoOf(AlternativesParsingFormatStructure).toString = function () {
    return 'AlternativesParsing(' + toString(this.t1i_1) + ')';
  };
  protoOf(AlternativesParsingFormatStructure).equals = function (other) {
    var tmp;
    var tmp_0;
    if (other instanceof AlternativesParsingFormatStructure) {
      tmp_0 = equals(this.s1i_1, other.s1i_1);
    } else {
      tmp_0 = false;
    }
    if (tmp_0) {
      tmp = equals(this.t1i_1, other.t1i_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(AlternativesParsingFormatStructure).hashCode = function () {
    return imul(31, hashCode(this.s1i_1)) + hashCode(this.t1i_1) | 0;
  };
  protoOf(AlternativesParsingFormatStructure).f1c = function () {
    var tmp = emptyList();
    // Inline function 'kotlin.collections.buildList' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.buildListInternal' call
    // Inline function 'kotlin.apply' call
    var this_0 = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.internal.format.AlternativesParsingFormatStructure.parser.<anonymous>' call
    this_0.l(this.s1i_1.f1c());
    var tmp0_iterator = this.t1i_1.n();
    while (tmp0_iterator.o()) {
      var format = tmp0_iterator.p();
      this_0.l(format.f1c());
    }
    var tmp$ret$2 = this_0.y3();
    return new ParserStructure(tmp, tmp$ret$2);
  };
  protoOf(AlternativesParsingFormatStructure).d1c = function () {
    return this.s1i_1.d1c();
  };
  function ConcatenatedFormatStructure(formats) {
    this.g1c_1 = formats;
  }
  protoOf(ConcatenatedFormatStructure).toString = function () {
    return 'ConcatenatedFormatStructure(' + joinToString(this.g1c_1, ', ') + ')';
  };
  protoOf(ConcatenatedFormatStructure).equals = function (other) {
    var tmp;
    if (other instanceof ConcatenatedFormatStructure) {
      tmp = equals(this.g1c_1, other.g1c_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(ConcatenatedFormatStructure).hashCode = function () {
    return hashCode(this.g1c_1);
  };
  protoOf(ConcatenatedFormatStructure).f1c = function () {
    // Inline function 'kotlin.collections.map' call
    var this_0 = this.g1c_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.n();
    while (tmp0_iterator.o()) {
      var item = tmp0_iterator.p();
      // Inline function 'kotlinx.datetime.internal.format.ConcatenatedFormatStructure.parser.<anonymous>' call
      var tmp$ret$0 = item.f1c();
      destination.l(tmp$ret$0);
    }
    return concat(destination);
  };
  protoOf(ConcatenatedFormatStructure).d1c = function () {
    // Inline function 'kotlin.collections.map' call
    var this_0 = this.g1c_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.n();
    while (tmp0_iterator.o()) {
      var item = tmp0_iterator.p();
      // Inline function 'kotlinx.datetime.internal.format.ConcatenatedFormatStructure.formatter.<anonymous>' call
      var tmp$ret$0 = item.d1c();
      destination.l(tmp$ret$0);
    }
    var formatters = destination;
    var tmp;
    if (formatters.q() === 1) {
      tmp = single(formatters);
    } else {
      tmp = new ConcatenatedFormatter(formatters);
    }
    return tmp;
  };
  function NonConcatenatedFormatStructure() {
  }
  function basicFormats(format) {
    // Inline function 'kotlin.collections.buildList' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.buildListInternal' call
    // Inline function 'kotlin.apply' call
    var this_0 = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.internal.format.basicFormats.<anonymous>' call
    basicFormats$_anonymous_$rec_hkf0lf(this_0, format);
    return this_0.y3();
  }
  function basicFormats$_anonymous_$rec_hkf0lf($this_buildList, format) {
    if (format instanceof BasicFormatStructure) {
      $this_buildList.l(format.f1i_1);
    } else {
      if (format instanceof ConcatenatedFormatStructure) {
        // Inline function 'kotlin.collections.forEach' call
        var tmp0_iterator = format.g1c_1.n();
        while (tmp0_iterator.o()) {
          var element = tmp0_iterator.p();
          // Inline function 'kotlinx.datetime.internal.format.basicFormats.<anonymous>$rec.<anonymous>' call
          basicFormats$_anonymous_$rec_hkf0lf($this_buildList, element);
        }
      } else {
        if (!(format instanceof ConstantFormatStructure)) {
          if (format instanceof SignedFormatStructure) {
            basicFormats$_anonymous_$rec_hkf0lf($this_buildList, format.h1i_1);
          } else {
            if (format instanceof AlternativesParsingFormatStructure) {
              basicFormats$_anonymous_$rec_hkf0lf($this_buildList, format.s1i_1);
              // Inline function 'kotlin.collections.forEach' call
              var tmp0_iterator_0 = format.t1i_1.n();
              while (tmp0_iterator_0.o()) {
                var element_0 = tmp0_iterator_0.p();
                // Inline function 'kotlinx.datetime.internal.format.basicFormats.<anonymous>$rec.<anonymous>' call
                basicFormats$_anonymous_$rec_hkf0lf($this_buildList, element_0);
              }
            } else {
              if (format instanceof OptionalFormatStructure) {
                basicFormats$_anonymous_$rec_hkf0lf($this_buildList, format.o1i_1);
              }
            }
          }
        }
      }
    }
  }
  function conjunctionPredicate(predicates) {
    return predicates.i() ? Truth_instance : predicates.q() === 1 ? single(predicates) : new ConjunctionPredicate(predicates);
  }
  function ComparisonPredicate(expectedValue, getter) {
    this.u1i_1 = expectedValue;
    this.v1i_1 = getter;
  }
  protoOf(ComparisonPredicate).q1i = function (value) {
    return equals(this.v1i_1(value), this.u1i_1);
  };
  function Truth() {
  }
  protoOf(Truth).r1i = function (value) {
    return true;
  };
  protoOf(Truth).q1i = function (value) {
    return this.r1i((value == null ? true : !(value == null)) ? value : THROW_CCE());
  };
  var Truth_instance;
  function Truth_getInstance() {
    return Truth_instance;
  }
  function ConjunctionPredicate(predicates) {
    this.w1i_1 = predicates;
  }
  protoOf(ConjunctionPredicate).q1i = function (value) {
    var tmp$ret$0;
    $l$block_0: {
      // Inline function 'kotlin.collections.all' call
      var this_0 = this.w1i_1;
      var tmp;
      if (isInterface(this_0, Collection)) {
        tmp = this_0.i();
      } else {
        tmp = false;
      }
      if (tmp) {
        tmp$ret$0 = true;
        break $l$block_0;
      }
      var tmp0_iterator = this_0.n();
      while (tmp0_iterator.o()) {
        var element = tmp0_iterator.p();
        // Inline function 'kotlinx.datetime.internal.format.ConjunctionPredicate.test.<anonymous>' call
        if (!element.q1i(value)) {
          tmp$ret$0 = false;
          break $l$block_0;
        }
      }
      tmp$ret$0 = true;
    }
    return tmp$ret$0;
  };
  function FormatterStructure() {
  }
  function SpacePaddedFormatter(formatter, padding) {
    this.y1i_1 = formatter;
    this.z1i_1 = padding;
  }
  protoOf(SpacePaddedFormatter).x1i = function (obj, builder, minusNotRequired) {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.internal.format.formatter.SpacePaddedFormatter.format.<anonymous>' call
    var it = StringBuilder_init_$Create$();
    this.y1i_1.x1i(obj, it, minusNotRequired);
    var string = it.toString();
    // Inline function 'kotlin.repeat' call
    var times = this.z1i_1 - string.length | 0;
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlinx.datetime.internal.format.formatter.SpacePaddedFormatter.format.<anonymous>' call
        builder.t8(_Char___init__impl__6a9atx(32));
      }
       while (inductionVariable < times);
    builder.m(string);
  };
  function SignedFormatter(formatter, allSubFormatsNegative, alwaysOutputSign) {
    this.a1j_1 = formatter;
    this.b1j_1 = allSubFormatsNegative;
    this.c1j_1 = alwaysOutputSign;
  }
  protoOf(SignedFormatter).x1i = function (obj, builder, minusNotRequired) {
    var tmp;
    if (!minusNotRequired && this.b1j_1(obj)) {
      tmp = _Char___init__impl__6a9atx(45);
    } else if (this.c1j_1) {
      tmp = _Char___init__impl__6a9atx(43);
    } else {
      tmp = null;
    }
    var sign = tmp;
    var tmp_0 = sign;
    if ((tmp_0 == null ? null : new Char(tmp_0)) == null)
      null;
    else {
      // Inline function 'kotlin.let' call
      var tmp_1 = sign;
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.datetime.internal.format.formatter.SignedFormatter.format.<anonymous>' call
      var it = (tmp_1 == null ? null : new Char(tmp_1)).k1_1;
      builder.t8(it);
    }
    var tmp_2;
    if (minusNotRequired) {
      tmp_2 = true;
    } else {
      var tmp_3 = sign;
      tmp_2 = equals(tmp_3 == null ? null : new Char(tmp_3), new Char(_Char___init__impl__6a9atx(45)));
    }
    this.a1j_1.x1i(obj, builder, tmp_2);
  };
  function ConditionalFormatter(formatters) {
    this.d1j_1 = formatters;
  }
  protoOf(ConditionalFormatter).x1i = function (obj, builder, minusNotRequired) {
    var tmp0_iterator = this.d1j_1.n();
    while (tmp0_iterator.o()) {
      var tmp1_loop_parameter = tmp0_iterator.p();
      var condition = tmp1_loop_parameter.qf();
      var formatter = tmp1_loop_parameter.rf();
      if (condition(obj)) {
        formatter.x1i(obj, builder, minusNotRequired);
        return Unit_instance;
      }
    }
  };
  function ConcatenatedFormatter(formatters) {
    this.e1j_1 = formatters;
  }
  protoOf(ConcatenatedFormatter).x1i = function (obj, builder, minusNotRequired) {
    var tmp0_iterator = this.e1j_1.n();
    while (tmp0_iterator.o()) {
      var formatter = tmp0_iterator.p();
      formatter.x1i(obj, builder, minusNotRequired);
    }
  };
  function SignedIntFormatterStructure(number, zeroPadding, outputPlusOnExceededWidth) {
    this.f1j_1 = number;
    this.g1j_1 = zeroPadding;
    this.h1j_1 = outputPlusOnExceededWidth;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.g1j_1 >= 0)) {
      // Inline function 'kotlinx.datetime.internal.format.formatter.SignedIntFormatterStructure.<anonymous>' call
      var message = 'The minimum number of digits (' + this.g1j_1 + ') is negative';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.g1j_1 <= 9)) {
      // Inline function 'kotlinx.datetime.internal.format.formatter.SignedIntFormatterStructure.<anonymous>' call
      var message_0 = 'The minimum number of digits (' + this.g1j_1 + ') exceeds the length of an Int';
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
  }
  protoOf(SignedIntFormatterStructure).x1i = function (obj, builder, minusNotRequired) {
    var innerBuilder = StringBuilder_init_$Create$();
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.internal.format.formatter.SignedIntFormatterStructure.format.<anonymous>' call
    var it = this.f1j_1(obj);
    var number = minusNotRequired && it < 0 ? -it | 0 : it;
    if (!(this.h1j_1 == null) && number >= get_POWERS_OF_TEN()[this.h1j_1]) {
      innerBuilder.t8(_Char___init__impl__6a9atx(43));
    }
    // Inline function 'kotlin.math.absoluteValue' call
    if (abs(number) < get_POWERS_OF_TEN()[this.g1j_1 - 1 | 0]) {
      if (number >= 0) {
        innerBuilder.dc(number + get_POWERS_OF_TEN()[this.g1j_1] | 0).kc(0);
      } else {
        innerBuilder.dc(number - get_POWERS_OF_TEN()[this.g1j_1] | 0).kc(1);
      }
    } else {
      innerBuilder.dc(number);
    }
    builder.m(innerBuilder);
  };
  function UnsignedIntFormatterStructure(number, zeroPadding) {
    this.i1j_1 = number;
    this.j1j_1 = zeroPadding;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.j1j_1 >= 0)) {
      // Inline function 'kotlinx.datetime.internal.format.formatter.UnsignedIntFormatterStructure.<anonymous>' call
      var message = 'The minimum number of digits (' + this.j1j_1 + ') is negative';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.j1j_1 <= 9)) {
      // Inline function 'kotlinx.datetime.internal.format.formatter.UnsignedIntFormatterStructure.<anonymous>' call
      var message_0 = 'The minimum number of digits (' + this.j1j_1 + ') exceeds the length of an Int';
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
  }
  protoOf(UnsignedIntFormatterStructure).x1i = function (obj, builder, minusNotRequired) {
    var num = this.i1j_1(obj);
    var numberStr = num.toString();
    // Inline function 'kotlin.repeat' call
    var times = this.j1j_1 - numberStr.length | 0;
    // Inline function 'kotlin.contracts.contract' call
    var inductionVariable = 0;
    if (inductionVariable < times)
      do {
        var index = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlinx.datetime.internal.format.formatter.UnsignedIntFormatterStructure.format.<anonymous>' call
        builder.t8(_Char___init__impl__6a9atx(48));
      }
       while (inductionVariable < times);
    builder.m(numberStr);
  };
  function StringFormatterStructure(string) {
    this.k1j_1 = string;
  }
  protoOf(StringFormatterStructure).x1i = function (obj, builder, minusNotRequired) {
    builder.m(this.k1j_1(obj));
  };
  function DecimalFractionFormatterStructure(number, minDigits, maxDigits, zerosToAdd) {
    this.l1j_1 = number;
    this.m1j_1 = minDigits;
    this.n1j_1 = maxDigits;
    this.o1j_1 = zerosToAdd;
    // Inline function 'kotlin.require' call
    var containsArg = this.m1j_1;
    // Inline function 'kotlin.contracts.contract' call
    if (!(1 <= containsArg ? containsArg <= 9 : false)) {
      // Inline function 'kotlinx.datetime.internal.format.formatter.DecimalFractionFormatterStructure.<anonymous>' call
      var message = 'The minimum number of digits (' + this.m1j_1 + ') is not in range 1..9';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    var containsLower = this.m1j_1;
    var containsArg_0 = this.n1j_1;
    // Inline function 'kotlin.contracts.contract' call
    if (!(containsLower <= containsArg_0 ? containsArg_0 <= 9 : false)) {
      // Inline function 'kotlinx.datetime.internal.format.formatter.DecimalFractionFormatterStructure.<anonymous>' call
      var message_0 = 'The maximum number of digits (' + this.n1j_1 + ') is not in range ' + this.m1j_1 + '..9';
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
  }
  protoOf(DecimalFractionFormatterStructure).x1i = function (obj, builder, minusNotRequired) {
    var number = this.l1j_1(obj);
    var numberWithRequiredPrecision = number.v1e(this.n1j_1);
    var zerosToStrip = 0;
    while (this.n1j_1 > (this.m1j_1 + zerosToStrip | 0) && (numberWithRequiredPrecision % get_POWERS_OF_TEN()[zerosToStrip + 1 | 0] | 0) === 0) {
      zerosToStrip = zerosToStrip + 1 | 0;
    }
    var zerosToAddBack = this.o1j_1.r((this.n1j_1 - zerosToStrip | 0) - 1 | 0);
    if (zerosToStrip >= zerosToAddBack)
      zerosToStrip = zerosToStrip - zerosToAddBack | 0;
    var digitsToOutput = this.n1j_1 - zerosToStrip | 0;
    var numberToOutput = numberWithRequiredPrecision / get_POWERS_OF_TEN()[zerosToStrip] | 0;
    // Inline function 'kotlin.text.substring' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp$ret$1 = (numberToOutput + get_POWERS_OF_TEN()[digitsToOutput] | 0).toString().substring(1);
    builder.m(tmp$ret$1);
  };
  function ConstantStringFormatterStructure(string) {
    this.p1j_1 = string;
  }
  protoOf(ConstantStringFormatterStructure).x1i = function (obj, builder, minusNotRequired) {
    builder.m(this.p1j_1);
  };
  function FractionPartConsumer(minLength, maxLength, setter, name) {
    NumberConsumer.call(this, minLength == maxLength ? minLength : null, name);
    this.s1j_1 = minLength;
    this.t1j_1 = maxLength;
    this.u1j_1 = setter;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.s1j_1 == null || numberRangeToNumber(1, 9).ng(this.s1j_1))) {
      // Inline function 'kotlinx.datetime.internal.format.parser.FractionPartConsumer.<anonymous>' call
      var message = 'Invalid length for field ' + this.w1j_1 + ': ' + this.a();
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(FractionPartConsumer).x1j = function (storage, input) {
    var tmp;
    if (!(this.s1j_1 == null) && input.length < this.s1j_1) {
      tmp = new TooFewDigits(this.s1j_1);
    } else if (!(this.t1j_1 == null) && input.length > this.t1j_1) {
      tmp = new TooManyDigits(this.t1j_1);
    } else {
      var numerator = toIntOrNull(input);
      tmp = numerator == null ? new TooManyDigits(9) : setWithoutReassigning(this.u1j_1, storage, new DecimalFraction(numerator, input.length));
    }
    return tmp;
  };
  function ConstantNumberConsumer(expected) {
    NumberConsumer.call(this, expected.length, 'the predefined string ' + expected);
    this.a1k_1 = expected;
  }
  protoOf(ConstantNumberConsumer).x1j = function (storage, input) {
    var tmp;
    if (input === this.a1k_1) {
      tmp = null;
    } else {
      tmp = new WrongConstant(this.a1k_1);
    }
    return tmp;
  };
  function NumberConsumer(length, whatThisExpects) {
    this.v1j_1 = length;
    this.w1j_1 = whatThisExpects;
  }
  protoOf(NumberConsumer).a = function () {
    return this.v1j_1;
  };
  function ExpectedInt() {
  }
  protoOf(ExpectedInt).b1k = function () {
    return 'expected an Int value';
  };
  var ExpectedInt_instance;
  function ExpectedInt_getInstance() {
    return ExpectedInt_instance;
  }
  function TooManyDigits(maxDigits) {
    this.c1k_1 = maxDigits;
  }
  protoOf(TooManyDigits).b1k = function () {
    return 'expected at most ' + this.c1k_1 + ' digits';
  };
  function TooFewDigits(minDigits) {
    this.d1k_1 = minDigits;
  }
  protoOf(TooFewDigits).b1k = function () {
    return 'expected at least ' + this.d1k_1 + ' digits';
  };
  function WrongConstant(expected) {
    this.e1k_1 = expected;
  }
  protoOf(WrongConstant).b1k = function () {
    return "expected '" + this.e1k_1 + "'";
  };
  function Conflicting(conflicting) {
    this.f1k_1 = conflicting;
  }
  protoOf(Conflicting).b1k = function () {
    return "attempted to overwrite the existing value '" + toString(this.f1k_1) + "'";
  };
  function setWithoutReassigning(_this__u8e3s4, receiver, value) {
    var tmp0_elvis_lhs = _this__u8e3s4.v1h(receiver, value);
    var tmp;
    if (tmp0_elvis_lhs == null) {
      return null;
    } else {
      tmp = tmp0_elvis_lhs;
    }
    var conflictingValue = tmp;
    return new Conflicting(conflictingValue);
  }
  function UnsignedIntConsumer(minLength, maxLength, setter, name, multiplyByMinus1) {
    multiplyByMinus1 = multiplyByMinus1 === VOID ? false : multiplyByMinus1;
    NumberConsumer.call(this, minLength == maxLength ? minLength : null, name);
    this.i1k_1 = minLength;
    this.j1k_1 = maxLength;
    this.k1k_1 = setter;
    this.l1k_1 = multiplyByMinus1;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.a() == null || numberRangeToNumber(1, 9).ng(this.a()))) {
      // Inline function 'kotlinx.datetime.internal.format.parser.UnsignedIntConsumer.<anonymous>' call
      var message = 'Invalid length for field ' + this.w1j_1 + ': ' + this.a();
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(UnsignedIntConsumer).x1j = function (storage, input) {
    var tmp;
    if (!(this.j1k_1 == null) && input.length > this.j1k_1) {
      tmp = new TooManyDigits(this.j1k_1);
    } else if (!(this.i1k_1 == null) && input.length < this.i1k_1) {
      tmp = new TooFewDigits(this.i1k_1);
    } else {
      var result = toIntOrNull(input);
      tmp = result == null ? ExpectedInt_instance : setWithoutReassigning(this.k1k_1, storage, this.l1k_1 ? -result | 0 : result);
    }
    return tmp;
  };
  function ParseError(position, message) {
    this.m1k_1 = position;
    this.n1k_1 = message;
  }
  function _ParseResult___init__impl__gvz3cn(value) {
    return value;
  }
  function _ParseResult___get_value__impl__86mnxf($this) {
    return $this;
  }
  function Companion_8() {
  }
  protoOf(Companion_8).o1k = function (indexOfNextUnparsed) {
    return _ParseResult___init__impl__gvz3cn(indexOfNextUnparsed);
  };
  protoOf(Companion_8).p1k = function (position, message) {
    return _ParseResult___init__impl__gvz3cn(new ParseError(position, message));
  };
  var Companion_instance_8;
  function Companion_getInstance_8() {
    return Companion_instance_8;
  }
  function _Parser___init__impl__gdyfby(commands) {
    return commands;
  }
  function _get_commands__a20n1($this) {
    return $this;
  }
  function Parser__match_impl_nzt83d($this, input, initialContainer, startIndex) {
    // Inline function 'kotlin.collections.mutableListOf' call
    var errors = ArrayList_init_$Create$_0();
    // Inline function 'kotlinx.datetime.internal.format.parser.Parser.parse' call
    var parseOptions = mutableListOf([new ParserState(initialContainer, _get_commands__a20n1($this), startIndex)]);
    iterate_over_alternatives: while (true) {
      var tmp0_elvis_lhs = removeLastOrNull(parseOptions);
      var tmp;
      if (tmp0_elvis_lhs == null) {
        break iterate_over_alternatives;
      } else {
        tmp = tmp0_elvis_lhs;
      }
      var state = tmp;
      var output = state.q1k_1.x18();
      var inputPosition = state.s1k_1;
      var parserStructure = state.r1k_1;
      // Inline function 'kotlin.run' call
      var this_0 = new Parser($this);
      // Inline function 'kotlin.contracts.contract' call
      $l$block: {
        // Inline function 'kotlinx.datetime.internal.format.parser.Parser.parse.<anonymous>' call
        this_0.t1k_1;
        var inductionVariable = 0;
        var last = parserStructure.u1k_1.q() - 1 | 0;
        if (inductionVariable <= last)
          do {
            var ix = inductionVariable;
            inductionVariable = inductionVariable + 1 | 0;
            // Inline function 'kotlinx.datetime.internal.format.parser.ParseResult.match' call
            var this_1 = parserStructure.u1k_1.r(ix).w1k(output, input, inputPosition);
            var tmp0_subject = _ParseResult___get_value__impl__86mnxf(this_1);
            var tmp_0;
            if (typeof tmp0_subject === 'number') {
              inputPosition = _ParseResult___get_value__impl__86mnxf(this_1);
              tmp_0 = Unit_instance;
            } else {
              if (tmp0_subject instanceof ParseError) {
                // Inline function 'kotlinx.datetime.internal.format.parser.Parser.match.<anonymous>' call
                var it = _ParseResult___get_value__impl__86mnxf(this_1);
                errors.l(it);
                break $l$block;
              } else {
                var message = 'Unexpected parse result: ' + toString(_ParseResult___get_value__impl__86mnxf(this_1));
                throw IllegalStateException_init_$Create$(toString(message));
              }
            }
          }
           while (inductionVariable <= last);
        if (parserStructure.v1k_1.i()) {
          if (false || inputPosition === charSequenceLength(input)) {
            // Inline function 'kotlinx.datetime.internal.format.parser.Parser.match.<anonymous>' call
            return output;
          } else {
            // Inline function 'kotlinx.datetime.internal.format.parser.Parser.match.<anonymous>' call
            var tmp_1 = inputPosition;
            var it_0 = new ParseError(tmp_1, Parser$match$lambda);
            errors.l(it_0);
          }
        } else {
          var inductionVariable_0 = parserStructure.v1k_1.q() - 1 | 0;
          if (0 <= inductionVariable_0)
            do {
              var ix_0 = inductionVariable_0;
              inductionVariable_0 = inductionVariable_0 + -1 | 0;
              parseOptions.l(new ParserState(output, parserStructure.v1k_1.r(ix_0), inputPosition));
            }
             while (0 <= inductionVariable_0);
        }
      }
    }
    // Inline function 'kotlin.collections.sortByDescending' call
    if (errors.q() > 1) {
      // Inline function 'kotlin.comparisons.compareByDescending' call
      var tmp_2 = Parser$match$lambda_0;
      var tmp$ret$4 = new sam$kotlin_Comparator$0(tmp_2);
      sortWith(errors, tmp$ret$4);
    }
    throw new ParseException(errors);
  }
  function Parser__match$default_impl_x2xlti($this, input, initialContainer, startIndex, $super) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    var tmp;
    if ($super === VOID) {
      tmp = Parser__match_impl_nzt83d($this, input, initialContainer, startIndex);
    } else {
      var tmp_0 = $super;
      tmp = (tmp_0 == null ? null : new Parser(tmp_0)).x1k.call(new Parser($this), input, initialContainer, startIndex);
    }
    return tmp;
  }
  function ParserState(output, parserStructure, inputPosition) {
    this.q1k_1 = output;
    this.r1k_1 = parserStructure;
    this.s1k_1 = inputPosition;
  }
  function Parser__toString_impl_x33iea($this) {
    return 'Parser(commands=' + $this.toString() + ')';
  }
  function Parser__hashCode_impl_bbxllf($this) {
    return hashCode($this);
  }
  function Parser__equals_impl_djxokv($this, other) {
    if (!(other instanceof Parser))
      return false;
    var tmp0_other_with_cast = other instanceof Parser ? other.t1k_1 : THROW_CCE();
    if (!equals($this, tmp0_other_with_cast))
      return false;
    return true;
  }
  function sam$kotlin_Comparator$0(function_0) {
    this.y1k_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0).nd = function (a, b) {
    return this.y1k_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0).compare = function (a, b) {
    return this.nd(a, b);
  };
  protoOf(sam$kotlin_Comparator$0).v3 = function () {
    return this.y1k_1;
  };
  protoOf(sam$kotlin_Comparator$0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.v3(), other.v3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0).hashCode = function () {
    return hashCode(this.v3());
  };
  function Parser$match$lambda() {
    return 'There is more input to consume';
  }
  function Parser$match$lambda_0(a, b) {
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'kotlinx.datetime.internal.format.parser.Parser.match.<anonymous>' call
    var tmp = b.m1k_1;
    // Inline function 'kotlinx.datetime.internal.format.parser.Parser.match.<anonymous>' call
    var tmp$ret$1 = a.m1k_1;
    return compareValues(tmp, tmp$ret$1);
  }
  function Parser(commands) {
    this.t1k_1 = commands;
  }
  protoOf(Parser).toString = function () {
    return Parser__toString_impl_x33iea(this.t1k_1);
  };
  protoOf(Parser).hashCode = function () {
    return Parser__hashCode_impl_bbxllf(this.t1k_1);
  };
  protoOf(Parser).equals = function (other) {
    return Parser__equals_impl_djxokv(this.t1k_1, other);
  };
  function ParserStructure(operations, followedBy) {
    this.u1k_1 = operations;
    this.v1k_1 = followedBy;
  }
  protoOf(ParserStructure).toString = function () {
    return joinToString(this.u1k_1, ', ') + '(' + joinToString(this.v1k_1, ';') + ')';
  };
  function ParseException(errors) {
    Exception_init_$Init$(formatError(errors), this);
    captureStack(this, ParseException);
  }
  function concat(_this__u8e3s4) {
    // Inline function 'kotlin.collections.foldRight' call
    var accumulator = new ParserStructure(emptyList(), emptyList());
    if (!_this__u8e3s4.i()) {
      var iterator = _this__u8e3s4.w(_this__u8e3s4.q());
      while (iterator.m5()) {
        // Inline function 'kotlinx.datetime.internal.format.parser.concat.<anonymous>' call
        var parser = iterator.o5();
        var acc = accumulator;
        accumulator = concat$append(parser, acc);
      }
    }
    var naiveParser = accumulator;
    return concat$simplify(naiveParser, emptyList());
  }
  function formatError(errors) {
    if (errors.q() === 1) {
      return 'Position ' + errors.r(0).m1k_1 + ': ' + errors.r(0).n1k_1();
    }
    var averageMessageLength = 33;
    var tmp0_buffer = StringBuilder_init_$Create$_0(imul(averageMessageLength, errors.q()));
    return joinTo(errors, tmp0_buffer, ', ', 'Errors: ', VOID, VOID, VOID, formatError$lambda).toString();
  }
  function concat$append(_this__u8e3s4, other) {
    var tmp;
    if (_this__u8e3s4.v1k_1.i()) {
      tmp = new ParserStructure(plus(_this__u8e3s4.u1k_1, other.u1k_1), other.v1k_1);
    } else {
      // Inline function 'kotlin.collections.map' call
      var this_0 = _this__u8e3s4.v1k_1;
      // Inline function 'kotlin.collections.mapTo' call
      var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
      var tmp0_iterator = this_0.n();
      while (tmp0_iterator.o()) {
        var item = tmp0_iterator.p();
        // Inline function 'kotlinx.datetime.internal.format.parser.concat.append.<anonymous>' call
        var tmp$ret$0 = concat$append(item, other);
        destination.l(tmp$ret$0);
      }
      tmp = new ParserStructure(_this__u8e3s4.u1k_1, destination);
    }
    return tmp;
  }
  function concat$simplify(_this__u8e3s4, unconditionalModifications) {
    // Inline function 'kotlin.collections.mutableListOf' call
    var newOperations = ArrayList_init_$Create$_0();
    var currentNumberSpan = null;
    var unconditionalModificationsForTails = toMutableList(unconditionalModifications);
    var tmp0_iterator = _this__u8e3s4.u1k_1.n();
    while (tmp0_iterator.o()) {
      var op = tmp0_iterator.p();
      if (op instanceof NumberSpanParserOperation) {
        if (!(currentNumberSpan == null)) {
          currentNumberSpan.v(op.z1k_1);
        } else {
          currentNumberSpan = toMutableList(op.z1k_1);
        }
      } else {
        if (op instanceof UnconditionalModification) {
          unconditionalModificationsForTails.l(op);
        } else {
          if (!(currentNumberSpan == null)) {
            newOperations.l(new NumberSpanParserOperation(currentNumberSpan));
            currentNumberSpan = null;
          }
          newOperations.l(op);
        }
      }
    }
    // Inline function 'kotlin.collections.ifEmpty' call
    // Inline function 'kotlin.collections.flatMap' call
    // Inline function 'kotlin.collections.flatMapTo' call
    var this_0 = _this__u8e3s4.v1k_1;
    var destination = ArrayList_init_$Create$_0();
    var tmp0_iterator_0 = this_0.n();
    while (tmp0_iterator_0.o()) {
      var element = tmp0_iterator_0.p();
      // Inline function 'kotlinx.datetime.internal.format.parser.concat.simplify.<anonymous>' call
      var simplified = concat$simplify(element, unconditionalModificationsForTails);
      var tmp;
      if (simplified.u1k_1.i()) {
        // Inline function 'kotlin.collections.ifEmpty' call
        var this_1 = simplified.v1k_1;
        // Inline function 'kotlin.contracts.contract' call
        var tmp_0;
        if (this_1.i()) {
          // Inline function 'kotlinx.datetime.internal.format.parser.concat.simplify.<anonymous>.<anonymous>' call
          tmp_0 = listOf_0(simplified);
        } else {
          tmp_0 = this_1;
        }
        tmp = tmp_0;
      } else {
        tmp = listOf_0(simplified);
      }
      var list = tmp;
      addAll(destination, list);
    }
    // Inline function 'kotlin.contracts.contract' call
    var tmp_1;
    if (destination.i()) {
      // Inline function 'kotlinx.datetime.internal.format.parser.concat.simplify.<anonymous>' call
      tmp_1 = listOf_0(new ParserStructure(unconditionalModificationsForTails, emptyList()));
    } else {
      tmp_1 = destination;
    }
    var mergedTails = tmp_1;
    var tmp_2;
    if (currentNumberSpan == null) {
      tmp_2 = new ParserStructure(newOperations, mergedTails);
    } else {
      var tmp$ret$8;
      $l$block_0: {
        // Inline function 'kotlin.collections.none' call
        var tmp_3;
        if (isInterface(mergedTails, Collection)) {
          tmp_3 = mergedTails.i();
        } else {
          tmp_3 = false;
        }
        if (tmp_3) {
          tmp$ret$8 = true;
          break $l$block_0;
        }
        var tmp0_iterator_1 = mergedTails.n();
        while (tmp0_iterator_1.o()) {
          var element_0 = tmp0_iterator_1.p();
          // Inline function 'kotlinx.datetime.internal.format.parser.concat.simplify.<anonymous>' call
          var tmp0_safe_receiver = firstOrNull(element_0.u1k_1);
          var tmp_4;
          if (tmp0_safe_receiver == null) {
            tmp_4 = null;
          } else {
            // Inline function 'kotlin.let' call
            // Inline function 'kotlin.contracts.contract' call
            // Inline function 'kotlinx.datetime.internal.format.parser.concat.simplify.<anonymous>.<anonymous>' call
            tmp_4 = tmp0_safe_receiver instanceof NumberSpanParserOperation;
          }
          if (tmp_4 === true) {
            tmp$ret$8 = false;
            break $l$block_0;
          }
        }
        tmp$ret$8 = true;
      }
      if (tmp$ret$8) {
        newOperations.l(new NumberSpanParserOperation(currentNumberSpan));
        tmp_2 = new ParserStructure(newOperations, mergedTails);
      } else {
        // Inline function 'kotlin.collections.map' call
        // Inline function 'kotlin.collections.mapTo' call
        var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(mergedTails, 10));
        var tmp0_iterator_2 = mergedTails.n();
        while (tmp0_iterator_2.o()) {
          var item = tmp0_iterator_2.p();
          // Inline function 'kotlinx.datetime.internal.format.parser.concat.simplify.<anonymous>' call
          var firstOperation = firstOrNull(item.u1k_1);
          var tmp_5;
          if (firstOperation instanceof NumberSpanParserOperation) {
            tmp_5 = new ParserStructure(plus(listOf_0(new NumberSpanParserOperation(plus(currentNumberSpan, firstOperation.z1k_1))), drop(item.u1k_1, 1)), item.v1k_1);
          } else {
            if (firstOperation == null) {
              tmp_5 = new ParserStructure(listOf_0(new NumberSpanParserOperation(currentNumberSpan)), item.v1k_1);
            } else {
              tmp_5 = new ParserStructure(plus(listOf_0(new NumberSpanParserOperation(currentNumberSpan)), item.u1k_1), item.v1k_1);
            }
          }
          var tmp$ret$12 = tmp_5;
          destination_0.l(tmp$ret$12);
        }
        var newTails = destination_0;
        tmp_2 = new ParserStructure(newOperations, newTails);
      }
    }
    return tmp_2;
  }
  function formatError$lambda(it) {
    return 'position ' + it.m1k_1 + ": '" + it.n1k_1() + "'";
  }
  function SignedIntParser(minDigits, maxDigits, spacePadding, setter, name, plusOnExceedsWidth) {
    var parsers = mutableListOf([spaceAndZeroPaddedUnsignedInt(minDigits, maxDigits, spacePadding, setter, name, true)]);
    if (!(plusOnExceedsWidth == null)) {
      parsers.l(spaceAndZeroPaddedUnsignedInt(minDigits, plusOnExceedsWidth, spacePadding, setter, name));
      parsers.l(new ParserStructure(listOf([new PlainStringParserOperation('+'), new NumberSpanParserOperation(listOf_0(new UnsignedIntConsumer(plusOnExceedsWidth + 1 | 0, maxDigits, setter, name, false)))]), emptyList()));
    } else {
      parsers.l(spaceAndZeroPaddedUnsignedInt(minDigits, maxDigits, spacePadding, setter, name));
    }
    return new ParserStructure(emptyList(), parsers);
  }
  function spaceAndZeroPaddedUnsignedInt(minDigits, maxDigits, spacePadding, setter, name, withMinus) {
    withMinus = withMinus === VOID ? false : withMinus;
    var minNumberLength = (minDigits == null ? 1 : minDigits) + (withMinus ? 1 : 0) | 0;
    var tmp;
    if (maxDigits == null) {
      tmp = null;
    } else {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlin.contracts.contract' call
      // Inline function 'kotlinx.datetime.internal.format.parser.spaceAndZeroPaddedUnsignedInt.<anonymous>' call
      tmp = withMinus ? maxDigits + 1 | 0 : maxDigits;
    }
    var tmp2_elvis_lhs = tmp;
    var maxNumberLength = tmp2_elvis_lhs == null ? 2147483647 : tmp2_elvis_lhs;
    var spacePadding_0 = spacePadding == null ? 0 : spacePadding;
    // Inline function 'kotlin.comparisons.minOf' call
    var maxPaddedNumberLength = Math.min(maxNumberLength, spacePadding_0);
    if (minNumberLength >= maxPaddedNumberLength)
      return spaceAndZeroPaddedUnsignedInt$numberOfRequiredLengths(withMinus, setter, name, minNumberLength, maxNumberLength);
    var accumulated = spaceAndZeroPaddedUnsignedInt$numberOfRequiredLengths(withMinus, setter, name, minNumberLength, minNumberLength);
    var inductionVariable = minNumberLength;
    if (inductionVariable < maxPaddedNumberLength)
      do {
        var accumulatedWidth = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        accumulated = new ParserStructure(emptyList(), listOf([spaceAndZeroPaddedUnsignedInt$numberOfRequiredLengths(withMinus, setter, name, accumulatedWidth + 1 | 0, accumulatedWidth + 1 | 0), concat(listOf([new ParserStructure(listOf_0(new PlainStringParserOperation(' ')), emptyList()), accumulated]))]));
      }
       while (inductionVariable < maxPaddedNumberLength);
    var tmp_0;
    if (spacePadding_0 > maxNumberLength) {
      var prepadding = new PlainStringParserOperation(repeat(' ', spacePadding_0 - maxNumberLength | 0));
      tmp_0 = concat(listOf([new ParserStructure(listOf_0(prepadding), emptyList()), accumulated]));
    } else if (spacePadding_0 === maxNumberLength) {
      tmp_0 = accumulated;
    } else {
      var r = new ParserStructure(emptyList(), listOf([spaceAndZeroPaddedUnsignedInt$numberOfRequiredLengths(withMinus, setter, name, spacePadding_0 + 1 | 0, maxNumberLength), accumulated]));
      tmp_0 = r;
    }
    return tmp_0;
  }
  function TrieNode(children, isTerminal) {
    var tmp;
    if (children === VOID) {
      // Inline function 'kotlin.collections.mutableListOf' call
      tmp = ArrayList_init_$Create$_0();
    } else {
      tmp = children;
    }
    children = tmp;
    isTerminal = isTerminal === VOID ? false : isTerminal;
    this.c1l_1 = children;
    this.d1l_1 = isTerminal;
  }
  function sam$kotlin_Comparator$0_0(function_0) {
    this.e1l_1 = function_0;
  }
  protoOf(sam$kotlin_Comparator$0_0).nd = function (a, b) {
    return this.e1l_1(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_0).compare = function (a, b) {
    return this.nd(a, b);
  };
  protoOf(sam$kotlin_Comparator$0_0).v3 = function () {
    return this.e1l_1;
  };
  protoOf(sam$kotlin_Comparator$0_0).equals = function (other) {
    var tmp;
    if (!(other == null) ? isInterface(other, Comparator) : false) {
      var tmp_0;
      if (!(other == null) ? isInterface(other, FunctionAdapter) : false) {
        tmp_0 = equals(this.v3(), other.v3());
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(sam$kotlin_Comparator$0_0).hashCode = function () {
    return hashCode(this.v3());
  };
  function _init_$reduceTrie(trie) {
    var tmp0_iterator = trie.c1l_1.n();
    while (tmp0_iterator.o()) {
      var child = tmp0_iterator.p().rf();
      _init_$reduceTrie(child);
    }
    // Inline function 'kotlin.collections.mutableListOf' call
    var newChildren = ArrayList_init_$Create$_0();
    var tmp2_iterator = trie.c1l_1.n();
    while (tmp2_iterator.o()) {
      var tmp3_loop_parameter = tmp2_iterator.p();
      var key = tmp3_loop_parameter.qf();
      var child_0 = tmp3_loop_parameter.rf();
      if (!child_0.d1l_1 && child_0.c1l_1.q() === 1) {
        var tmp4_container = single(child_0.c1l_1);
        var grandChildKey = tmp4_container.qf();
        var grandChild = tmp4_container.rf();
        newChildren.l(to(key + grandChildKey, grandChild));
      } else {
        newChildren.l(to(key, child_0));
      }
    }
    trie.c1l_1.n2();
    // Inline function 'kotlin.collections.sortedBy' call
    // Inline function 'kotlin.comparisons.compareBy' call
    var tmp = StringSetParserOperation$reduceTrie$lambda;
    var tmp$ret$1 = new sam$kotlin_Comparator$0_0(tmp);
    var tmp$ret$2 = sortedWith(newChildren, tmp$ret$1);
    trie.c1l_1.v(tmp$ret$2);
  }
  function StringSetParserOperation$lambda($key) {
    return function (it) {
      // Inline function 'kotlinx.datetime.internal.format.parser.StringSetParserOperation.<anonymous>' call
      var tmp$ret$0 = it.of_1;
      return compareValues(tmp$ret$0, $key);
    };
  }
  function StringSetParserOperation$consume$lambda(this$0, $input, $startIndex, $index) {
    return function () {
      // Inline function 'kotlin.text.substring' call
      var this_0 = $input;
      var startIndex = $startIndex;
      var endIndex = $index._v;
      var tmp$ret$0 = toString(charSequenceSubSequence(this_0, startIndex, endIndex));
      return 'Expected ' + this$0.g1l_1 + ' but got ' + tmp$ret$0;
    };
  }
  function StringSetParserOperation$reduceTrie$lambda(a, b) {
    // Inline function 'kotlin.comparisons.compareValuesBy' call
    // Inline function 'kotlinx.datetime.internal.format.parser.StringSetParserOperation.reduceTrie.<anonymous>' call
    var tmp = a.of_1;
    // Inline function 'kotlinx.datetime.internal.format.parser.StringSetParserOperation.reduceTrie.<anonymous>' call
    var tmp$ret$1 = b.of_1;
    return compareValues(tmp, tmp$ret$1);
  }
  function StringSetParserOperation(strings, setter, whatThisExpects) {
    this.f1l_1 = setter;
    this.g1l_1 = whatThisExpects;
    this.h1l_1 = new TrieNode();
    var tmp0_iterator = strings.n();
    while (tmp0_iterator.o()) {
      var string = tmp0_iterator.p();
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.text.isNotEmpty' call
      // Inline function 'kotlin.contracts.contract' call
      if (!(charSequenceLength(string) > 0)) {
        // Inline function 'kotlinx.datetime.internal.format.parser.StringSetParserOperation.<anonymous>' call
        var message = 'Found an empty string in ' + this.g1l_1;
        throw IllegalArgumentException_init_$Create$(toString(message));
      }
      var node = this.h1l_1;
      var inductionVariable = 0;
      var last = string.length;
      while (inductionVariable < last) {
        var char = charSequenceGet(string, inductionVariable);
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.collections.binarySearchBy' call
        var this_0 = node.c1l_1;
        var key = toString_0(char);
        var toIndex = this_0.q();
        var searchResult = binarySearch(this_0, 0, toIndex, StringSetParserOperation$lambda(key));
        var tmp;
        if (searchResult < 0) {
          // Inline function 'kotlin.also' call
          var this_1 = new TrieNode();
          // Inline function 'kotlin.contracts.contract' call
          // Inline function 'kotlinx.datetime.internal.format.parser.StringSetParserOperation.<anonymous>' call
          node.c1l_1.p2((-searchResult | 0) - 1 | 0, to(toString_0(char), this_1));
          tmp = this_1;
        } else {
          tmp = node.c1l_1.r(searchResult).pf_1;
        }
        node = tmp;
      }
      // Inline function 'kotlin.require' call
      // Inline function 'kotlin.contracts.contract' call
      if (!!node.d1l_1) {
        // Inline function 'kotlinx.datetime.internal.format.parser.StringSetParserOperation.<anonymous>' call
        var message_0 = "The string '" + string + "' was passed several times";
        throw IllegalArgumentException_init_$Create$(toString(message_0));
      }
      node.d1l_1 = true;
    }
    _init_$reduceTrie(this.h1l_1);
  }
  protoOf(StringSetParserOperation).w1k = function (storage, input, startIndex) {
    var node = this.h1l_1;
    var index = {_v: startIndex};
    var lastMatch = null;
    loop: while (index._v <= charSequenceLength(input)) {
      if (node.d1l_1)
        lastMatch = index._v;
      var tmp0_iterator = node.c1l_1.n();
      while (tmp0_iterator.o()) {
        var tmp1_loop_parameter = tmp0_iterator.p();
        var key = tmp1_loop_parameter.qf();
        var child = tmp1_loop_parameter.rf();
        if (startsWith(input, key, index._v)) {
          node = child;
          index._v = index._v + key.length | 0;
          continue loop;
        }
      }
      break loop;
    }
    var tmp;
    if (!(lastMatch == null)) {
      // Inline function 'kotlin.text.substring' call
      var endIndex = lastMatch;
      var tmp$ret$0 = toString(charSequenceSubSequence(input, startIndex, endIndex));
      tmp = setWithoutReassigning_0(this.f1l_1, storage, tmp$ret$0, startIndex, lastMatch);
    } else {
      var tmp_0 = Companion_instance_8;
      tmp = tmp_0.p1k(startIndex, StringSetParserOperation$consume$lambda(this, input, startIndex, index));
    }
    return tmp;
  };
  function _get_whatThisExpects__4pg11j($this) {
    // Inline function 'kotlin.collections.map' call
    var this_0 = $this.z1k_1;
    // Inline function 'kotlin.collections.mapTo' call
    var destination = ArrayList_init_$Create$(collectionSizeOrDefault(this_0, 10));
    var tmp0_iterator = this_0.n();
    while (tmp0_iterator.o()) {
      var item = tmp0_iterator.p();
      // Inline function 'kotlinx.datetime.internal.format.parser.NumberSpanParserOperation.<get-whatThisExpects>.<anonymous>' call
      var length = item.a();
      var tmp$ret$0 = (length == null ? 'at least one digit' : '' + length + ' digits') + (' for ' + item.w1j_1);
      destination.l(tmp$ret$0);
    }
    var consumerLengths = destination;
    var tmp;
    if ($this.b1l_1) {
      tmp = 'a number with at least ' + $this.a1l_1 + ' digits: ' + toString(consumerLengths);
    } else {
      tmp = 'a number with exactly ' + $this.a1l_1 + ' digits: ' + toString(consumerLengths);
    }
    return tmp;
  }
  function NumberSpanParserOperation$consume$lambda(this$0) {
    return function () {
      return 'Unexpected end of input: yet to parse ' + _get_whatThisExpects__4pg11j(this$0);
    };
  }
  function NumberSpanParserOperation$consume$lambda_0($digitsInRow, this$0) {
    return function () {
      return 'Only found ' + $digitsInRow._v + ' digits in a row, but need to parse ' + _get_whatThisExpects__4pg11j(this$0);
    };
  }
  function NumberSpanParserOperation$consume$lambda_1($numberString, this$0, $i, $error) {
    return function () {
      return "Can not interpret the string '" + $numberString + "' as " + this$0.z1k_1.r($i).w1j_1 + ': ' + $error.b1k();
    };
  }
  function NumberSpanParserOperation(consumers) {
    this.z1k_1 = consumers;
    var tmp = this;
    // Inline function 'kotlin.collections.sumOf' call
    var sum = 0;
    var tmp0_iterator = this.z1k_1.n();
    while (tmp0_iterator.o()) {
      var element = tmp0_iterator.p();
      var tmp_0 = sum;
      // Inline function 'kotlinx.datetime.internal.format.parser.NumberSpanParserOperation.minLength.<anonymous>' call
      var tmp0_elvis_lhs = element.a();
      sum = tmp_0 + (tmp0_elvis_lhs == null ? 1 : tmp0_elvis_lhs) | 0;
    }
    tmp.a1l_1 = sum;
    var tmp_1 = this;
    var tmp$ret$2;
    $l$block_0: {
      // Inline function 'kotlin.collections.any' call
      var this_0 = this.z1k_1;
      var tmp_2;
      if (isInterface(this_0, Collection)) {
        tmp_2 = this_0.i();
      } else {
        tmp_2 = false;
      }
      if (tmp_2) {
        tmp$ret$2 = false;
        break $l$block_0;
      }
      var tmp0_iterator_0 = this_0.n();
      while (tmp0_iterator_0.o()) {
        var element_0 = tmp0_iterator_0.p();
        // Inline function 'kotlinx.datetime.internal.format.parser.NumberSpanParserOperation.isFlexible.<anonymous>' call
        if (element_0.a() == null) {
          tmp$ret$2 = true;
          break $l$block_0;
        }
      }
      tmp$ret$2 = false;
    }
    tmp_1.b1l_1 = tmp$ret$2;
    // Inline function 'kotlin.require' call
    var tmp$ret$4;
    $l$block_2: {
      // Inline function 'kotlin.collections.all' call
      var this_1 = this.z1k_1;
      var tmp_3;
      if (isInterface(this_1, Collection)) {
        tmp_3 = this_1.i();
      } else {
        tmp_3 = false;
      }
      if (tmp_3) {
        tmp$ret$4 = true;
        break $l$block_2;
      }
      var tmp0_iterator_1 = this_1.n();
      while (tmp0_iterator_1.o()) {
        var element_1 = tmp0_iterator_1.p();
        // Inline function 'kotlinx.datetime.internal.format.parser.NumberSpanParserOperation.<anonymous>' call
        var tmp0_elvis_lhs_0 = element_1.a();
        if (!((tmp0_elvis_lhs_0 == null ? 2147483647 : tmp0_elvis_lhs_0) > 0)) {
          tmp$ret$4 = false;
          break $l$block_2;
        }
      }
      tmp$ret$4 = true;
    }
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!tmp$ret$4) {
      // Inline function 'kotlin.require.<anonymous>' call
      var message = 'Failed requirement.';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    var tmp$ret$7;
    $l$block_3: {
      // Inline function 'kotlin.collections.count' call
      var this_2 = this.z1k_1;
      var tmp_4;
      if (isInterface(this_2, Collection)) {
        tmp_4 = this_2.i();
      } else {
        tmp_4 = false;
      }
      if (tmp_4) {
        tmp$ret$7 = 0;
        break $l$block_3;
      }
      var count = 0;
      var tmp0_iterator_2 = this_2.n();
      while (tmp0_iterator_2.o()) {
        var element_2 = tmp0_iterator_2.p();
        // Inline function 'kotlinx.datetime.internal.format.parser.NumberSpanParserOperation.<anonymous>' call
        if (element_2.a() == null) {
          count = count + 1 | 0;
          checkCountOverflow(count);
        }
      }
      tmp$ret$7 = count;
    }
    // Inline function 'kotlin.contracts.contract' call
    if (!(tmp$ret$7 <= 1)) {
      // Inline function 'kotlinx.datetime.internal.format.parser.NumberSpanParserOperation.<anonymous>' call
      // Inline function 'kotlin.collections.map' call
      // Inline function 'kotlin.collections.filter' call
      // Inline function 'kotlin.collections.filterTo' call
      var this_3 = this.z1k_1;
      var destination = ArrayList_init_$Create$_0();
      var tmp0_iterator_3 = this_3.n();
      while (tmp0_iterator_3.o()) {
        var element_3 = tmp0_iterator_3.p();
        // Inline function 'kotlinx.datetime.internal.format.parser.NumberSpanParserOperation.<anonymous>.<anonymous>' call
        if (element_3.a() == null) {
          destination.l(element_3);
        }
      }
      // Inline function 'kotlin.collections.mapTo' call
      var destination_0 = ArrayList_init_$Create$(collectionSizeOrDefault(destination, 10));
      var tmp0_iterator_4 = destination.n();
      while (tmp0_iterator_4.o()) {
        var item = tmp0_iterator_4.p();
        // Inline function 'kotlinx.datetime.internal.format.parser.NumberSpanParserOperation.<anonymous>.<anonymous>' call
        var tmp$ret$12 = item.w1j_1;
        destination_0.l(tmp$ret$12);
      }
      var fieldNames = destination_0;
      var message_0 = 'At most one variable-length numeric field in a row is allowed, but got several: ' + toString(fieldNames) + '. ' + 'Parsing is undefined: for example, with variable-length month number ' + "and variable-length day of month, '111' can be parsed as Jan 11th or Nov 1st.";
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
  }
  protoOf(NumberSpanParserOperation).w1k = function (storage, input, startIndex) {
    if ((startIndex + this.a1l_1 | 0) > charSequenceLength(input)) {
      var tmp = Companion_instance_8;
      return tmp.p1k(startIndex, NumberSpanParserOperation$consume$lambda(this));
    }
    var digitsInRow = {_v: 0};
    while ((startIndex + digitsInRow._v | 0) < charSequenceLength(input) && isDigit(charSequenceGet(input, startIndex + digitsInRow._v | 0))) {
      digitsInRow._v = digitsInRow._v + 1 | 0;
      digitsInRow._v;
    }
    if (digitsInRow._v < this.a1l_1) {
      var tmp_0 = Companion_instance_8;
      return tmp_0.p1k(startIndex, NumberSpanParserOperation$consume$lambda_0(digitsInRow, this));
    }
    var index = startIndex;
    var inductionVariable = 0;
    var last = this.z1k_1.q() - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var tmp1_elvis_lhs = this.z1k_1.r(i).a();
        var length = tmp1_elvis_lhs == null ? (digitsInRow._v - this.a1l_1 | 0) + 1 | 0 : tmp1_elvis_lhs;
        // Inline function 'kotlin.text.substring' call
        var startIndex_0 = index;
        var endIndex = index + length | 0;
        var numberString = toString(charSequenceSubSequence(input, startIndex_0, endIndex));
        var error = this.z1k_1.r(i).x1j(storage, numberString);
        if (!(error == null)) {
          var tmp_1 = Companion_instance_8;
          var tmp_2 = index;
          return tmp_1.p1k(tmp_2, NumberSpanParserOperation$consume$lambda_1(numberString, this, i, error));
        }
        index = index + length | 0;
      }
       while (inductionVariable <= last);
    return Companion_instance_8.o1k(index);
  };
  protoOf(NumberSpanParserOperation).toString = function () {
    return _get_whatThisExpects__4pg11j(this);
  };
  function PlainStringParserOperation$consume$lambda(this$0) {
    return function () {
      return "Unexpected end of input: yet to parse '" + this$0.i1l_1 + "'";
    };
  }
  function PlainStringParserOperation$consume$lambda_0(this$0, $input, $startIndex, $i) {
    return function () {
      // Inline function 'kotlin.text.substring' call
      var this_0 = $input;
      var startIndex = $startIndex;
      var endIndex = ($startIndex + $i | 0) + 1 | 0;
      var tmp$ret$0 = toString(charSequenceSubSequence(this_0, startIndex, endIndex));
      return 'Expected ' + this$0.i1l_1 + ' but got ' + tmp$ret$0;
    };
  }
  function PlainStringParserOperation(string) {
    this.i1l_1 = string;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.text.isNotEmpty' call
    var this_0 = this.i1l_1;
    // Inline function 'kotlin.contracts.contract' call
    if (!(charSequenceLength(this_0) > 0)) {
      // Inline function 'kotlinx.datetime.internal.format.parser.PlainStringParserOperation.<anonymous>' call
      var message = 'Empty string is not allowed';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!isDigit(charSequenceGet(this.i1l_1, 0))) {
      // Inline function 'kotlinx.datetime.internal.format.parser.PlainStringParserOperation.<anonymous>' call
      var message_0 = "String '" + this.i1l_1 + "' starts with a digit";
      throw IllegalArgumentException_init_$Create$(toString(message_0));
    }
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!!isDigit(charSequenceGet(this.i1l_1, this.i1l_1.length - 1 | 0))) {
      // Inline function 'kotlinx.datetime.internal.format.parser.PlainStringParserOperation.<anonymous>' call
      var message_1 = "String '" + this.i1l_1 + "' ends with a digit";
      throw IllegalArgumentException_init_$Create$(toString(message_1));
    }
  }
  protoOf(PlainStringParserOperation).w1k = function (storage, input, startIndex) {
    if ((startIndex + this.i1l_1.length | 0) > charSequenceLength(input)) {
      var tmp = Companion_instance_8;
      return tmp.p1k(startIndex, PlainStringParserOperation$consume$lambda(this));
    }
    var inductionVariable = 0;
    var last = charSequenceLength(this.i1l_1) - 1 | 0;
    if (inductionVariable <= last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        if (!(charSequenceGet(input, startIndex + i | 0) === charSequenceGet(this.i1l_1, i))) {
          var tmp_0 = Companion_instance_8;
          return tmp_0.p1k(startIndex, PlainStringParserOperation$consume$lambda_0(this, input, startIndex, i));
        }
      }
       while (inductionVariable <= last);
    return Companion_instance_8.o1k(startIndex + this.i1l_1.length | 0);
  };
  protoOf(PlainStringParserOperation).toString = function () {
    return "'" + this.i1l_1 + "'";
  };
  function SignParser$consume$lambda(this$0, $char) {
    return function () {
      return 'Expected ' + this$0.l1l_1 + ' but got ' + toString_0($char);
    };
  }
  function SignParser(isNegativeSetter, withPlusSign, whatThisExpects) {
    this.j1l_1 = isNegativeSetter;
    this.k1l_1 = withPlusSign;
    this.l1l_1 = whatThisExpects;
  }
  protoOf(SignParser).w1k = function (storage, input, startIndex) {
    if (startIndex >= charSequenceLength(input))
      return Companion_instance_8.o1k(startIndex);
    var char = charSequenceGet(input, startIndex);
    if (char === _Char___init__impl__6a9atx(45)) {
      this.j1l_1(storage, true);
      return Companion_instance_8.o1k(startIndex + 1 | 0);
    }
    if (char === _Char___init__impl__6a9atx(43) && this.k1l_1) {
      this.j1l_1(storage, false);
      return Companion_instance_8.o1k(startIndex + 1 | 0);
    }
    var tmp = Companion_instance_8;
    return tmp.p1k(startIndex, SignParser$consume$lambda(this, char));
  };
  protoOf(SignParser).toString = function () {
    return this.l1l_1;
  };
  function UnconditionalModification(operation) {
    this.m1l_1 = operation;
  }
  protoOf(UnconditionalModification).w1k = function (storage, input, startIndex) {
    this.m1l_1(storage);
    return Companion_instance_8.o1k(startIndex);
  };
  function setWithoutReassigning_0(_this__u8e3s4, receiver, value, position, nextIndex) {
    var conflictingValue = _this__u8e3s4.v1h(receiver, value);
    var tmp;
    if (conflictingValue === null) {
      tmp = Companion_instance_8.o1k(nextIndex);
    } else {
      var tmp_0 = Companion_instance_8;
      tmp = tmp_0.p1k(position, setWithoutReassigning$lambda(conflictingValue, value, _this__u8e3s4));
    }
    return tmp;
  }
  function spaceAndZeroPaddedUnsignedInt$numberOfRequiredLengths($withMinus, $setter, $name, minNumberLength, maxNumberLength) {
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.check' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(maxNumberLength >= (1 + ($withMinus ? 1 : 0) | 0))) {
      // Inline function 'kotlin.check.<anonymous>' call
      var message = 'Check failed.';
      throw IllegalStateException_init_$Create$(toString(message));
    }
    // Inline function 'kotlin.collections.buildList' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.collections.buildListInternal' call
    // Inline function 'kotlin.apply' call
    var this_0 = ArrayList_init_$Create$_0();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.internal.format.parser.spaceAndZeroPaddedUnsignedInt.numberOfRequiredLengths.<anonymous>' call
    if ($withMinus) {
      this_0.l(new PlainStringParserOperation('-'));
    }
    this_0.l(new NumberSpanParserOperation(listOf_0(new UnsignedIntConsumer(minNumberLength - ($withMinus ? 1 : 0) | 0, maxNumberLength - ($withMinus ? 1 : 0) | 0, $setter, $name, $withMinus))));
    var tmp$ret$3 = this_0.y3();
    return new ParserStructure(tmp$ret$3, emptyList());
  }
  function setWithoutReassigning$lambda($conflictingValue, $value, $this_setWithoutReassigning) {
    return function () {
      return "Attempting to assign conflicting values '" + toString_1($conflictingValue) + "' and '" + toString_1($value) + "' to field '" + $this_setWithoutReassigning.w2() + "'";
    };
  }
  function get_POWERS_OF_TEN() {
    _init_properties_math_kt__tgcmt4();
    return POWERS_OF_TEN;
  }
  var POWERS_OF_TEN;
  function DecimalFraction(fractionalPart, digits) {
    this.t1e_1 = fractionalPart;
    this.u1e_1 = digits;
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(this.u1e_1 >= 0)) {
      // Inline function 'kotlinx.datetime.internal.DecimalFraction.<anonymous>' call
      var message = 'Digits must be non-negative, but was ' + this.u1e_1;
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
  }
  protoOf(DecimalFraction).v1e = function (newDigits) {
    return newDigits === this.u1e_1 ? this.t1e_1 : newDigits > this.u1e_1 ? imul(this.t1e_1, get_POWERS_OF_TEN()[newDigits - this.u1e_1 | 0]) : this.t1e_1 / get_POWERS_OF_TEN()[this.u1e_1 - newDigits | 0] | 0;
  };
  protoOf(DecimalFraction).n1l = function (other) {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.comparisons.maxOf' call
    var a = this.u1e_1;
    var b = other.u1e_1;
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.internal.DecimalFraction.compareTo.<anonymous>' call
    var maxPrecision = Math.max(a, b);
    return compareTo(this.v1e(maxPrecision), other.v1e(maxPrecision));
  };
  protoOf(DecimalFraction).d = function (other) {
    return this.n1l(other instanceof DecimalFraction ? other : THROW_CCE());
  };
  protoOf(DecimalFraction).equals = function (other) {
    var tmp;
    if (other instanceof DecimalFraction) {
      tmp = this.n1l(other) === 0;
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(DecimalFraction).toString = function () {
    // Inline function 'kotlin.text.buildString' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlin.apply' call
    var this_0 = StringBuilder_init_$Create$();
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.datetime.internal.DecimalFraction.toString.<anonymous>' call
    var denominator = get_POWERS_OF_TEN()[this.u1e_1];
    this_0.dc(this.t1e_1 / denominator | 0);
    this_0.t8(_Char___init__impl__6a9atx(46));
    this_0.s8(removePrefix((denominator + (this.t1e_1 % denominator | 0) | 0).toString(), '1'));
    return this_0.toString();
  };
  protoOf(DecimalFraction).hashCode = function () {
    throw UnsupportedOperationException_init_$Create$('DecimalFraction is not supposed to be used as a hash key');
  };
  var properties_initialized_math_kt_amm9wq;
  function _init_properties_math_kt__tgcmt4() {
    if (!properties_initialized_math_kt_amm9wq) {
      properties_initialized_math_kt_amm9wq = true;
      // Inline function 'kotlin.intArrayOf' call
      POWERS_OF_TEN = new Int32Array([1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000]);
    }
  }
  function InstantIso8601Serializer() {
    InstantIso8601Serializer_instance = this;
    this.o1l_1 = PrimitiveSerialDescriptor('kotlinx.datetime.Instant', STRING_getInstance());
  }
  protoOf(InstantIso8601Serializer).hl = function () {
    return this.o1l_1;
  };
  protoOf(InstantIso8601Serializer).vl = function (decoder) {
    return Companion_getInstance_9().p1l(decoder.fo());
  };
  protoOf(InstantIso8601Serializer).q1l = function (encoder, value) {
    encoder.mp(value.toString());
  };
  protoOf(InstantIso8601Serializer).ul = function (encoder, value) {
    return this.q1l(encoder, value instanceof Instant_0 ? value : THROW_CCE());
  };
  var InstantIso8601Serializer_instance;
  function InstantIso8601Serializer_getInstance() {
    if (InstantIso8601Serializer_instance == null)
      new InstantIso8601Serializer();
    return InstantIso8601Serializer_instance;
  }
  function LocalDateIso8601Serializer() {
    LocalDateIso8601Serializer_instance = this;
    this.r1l_1 = PrimitiveSerialDescriptor('kotlinx.datetime.LocalDate', STRING_getInstance());
  }
  protoOf(LocalDateIso8601Serializer).hl = function () {
    return this.r1l_1;
  };
  protoOf(LocalDateIso8601Serializer).vl = function (decoder) {
    return Companion_getInstance_10().u1l(decoder.fo());
  };
  protoOf(LocalDateIso8601Serializer).v1l = function (encoder, value) {
    encoder.mp(value.toString());
  };
  protoOf(LocalDateIso8601Serializer).ul = function (encoder, value) {
    return this.v1l(encoder, value instanceof LocalDate_0 ? value : THROW_CCE());
  };
  var LocalDateIso8601Serializer_instance;
  function LocalDateIso8601Serializer_getInstance() {
    if (LocalDateIso8601Serializer_instance == null)
      new LocalDateIso8601Serializer();
    return LocalDateIso8601Serializer_instance;
  }
  function LocalDateTimeIso8601Serializer() {
    LocalDateTimeIso8601Serializer_instance = this;
    this.w1l_1 = PrimitiveSerialDescriptor('kotlinx.datetime.LocalDateTime', STRING_getInstance());
  }
  protoOf(LocalDateTimeIso8601Serializer).hl = function () {
    return this.w1l_1;
  };
  protoOf(LocalDateTimeIso8601Serializer).vl = function (decoder) {
    return Companion_getInstance_11().z1l(decoder.fo());
  };
  protoOf(LocalDateTimeIso8601Serializer).a1m = function (encoder, value) {
    encoder.mp(value.toString());
  };
  protoOf(LocalDateTimeIso8601Serializer).ul = function (encoder, value) {
    return this.a1m(encoder, value instanceof LocalDateTime_0 ? value : THROW_CCE());
  };
  var LocalDateTimeIso8601Serializer_instance;
  function LocalDateTimeIso8601Serializer_getInstance() {
    if (LocalDateTimeIso8601Serializer_instance == null)
      new LocalDateTimeIso8601Serializer();
    return LocalDateTimeIso8601Serializer_instance;
  }
  function LocalTimeIso8601Serializer() {
    LocalTimeIso8601Serializer_instance = this;
    this.b1m_1 = PrimitiveSerialDescriptor('kotlinx.datetime.LocalTime', STRING_getInstance());
  }
  protoOf(LocalTimeIso8601Serializer).hl = function () {
    return this.b1m_1;
  };
  protoOf(LocalTimeIso8601Serializer).vl = function (decoder) {
    return Companion_getInstance_12().e1m(decoder.fo());
  };
  protoOf(LocalTimeIso8601Serializer).f1m = function (encoder, value) {
    encoder.mp(value.toString());
  };
  protoOf(LocalTimeIso8601Serializer).ul = function (encoder, value) {
    return this.f1m(encoder, value instanceof LocalTime_0 ? value : THROW_CCE());
  };
  var LocalTimeIso8601Serializer_instance;
  function LocalTimeIso8601Serializer_getInstance() {
    if (LocalTimeIso8601Serializer_instance == null)
      new LocalTimeIso8601Serializer();
    return LocalTimeIso8601Serializer_instance;
  }
  function UtcOffsetSerializer() {
    UtcOffsetSerializer_instance = this;
    this.g1m_1 = PrimitiveSerialDescriptor('kotlinx.datetime.UtcOffset', STRING_getInstance());
  }
  protoOf(UtcOffsetSerializer).hl = function () {
    return this.g1m_1;
  };
  protoOf(UtcOffsetSerializer).vl = function (decoder) {
    return Companion_getInstance_15().i1m(decoder.fo());
  };
  protoOf(UtcOffsetSerializer).j1m = function (encoder, value) {
    encoder.mp(value.toString());
  };
  protoOf(UtcOffsetSerializer).ul = function (encoder, value) {
    return this.j1m(encoder, value instanceof UtcOffset ? value : THROW_CCE());
  };
  var UtcOffsetSerializer_instance;
  function UtcOffsetSerializer_getInstance() {
    if (UtcOffsetSerializer_instance == null)
      new UtcOffsetSerializer();
    return UtcOffsetSerializer_instance;
  }
  function TimeZoneSerializer() {
    TimeZoneSerializer_instance = this;
    this.k1m_1 = PrimitiveSerialDescriptor('kotlinx.datetime.TimeZone', STRING_getInstance());
  }
  protoOf(TimeZoneSerializer).hl = function () {
    return this.k1m_1;
  };
  protoOf(TimeZoneSerializer).vl = function (decoder) {
    return Companion_getInstance_13().m1m(decoder.fo());
  };
  protoOf(TimeZoneSerializer).n1m = function (encoder, value) {
    encoder.mp(value.p1m());
  };
  protoOf(TimeZoneSerializer).ul = function (encoder, value) {
    return this.n1m(encoder, value instanceof TimeZone ? value : THROW_CCE());
  };
  var TimeZoneSerializer_instance;
  function TimeZoneSerializer_getInstance() {
    if (TimeZoneSerializer_instance == null)
      new TimeZoneSerializer();
    return TimeZoneSerializer_instance;
  }
  function FixedOffsetTimeZoneSerializer() {
    FixedOffsetTimeZoneSerializer_instance = this;
    this.q1m_1 = PrimitiveSerialDescriptor('kotlinx.datetime.FixedOffsetTimeZone', STRING_getInstance());
  }
  protoOf(FixedOffsetTimeZoneSerializer).hl = function () {
    return this.q1m_1;
  };
  protoOf(FixedOffsetTimeZoneSerializer).vl = function (decoder) {
    var zone = Companion_getInstance_13().m1m(decoder.fo());
    if (zone instanceof FixedOffsetTimeZone) {
      return zone;
    } else {
      throw SerializationException_init_$Create$("Timezone identifier '" + zone.toString() + "' does not correspond to a fixed-offset timezone");
    }
  };
  protoOf(FixedOffsetTimeZoneSerializer).r1m = function (encoder, value) {
    encoder.mp(value.p1m());
  };
  protoOf(FixedOffsetTimeZoneSerializer).ul = function (encoder, value) {
    return this.r1m(encoder, value instanceof FixedOffsetTimeZone ? value : THROW_CCE());
  };
  var FixedOffsetTimeZoneSerializer_instance;
  function FixedOffsetTimeZoneSerializer_getInstance() {
    if (FixedOffsetTimeZoneSerializer_instance == null)
      new FixedOffsetTimeZoneSerializer();
    return FixedOffsetTimeZoneSerializer_instance;
  }
  var DayOfWeek_MONDAY_instance;
  var DayOfWeek_TUESDAY_instance;
  var DayOfWeek_WEDNESDAY_instance;
  var DayOfWeek_THURSDAY_instance;
  var DayOfWeek_FRIDAY_instance;
  var DayOfWeek_SATURDAY_instance;
  var DayOfWeek_SUNDAY_instance;
  function values() {
    return [DayOfWeek_MONDAY_getInstance(), DayOfWeek_TUESDAY_getInstance(), DayOfWeek_WEDNESDAY_getInstance(), DayOfWeek_THURSDAY_getInstance(), DayOfWeek_FRIDAY_getInstance(), DayOfWeek_SATURDAY_getInstance(), DayOfWeek_SUNDAY_getInstance()];
  }
  function get_entries() {
    if ($ENTRIES == null)
      $ENTRIES = enumEntries(values());
    return $ENTRIES;
  }
  var DayOfWeek_entriesInitialized;
  function DayOfWeek_initEntries() {
    if (DayOfWeek_entriesInitialized)
      return Unit_instance;
    DayOfWeek_entriesInitialized = true;
    DayOfWeek_MONDAY_instance = new DayOfWeek_0('MONDAY', 0);
    DayOfWeek_TUESDAY_instance = new DayOfWeek_0('TUESDAY', 1);
    DayOfWeek_WEDNESDAY_instance = new DayOfWeek_0('WEDNESDAY', 2);
    DayOfWeek_THURSDAY_instance = new DayOfWeek_0('THURSDAY', 3);
    DayOfWeek_FRIDAY_instance = new DayOfWeek_0('FRIDAY', 4);
    DayOfWeek_SATURDAY_instance = new DayOfWeek_0('SATURDAY', 5);
    DayOfWeek_SUNDAY_instance = new DayOfWeek_0('SUNDAY', 6);
  }
  var $ENTRIES;
  function DayOfWeek_0(name, ordinal) {
    Enum.call(this, name, ordinal);
  }
  function toDayOfWeek(_this__u8e3s4) {
    return DayOfWeek(_this__u8e3s4.value());
  }
  function DayOfWeek_MONDAY_getInstance() {
    DayOfWeek_initEntries();
    return DayOfWeek_MONDAY_instance;
  }
  function DayOfWeek_TUESDAY_getInstance() {
    DayOfWeek_initEntries();
    return DayOfWeek_TUESDAY_instance;
  }
  function DayOfWeek_WEDNESDAY_getInstance() {
    DayOfWeek_initEntries();
    return DayOfWeek_WEDNESDAY_instance;
  }
  function DayOfWeek_THURSDAY_getInstance() {
    DayOfWeek_initEntries();
    return DayOfWeek_THURSDAY_instance;
  }
  function DayOfWeek_FRIDAY_getInstance() {
    DayOfWeek_initEntries();
    return DayOfWeek_FRIDAY_instance;
  }
  function DayOfWeek_SATURDAY_getInstance() {
    DayOfWeek_initEntries();
    return DayOfWeek_SATURDAY_instance;
  }
  function DayOfWeek_SUNDAY_getInstance() {
    DayOfWeek_initEntries();
    return DayOfWeek_SUNDAY_instance;
  }
  function Companion_9() {
    Companion_instance_9 = this;
    var tmp = this;
    // Inline function 'kotlinx.datetime.jsTry' call
    // Inline function 'kotlinx.datetime.Companion.DISTANT_PAST.<anonymous>' call
    var tmp$ret$1 = Instant.ofEpochSecond((new Long(-931914497, -750)).u3(), 999999999);
    tmp.s16_1 = new Instant_0(tmp$ret$1);
    var tmp_0 = this;
    // Inline function 'kotlinx.datetime.jsTry' call
    // Inline function 'kotlinx.datetime.Companion.DISTANT_FUTURE.<anonymous>' call
    var tmp$ret$3 = Instant.ofEpochSecond((new Long(1151527680, 720)).u3(), 0);
    tmp_0.t16_1 = new Instant_0(tmp$ret$3);
    this.u16_1 = new Instant_0(Instant.MIN);
    this.v16_1 = new Instant_0(Instant.MAX);
  }
  protoOf(Companion_9).r16 = function () {
    return new Instant_0(Clock.systemUTC().instant());
  };
  protoOf(Companion_9).s1m = function (input, format) {
    var tmp;
    try {
      tmp = format.y1b(input).j1a();
    } catch ($p) {
      var tmp_0;
      if ($p instanceof IllegalArgumentException) {
        var e = $p;
        throw DateTimeFormatException_init_$Create$_2("Failed to parse an instant from '" + toString(input) + "'", e);
      } else {
        throw $p;
      }
    }
    return tmp;
  };
  protoOf(Companion_9).p1l = function (input, format, $super) {
    format = format === VOID ? Formats_getInstance().r19_1 : format;
    return $super === VOID ? this.s1m(input, format) : $super.s1m.call(this, input, format);
  };
  protoOf(Companion_9).t1m = function (epochSeconds, nanosecondAdjustment) {
    var tmp;
    try {
      // Inline function 'kotlin.floorDiv' call
      var other = new Long(1000000000, 0);
      var q = nanosecondAdjustment.g3(other);
      if (nanosecondAdjustment.q3(other).g1(new Long(0, 0)) < 0 && !q.f3(other).equals(nanosecondAdjustment)) {
        q = q.i3();
      }
      var tmp$ret$0 = q;
      var secs = safeAdd(epochSeconds, tmp$ret$0);
      // Inline function 'kotlin.mod' call
      var other_0 = new Long(1000000000, 0);
      var r = nanosecondAdjustment.h3(other_0);
      var nos = r.d3(other_0.o3(r.q3(other_0).o3(r.p3(r.j3())).m3(63))).i1();
      // Inline function 'kotlinx.datetime.jsTry' call
      // Inline function 'kotlinx.datetime.Companion.fromEpochSeconds.<anonymous>' call
      var tmp$ret$3 = Instant.ofEpochSecond(secs.u3(), nos);
      tmp = new Instant_0(tmp$ret$3);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        var tmp_1;
        if (!isJodaDateTimeException(e)) {
          tmp_1 = !(e instanceof ArithmeticException);
        } else {
          tmp_1 = false;
        }
        if (tmp_1)
          throw e;
        tmp_0 = epochSeconds.g1(new Long(0, 0)) > 0 ? this.v16_1 : this.u16_1;
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(Companion_9).u1m = function (epochSeconds, nanosecondAdjustment, $super) {
    nanosecondAdjustment = nanosecondAdjustment === VOID ? new Long(0, 0) : nanosecondAdjustment;
    return $super === VOID ? this.t1m(epochSeconds, nanosecondAdjustment) : $super.t1m.call(this, epochSeconds, nanosecondAdjustment);
  };
  protoOf(Companion_9).s1a = function (epochSeconds, nanosecondAdjustment) {
    var tmp;
    try {
      // Inline function 'kotlinx.datetime.jsTry' call
      // Inline function 'kotlinx.datetime.Companion.fromEpochSeconds.<anonymous>' call
      var tmp$ret$1 = Instant.ofEpochSecond(epochSeconds.u3(), nanosecondAdjustment);
      tmp = new Instant_0(tmp$ret$1);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        if (!isJodaDateTimeException(e))
          throw e;
        tmp_0 = epochSeconds.g1(new Long(0, 0)) > 0 ? this.v16_1 : this.u16_1;
      } else {
        throw $p;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  var Companion_instance_9;
  function Companion_getInstance_9() {
    if (Companion_instance_9 == null)
      new Companion_9();
    return Companion_instance_9;
  }
  function Instant_0(value) {
    Companion_getInstance_9();
    this.q1a_1 = value;
  }
  protoOf(Instant_0).r1a = function () {
    return numberToLong(this.q1a_1.epochSecond());
  };
  protoOf(Instant_0).v1m = function (other) {
    return this.q1a_1.compareTo(other.q1a_1);
  };
  protoOf(Instant_0).d = function (other) {
    return this.v1m(other instanceof Instant_0 ? other : THROW_CCE());
  };
  protoOf(Instant_0).equals = function (other) {
    var tmp;
    if (this === other) {
      tmp = true;
    } else {
      var tmp_0;
      if (other instanceof Instant_0) {
        tmp_0 = this.q1a_1 === other.q1a_1 || this.q1a_1.equals(other.q1a_1);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(Instant_0).hashCode = function () {
    return this.q1a_1.hashCode();
  };
  protoOf(Instant_0).toString = function () {
    return this.q1a_1.toString();
  };
  function isJodaDateTimeParseException(_this__u8e3s4) {
    return hasJsExceptionName(_this__u8e3s4, 'DateTimeParseException');
  }
  function isJodaDateTimeException(_this__u8e3s4) {
    return hasJsExceptionName(_this__u8e3s4, 'DateTimeException');
  }
  function Companion_10() {
    Companion_instance_10 = this;
    this.s1l_1 = new LocalDate_0(LocalDate.MIN);
    this.t1l_1 = new LocalDate_0(LocalDate.MAX);
  }
  protoOf(Companion_10).w1m = function (input, format) {
    var tmp;
    if (format === Formats_getInstance_0().x16()) {
      var tmp_0;
      try {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlinx.datetime.jsTry' call
        // Inline function 'kotlinx.datetime.Companion.parse.<anonymous>' call
        // Inline function 'kotlin.contracts.contract' call
        var p0 = LocalDate.parse(toString(input));
        tmp_0 = new LocalDate_0(p0);
      } catch ($p) {
        var tmp_1;
        if ($p instanceof Error) {
          var e = $p;
          if (isJodaDateTimeParseException(e))
            throw DateTimeFormatException_init_$Create$_1(e);
          throw e;
        } else {
          throw $p;
        }
      }
      tmp = tmp_0;
    } else {
      tmp = format.y1b(input);
    }
    return tmp;
  };
  protoOf(Companion_10).u1l = function (input, format, $super) {
    format = format === VOID ? getIsoDateFormat() : format;
    return $super === VOID ? this.w1m(input, format) : $super.w1m.call(this, input, format);
  };
  var Companion_instance_10;
  function Companion_getInstance_10() {
    if (Companion_instance_10 == null)
      new Companion_10();
    return Companion_instance_10;
  }
  function Formats_0() {
    Formats_instance_0 = this;
    this.w16_1 = get_ISO_DATE_BASIC();
  }
  protoOf(Formats_0).x16 = function () {
    return get_ISO_DATE();
  };
  var Formats_instance_0;
  function Formats_getInstance_0() {
    if (Formats_instance_0 == null)
      new Formats_0();
    return Formats_instance_0;
  }
  function LocalDate_init_$Init$(year, monthNumber, dayOfMonth, $this) {
    var tmp;
    try {
      // Inline function 'kotlinx.datetime.jsTry' call
      // Inline function 'kotlinx.datetime.LocalDate.<init>.<anonymous>' call
      tmp = LocalDate.of(year, monthNumber, dayOfMonth);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        if (isJodaDateTimeException(e))
          throw IllegalArgumentException_init_$Create$_0(e);
        throw e;
      } else {
        throw $p;
      }
    }
    LocalDate_0.call($this, tmp);
    return $this;
  }
  function LocalDate_init_$Create$(year, monthNumber, dayOfMonth) {
    return LocalDate_init_$Init$(year, monthNumber, dayOfMonth, objectCreate(protoOf(LocalDate_0)));
  }
  function LocalDate_0(value) {
    Companion_getInstance_10();
    this.z16_1 = value;
  }
  protoOf(LocalDate_0).a17 = function () {
    return this.z16_1.year();
  };
  protoOf(LocalDate_0).b17 = function () {
    return this.z16_1.monthValue();
  };
  protoOf(LocalDate_0).c17 = function () {
    return this.z16_1.dayOfMonth();
  };
  protoOf(LocalDate_0).h1c = function () {
    return toDayOfWeek(this.z16_1.dayOfWeek());
  };
  protoOf(LocalDate_0).equals = function (other) {
    var tmp;
    if (this === other) {
      tmp = true;
    } else {
      var tmp_0;
      if (other instanceof LocalDate_0) {
        tmp_0 = this.z16_1 === other.z16_1 || this.z16_1.equals(other.z16_1);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(LocalDate_0).hashCode = function () {
    return this.z16_1.hashCode();
  };
  protoOf(LocalDate_0).toString = function () {
    return this.z16_1.toString();
  };
  protoOf(LocalDate_0).x1m = function (other) {
    return this.z16_1.compareTo(other.z16_1);
  };
  protoOf(LocalDate_0).d = function (other) {
    return this.x1m(other instanceof LocalDate_0 ? other : THROW_CCE());
  };
  protoOf(LocalDate_0).l1a = function () {
    return numberToInt(this.z16_1.toEpochDay());
  };
  function LocalDateTime_init_$Init$(year, monthNumber, dayOfMonth, hour, minute, second, nanosecond, $this) {
    second = second === VOID ? 0 : second;
    nanosecond = nanosecond === VOID ? 0 : nanosecond;
    var tmp;
    try {
      // Inline function 'kotlinx.datetime.jsTry' call
      // Inline function 'kotlinx.datetime.LocalDateTime.<init>.<anonymous>' call
      tmp = LocalDateTime.of(year, monthNumber, dayOfMonth, hour, minute, second, nanosecond);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        if (isJodaDateTimeException(e))
          throw IllegalArgumentException_init_$Create$_0(e);
        throw e;
      } else {
        throw $p;
      }
    }
    LocalDateTime_0.call($this, tmp);
    return $this;
  }
  function LocalDateTime_init_$Create$(year, monthNumber, dayOfMonth, hour, minute, second, nanosecond) {
    return LocalDateTime_init_$Init$(year, monthNumber, dayOfMonth, hour, minute, second, nanosecond, objectCreate(protoOf(LocalDateTime_0)));
  }
  function LocalDateTime_init_$Init$_0(date, time, $this) {
    // Inline function 'kotlinx.datetime.jsTry' call
    // Inline function 'kotlinx.datetime.LocalDateTime.<init>.<anonymous>' call
    var tmp$ret$1 = LocalDateTime.of(date.z16_1, time.m1a_1);
    LocalDateTime_0.call($this, tmp$ret$1);
    return $this;
  }
  function LocalDateTime_init_$Create$_0(date, time) {
    return LocalDateTime_init_$Init$_0(date, time, objectCreate(protoOf(LocalDateTime_0)));
  }
  function Companion_11() {
    Companion_instance_11 = this;
    this.x1l_1 = new LocalDateTime_0(LocalDateTime.MIN);
    this.y1l_1 = new LocalDateTime_0(LocalDateTime.MAX);
  }
  protoOf(Companion_11).y1m = function (input, format) {
    var tmp;
    if (format === Formats_getInstance_1().d17_1) {
      var tmp_0;
      try {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlinx.datetime.jsTry' call
        // Inline function 'kotlinx.datetime.Companion.parse.<anonymous>' call
        // Inline function 'kotlin.contracts.contract' call
        var p0 = LocalDateTime.parse(toString(input));
        tmp_0 = new LocalDateTime_0(p0);
      } catch ($p) {
        var tmp_1;
        if ($p instanceof Error) {
          var e = $p;
          if (isJodaDateTimeParseException(e))
            throw DateTimeFormatException_init_$Create$_1(e);
          throw e;
        } else {
          throw $p;
        }
      }
      tmp = tmp_0;
    } else {
      tmp = format.y1b(input);
    }
    return tmp;
  };
  protoOf(Companion_11).z1l = function (input, format, $super) {
    format = format === VOID ? getIsoDateTimeFormat() : format;
    return $super === VOID ? this.y1m(input, format) : $super.y1m.call(this, input, format);
  };
  var Companion_instance_11;
  function Companion_getInstance_11() {
    if (Companion_instance_11 == null)
      new Companion_11();
    return Companion_instance_11;
  }
  function Formats_1() {
    Formats_instance_1 = this;
    this.d17_1 = get_ISO_DATETIME();
  }
  var Formats_instance_1;
  function Formats_getInstance_1() {
    if (Formats_instance_1 == null)
      new Formats_1();
    return Formats_instance_1;
  }
  function LocalDateTime_0(value) {
    Companion_getInstance_11();
    this.p1e_1 = value;
  }
  protoOf(LocalDateTime_0).a17 = function () {
    return this.p1e_1.year();
  };
  protoOf(LocalDateTime_0).b17 = function () {
    return this.p1e_1.monthValue();
  };
  protoOf(LocalDateTime_0).c17 = function () {
    return this.p1e_1.dayOfMonth();
  };
  protoOf(LocalDateTime_0).c18 = function () {
    return this.p1e_1.hour();
  };
  protoOf(LocalDateTime_0).g18 = function () {
    return this.p1e_1.minute();
  };
  protoOf(LocalDateTime_0).k18 = function () {
    return this.p1e_1.second();
  };
  protoOf(LocalDateTime_0).i18 = function () {
    return numberToInt(this.p1e_1.nano());
  };
  protoOf(LocalDateTime_0).q1e = function () {
    return new LocalDate_0(this.p1e_1.toLocalDate());
  };
  protoOf(LocalDateTime_0).r1e = function () {
    return new LocalTime_0(this.p1e_1.toLocalTime());
  };
  protoOf(LocalDateTime_0).equals = function (other) {
    var tmp;
    if (this === other) {
      tmp = true;
    } else {
      var tmp_0;
      if (other instanceof LocalDateTime_0) {
        tmp_0 = this.p1e_1 === other.p1e_1 || this.p1e_1.equals(other.p1e_1);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(LocalDateTime_0).hashCode = function () {
    return this.p1e_1.hashCode();
  };
  protoOf(LocalDateTime_0).toString = function () {
    return this.p1e_1.toString();
  };
  protoOf(LocalDateTime_0).z1m = function (other) {
    return this.p1e_1.compareTo(other.p1e_1);
  };
  protoOf(LocalDateTime_0).d = function (other) {
    return this.z1m(other instanceof LocalDateTime_0 ? other : THROW_CCE());
  };
  function LocalTime_init_$Init$(hour, minute, second, nanosecond, $this) {
    second = second === VOID ? 0 : second;
    nanosecond = nanosecond === VOID ? 0 : nanosecond;
    var tmp;
    try {
      // Inline function 'kotlinx.datetime.jsTry' call
      // Inline function 'kotlinx.datetime.LocalTime.<init>.<anonymous>' call
      tmp = LocalTime.of(hour, minute, second, nanosecond);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        if (isJodaDateTimeException(e))
          throw IllegalArgumentException_init_$Create$_0(e);
        throw e;
      } else {
        throw $p;
      }
    }
    LocalTime_0.call($this, tmp);
    return $this;
  }
  function LocalTime_init_$Create$(hour, minute, second, nanosecond) {
    return LocalTime_init_$Init$(hour, minute, second, nanosecond, objectCreate(protoOf(LocalTime_0)));
  }
  function Companion_12() {
    Companion_instance_12 = this;
    this.c1m_1 = new LocalTime_0(LocalTime.MIN);
    this.d1m_1 = new LocalTime_0(LocalTime.MAX);
  }
  protoOf(Companion_12).a1n = function (input, format) {
    var tmp;
    if (format === Formats_instance_2.x16()) {
      var tmp_0;
      try {
        // Inline function 'kotlin.let' call
        // Inline function 'kotlinx.datetime.jsTry' call
        // Inline function 'kotlinx.datetime.Companion.parse.<anonymous>' call
        // Inline function 'kotlin.contracts.contract' call
        var p0 = LocalTime.parse(toString(input));
        tmp_0 = new LocalTime_0(p0);
      } catch ($p) {
        var tmp_1;
        if ($p instanceof Error) {
          var e = $p;
          if (isJodaDateTimeParseException(e))
            throw DateTimeFormatException_init_$Create$_1(e);
          throw e;
        } else {
          throw $p;
        }
      }
      tmp = tmp_0;
    } else {
      tmp = format.y1b(input);
    }
    return tmp;
  };
  protoOf(Companion_12).e1m = function (input, format, $super) {
    format = format === VOID ? getIsoTimeFormat() : format;
    return $super === VOID ? this.a1n(input, format) : $super.a1n.call(this, input, format);
  };
  var Companion_instance_12;
  function Companion_getInstance_12() {
    if (Companion_instance_12 == null)
      new Companion_12();
    return Companion_instance_12;
  }
  function Formats_2() {
  }
  protoOf(Formats_2).x16 = function () {
    return get_ISO_TIME();
  };
  var Formats_instance_2;
  function Formats_getInstance_2() {
    return Formats_instance_2;
  }
  function LocalTime_0(value) {
    Companion_getInstance_12();
    this.m1a_1 = value;
  }
  protoOf(LocalTime_0).c18 = function () {
    return this.m1a_1.hour();
  };
  protoOf(LocalTime_0).g18 = function () {
    return this.m1a_1.minute();
  };
  protoOf(LocalTime_0).k18 = function () {
    return this.m1a_1.second();
  };
  protoOf(LocalTime_0).i18 = function () {
    return numberToInt(this.m1a_1.nano());
  };
  protoOf(LocalTime_0).n1a = function () {
    return this.m1a_1.toSecondOfDay();
  };
  protoOf(LocalTime_0).equals = function (other) {
    var tmp;
    if (this === other) {
      tmp = true;
    } else {
      var tmp_0;
      if (other instanceof LocalTime_0) {
        tmp_0 = this.m1a_1 === other.m1a_1 || this.m1a_1.equals(other.m1a_1);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(LocalTime_0).hashCode = function () {
    return this.m1a_1.hashCode();
  };
  protoOf(LocalTime_0).toString = function () {
    return this.m1a_1.toString();
  };
  protoOf(LocalTime_0).b1n = function (other) {
    return this.m1a_1.compareTo(other.m1a_1);
  };
  protoOf(LocalTime_0).d = function (other) {
    return this.b1n(other instanceof LocalTime_0 ? other : THROW_CCE());
  };
  function ofZone($this, zoneId) {
    var tmp;
    if (zoneId instanceof ZoneOffset) {
      tmp = FixedOffsetTimeZone_init_$Create$(new UtcOffset(zoneId));
    } else {
      if (zoneId.rules().isFixedOffset()) {
        var tmp_0 = zoneId.normalized();
        tmp = new FixedOffsetTimeZone(new UtcOffset(tmp_0 instanceof ZoneOffset ? tmp_0 : THROW_CCE()), zoneId);
      } else {
        tmp = new TimeZone(zoneId);
      }
    }
    return tmp;
  }
  function Companion_13() {
    Companion_instance_13 = this;
    this.l1m_1 = asTimeZone(new UtcOffset(ZoneOffset.UTC));
  }
  protoOf(Companion_13).c1n = function () {
    return ofZone(this, ZoneId.systemDefault());
  };
  protoOf(Companion_13).m1m = function (zoneId) {
    var tmp;
    try {
      // Inline function 'kotlinx.datetime.jsTry' call
      // Inline function 'kotlinx.datetime.Companion.of.<anonymous>' call
      var tmp$ret$1 = ZoneId.of(zoneId);
      tmp = ofZone(this, tmp$ret$1);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        if (isJodaDateTimeException(e))
          throw IllegalTimeZoneException_init_$Create$_0(e);
        throw e;
      } else {
        throw $p;
      }
    }
    return tmp;
  };
  var Companion_instance_13;
  function Companion_getInstance_13() {
    if (Companion_instance_13 == null)
      new Companion_13();
    return Companion_instance_13;
  }
  function TimeZone(zoneId) {
    Companion_getInstance_13();
    this.o1m_1 = zoneId;
  }
  protoOf(TimeZone).p1m = function () {
    return this.o1m_1.id();
  };
  protoOf(TimeZone).equals = function (other) {
    var tmp;
    if (this === other) {
      tmp = true;
    } else {
      var tmp_0;
      if (other instanceof TimeZone) {
        tmp_0 = this.o1m_1 === other.o1m_1 || this.o1m_1.equals(other.o1m_1);
      } else {
        tmp_0 = false;
      }
      tmp = tmp_0;
    }
    return tmp;
  };
  protoOf(TimeZone).hashCode = function () {
    return this.o1m_1.hashCode();
  };
  protoOf(TimeZone).toString = function () {
    return this.o1m_1.toString();
  };
  function toLocalDateTime(_this__u8e3s4, timeZone) {
    var tmp;
    try {
      // Inline function 'kotlin.let' call
      // Inline function 'kotlinx.datetime.jsTry' call
      // Inline function 'kotlinx.datetime.toLocalDateTime.<anonymous>' call
      // Inline function 'kotlin.contracts.contract' call
      var p0 = LocalDateTime.ofInstant(_this__u8e3s4.q1a_1, timeZone.o1m_1);
      tmp = new LocalDateTime_0(p0);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        if (isJodaDateTimeException(e))
          throw DateTimeArithmeticException_init_$Create$_0(e);
        throw e;
      } else {
        throw $p;
      }
    }
    return tmp;
  }
  function toInstant(_this__u8e3s4, timeZone) {
    // Inline function 'kotlin.let' call
    // Inline function 'kotlin.contracts.contract' call
    var p0 = _this__u8e3s4.p1e_1.atZone(timeZone.o1m_1).toInstant();
    return new Instant_0(p0);
  }
  function FixedOffsetTimeZone_init_$Init$(offset, $this) {
    FixedOffsetTimeZone.call($this, offset, offset.o1a_1);
    return $this;
  }
  function FixedOffsetTimeZone_init_$Create$(offset) {
    return FixedOffsetTimeZone_init_$Init$(offset, objectCreate(protoOf(FixedOffsetTimeZone)));
  }
  function Companion_14() {
  }
  var Companion_instance_14;
  function Companion_getInstance_14() {
    return Companion_instance_14;
  }
  function FixedOffsetTimeZone(offset, zoneId) {
    TimeZone.call(this, zoneId);
    this.e1n_1 = offset;
  }
  function get_isoFormat() {
    _init_properties_UtcOffset_kt__93zod7();
    // Inline function 'kotlin.getValue' call
    var this_0 = isoFormat$delegate;
    isoFormat$factory();
    return this_0.d2();
  }
  var isoFormat$delegate;
  function get_isoBasicFormat() {
    _init_properties_UtcOffset_kt__93zod7();
    // Inline function 'kotlin.getValue' call
    var this_0 = isoBasicFormat$delegate;
    isoBasicFormat$factory();
    return this_0.d2();
  }
  var isoBasicFormat$delegate;
  function get_fourDigitsFormat() {
    _init_properties_UtcOffset_kt__93zod7();
    // Inline function 'kotlin.getValue' call
    var this_0 = fourDigitsFormat$delegate;
    fourDigitsFormat$factory();
    return this_0.d2();
  }
  var fourDigitsFormat$delegate;
  function Companion_15() {
    Companion_instance_15 = this;
    this.h1m_1 = new UtcOffset(ZoneOffset.UTC);
  }
  protoOf(Companion_15).f1n = function (input, format) {
    return format === Formats_instance_3.x16() ? parseWithFormat(input, get_isoFormat()) : format === Formats_instance_3.g1n() ? parseWithFormat(input, get_isoBasicFormat()) : format === Formats_instance_3.o19() ? parseWithFormat(input, get_fourDigitsFormat()) : format.y1b(input);
  };
  protoOf(Companion_15).i1m = function (input, format, $super) {
    format = format === VOID ? getIsoUtcOffsetFormat() : format;
    return $super === VOID ? this.f1n(input, format) : $super.f1n.call(this, input, format);
  };
  var Companion_instance_15;
  function Companion_getInstance_15() {
    if (Companion_instance_15 == null)
      new Companion_15();
    return Companion_instance_15;
  }
  function Formats_3() {
  }
  protoOf(Formats_3).x16 = function () {
    return get_ISO_OFFSET();
  };
  protoOf(Formats_3).g1n = function () {
    return get_ISO_OFFSET_BASIC();
  };
  protoOf(Formats_3).o19 = function () {
    return get_FOUR_DIGIT_OFFSET();
  };
  var Formats_instance_3;
  function Formats_getInstance_3() {
    return Formats_instance_3;
  }
  function UtcOffset(zoneOffset) {
    Companion_getInstance_15();
    this.o1a_1 = zoneOffset;
  }
  protoOf(UtcOffset).p1a = function () {
    return this.o1a_1.totalSeconds();
  };
  protoOf(UtcOffset).hashCode = function () {
    return this.o1a_1.hashCode();
  };
  protoOf(UtcOffset).equals = function (other) {
    var tmp;
    if (other instanceof UtcOffset) {
      tmp = this.o1a_1 === other.o1a_1 || this.o1a_1.equals(other.o1a_1);
    } else {
      tmp = false;
    }
    return tmp;
  };
  protoOf(UtcOffset).toString = function () {
    return this.o1a_1.toString();
  };
  function UtcOffset_0(hours, minutes, seconds) {
    hours = hours === VOID ? null : hours;
    minutes = minutes === VOID ? null : minutes;
    seconds = seconds === VOID ? null : seconds;
    _init_properties_UtcOffset_kt__93zod7();
    var tmp;
    try {
      var tmp_0;
      if (!(hours == null)) {
        // Inline function 'kotlinx.datetime.jsTry' call
        // Inline function 'kotlinx.datetime.UtcOffset.<anonymous>' call
        var tmp_1 = ZoneOffset;
        var tmp_2 = minutes == null ? 0 : minutes;
        var tmp$ret$1 = tmp_1.ofHoursMinutesSeconds(hours, tmp_2, seconds == null ? 0 : seconds);
        tmp_0 = new UtcOffset(tmp$ret$1);
      } else if (!(minutes == null)) {
        // Inline function 'kotlinx.datetime.jsTry' call
        // Inline function 'kotlinx.datetime.UtcOffset.<anonymous>' call
        var tmp_3 = ZoneOffset;
        var tmp_4 = minutes / 60 | 0;
        var tmp_5 = minutes % 60 | 0;
        var tmp$ret$3 = tmp_3.ofHoursMinutesSeconds(tmp_4, tmp_5, seconds == null ? 0 : seconds);
        tmp_0 = new UtcOffset(tmp$ret$3);
      } else {
        // Inline function 'kotlinx.datetime.jsTry' call
        // Inline function 'kotlinx.datetime.UtcOffset.<anonymous>' call
        var tmp_6 = ZoneOffset;
        var tmp$ret$5 = tmp_6.ofTotalSeconds(seconds == null ? 0 : seconds);
        tmp_0 = new UtcOffset(tmp$ret$5);
      }
      tmp = tmp_0;
    } catch ($p) {
      var tmp_7;
      if ($p instanceof Error) {
        var e = $p;
        var tmp_8;
        if (isJodaDateTimeException(e)) {
          throw IllegalArgumentException_init_$Create$_0(e);
        } else {
          throw e;
        }
      } else {
        throw $p;
      }
    }
    return tmp;
  }
  function parseWithFormat(input, format) {
    _init_properties_UtcOffset_kt__93zod7();
    var tmp;
    try {
      // Inline function 'kotlinx.datetime.jsTry' call
      // Inline function 'kotlinx.datetime.parseWithFormat.<anonymous>' call
      tmp = format.parse(toString(input)).get(ChronoField.OFFSET_SECONDS);
    } catch ($p) {
      var tmp_0;
      if ($p instanceof Error) {
        var e = $p;
        if (isJodaDateTimeParseException(e))
          throw DateTimeFormatException_init_$Create$_1(e);
        if (isJodaDateTimeException(e))
          throw DateTimeFormatException_init_$Create$_1(e);
        throw e;
      } else {
        throw $p;
      }
    }
    return UtcOffset_0(VOID, VOID, tmp);
  }
  function isoFormat$delegate$lambda() {
    _init_properties_UtcOffset_kt__93zod7();
    return (new DateTimeFormatterBuilder()).parseCaseInsensitive().appendOffsetId().toFormatter(ResolverStyle.STRICT);
  }
  function isoBasicFormat$delegate$lambda() {
    _init_properties_UtcOffset_kt__93zod7();
    return (new DateTimeFormatterBuilder()).parseCaseInsensitive().appendOffset('+HHmmss', 'Z').toFormatter(ResolverStyle.STRICT);
  }
  function fourDigitsFormat$delegate$lambda() {
    _init_properties_UtcOffset_kt__93zod7();
    return (new DateTimeFormatterBuilder()).parseCaseInsensitive().appendOffset('+HHMM', '+0000').toFormatter(ResolverStyle.STRICT);
  }
  function isoFormat$factory() {
    return getPropertyCallableRef('isoFormat', 0, KProperty0, function () {
      return get_isoFormat();
    }, null);
  }
  function isoBasicFormat$factory() {
    return getPropertyCallableRef('isoBasicFormat', 0, KProperty0, function () {
      return get_isoBasicFormat();
    }, null);
  }
  function fourDigitsFormat$factory() {
    return getPropertyCallableRef('fourDigitsFormat', 0, KProperty0, function () {
      return get_fourDigitsFormat();
    }, null);
  }
  var properties_initialized_UtcOffset_kt_4gxffr;
  function _init_properties_UtcOffset_kt__93zod7() {
    if (!properties_initialized_UtcOffset_kt_4gxffr) {
      properties_initialized_UtcOffset_kt_4gxffr = true;
      isoFormat$delegate = lazy(isoFormat$delegate$lambda);
      isoBasicFormat$delegate = lazy(isoBasicFormat$delegate$lambda);
      fourDigitsFormat$delegate = lazy(fourDigitsFormat$delegate$lambda);
    }
  }
  function safeMultiply(a, b) {
    if (b.equals(new Long(-1, -1))) {
      if (a.equals(new Long(0, -2147483648))) {
        throw ArithmeticException_init_$Create$('Multiplication overflows a long: ' + a.toString() + ' * ' + b.toString());
      }
      return a.j3();
    } else if (b.equals(new Long(0, 0)))
      return new Long(0, 0);
    else if (b.equals(new Long(1, 0)))
      return a;
    var total = a.f3(b);
    if (!total.g3(b).equals(a)) {
      throw ArithmeticException_init_$Create$('Multiplication overflows a long: ' + a.toString() + ' * ' + b.toString());
    }
    return total;
  }
  function safeAdd(a, b) {
    var sum = a.d3(b);
    if (a.q3(sum).g1(new Long(0, 0)) < 0 && a.q3(b).g1(new Long(0, 0)) >= 0) {
      throw ArithmeticException_init_$Create$('Addition overflows a long: ' + a.toString() + ' + ' + b.toString());
    }
    return sum;
  }
  function hasJsExceptionName(_this__u8e3s4, name) {
    // Inline function 'kotlin.js.asDynamic' call
    return _this__u8e3s4.name == name;
  }
  //region block: post-declaration
  protoOf(Builder).a1b = appendAlternativeParsingImpl;
  protoOf(Builder).b1b = appendOptionalImpl;
  protoOf(Builder).k19 = chars;
  protoOf(Builder).q19 = build;
  protoOf(Builder).c1b = addFormatStructureForDate;
  protoOf(Builder).d1b = addFormatStructureForTime;
  protoOf(Builder).e1b = year;
  protoOf(Builder).j19 = year$default;
  protoOf(Builder).f1b = monthNumber;
  protoOf(Builder).g1b = monthNumber$default;
  protoOf(Builder).i19 = monthName;
  protoOf(Builder).f19 = dayOfMonth;
  protoOf(Builder).h1b = dayOfMonth$default;
  protoOf(Builder).n19 = dayOfWeek;
  protoOf(Builder).y18 = date;
  protoOf(Builder).i1b = hour;
  protoOf(Builder).z18 = hour$default;
  protoOf(Builder).j1b = minute;
  protoOf(Builder).a19 = minute$default;
  protoOf(Builder).k1b = second;
  protoOf(Builder).b19 = second$default;
  protoOf(Builder).c19 = secondFraction;
  protoOf(Builder).l1b = time;
  protoOf(Builder).m1b = offsetHours;
  protoOf(Builder).d19 = offsetHours$default;
  protoOf(Builder).n1b = offsetMinutesOfHour;
  protoOf(Builder).o1b = offsetMinutesOfHour$default;
  protoOf(Builder).p1b = offsetSecondsOfMinute;
  protoOf(Builder).q1b = offsetSecondsOfMinute$default;
  protoOf(Builder).e19 = offset;
  protoOf(Builder_0).a1b = appendAlternativeParsingImpl;
  protoOf(Builder_0).b1b = appendOptionalImpl;
  protoOf(Builder_0).k19 = chars;
  protoOf(Builder_0).q19 = build;
  protoOf(Builder_0).e1b = year;
  protoOf(Builder_0).j19 = year$default;
  protoOf(Builder_0).f1b = monthNumber;
  protoOf(Builder_0).g1b = monthNumber$default;
  protoOf(Builder_0).f19 = dayOfMonth;
  protoOf(Builder_0).h1b = dayOfMonth$default;
  protoOf(Builder_1).a1b = appendAlternativeParsingImpl;
  protoOf(Builder_1).b1b = appendOptionalImpl;
  protoOf(Builder_1).k19 = chars;
  protoOf(Builder_1).q19 = build;
  protoOf(Builder_1).c1b = addFormatStructureForDate;
  protoOf(Builder_1).d1b = addFormatStructureForTime;
  protoOf(Builder_1).e1b = year;
  protoOf(Builder_1).j19 = year$default;
  protoOf(Builder_1).f1b = monthNumber;
  protoOf(Builder_1).g1b = monthNumber$default;
  protoOf(Builder_1).f19 = dayOfMonth;
  protoOf(Builder_1).h1b = dayOfMonth$default;
  protoOf(Builder_1).y18 = date;
  protoOf(Builder_1).i1b = hour;
  protoOf(Builder_1).z18 = hour$default;
  protoOf(Builder_1).j1b = minute;
  protoOf(Builder_1).a19 = minute$default;
  protoOf(Builder_1).k1b = second;
  protoOf(Builder_1).b19 = second$default;
  protoOf(Builder_1).c19 = secondFraction;
  protoOf(Builder_1).l1b = time;
  protoOf(IncompleteLocalTime).z17 = set_fractionOfSecond;
  protoOf(IncompleteLocalTime).a18 = get_fractionOfSecond;
  protoOf(Builder_2).a1b = appendAlternativeParsingImpl;
  protoOf(Builder_2).b1b = appendOptionalImpl;
  protoOf(Builder_2).k19 = chars;
  protoOf(Builder_2).q19 = build;
  protoOf(Builder_2).i1b = hour;
  protoOf(Builder_2).z18 = hour$default;
  protoOf(Builder_2).j1b = minute;
  protoOf(Builder_2).a19 = minute$default;
  protoOf(Builder_2).k1b = second;
  protoOf(Builder_2).b19 = second$default;
  protoOf(Builder_2).c19 = secondFraction;
  protoOf(Builder_3).a1b = appendAlternativeParsingImpl;
  protoOf(Builder_3).b1b = appendOptionalImpl;
  protoOf(Builder_3).k19 = chars;
  protoOf(Builder_3).q19 = build;
  protoOf(Builder_3).m1b = offsetHours;
  protoOf(Builder_3).d19 = offsetHours$default;
  protoOf(Builder_3).n1b = offsetMinutesOfHour;
  protoOf(Builder_3).o1b = offsetMinutesOfHour$default;
  protoOf(Builder_3).p1b = offsetSecondsOfMinute;
  protoOf(Builder_3).q1b = offsetSecondsOfMinute$default;
  protoOf(PropertyAccessor).k1h = getterNotNull;
  protoOf(SpacePaddedFormatter).e1c = format$default;
  protoOf(SignedFormatter).e1c = format$default;
  protoOf(ConditionalFormatter).e1c = format$default;
  protoOf(ConcatenatedFormatter).e1c = format$default;
  protoOf(SignedIntFormatterStructure).e1c = format$default;
  protoOf(UnsignedIntFormatterStructure).e1c = format$default;
  protoOf(StringFormatterStructure).e1c = format$default;
  protoOf(DecimalFractionFormatterStructure).e1c = format$default;
  protoOf(ConstantStringFormatterStructure).e1c = format$default;
  //endregion
  //region block: init
  System_instance = new System();
  Companion_instance = new Companion();
  Companion_instance_2 = new Companion_2();
  Companion_instance_3 = new Companion_3();
  Companion_instance_4 = new Companion_4();
  Companion_instance_6 = new Companion_6();
  Companion_instance_7 = new Companion_7();
  Truth_instance = new Truth();
  ExpectedInt_instance = new ExpectedInt();
  Companion_instance_8 = new Companion_8();
  Formats_instance_2 = new Formats_2();
  Companion_instance_14 = new Companion_14();
  Formats_instance_3 = new Formats_3();
  //endregion
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = LocalDateTime_init_$Create$;
  _.$_$.b = System_instance;
  _.$_$.c = Companion_getInstance_9;
  _.$_$.d = Formats_getInstance_0;
  _.$_$.e = Companion_getInstance_11;
  _.$_$.f = Companion_getInstance_13;
  _.$_$.g = atTime;
  _.$_$.h = format;
  _.$_$.i = toInstant;
  _.$_$.j = toLocalDateTime;
  //endregion
  return _;
}));

//# sourceMappingURL=Kotlin-DateTime-library-kotlinx-datetime.js.map
