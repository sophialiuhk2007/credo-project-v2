(function (factory) {
  if (typeof define === 'function' && define.amd)
    define(['exports', './kotlin-kotlin-stdlib.js'], factory);
  else if (typeof exports === 'object')
    factory(module.exports, require('./kotlin-kotlin-stdlib.js'));
  else {
    if (typeof globalThis['kotlin-kotlin-stdlib'] === 'undefined') {
      throw new Error("Error loading module 'kotlinx-io-kotlinx-io-bytestring'. Its dependency 'kotlin-kotlin-stdlib' was not found. Please, check whether 'kotlin-kotlin-stdlib' is loaded prior to 'kotlinx-io-kotlinx-io-bytestring'.");
    }
    globalThis['kotlinx-io-kotlinx-io-bytestring'] = factory(typeof globalThis['kotlinx-io-kotlinx-io-bytestring'] === 'undefined' ? {} : globalThis['kotlinx-io-kotlinx-io-bytestring'], globalThis['kotlin-kotlin-stdlib']);
  }
}(function (_, kotlin_kotlin) {
  'use strict';
  //region block: imports
  var imul = Math.imul;
  var VOID = kotlin_kotlin.$_$.e;
  var copyOfRange = kotlin_kotlin.$_$.l5;
  var protoOf = kotlin_kotlin.$_$.ia;
  var objectCreate = kotlin_kotlin.$_$.ha;
  var toCharArray = kotlin_kotlin.$_$.gc;
  var initMetadataForCompanion = kotlin_kotlin.$_$.j9;
  var getKClassFromExpression = kotlin_kotlin.$_$.c;
  var THROW_CCE = kotlin_kotlin.$_$.md;
  var Unit_instance = kotlin_kotlin.$_$.k4;
  var contentEquals = kotlin_kotlin.$_$.h5;
  var contentHashCode = kotlin_kotlin.$_$.i5;
  var toString = kotlin_kotlin.$_$.ma;
  var IllegalArgumentException_init_$Create$ = kotlin_kotlin.$_$.j1;
  var _UByte___init__impl__g9hnc4 = kotlin_kotlin.$_$.g2;
  var _UByte___get_data__impl__jof9qr = kotlin_kotlin.$_$.h2;
  var compareTo = kotlin_kotlin.$_$.y8;
  var StringBuilder_init_$Create$ = kotlin_kotlin.$_$.x;
  var _Char___init__impl__6a9atx = kotlin_kotlin.$_$.y1;
  var Comparable = kotlin_kotlin.$_$.xc;
  var initMetadataForClass = kotlin_kotlin.$_$.i9;
  var numberToInt = kotlin_kotlin.$_$.fa;
  var arrayCopy = kotlin_kotlin.$_$.z4;
  var IndexOutOfBoundsException_init_$Create$ = kotlin_kotlin.$_$.o1;
  //endregion
  //region block: pre-declaration
  initMetadataForCompanion(Companion);
  initMetadataForClass(ByteString, 'ByteString', VOID, VOID, [Comparable]);
  initMetadataForClass(ByteStringBuilder, 'ByteStringBuilder', ByteStringBuilder);
  //endregion
  function ByteString_init_$Init$(data, startIndex, endIndex, $this) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    endIndex = endIndex === VOID ? data.length : endIndex;
    ByteString.call($this, copyOfRange(data, startIndex, endIndex), null);
    return $this;
  }
  function ByteString_init_$Create$(data, startIndex, endIndex) {
    return ByteString_init_$Init$(data, startIndex, endIndex, objectCreate(protoOf(ByteString)));
  }
  function Companion() {
    Companion_instance = this;
    this.o2b_1 = new ByteString(new Int8Array(0), null);
    this.p2b_1 = toCharArray('0123456789abcdef');
  }
  protoOf(Companion).q2b = function (byteArray) {
    return new ByteString(byteArray, null);
  };
  var Companion_instance;
  function Companion_getInstance() {
    if (Companion_instance == null)
      new Companion();
    return Companion_instance;
  }
  function ByteString(data, dummy) {
    Companion_getInstance();
    this.r2b_1 = data;
    this.s2b_1 = 0;
  }
  protoOf(ByteString).q = function () {
    return this.r2b_1.length;
  };
  protoOf(ByteString).equals = function (other) {
    if (this === other)
      return true;
    if (other == null || !getKClassFromExpression(this).equals(getKClassFromExpression(other)))
      return false;
    if (!(other instanceof ByteString))
      THROW_CCE();
    if (!(other.r2b_1.length === this.r2b_1.length))
      return false;
    if (!(other.s2b_1 === 0) && !(this.s2b_1 === 0) && !(other.s2b_1 === this.s2b_1))
      return false;
    return contentEquals(this.r2b_1, other.r2b_1);
  };
  protoOf(ByteString).hashCode = function () {
    var hc = this.s2b_1;
    if (hc === 0) {
      hc = contentHashCode(this.r2b_1);
      this.s2b_1 = hc;
    }
    return hc;
  };
  protoOf(ByteString).t2b = function (startIndex, endIndex) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(startIndex <= endIndex)) {
      // Inline function 'kotlinx.io.bytestring.ByteString.toByteArray.<anonymous>' call
      var message = 'startIndex (' + startIndex + ') > endIndex (' + endIndex + ')';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    return copyOfRange(this.r2b_1, startIndex, endIndex);
  };
  protoOf(ByteString).u2b = function (startIndex, endIndex, $super) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    endIndex = endIndex === VOID ? this.q() : endIndex;
    return $super === VOID ? this.t2b(startIndex, endIndex) : $super.t2b.call(this, startIndex, endIndex);
  };
  protoOf(ByteString).v2b = function (other) {
    if (other === this)
      return 0;
    var localData = this.r2b_1;
    var otherData = other.r2b_1;
    var inductionVariable = 0;
    // Inline function 'kotlin.math.min' call
    var a = this.q();
    var b = other.q();
    var last = Math.min(a, b);
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        // Inline function 'kotlin.UByte.compareTo' call
        // Inline function 'kotlin.toUByte' call
        var this_0 = localData[i];
        var this_1 = _UByte___init__impl__g9hnc4(this_0);
        // Inline function 'kotlin.toUByte' call
        var this_2 = otherData[i];
        var other_0 = _UByte___init__impl__g9hnc4(this_2);
        // Inline function 'kotlin.UByte.toInt' call
        var tmp = _UByte___get_data__impl__jof9qr(this_1) & 255;
        // Inline function 'kotlin.UByte.toInt' call
        var tmp$ret$4 = _UByte___get_data__impl__jof9qr(other_0) & 255;
        var cmp = compareTo(tmp, tmp$ret$4);
        if (!(cmp === 0))
          return cmp;
      }
       while (inductionVariable < last);
    return compareTo(this.q(), other.q());
  };
  protoOf(ByteString).d = function (other) {
    return this.v2b(other instanceof ByteString ? other : THROW_CCE());
  };
  protoOf(ByteString).toString = function () {
    if (isEmpty(this)) {
      return 'ByteString(size=0)';
    }
    var sizeStr = this.q().toString();
    var len = (22 + sizeStr.length | 0) + imul(this.q(), 2) | 0;
    // Inline function 'kotlin.with' call
    // Inline function 'kotlin.contracts.contract' call
    // Inline function 'kotlinx.io.bytestring.ByteString.toString.<anonymous>' call
    var $this$with = StringBuilder_init_$Create$(len);
    $this$with.s8('ByteString(size=');
    $this$with.s8(sizeStr);
    $this$with.s8(' hex=');
    var localData = this.r2b_1;
    var inductionVariable = 0;
    var last = this.q();
    if (inductionVariable < last)
      do {
        var i = inductionVariable;
        inductionVariable = inductionVariable + 1 | 0;
        var b = localData[i];
        $this$with.t8(Companion_getInstance().p2b_1[(b >>> 4 | 0) & 15]);
        $this$with.t8(Companion_getInstance().p2b_1[b & 15]);
      }
       while (inductionVariable < last);
    return $this$with.t8(_Char___init__impl__6a9atx(41)).toString();
  };
  function ByteString_0(bytes) {
    var tmp;
    // Inline function 'kotlin.collections.isEmpty' call
    if (bytes.length === 0) {
      tmp = Companion_getInstance().o2b_1;
    } else {
      tmp = Companion_getInstance().q2b(bytes);
    }
    return tmp;
  }
  function isEmpty(_this__u8e3s4) {
    return _this__u8e3s4.q() === 0;
  }
  function ensureCapacity($this, requiredCapacity) {
    if ($this.w2b_1.length >= requiredCapacity) {
      return Unit_instance;
    }
    var tmp;
    // Inline function 'kotlin.collections.isEmpty' call
    if ($this.w2b_1.length === 0) {
      tmp = 16;
    } else {
      tmp = numberToInt($this.w2b_1.length * 1.5);
    }
    var desiredSize = tmp;
    // Inline function 'kotlin.math.max' call
    var a = desiredSize;
    desiredSize = Math.max(a, requiredCapacity);
    var newBuffer = new Int8Array(desiredSize);
    // Inline function 'kotlin.collections.copyInto' call
    var this_0 = $this.w2b_1;
    var endIndex = this_0.length;
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp_0 = this_0;
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    arrayCopy(tmp_0, newBuffer, 0, 0, endIndex);
    $this.w2b_1 = newBuffer;
  }
  function ByteStringBuilder(initialCapacity) {
    initialCapacity = initialCapacity === VOID ? 0 : initialCapacity;
    this.w2b_1 = new Int8Array(initialCapacity);
    this.x2b_1 = 0;
  }
  protoOf(ByteStringBuilder).q = function () {
    return this.x2b_1;
  };
  protoOf(ByteStringBuilder).y2b = function () {
    if (this.q() === 0) {
      return ByteString_0(new Int8Array([]));
    }
    if (this.w2b_1.length === this.q()) {
      return Companion_getInstance().q2b(this.w2b_1);
    }
    return ByteString_init_$Create$(this.w2b_1, 0, this.q());
  };
  protoOf(ByteStringBuilder).z2b = function (byte) {
    ensureCapacity(this, this.q() + 1 | 0);
    var tmp = this.w2b_1;
    var tmp1 = this.x2b_1;
    this.x2b_1 = tmp1 + 1 | 0;
    tmp[tmp1] = byte;
  };
  protoOf(ByteStringBuilder).a2c = function (array, startIndex, endIndex) {
    // Inline function 'kotlin.require' call
    // Inline function 'kotlin.contracts.contract' call
    if (!(startIndex <= endIndex)) {
      // Inline function 'kotlinx.io.bytestring.ByteStringBuilder.append.<anonymous>' call
      var message = 'startIndex (' + startIndex + ') > endIndex (' + endIndex + ')';
      throw IllegalArgumentException_init_$Create$(toString(message));
    }
    if (startIndex < 0 || endIndex > array.length) {
      throw IndexOutOfBoundsException_init_$Create$('startIndex (' + startIndex + ') and endIndex (' + endIndex + ') represents ' + ("an interval out of array's bounds [0.." + array.length + ').'));
    }
    ensureCapacity(this, (this.x2b_1 + endIndex | 0) - startIndex | 0);
    // Inline function 'kotlin.collections.copyInto' call
    var destination = this.w2b_1;
    var destinationOffset = this.x2b_1;
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    var tmp = array;
    // Inline function 'kotlin.js.unsafeCast' call
    // Inline function 'kotlin.js.asDynamic' call
    arrayCopy(tmp, destination, destinationOffset, startIndex, endIndex);
    this.x2b_1 = this.x2b_1 + (endIndex - startIndex | 0) | 0;
  };
  protoOf(ByteStringBuilder).b2c = function (array, startIndex, endIndex, $super) {
    startIndex = startIndex === VOID ? 0 : startIndex;
    endIndex = endIndex === VOID ? array.length : endIndex;
    var tmp;
    if ($super === VOID) {
      this.a2c(array, startIndex, endIndex);
      tmp = Unit_instance;
    } else {
      tmp = $super.a2c.call(this, array, startIndex, endIndex);
    }
    return tmp;
  };
  //region block: exports
  _.$_$ = _.$_$ || {};
  _.$_$.a = ByteStringBuilder;
  //endregion
  return _;
}));

//# sourceMappingURL=kotlinx-io-kotlinx-io-bytestring.js.map
