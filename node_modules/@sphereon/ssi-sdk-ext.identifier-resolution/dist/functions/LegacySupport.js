"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.legacyKeyRefsToIdentifierOpts = void 0;
/**
 * Converts legacy id opts key refs to the new ManagedIdentifierOpts
 * @param opts
 */
function legacyKeyRefsToIdentifierOpts(opts) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    if (!opts.idOpts) {
        console.warn(`Legacy idOpts being used. Support will be dropped in the future. Consider switching to the idOpts, to have support for DIDs, JWKS, x5c etc. See https://github.com/Sphereon-Opensource/SSI-SDK-crypto-extensions/tree/feature/multi_identifier_support/packages/identifier-resolution`);
        // legacy way
        let kmsKeyRef = (_h = (_f = (_d = (_a = opts.keyRef) !== null && _a !== void 0 ? _a : (_c = (_b = opts.didOpts) === null || _b === void 0 ? void 0 : _b.idOpts) === null || _c === void 0 ? void 0 : _c.kmsKeyRef) !== null && _d !== void 0 ? _d : (_e = opts.didOpts) === null || _e === void 0 ? void 0 : _e.kid) !== null && _f !== void 0 ? _f : (_g = opts.didOpts.idOpts) === null || _g === void 0 ? void 0 : _g.kid) !== null && _h !== void 0 ? _h : (typeof ((_j = opts.didOpts) === null || _j === void 0 ? void 0 : _j.idOpts.identifier) === 'object' ? ((_k = opts.didOpts) === null || _k === void 0 ? void 0 : _k.idOpts.identifier).keys[0].kid : undefined);
        if (!kmsKeyRef) {
            throw Error('Key ref is needed for access token signer');
        }
        let identifier = ((_m = (_l = opts.didOpts) === null || _l === void 0 ? void 0 : _l.identifier) !== null && _m !== void 0 ? _m : (_p = (_o = opts.didOpts) === null || _o === void 0 ? void 0 : _o.idOpts) === null || _p === void 0 ? void 0 : _p.identifier);
        return {
            kmsKeyRef: (_q = opts.keyRef) !== null && _q !== void 0 ? _q : kmsKeyRef,
            identifier: identifier !== null && identifier !== void 0 ? identifier : kmsKeyRef,
            issuer: opts.iss,
        };
    }
    else {
        const idOpts = opts.idOpts;
        if (opts.keyRef && !idOpts.kmsKeyRef) {
            // legacy way
            console.warn(`Legacy keyRef being used. Support will be dropped in the future. Consider switching to the idOpts, to have support for DIDs, JWKS, x5c etc. See https://github.com/Sphereon-Opensource/SSI-SDK-crypto-extensions/tree/feature/multi_identifier_support/packages/identifier-resolution`);
            idOpts.kmsKeyRef = opts.keyRef;
        }
        if (opts.iss && !idOpts.issuer) {
            // legacy way
            console.warn(`Legacy iss being used. Support will be dropped in the future. Consider switching to the idOpts, to have support for DIDs, JWKS, x5c etc. See https://github.com/Sphereon-Opensource/SSI-SDK-crypto-extensions/tree/feature/multi_identifier_support/packages/identifier-resolution`);
            idOpts.issuer = opts.iss;
        }
        return idOpts;
    }
}
exports.legacyKeyRefsToIdentifierOpts = legacyKeyRefsToIdentifierOpts;
//# sourceMappingURL=LegacySupport.js.map