import { IAgentContext, IDIDManager, IResolver } from '@veramo/core';
import { ExternalIdentifierCoseKeyOpts, ExternalIdentifierCoseKeyResult, ExternalIdentifierDidOpts, ExternalIdentifierDidResult, ExternalIdentifierJwkOpts, ExternalIdentifierJwkResult, ExternalIdentifierOpts, ExternalIdentifierResult, ExternalIdentifierX5cOpts, ExternalIdentifierX5cResult } from '../types';
export declare function resolveExternalIdentifier(opts: ExternalIdentifierOpts & {
    crypto?: Crypto;
}, context: IAgentContext<any>): Promise<ExternalIdentifierResult>;
export declare function resolveExternalX5cIdentifier(opts: ExternalIdentifierX5cOpts & {
    crypto?: Crypto;
}, context: IAgentContext<IResolver & IDIDManager>): Promise<ExternalIdentifierX5cResult>;
/**
 * Resolves a JWK. Normally this is just returning the JWK, but in case the JWK contains a x5c the chain is validated
 * @param opts
 * @param context
 */
export declare function resolveExternalJwkIdentifier(opts: ExternalIdentifierJwkOpts & {
    x5c?: ExternalIdentifierX5cOpts;
}, context: IAgentContext<any>): Promise<ExternalIdentifierJwkResult>;
/**
 * Resolves a JWK. Normally this is just returning the JWK, but in case the JWK contains a x5c the chain is validated
 * @param opts
 * @param context
 */
export declare function resolveExternalCoseKeyIdentifier(opts: ExternalIdentifierCoseKeyOpts & {
    x5c?: ExternalIdentifierX5cOpts;
}, context: IAgentContext<any>): Promise<ExternalIdentifierCoseKeyResult>;
export declare function resolveExternalDidIdentifier(opts: ExternalIdentifierDidOpts, context: IAgentContext<IResolver & IDIDManager>): Promise<ExternalIdentifierDidResult>;
//# sourceMappingURL=externalIdentifierFunctions.d.ts.map