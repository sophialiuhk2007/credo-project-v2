"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentifierResolution = void 0;
const __1 = require("..");
const functions_1 = require("../functions");
/**
 * @public
 */
class IdentifierResolution {
    /**
     * TODO: Add a cache, as we are retrieving the same keys/info quite often
     */
    constructor(opts) {
        var _a;
        this.schema = __1.schema.IMnemonicInfoGenerator;
        this.methods = {
            identifierManagedGet: this.identifierGetManaged.bind(this),
            identifierManagedGetByDid: this.identifierGetManagedByDid.bind(this),
            identifierManagedGetByKid: this.identifierGetManagedByKid.bind(this),
            identifierManagedGetByJwk: this.identifierGetManagedByJwk.bind(this),
            identifierManagedGetByX5c: this.identifierGetManagedByX5c.bind(this),
            identifierManagedGetByKey: this.identifierGetManagedByKey.bind(this),
            identifierManagedGetByCoseKey: this.identifierGetManagedByCoseKey.bind(this),
            identifierManagedGetByOID4VCIssuer: this.identifierGetManagedByOID4VCIssuer.bind(this),
            identifierExternalResolve: this.identifierResolveExternal.bind(this),
            identifierExternalResolveByDid: this.identifierExternalResolveByDid.bind(this),
            identifierExternalResolveByX5c: this.identifierExternalResolveByX5c.bind(this),
            identifierExternalResolveByJwk: this.identifierExternalResolveByJwk.bind(this),
            identifierExternalResolveByCoseKey: this.identifierExternalResolveByCoseKey.bind(this),
            // todo: JWKSet, oidc-discovery, oid4vci-issuer etc. Anything we already can resolve and need keys of
        };
        this._crypto = (_a = opts === null || opts === void 0 ? void 0 : opts.crypto) !== null && _a !== void 0 ? _a : global.crypto;
    }
    /**
     * Main method for managed identifiers. We always go through this method (also the other methods below) as we want to
     * integrate a plugin for anomaly detection. Having a single method helps
     * @param args
     * @param context
     * @private
     */
    identifierGetManaged(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, functions_1.ensureManagedIdentifierResult)(Object.assign(Object.assign({}, args), { crypto: this._crypto }), context);
        });
    }
    identifierGetManagedByDid(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.identifierGetManaged(Object.assign(Object.assign({}, args), { method: 'did' }), context));
        });
    }
    identifierGetManagedByKid(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.identifierGetManaged(Object.assign(Object.assign({}, args), { method: 'kid' }), context));
        });
    }
    identifierGetManagedByKey(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.identifierGetManaged(Object.assign(Object.assign({}, args), { method: 'key' }), context));
        });
    }
    identifierGetManagedByCoseKey(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.identifierGetManaged(Object.assign(Object.assign({}, args), { method: 'cose_key' }), context));
        });
    }
    identifierGetManagedByOID4VCIssuer(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.identifierGetManaged(Object.assign(Object.assign({}, args), { method: 'oid4vci-issuer' }), context));
        });
    }
    identifierGetManagedByJwk(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.identifierGetManaged(Object.assign(Object.assign({}, args), { method: 'jwk' }), context));
        });
    }
    identifierGetManagedByX5c(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.identifierGetManaged(Object.assign(Object.assign({}, args), { method: 'x5c' }), context));
        });
    }
    identifierResolveExternal(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, functions_1.resolveExternalIdentifier)(Object.assign(Object.assign({}, args), { crypto: this._crypto }), context);
        });
    }
    identifierExternalResolveByDid(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.identifierResolveExternal(Object.assign(Object.assign({}, args), { method: 'did' }), context));
        });
    }
    identifierExternalResolveByX5c(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.identifierResolveExternal(Object.assign(Object.assign({}, args), { method: 'x5c' }), context));
        });
    }
    identifierExternalResolveByCoseKey(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.identifierResolveExternal(Object.assign(Object.assign({}, args), { method: 'cose_key' }), context));
        });
    }
    identifierExternalResolveByJwk(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.identifierResolveExternal(Object.assign(Object.assign({}, args), { method: 'jwk' }), context));
        });
    }
}
exports.IdentifierResolution = IdentifierResolution;
//# sourceMappingURL=IdentifierResolution.js.map