import { IAgentPlugin } from '@veramo/core';
import { IIdentifierResolution } from '../types';
/**
 * @public
 */
export declare class IdentifierResolution implements IAgentPlugin {
    private readonly _crypto;
    readonly schema: any;
    readonly methods: IIdentifierResolution;
    /**
     * TODO: Add a cache, as we are retrieving the same keys/info quite often
     */
    constructor(opts?: {
        crypto?: Crypto;
    });
    /**
     * Main method for managed identifiers. We always go through this method (also the other methods below) as we want to
     * integrate a plugin for anomaly detection. Having a single method helps
     * @param args
     * @param context
     * @private
     */
    private identifierGetManaged;
    private identifierGetManagedByDid;
    private identifierGetManagedByKid;
    private identifierGetManagedByKey;
    private identifierGetManagedByCoseKey;
    private identifierGetManagedByOID4VCIssuer;
    private identifierGetManagedByJwk;
    private identifierGetManagedByX5c;
    private identifierResolveExternal;
    private identifierExternalResolveByDid;
    private identifierExternalResolveByX5c;
    private identifierExternalResolveByCoseKey;
    private identifierExternalResolveByJwk;
}
//# sourceMappingURL=IdentifierResolution.d.ts.map