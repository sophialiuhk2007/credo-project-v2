import { ClientIdScheme } from '@sphereon/ssi-sdk-ext.x509-utils';
import { ICoseKeyJson, JWK } from '@sphereon/ssi-types';
import { DIDDocumentSection, IIdentifier, IKey, TKeyType } from '@veramo/core';
import { JwkInfo } from './common';
/**
 * Use whenever we need to pass in an identifier. We can pass in kids, DIDs, IIdentifier objects and x5chains
 *
 * The functions below can be used to check the type, and they also provide the proper 'runtime' types
 */
export type ManagedIdentifierType = IIdentifier | string | string[] | JWK | IKey | ICoseKeyJson;
export type ManagedIdentifierOpts = (ManagedIdentifierJwkOpts | ManagedIdentifierX5cOpts | ManagedIdentifierDidOpts | ManagedIdentifierKidOpts | ManagedIdentifierKeyOpts | ManagedIdentifierCoseKeyOpts | ManagedIdentifierOID4VCIssuerOpts) & ManagedIdentifierOptsBase;
export type ManagedIdentifierOptsBase = {
    method?: ManagedIdentifierMethod;
    identifier: ManagedIdentifierType;
    kmsKeyRef?: string;
    issuer?: string;
    kid?: string;
    clientId?: string;
    clientIdScheme?: ClientIdScheme | 'did' | string;
};
export type ManagedIdentifierDidOpts = Omit<ManagedIdentifierOptsBase, 'method' | 'identifier'> & {
    method?: 'did';
    identifier: IIdentifier | string;
    keyType?: TKeyType;
    offlineWhenNoDIDRegistered?: boolean;
    noVerificationMethodFallback?: boolean;
    controllerKey?: boolean;
    vmRelationship?: DIDDocumentSection;
};
export declare function isManagedIdentifierDidOpts(opts: ManagedIdentifierOptsBase): opts is ManagedIdentifierDidOpts;
export type ManagedIdentifierKidOpts = Omit<ManagedIdentifierOptsBase, 'method' | 'identifier'> & {
    method?: 'kid';
    identifier: string;
};
export declare function isManagedIdentifierKidOpts(opts: ManagedIdentifierOptsBase): opts is ManagedIdentifierKidOpts;
export type ManagedIdentifierKeyOpts = Omit<ManagedIdentifierOptsBase, 'method' | 'identifier'> & {
    method?: 'key';
    identifier: IKey;
};
export declare function isManagedIdentifierKeyOpts(opts: ManagedIdentifierOptsBase): opts is ManagedIdentifierKeyOpts;
export type ManagedIdentifierCoseKeyOpts = Omit<ManagedIdentifierOptsBase, 'method' | 'identifier'> & {
    method?: 'cose_key';
    identifier: ICoseKeyJson;
};
export declare function isManagedIdentifierCoseKeyOpts(opts: ManagedIdentifierOptsBase): opts is ManagedIdentifierCoseKeyOpts;
export type ManagedIdentifierOID4VCIssuerOpts = Omit<ManagedIdentifierOptsBase, 'method' | 'identifier'> & {
    method?: 'oid4vci-issuer';
    identifier: string;
};
export declare function isManagedIdentifierOID4VCIssuerOpts(opts: ManagedIdentifierOptsBase): opts is ManagedIdentifierCoseKeyOpts;
export type ManagedIdentifierJwkOpts = Omit<ManagedIdentifierOptsBase, 'method' | 'identifier'> & {
    method?: 'jwk';
    identifier: JWK;
};
export declare function isManagedIdentifierJwkOpts(opts: ManagedIdentifierOptsBase): opts is ManagedIdentifierJwkOpts;
export type ManagedIdentifierX5cOpts = Omit<ManagedIdentifierOptsBase, 'method' | 'identifier'> & {
    method?: 'x5c';
    identifier: string[];
};
export declare function isManagedIdentifierX5cOpts(opts: ManagedIdentifierOptsBase): opts is ManagedIdentifierX5cOpts;
export interface ManagedJwkInfo extends JwkInfo {
    kmsKeyRef: string;
}
export interface IManagedIdentifierResultBase extends ManagedJwkInfo {
    method: ManagedIdentifierMethod;
    opts: ManagedIdentifierOpts;
    key: IKey;
    kid?: string;
    issuer?: string;
    clientId?: string;
    clientIdScheme?: ClientIdScheme | 'did' | string;
    identifier: ManagedIdentifierType;
}
export declare function isManagedIdentifierCoseKeyResult(object: IManagedIdentifierResultBase): object is ManagedIdentifierCoseKeyResult;
export declare function isManagedIdentifierDidResult(object: IManagedIdentifierResultBase): object is ManagedIdentifierDidResult;
export declare function isManagedIdentifierX5cResult(object: IManagedIdentifierResultBase): object is ManagedIdentifierX5cResult;
export declare function isManagedIdentifierJwkResult(object: IManagedIdentifierResultBase): object is ManagedIdentifierJwkResult;
export declare function isManagedIdentifierKidResult(object: IManagedIdentifierResultBase): object is ManagedIdentifierKidResult;
export declare function isManagedIdentifierKeyResult(object: IManagedIdentifierResultBase): object is ManagedIdentifierKeyResult;
export interface ManagedIdentifierDidResult extends IManagedIdentifierResultBase {
    method: 'did';
    identifier: IIdentifier;
    did: string;
    keys: Array<IKey>;
    verificationMethodSection?: DIDDocumentSection;
    controllerKeyId?: string;
    issuer: string;
    kid: string;
}
export interface ManagedIdentifierJwkResult extends IManagedIdentifierResultBase {
    identifier: JWK;
    method: 'jwk';
}
export interface ManagedIdentifierKidResult extends IManagedIdentifierResultBase {
    method: 'kid';
    identifier: string;
    kid: string;
}
export interface ManagedIdentifierKeyResult extends IManagedIdentifierResultBase {
    method: 'key';
    identifier: IKey;
}
export interface ManagedIdentifierCoseKeyResult extends IManagedIdentifierResultBase {
    method: 'cose_key';
    identifier: ICoseKeyJson;
}
export interface ManagedIdentifierOID4VCIssuerResult extends IManagedIdentifierResultBase {
    method: 'oid4vci-issuer';
    identifier: string;
}
export interface ManagedIdentifierX5cResult extends IManagedIdentifierResultBase {
    method: 'x5c';
    identifier: string[];
    x5c: string[];
    certificate: any;
}
export type ManagedIdentifierMethod = 'did' | 'jwk' | 'x5c' | 'kid' | 'key' | 'cose_key' | 'oid4vci-issuer';
export type ManagedIdentifierResult = IManagedIdentifierResultBase & (ManagedIdentifierX5cResult | ManagedIdentifierDidResult | ManagedIdentifierJwkResult | ManagedIdentifierKidResult | ManagedIdentifierKeyResult | ManagedIdentifierCoseKeyResult | ManagedIdentifierOID4VCIssuerResult);
export type ManagedIdentifierOptsOrResult = (ManagedIdentifierResult | ManagedIdentifierOpts) & {
    lazyDisabled?: boolean;
};
//# sourceMappingURL=managedIdentifierTypes.d.ts.map