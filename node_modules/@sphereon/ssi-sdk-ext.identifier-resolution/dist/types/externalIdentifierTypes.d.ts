import { DidDocumentJwks } from '@sphereon/ssi-sdk-ext.did-utils';
import { ICoseKeyJson, JWK } from '@sphereon/ssi-types';
import { X509CertificateChainValidationOpts, X509ValidationResult } from '@sphereon/ssi-sdk-ext.x509-utils';
import { IParsedDID } from '@sphereon/ssi-types';
import { DIDDocument, DIDDocumentSection, DIDResolutionResult } from '@veramo/core';
import { JwkInfo } from './common';
/**
 * Use whenever we need to resolve an external identifier. We can pass in kids, DIDs, and x5chains
 *
 * The functions below can be used to check the type, and they also provide the proper runtime types
 */
export type ExternalIdentifierType = string | string[] | JWK;
export type ExternalIdentifierOptsBase = {
    method?: ExternalIdentifierMethod;
    identifier: ExternalIdentifierType;
};
export type ExternalIdentifierDidOpts = Omit<ExternalIdentifierOptsBase, 'method'> & {
    method?: 'did';
    identifier: string;
    noVerificationMethodFallback?: boolean;
    vmRelationship?: DIDDocumentSection;
    localResolution?: boolean;
    uniresolverResolution?: boolean;
    resolverResolution?: boolean;
};
export declare function isExternalIdentifierDidOpts(opts: ExternalIdentifierOptsBase): opts is ExternalIdentifierDidOpts;
export type ExternalIdentifierOpts = (ExternalIdentifierJwkOpts | ExternalIdentifierX5cOpts | ExternalIdentifierDidOpts | ExternalIdentifierKidOpts | ExternalIdentifierCoseKeyOpts) & ExternalIdentifierOptsBase;
export type ExternalIdentifierKidOpts = Omit<ExternalIdentifierOptsBase, 'method'> & {
    method?: 'kid';
    identifier: string;
};
export declare function isExternalIdentifierKidOpts(opts: ExternalIdentifierOptsBase): opts is ExternalIdentifierKidOpts;
export type ExternalIdentifierJwkOpts = Omit<ExternalIdentifierOptsBase, 'method'> & {
    method?: 'jwk';
    identifier: JWK;
    x5c?: ExternalIdentifierX5cOpts;
};
export declare function isExternalIdentifierJwkOpts(opts: ExternalIdentifierOptsBase): opts is ExternalIdentifierJwkOpts;
export type ExternalIdentifierCoseKeyOpts = Omit<ExternalIdentifierOptsBase, 'method'> & {
    method?: 'cose_key';
    identifier: ICoseKeyJson;
};
export declare function isExternalIdentifierCoseKeyOpts(opts: ExternalIdentifierOptsBase): opts is ExternalIdentifierCoseKeyOpts;
export type ExternalIdentifierOidcDiscoveryOpts = Omit<ExternalIdentifierOptsBase, 'method'> & {
    method?: 'oidc-discovery';
    identifier: string;
};
export declare function isExternalIdentifierOidcDiscoveryOpts(opts: ExternalIdentifierOptsBase): opts is ExternalIdentifierJwkOpts;
export type ExternalIdentifierJwksUrlOpts = Omit<ExternalIdentifierOptsBase, 'method'> & {
    method?: 'jwks-url';
    identifier: string;
};
export declare function isExternalIdentifierJwksUrlOpts(opts: ExternalIdentifierOptsBase): opts is ExternalIdentifierJwksUrlOpts;
export type ExternalIdentifierX5cOpts = Omit<ExternalIdentifierOptsBase, 'method'> & X509CertificateChainValidationOpts & {
    method?: 'x5c';
    identifier: string[];
    verify?: boolean;
    verificationTime?: Date;
    trustAnchors?: string[];
};
export declare function isExternalIdentifierX5cOpts(opts: ExternalIdentifierOptsBase): opts is ExternalIdentifierX5cOpts;
export type ExternalIdentifierMethod = 'did' | 'jwk' | 'x5c' | 'kid' | 'cose_key' | 'oidc-discovery' | 'jwks-url' | 'oid4vci-issuer';
export type ExternalIdentifierResult = IExternalIdentifierResultBase & (ExternalIdentifierDidResult | ExternalIdentifierX5cResult | ExternalIdentifierJwkResult | ExternalIdentifierCoseKeyResult);
export interface IExternalIdentifierResultBase {
    method: ExternalIdentifierMethod;
    jwks: Array<ExternalJwkInfo>;
}
export interface ExternalIdentifierJwkResult extends IExternalIdentifierResultBase {
    method: 'jwk';
    jwk: JWK;
    x5c?: ExternalIdentifierX5cResult;
}
export interface ExternalIdentifierCoseKeyResult extends IExternalIdentifierResultBase {
    method: 'cose_key';
    coseKey: ICoseKeyJson;
    x5c?: ExternalIdentifierX5cResult;
}
export interface ExternalIdentifierX5cResult extends IExternalIdentifierResultBase {
    method: 'x5c';
    x5c: string[];
    issuerJWK: JWK;
    verificationResult?: X509ValidationResult;
    certificates: any[];
}
export interface ExternalJwkInfo extends JwkInfo {
    kid?: string;
    publicKeyHex: string;
}
export interface ExternalIdentifierDidResult extends IExternalIdentifierResultBase {
    method: 'did';
    did: string;
    didDocument?: DIDDocument;
    didJwks?: DidDocumentJwks;
    didResolutionResult: Omit<DIDResolutionResult, 'didDocument'>;
    didParsed: IParsedDID;
}
//# sourceMappingURL=externalIdentifierTypes.d.ts.map