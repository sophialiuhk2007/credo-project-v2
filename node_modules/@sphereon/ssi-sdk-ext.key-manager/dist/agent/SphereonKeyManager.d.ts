import { IKey, ManagedKeyInfo } from '@veramo/core';
import { AbstractKeyManagementSystem, AbstractKeyStore, KeyManager as VeramoKeyManager } from '@veramo/key-manager';
import { IKeyManagerGetArgs, ISphereonKeyManager, ISphereonKeyManagerCreateArgs, ISphereonKeyManagerHandleExpirationsArgs, ISphereonKeyManagerSignArgs, ISphereonKeyManagerVerifyArgs } from '../types/ISphereonKeyManager';
export declare const sphereonKeyManagerMethods: Array<string>;
export declare class SphereonKeyManager extends VeramoKeyManager {
    private kmsStore;
    private readonly availableKmses;
    readonly defaultKms: string;
    readonly kmsMethods: ISphereonKeyManager;
    constructor(options: {
        store: AbstractKeyStore;
        kms: Record<string, AbstractKeyManagementSystem>;
        defaultKms?: string;
    });
    keyManagerGetDefaultKeyManagementSystem(): Promise<string>;
    keyManagerCreate(args: ISphereonKeyManagerCreateArgs): Promise<ManagedKeyInfo>;
    keyManagerSign(args: ISphereonKeyManagerSignArgs): Promise<string>;
    keyManagerVerify(args: ISphereonKeyManagerVerifyArgs): Promise<boolean>;
    keyManagerListKeys(): Promise<ManagedKeyInfo[]>;
    keyManagerHandleExpirations(args: ISphereonKeyManagerHandleExpirationsArgs): Promise<Array<ManagedKeyInfo>>;
    private getKmsByName;
    keyManagerGet({ kid }: IKeyManagerGetArgs): Promise<IKey>;
}
//# sourceMappingURL=SphereonKeyManager.d.ts.map