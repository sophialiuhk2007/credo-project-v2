import { AbstractKeyManagementSystem } from '@veramo/key-manager';
import { AbstractKeyStore } from '@veramo/key-manager';
import { IKey } from '@veramo/core';
import { IKeyManager } from '@veramo/core';
import { IKeyManagerSignArgs } from '@veramo/core';
import { IPluginMethodMap } from '@veramo/core';
import { KeyManager } from '@veramo/key-manager';
import { KeyMetadata } from '@veramo/core';
import { ManagedKeyInfo } from '@veramo/core';
import { MinimalImportableKey } from '@veramo/core';
import { TKeyType } from '@veramo/core';

export declare function hasKeyOptions(object: any): object is {
    opts?: IkeyOptions;
};

/**
 * Input arguments for {@link ISphereonKeyManager.keyManagerDelete | keyManagerDelete}
 * @public
 */
export declare interface IKeyManagerDeleteArgs {
    /**
     * Key ID
     */
    kid: string;
}

/**
 * Input arguments for {@link ISphereonKeyManager.keyManagerGet | keyManagerGet}
 * @public
 */
export declare interface IKeyManagerGetArgs {
    /**
     * Key ID
     */
    kid: string;
}

export declare interface IkeyOptions {
    /**
     * Is this a temporary key?
     */
    ephemeral?: boolean;
    /**
     * Expiration and remove the key
     */
    expiration?: {
        expiryDate?: Date;
        removalDate?: Date;
    };
}

export declare const isDefined: <T extends unknown>(object: T | undefined) => object is T;

export declare interface ISphereonKeyManager extends IKeyManager, IPluginMethodMap {
    keyManagerCreate(args: ISphereonKeyManagerCreateArgs): Promise<PartialKey>;
    keyManagerImport(key: MinimalImportableKey): Promise<PartialKey>;
    keyManagerSign(args: ISphereonKeyManagerSignArgs): Promise<string>;
    /**
     * Verifies a signature using the key
     *
     * Does not exist in IKeyManager
     * @param args
     */
    keyManagerVerify(args: ISphereonKeyManagerVerifyArgs): Promise<boolean>;
    keyManagerListKeys(): Promise<Array<ManagedKeyInfo>>;
    /**
     * Get the KMS registered as default. Handy when no explicit KMS is provided for a function
     */
    keyManagerGetDefaultKeyManagementSystem(): Promise<string>;
    /**
     * Set keys to expired and remove keys eligible for deletion.
     * @param args
     */
    keyManagerHandleExpirations(args: ISphereonKeyManagerHandleExpirationsArgs): Promise<Array<ManagedKeyInfo>>;
}

/**
 * Input arguments for {@link ISphereonKeyManager.keyManagerCreate | keyManagerCreate}
 * @public
 */
export declare interface ISphereonKeyManagerCreateArgs {
    /**
     * Key type
     */
    type: TKeyType;
    /**
     * Key Management System
     */
    kms: string;
    /**
     * Key options
     */
    opts?: IkeyOptions;
    /**
     * Optional. Key meta data
     */
    meta?: KeyMetadata;
}

export declare interface ISphereonKeyManagerHandleExpirationsArgs {
    skipRemovals?: boolean;
}

/**
 * Input arguments for {@link ISphereonKeyManagerSignArgs.keyManagerSign | keyManagerSign}
 * @public
 */
export declare interface ISphereonKeyManagerSignArgs extends IKeyManagerSignArgs {
    /**
     * Data to sign
     */
    data: string | Uint8Array;
}

export declare interface ISphereonKeyManagerVerifyArgs {
    kms?: string;
    publicKeyHex: string;
    type: TKeyType;
    algorithm?: string;
    data: Uint8Array;
    signature: string;
}

export declare type PartialKey = ManagedKeyInfo & {
    privateKeyHex: string;
};

export declare const schema: any;

export declare class SphereonKeyManager extends KeyManager {
    private kmsStore;
    private readonly availableKmses;
    readonly defaultKms: string;
    readonly kmsMethods: ISphereonKeyManager;
    constructor(options: {
        store: AbstractKeyStore;
        kms: Record<string, AbstractKeyManagementSystem>;
        defaultKms?: string;
    });
    keyManagerGetDefaultKeyManagementSystem(): Promise<string>;
    keyManagerCreate(args: ISphereonKeyManagerCreateArgs): Promise<ManagedKeyInfo>;
    keyManagerSign(args: ISphereonKeyManagerSignArgs): Promise<string>;
    keyManagerVerify(args: ISphereonKeyManagerVerifyArgs): Promise<boolean>;
    keyManagerListKeys(): Promise<ManagedKeyInfo[]>;
    keyManagerHandleExpirations(args: ISphereonKeyManagerHandleExpirationsArgs): Promise<Array<ManagedKeyInfo>>;
    private getKmsByName;
    keyManagerGet({ kid }: IKeyManagerGetArgs): Promise<IKey>;
}

export declare const sphereonKeyManagerMethods: Array<string>;


export * from "@veramo/key-manager";

export { }
