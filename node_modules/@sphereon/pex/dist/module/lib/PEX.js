import { CredentialMapper, } from '@sphereon/ssi-types';
import { Status } from './ConstraintUtils';
import { EvaluationClientWrapper } from './evaluation';
import { PresentationSubmissionLocation, } from './signing';
import { PEVersion, SSITypesBuilder } from './types';
import { calculateSdHash, definitionVersionDiscovery, formatValidationErrors, getSubjectIdsAsString } from './utils';
import { PresentationDefinitionV1VB, PresentationDefinitionV2VB, PresentationSubmissionVB, ValidationEngine } from './validation';
/**
 * This is the main interfacing class to be used by developers using the PEX library.
 */
export class PEX {
    _evaluationClientWrapper;
    options;
    constructor(options) {
        // TODO:  So we have state in the form of this property which is set in the constructor, but we are overwriting it elsewhere. We need to retrhink how to instantiate PEX
        this._evaluationClientWrapper = new EvaluationClientWrapper();
        this.options = options;
    }
    /***
     * The evaluatePresentation compares what is expected from one or more presentations with a presentationDefinition.
     * presentationDefinition: It can be either v1 or v2 of presentationDefinition
     *
     * @param presentationDefinition the definition of what is expected in the presentation.
     * @param presentations the presentation(s) which have to be evaluated in comparison of the definition.
     * @param opts - limitDisclosureSignatureSuites the credential signature suites that support limit disclosure
     *
     * @return the evaluation results specify what was expected and was fulfilled and also specifies which requirements described in the input descriptors
     * were not fulfilled by the presentation(s).
     */
    evaluatePresentation(presentationDefinition, presentations, opts) {
        // We map it to an array for now to make processing on the presentations easier, but before checking against the submission
        // we will transform it to the original structure (array vs single) so the references in the submission stay correct
        const presentationsArray = Array.isArray(presentations) ? presentations : [presentations];
        if (presentationsArray.length === 0) {
            throw new Error('At least one presentation must be provided');
        }
        const generatePresentationSubmission = opts?.generatePresentationSubmission !== undefined ? opts.generatePresentationSubmission : opts?.presentationSubmission === undefined;
        const pd = SSITypesBuilder.toInternalPresentationDefinition(presentationDefinition);
        const presentationsCopy = JSON.parse(JSON.stringify(presentationsArray));
        const wrappedPresentations = presentationsCopy.map((p) => SSITypesBuilder.mapExternalVerifiablePresentationToWrappedVP(p, this.options?.hasher));
        let presentationSubmission = opts?.presentationSubmission;
        let presentationSubmissionLocation = opts?.presentationSubmissionLocation ??
            ((Array.isArray(presentations) && presentations.length > 1) || !CredentialMapper.isW3cPresentation(wrappedPresentations[0].presentation)
                ? PresentationSubmissionLocation.EXTERNAL
                : PresentationSubmissionLocation.PRESENTATION);
        // When only one presentation, we also allow it to be present in the VP
        if (!presentationSubmission &&
            presentationsArray.length === 1 &&
            CredentialMapper.isW3cPresentation(wrappedPresentations[0].presentation) &&
            !generatePresentationSubmission) {
            const decoded = wrappedPresentations[0].decoded;
            if ('presentation_submission' in decoded) {
                presentationSubmission = decoded.presentation_submission;
            }
            if (!presentationSubmission) {
                throw Error(`Either a presentation submission as part of the VP or provided in options was expected`);
            }
            presentationSubmissionLocation = PresentationSubmissionLocation.PRESENTATION;
            if (opts?.presentationSubmissionLocation && opts.presentationSubmissionLocation !== PresentationSubmissionLocation.PRESENTATION) {
                throw new Error(`unexpected presentationSubmissionLocation ${opts.presentationSubmissionLocation} was provided. Expected ${PresentationSubmissionLocation.PRESENTATION} when no presentationSubmission passed and first verifiable presentation contains a presentation_submission and generatePresentationSubmission is false`);
            }
        }
        else if (!presentationSubmission && !generatePresentationSubmission) {
            throw new Error('Presentation submission in options was expected.');
        }
        // TODO: we should probably add support for holder dids in the kb-jwt of an SD-JWT. We can extract this from the
        // `wrappedPresentation.original.compactKbJwt`, but as HAIP doesn't use dids, we'll leave it for now.
        const holderDIDs = wrappedPresentations
            .map((p) => {
            return CredentialMapper.isW3cPresentation(p.presentation) && p.presentation.holder ? p.presentation.holder : undefined;
        })
            .filter((d) => d !== undefined);
        const updatedOpts = {
            ...opts,
            holderDIDs,
            presentationSubmission,
            presentationSubmissionLocation,
            generatePresentationSubmission,
        };
        const allWvcs = wrappedPresentations.reduce((all, wvp) => [...all, ...wvp.vcs], []);
        const result = this._evaluationClientWrapper.evaluatePresentations(pd, Array.isArray(presentations) ? wrappedPresentations : wrappedPresentations[0], updatedOpts);
        if (result.areRequiredCredentialsPresent !== Status.ERROR) {
            const selectFromClientWrapper = new EvaluationClientWrapper();
            const selectResults = selectFromClientWrapper.selectFrom(pd, allWvcs, updatedOpts);
            if (selectResults.areRequiredCredentialsPresent !== Status.ERROR) {
                result.errors = [];
            }
        }
        return result;
    }
    /***
     * The evaluate compares what is expected from a verifiableCredentials with the presentationDefinition.
     *
     * @param presentationDefinition the v1 or v2 definition of what is expected in the presentation.
     * @param verifiableCredentials the verifiable credentials which are candidates to fulfill requirements defined in the presentationDefinition param.
     * @param opts - holderDIDs the list of the DIDs that the wallet holders controls. Optional, but needed by some input requirements that do a holderDID check.
     * @           - limitDisclosureSignatureSuites the credential signature suites that support limit disclosure
     *
     * @return the evaluation results specify what was expected and was fulfilled and also specifies which requirements described in the input descriptors
     * were not fulfilled by the verifiable credentials.
     */
    evaluateCredentials(presentationDefinition, verifiableCredentials, opts) {
        const wrappedVerifiableCredentials = SSITypesBuilder.mapExternalVerifiableCredentialsToWrappedVcs(verifiableCredentials, this.options?.hasher);
        // TODO:  So we have state in the form of this property which is set in the constructor, but we are overwriting it here. We need to retrhink how to instantiate PEX
        this._evaluationClientWrapper = new EvaluationClientWrapper();
        const pd = SSITypesBuilder.toInternalPresentationDefinition(presentationDefinition);
        const result = this._evaluationClientWrapper.evaluate(pd, wrappedVerifiableCredentials, opts);
        if (result.value && result.value.descriptor_map.length) {
            const selectFromClientWrapper = new EvaluationClientWrapper();
            const selectResults = selectFromClientWrapper.selectFrom(pd, wrappedVerifiableCredentials, opts);
            result.areRequiredCredentialsPresent = selectResults.areRequiredCredentialsPresent;
            result.errors = selectResults.errors;
        }
        else {
            result.areRequiredCredentialsPresent = Status.ERROR;
        }
        return result;
    }
    /**
     * The selectFrom method is a helper function that helps filter out the verifiable credentials which can not be selected and returns
     * the selectable credentials.
     *
     * @param presentationDefinition the v1 or v2 definition of what is expected in the presentation.
     * @param verifiableCredentials verifiable credentials are the credentials from wallet provided to the library to find selectable credentials.
     * @param opts - holderDIDs the decentralized identifier(s) of the wallet holderDID. This is used to identify the credentials issued to the holderDID of wallet in certain scenario's.
     *             - limitDisclosureSignatureSuites the credential signature suites that support limit disclosure
     *
     * @return the selectable credentials.
     */
    selectFrom(presentationDefinition, verifiableCredentials, opts) {
        const verifiableCredentialCopy = JSON.parse(JSON.stringify(verifiableCredentials));
        const pd = SSITypesBuilder.toInternalPresentationDefinition(presentationDefinition);
        // TODO:  So we have state in the form of this property which is set in the constructor, but we are overwriting it here. We need to retrhink how to instantiate PEX
        this._evaluationClientWrapper = new EvaluationClientWrapper();
        return this._evaluationClientWrapper.selectFrom(pd, SSITypesBuilder.mapExternalVerifiableCredentialsToWrappedVcs(verifiableCredentialCopy, this.options?.hasher), opts);
    }
    presentationSubmissionFrom(presentationDefinition, selectedCredentials, opts) {
        const pd = SSITypesBuilder.toInternalPresentationDefinition(presentationDefinition);
        return this._evaluationClientWrapper.submissionFrom(pd, SSITypesBuilder.mapExternalVerifiableCredentialsToWrappedVcs(selectedCredentials, this.options?.hasher), opts);
    }
    /**
     * This method helps create an Unsigned Presentation. An Unsigned Presentation after signing becomes a Presentation. And can be sent to
     * the verifier after signing it.
     *
     * @param presentationDefinition the v1 or v2 definition of what is expected in the presentation.
     * @param selectedCredentials the credentials which were declared selectable by getSelectableCredentials and then chosen by the intelligent-user
     * (e.g. human).
     * @param opts - holderDID optional; the decentralized identity of the wallet holderDID. This is used to identify the holderDID of the presentation.
     *
     * @return the presentation.
     */
    presentationFrom(presentationDefinition, selectedCredentials, opts) {
        const presentationSubmission = this.presentationSubmissionFrom(presentationDefinition, selectedCredentials, opts);
        const hasSdJwtCredentials = selectedCredentials.some((c) => CredentialMapper.isSdJwtDecodedCredential(c) || CredentialMapper.isSdJwtEncoded(c));
        // We could include it in the KB-JWT? Not sure if we want that
        if (opts?.presentationSubmissionLocation === PresentationSubmissionLocation.PRESENTATION && hasSdJwtCredentials) {
            throw new Error('Presentation submission location cannot be set to presentation when creating a presentation with an SD-JWT VC');
        }
        const presentationSubmissionLocation = opts?.presentationSubmissionLocation ??
            (hasSdJwtCredentials ? PresentationSubmissionLocation.EXTERNAL : PresentationSubmissionLocation.PRESENTATION);
        const presentations = this.constructPresentations(selectedCredentials, {
            ...opts,
            // We only pass in the submission in case it needs to be included in the presentation
            presentationSubmission: presentationSubmissionLocation === PresentationSubmissionLocation.PRESENTATION ? presentationSubmission : undefined,
            hasher: this.options?.hasher,
        });
        this.updateSdJwtCredentials(presentations);
        return {
            presentations,
            presentationSubmissionLocation,
            presentationSubmission,
        };
    }
    constructPresentations(selectedCredentials, opts) {
        if (!selectedCredentials) {
            throw Error(`At least a verifiable credential needs to be passed in to create a presentation`);
        }
        const verifiableCredential = (Array.isArray(selectedCredentials) ? selectedCredentials : [selectedCredentials]);
        if (verifiableCredential.some((c) => CredentialMapper.isSdJwtDecodedCredential(c) || CredentialMapper.isSdJwtEncoded(c))) {
            if (!this.options?.hasher) {
                throw new Error('Hasher must be provided when creating a presentation with an SD-JWT VC');
            }
        }
        const wVCs = verifiableCredential.map((vc) => CredentialMapper.toWrappedVerifiableCredential(vc, { hasher: this.options?.hasher }));
        const holders = Array.from(new Set(wVCs.flatMap((wvc) => getSubjectIdsAsString(wvc.credential))));
        if (holders.length !== 1 && !opts?.holderDID) {
            console.log(`We deduced ${holders.length} subject from ${wVCs.length} Verifiable Credentials, and no holder property was given. This might lead to undesired results`);
        }
        const holder = opts?.holderDID ?? (holders.length === 1 ? holders[0] : undefined);
        const type = opts?.basePresentationPayload?.type
            ? Array.isArray(opts.basePresentationPayload.type)
                ? opts.basePresentationPayload.type
                : [opts.basePresentationPayload.type]
            : [];
        if (!type.includes('VerifiablePresentation')) {
            type.push('VerifiablePresentation');
        }
        const context = opts?.basePresentationPayload?.['@context']
            ? Array.isArray(opts.basePresentationPayload['@context'])
                ? opts.basePresentationPayload['@context']
                : [opts.basePresentationPayload['@context']]
            : [];
        if (!context.includes('https://www.w3.org/2018/credentials/v1')) {
            context.push('https://www.w3.org/2018/credentials/v1');
        }
        if (opts?.presentationSubmission) {
            if (!type.includes('PresentationSubmission')) {
                type.push('PresentationSubmission');
            }
            if (!context.includes('https://identity.foundation/presentation-exchange/submission/v1')) {
                context.push('https://identity.foundation/presentation-exchange/submission/v1');
            }
        }
        const result = [];
        if (PEX.allowMultipleVCsPerPresentation(verifiableCredential)) {
            result.push({
                ...opts?.basePresentationPayload,
                '@context': context,
                type,
                holder,
                ...(!!opts?.presentationSubmission && { presentation_submission: opts.presentationSubmission }),
                verifiableCredential,
            });
        }
        else {
            verifiableCredential.forEach((vc) => {
                if (CredentialMapper.isSdJwtDecodedCredential(vc)) {
                    result.push(vc);
                }
                else if (CredentialMapper.isSdJwtEncoded(vc)) {
                    const decoded = CredentialMapper.decodeVerifiableCredential(vc, opts?.hasher);
                    result.push(decoded);
                }
                else {
                    // This should be jwt or json-ld
                    result.push({
                        ...opts?.basePresentationPayload,
                        '@context': context,
                        type,
                        holder,
                        ...(!!opts?.presentationSubmission && { presentation_submission: opts.presentationSubmission }),
                        verifiableCredential: [vc],
                    });
                }
            });
        }
        return result;
    }
    /*
      TODO SDK-37 refinement needed
     */
    static allowMultipleVCsPerPresentation(verifiableCredentials) {
        const jwtCredentials = verifiableCredentials.filter((c) => CredentialMapper.isJwtEncoded(c) || CredentialMapper.isJwtDecodedCredential(c));
        if (jwtCredentials.length > 0) {
            const subjects = new Set();
            const verificationMethods = new Set();
            for (const credential of jwtCredentials) {
                const decodedCredential = CredentialMapper.isJwtEncoded(credential)
                    ? CredentialMapper.decodeVerifiableCredential(credential)
                    : credential;
                const subject = decodedCredential.sub ||
                    (decodedCredential.vc && 'id' in decodedCredential.vc.credentialSubject && decodedCredential.vc.credentialSubject.id);
                if (subject) {
                    subjects.add(subject);
                }
                const vcProof = decodedCredential.proof ?? decodedCredential.vc.proof;
                const proofs = Array.isArray(vcProof) ? vcProof : [vcProof];
                proofs.filter((proof) => proof.verificationMethod).forEach((proof) => verificationMethods.add(proof.verificationMethod));
            }
            // If there's more than one unique subject or verification method, we can't allow multiple VCs in a single presentation
            if (subjects.size > 1 || verificationMethods.size > 1) {
                return false;
            }
        }
        if (verifiableCredentials.some((c) => CredentialMapper.isSdJwtEncoded(c) || CredentialMapper.isSdJwtDecodedCredential(c))) {
            return false;
        }
        return true;
    }
    /**
     * This method validates whether an object is usable as a presentation definition or not.
     *
     * @param presentationDefinition presentationDefinition of V1 or v2 to be validated.
     *
     * @return the validation results to reveal what is acceptable/unacceptable about the passed object to be considered a valid presentation definition
     */
    static validateDefinition(presentationDefinition) {
        const result = definitionVersionDiscovery(presentationDefinition);
        if (result.error) {
            const errorParts = [result.error];
            const v1ErrorString = formatValidationErrors(result.v1Errors);
            if (v1ErrorString) {
                errorParts.push('\nVersion 1 validation errors:\n  ' + v1ErrorString);
            }
            const v2ErrorString = formatValidationErrors(result.v2Errors);
            if (v2ErrorString) {
                errorParts.push('\nVersion 2 validation errors:\n  ' + v2ErrorString);
            }
            throw new Error(errorParts.join(''));
        }
        const validators = [];
        result.version === PEVersion.v1
            ? validators.push({
                bundler: new PresentationDefinitionV1VB('root'),
                target: SSITypesBuilder.modelEntityToInternalPresentationDefinitionV1(presentationDefinition),
            })
            : validators.push({
                bundler: new PresentationDefinitionV2VB('root'),
                target: SSITypesBuilder.modelEntityInternalPresentationDefinitionV2(presentationDefinition),
            });
        return new ValidationEngine().validate(validators);
    }
    /**
     * This method validates whether an object is usable as a presentation submission or not.
     *
     * @param presentationSubmission the object to be validated.
     *
     * @return the validation results to reveal what is acceptable/unacceptable about the passed object to be considered a valid presentation submission
     */
    static validateSubmission(presentationSubmission) {
        return new ValidationEngine().validate([
            {
                bundler: new PresentationSubmissionVB('root'),
                target: presentationSubmission,
            },
        ]);
    }
    /**
     * This method can be used to combine a definition, selected Verifiable Credentials, together with
     * signing opts and a callback to sign a presentation, making it a Verifiable Presentation before sending.
     *
     * Please note that PEX has no signature support on purpose. We didn't want this library to depend on all kinds of signature suites.
     * The callback function next to the Signing Params also gets a Presentation which is evaluated against the definition.
     * It is up to you to decide whether you simply update the supplied partial proof and add it to the presentation in the callback,
     * or whether you will use the selected Credentials, Presentation definition, evaluation results and/or presentation submission together with the signature opts
     *
     * @param presentationDefinition the Presentation Definition V1 or V2
     * @param selectedCredentials the PEX and/or User selected/filtered credentials that will become part of the Verifiable Presentation
     * @param signingCallBack the function which will be provided as a parameter. And this will be the method that will be able to perform actual
     *        signing. One example of signing is available in the project named. pe-selective-disclosure.
     * @param opts Signing Params these are the signing params required to sign.
     *
     * @return the signed and thus Verifiable Presentation.
     */
    async verifiablePresentationFrom(presentationDefinition, selectedCredentials, signingCallBack, opts) {
        const { holderDID, signatureOptions, proofOptions } = opts;
        function limitedDisclosureSuites() {
            let limitDisclosureSignatureSuites = [];
            if (proofOptions?.typeSupportsSelectiveDisclosure) {
                if (!proofOptions?.type) {
                    throw Error('Please provide a proof type if you enable selective disclosure');
                }
                limitDisclosureSignatureSuites = [proofOptions.type];
            }
            return limitDisclosureSignatureSuites;
        }
        const holderDIDs = holderDID ? [holderDID] : [];
        const limitDisclosureSignatureSuites = limitedDisclosureSuites();
        const evaluationResult = this.evaluateCredentials(presentationDefinition, selectedCredentials, {
            holderDIDs,
            limitDisclosureSignatureSuites,
        });
        const presentationResult = this.presentationFrom(presentationDefinition, evaluationResult.verifiableCredential, opts);
        const presentations = presentationResult.presentations;
        const evaluationResults = this.evaluatePresentation(presentationDefinition, presentations, {
            limitDisclosureSignatureSuites,
            ...(presentationResult.presentationSubmissionLocation === PresentationSubmissionLocation.EXTERNAL && {
                presentationSubmission: presentationResult.presentationSubmission,
            }),
        });
        if (!evaluationResults.value && selectedCredentials.length === 0) {
            evaluationResults.value = presentationResult.presentationSubmission;
        }
        if (!evaluationResults.value) {
            throw new Error('Could not get evaluation results from presentationResult');
        }
        const proof = {
            type: proofOptions?.type,
            verificationMethod: signatureOptions?.verificationMethod,
            created: proofOptions?.created ? proofOptions.created : new Date().toISOString(),
            proofPurpose: proofOptions?.proofPurpose,
            proofValue: signatureOptions?.proofValue,
            jws: signatureOptions?.jws,
            challenge: proofOptions?.challenge,
            nonce: proofOptions?.nonce,
            domain: proofOptions?.domain,
        };
        this.updateSdJwtCredentials(presentations, proofOptions?.nonce);
        const verifiablePresentations = [];
        for (const presentation of presentations) {
            const callBackParams = {
                options: {
                    ...opts,
                    presentationSubmissionLocation: presentationResult.presentationSubmissionLocation,
                },
                presentation,
                presentationDefinition,
                selectedCredentials,
                proof,
                presentationSubmission: evaluationResults.value,
                evaluationResults,
            };
            verifiablePresentations.push(await signingCallBack(callBackParams));
        }
        return {
            verifiablePresentations,
            presentationSubmissionLocation: presentationResult.presentationSubmissionLocation,
            presentationSubmission: evaluationResults.value,
        };
    }
    updateSdJwtCredentials(presentations, nonce) {
        presentations.forEach((presentation, index) => {
            // Select type without kbJwt as isSdJwtDecodedCredential and won't accept the partial sdvc type
            if (CredentialMapper.isSdJwtDecodedCredential(presentation)) {
                const sdJwtCredential = presentation;
                if (!this.options?.hasher) {
                    throw new Error('Hasher must be provided when creating a presentation with an SD-JWT VC');
                }
                // extract sd_alg or default to sha-256
                const hashAlg = sdJwtCredential.signedPayload._sd_alg ?? 'sha-256';
                const sdHash = calculateSdHash(sdJwtCredential.compactSdJwtVc, hashAlg, this.options.hasher);
                const kbJwt = {
                    // alg MUST be set by the signer
                    header: {
                        typ: 'kb+jwt',
                    },
                    // aud MUST be set by the signer or provided by e.g. SIOP/OpenID4VP lib
                    payload: {
                        iat: Math.floor(new Date().getTime() / 1000),
                        nonce: nonce,
                        sd_hash: sdHash,
                    },
                };
                presentations[index] = {
                    ...sdJwtCredential,
                    kbJwt,
                };
            }
        });
    }
    static definitionVersionDiscovery(presentationDefinition) {
        return definitionVersionDiscovery(presentationDefinition);
    }
}
//# sourceMappingURL=data:application/json;base64,