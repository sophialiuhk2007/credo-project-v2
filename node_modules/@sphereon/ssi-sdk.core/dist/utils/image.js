"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadImage = exports.getImageDimensions = exports.getImageMediaType = void 0;
const ssi_types_1 = require("@sphereon/ssi-types");
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const image_size_1 = require("image-size");
const u8a = __importStar(require("uint8arrays"));
const logger = ssi_types_1.Loggers.DEFAULT.get('sphereon:core');
// TODO: here we're handling svg separately, remove this section when image-size starts supporting it in version 2
const isSvg = (uint8Array) => {
    const maxCheckLength = Math.min(80, uint8Array.length);
    const initialText = u8a.toString(uint8Array.subarray(0, maxCheckLength));
    const normalizedText = initialText.trim().toLowerCase();
    return normalizedText.startsWith('<svg') || normalizedText.startsWith('<?xml');
};
const parseDimension = (dimension) => {
    const match = dimension.match(/^(\d+(?:\.\d+)?)([a-z%]*)$/);
    return match ? parseFloat(match[1]) : 0;
};
const getSvgDimensions = (uint8Array) => {
    var _a;
    const svgContent = new TextDecoder().decode(uint8Array);
    const widthMatch = svgContent.match(/width="([^"]+)"/);
    const heightMatch = svgContent.match(/height="([^"]+)"/);
    const viewBoxMatch = svgContent.match(/viewBox="[^"]*"/);
    let width = widthMatch ? parseDimension(widthMatch[1]) : undefined;
    let height = heightMatch ? parseDimension(heightMatch[1]) : undefined;
    if (viewBoxMatch && (!width || !height)) {
        const parts = (_a = viewBoxMatch[0].match(/[\d\.]+/g)) === null || _a === void 0 ? void 0 : _a.map(Number);
        if (parts && parts.length === 4) {
            const [x, y, viewBoxWidth, viewBoxHeight] = parts;
            width = width !== null && width !== void 0 ? width : viewBoxWidth - x;
            height = height !== null && height !== void 0 ? height : viewBoxHeight - y;
        }
    }
    return { width, height, type: 'svg' };
};
/**
 *
 * @param value can be both (base64) string and Uint8Array
 */
const getImageMediaType = (value) => __awaiter(void 0, void 0, void 0, function* () {
    const uint8Array = typeof value === 'string' ? u8a.fromString(value, 'base64') : value;
    if (isSvg(uint8Array)) {
        return `image/svg+xml`;
    }
    const result = (0, image_size_1.imageSize)(uint8Array);
    return `image/${result.type}`;
});
exports.getImageMediaType = getImageMediaType;
/**
 *
 * @param value can be both (base64) string and Uint8Array
 */
const getImageDimensions = (value) => __awaiter(void 0, void 0, void 0, function* () {
    const uint8Array = typeof value === 'string' ? u8a.fromString(value, 'base64') : value;
    const dimensions = isSvg(uint8Array) ? getSvgDimensions(uint8Array) : (0, image_size_1.imageSize)(uint8Array);
    if (!dimensions.width || !dimensions.height) {
        return Promise.reject(Error('Unable to get image dimensions'));
    }
    return { width: dimensions.width, height: dimensions.height };
});
exports.getImageDimensions = getImageDimensions;
const downloadImage = (url) => __awaiter(void 0, void 0, void 0, function* () {
    logger.debug(`Downloading image from url: ${url}`);
    if (!url) {
        logger.warning(`Could not download image when nu url is provided`);
        return;
    }
    else if (!url.startsWith('http://') && !url.startsWith('https://')) {
        logger.warning(`Could not download image when url does not start with http(s):// : ${url}`);
        return;
    }
    try {
        const response = yield (0, cross_fetch_1.default)(url);
        if (!response.ok) {
            logger.error(`Could not download image ${url}. Status: ${response.status} ${response.statusText}`);
        }
        const contentType = response.headers.get('Content-Type');
        const base64Content = Buffer.from(yield response.arrayBuffer()).toString('base64');
        return {
            base64Content,
            contentType: contentType || undefined,
        };
    }
    catch (e) {
        logger.error(`Could not download image ${url}`, e);
        return undefined;
    }
});
exports.downloadImage = downloadImage;
//# sourceMappingURL=image.js.map