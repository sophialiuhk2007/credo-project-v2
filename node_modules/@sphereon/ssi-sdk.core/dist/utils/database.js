"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.enablePostgresUuidExtension = exports.flattenMigrations = exports.flattenArray = void 0;
const flattenArray = (args) => args.items.flat();
exports.flattenArray = flattenArray;
const flattenMigrations = (args) => args.migrations.flat();
exports.flattenMigrations = flattenMigrations;
/**
 * It should accept the type QueryRunner from the typeorm
 */
const enablePostgresUuidExtension = (queryRunner) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield queryRunner.query(`CREATE EXTENSION IF NOT EXISTS "uuid-ossp";`);
    }
    catch (error) {
        console.error(`Please enable the uuid-ossp.control extension in your PostgreSQL installation. It enables generating V4 UUID and can be found in the postgresql-contrib package`);
        throw error;
    }
});
exports.enablePostgresUuidExtension = enablePostgresUuidExtension;
//# sourceMappingURL=database.js.map