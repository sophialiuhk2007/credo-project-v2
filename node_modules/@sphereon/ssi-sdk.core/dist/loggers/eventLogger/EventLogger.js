"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const ssi_types_1 = require("@sphereon/ssi-types");
class EventLogger {
    constructor(args) {
        this.simple = (options) => {
            var _a, _b;
            const logger = EventLogger.LOGGERS.options(this.namespace, options !== null && options !== void 0 ? options : {
                eventName: this.namespace,
                methods: [ssi_types_1.LogMethod.EVENT],
            }).get(this.namespace);
            if (!logger.eventEmitter.listeners((_a = logger.options.eventName) !== null && _a !== void 0 ? _a : this.namespace).includes(this.localListener)) {
                logger.eventEmitter.addListener((_b = logger.options.eventName) !== null && _b !== void 0 ? _b : this.namespace, this.localListener);
            }
            return logger;
        };
        this.logEvent = (event) => __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const eventData = yield this.eventData(event);
            EventLogger.LOGGERS.get(this.namespace).logl((_a = eventData.level) !== null && _a !== void 0 ? _a : ssi_types_1.LogLevel.INFO, JSON.stringify(eventData.data), eventData);
            if ((_b = this.context) === null || _b === void 0 ? void 0 : _b.agent) {
                yield this.context.agent.emit(event.type, eventData);
            }
        });
        this.eventData = (event) => __awaiter(this, void 0, void 0, function* () {
            if (!this.system || event.data.system) {
                return Promise.reject(Error('Required system is not present'));
            }
            if (!this.subSystemType || event.data.subSystemType) {
                return Promise.reject(Error('Required sub system type is not present'));
            }
            const result = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, event.data), (!event.data.level && { level: this.logLevel })), (!event.data.system && { system: this.system })), (!event.data.subSystemType && { subSystemType: this.subSystemType })), (!event.data.initiatorType && { initiatorType: this.initiatorType }));
            return result;
        });
        const { context, namespace = 'sphereon:ssi-sdk:EventLogger', system, subSystem, logLevel = ssi_types_1.LogLevel.INFO, initiatorType } = args;
        this.context = context;
        this.namespace = namespace;
        this.system = system;
        this.subSystemType = subSystem;
        this.logLevel = logLevel;
        this.initiatorType = initiatorType;
    }
    localListener(event) {
        var _a, _b;
        const { level, data, type } = event, rest = __rest(event, ["level", "data", "type"]);
        EventLogger.LOGGERS.get(this.namespace).logl((_a = level !== null && level !== void 0 ? level : this.logLevel) !== null && _a !== void 0 ? _a : ssi_types_1.LogLevel.INFO, data, Object.assign(Object.assign(Object.assign({}, rest), (this.system && { system: this.system })), (this.subSystemType && { subSystem: this.subSystemType })));
        if ((_b = this.context) === null || _b === void 0 ? void 0 : _b.agent) {
            void this.context.agent.emit(type, event);
        }
    }
}
EventLogger.LOGGERS = ssi_types_1.Loggers.DEFAULT;
exports.default = EventLogger;
//# sourceMappingURL=EventLogger.js.map