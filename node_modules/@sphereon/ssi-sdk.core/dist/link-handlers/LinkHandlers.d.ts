import { DefaultLinkPriorities, LinkHandler, LinkHandlerRegistry } from './types';
/**
 * Class registering multiple LinkHandlers, allowing the developer to use a single compound link handler.
 * @implements {LinkHandler}
 * @implements {LinkHandlerRegistry}
 */
export declare class LinkHandlers implements LinkHandler, LinkHandlerRegistry {
    private readonly _id;
    private readonly _priority;
    private readonly _handlers;
    private readonly _protocols;
    get id(): string;
    get priority(): DefaultLinkPriorities;
    get protocols(): Array<string | RegExp>;
    get(id: string): LinkHandler | undefined;
    supports(urlArg: string | URL): boolean;
    handle(url: string | URL, opts?: {
        singleHandlerOnly?: boolean;
        noExceptionOnNoHandler?: boolean;
    } & Record<string, any>): Promise<void>;
    add(handler: LinkHandler | LinkHandler[]): this;
    remove(handler: LinkHandler | string): boolean;
    has(handler: LinkHandler | string): boolean;
    clear(): this;
    all(): LinkHandler[];
    private rePopulateProtocols;
}
/**
 * LinkHandlerAdapter is an abstract class that implements the LinkHandler interface. It provides basic functionality
 * for handling links and can be extended to create custom link handler.
 *
 * @abstract
 * @implements {LinkHandler}
 */
export declare abstract class LinkHandlerAdapter implements LinkHandler {
    private readonly _id;
    private _priority;
    private _protocols;
    protected constructor(args: {
        id: string;
        priority?: number | DefaultLinkPriorities;
        protocols?: Array<string | RegExp>;
    });
    get id(): string;
    get protocols(): Array<string | RegExp>;
    protected set protocols(value: Array<string | RegExp>);
    get priority(): number | DefaultLinkPriorities;
    protected set priority(value: number | DefaultLinkPriorities);
    handle(url: string | URL, opts?: Record<string, any>): Promise<void>;
    supports(urlArg: string | URL): boolean;
    protected static toURL(url: string | URL): URL;
}
/**
 * A class that logs links.
 */
export declare class LogLinkHandler extends LinkHandlerAdapter {
    static ID: string;
    constructor(args?: {
        priority?: number | DefaultLinkPriorities;
        protocols?: Array<string | RegExp>;
    });
    handle(url: string | URL): Promise<void>;
}
//# sourceMappingURL=LinkHandlers.d.ts.map