"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkHandlerPlugin = void 0;
const debug_1 = __importDefault(require("debug"));
const index_1 = require("../index");
const debug = (0, debug_1.default)(`sphereon:ssi-sdk:LinkHandler`);
/**
 * {@inheritDoc ILinkHandlerPlugin}
 */
class LinkHandlerPlugin {
    constructor(options) {
        // readonly schema = schema.IEventLogger
        this.eventTypes = [];
        this.methods = {
            linkHandlerHandleURL: this.linkHandlerHandleURL.bind(this),
        };
        const { eventTypes, handlers } = options;
        this.eventTypes = eventTypes;
        this.handlers = handlers;
    }
    onEvent(event, context) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (event.type) {
                case index_1.LinkHandlerEventType.LINK_HANDLER_URL:
                    // Calling the context of the agent to make sure the REST client is called when configured
                    yield context.agent.linkHandlerHandleURL(Object.assign({}, event.data));
                    break;
                default:
                    return Promise.reject(Error(`Event type ${event.type} not supported`));
            }
        });
    }
    linkHandlerHandleURL(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const { url, source, options } = args;
            debug(`received url '${url} from source ${source}`);
            return yield this.handlers.handle(args.url, options);
        });
    }
}
exports.LinkHandlerPlugin = LinkHandlerPlugin;
//# sourceMappingURL=LinkHandlerPlugin.js.map