"use strict";
exports.AuthorizationRequestPayloadVID1Schema = validate10;
const schema11 = {"$id":"AuthorizationRequestPayloadVID1Schema","$schema":"http://json-schema.org/draft-07/schema#","$ref":"#/definitions/AuthorizationRequestPayloadVID1","definitions":{"AuthorizationRequestPayloadVID1":{"type":"object","properties":{"registration":{"$ref":"#/definitions/RPRegistrationMetadataPayload"},"registration_uri":{"type":"string"},"iss":{"type":"string"},"sub":{"type":"string"},"aud":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"iat":{"type":"number"},"nbf":{"type":"number"},"type":{"type":"string"},"exp":{"type":"number"},"rexp":{"type":"number"},"jti":{"type":"string"},"scope":{"type":"string"},"response_type":{"anyOf":[{"$ref":"#/definitions/ResponseType"},{"type":"string"}]},"client_id":{"type":"string"},"redirect_uri":{"type":"string"},"id_token_hint":{"type":"string"},"nonce":{"type":"string"},"state":{"type":"string"},"response_mode":{"$ref":"#/definitions/ResponseMode"},"request":{"type":"string"},"request_uri":{"type":"string"},"claims":{"$ref":"#/definitions/ClaimPayloadVID1"}}},"RPRegistrationMetadataPayload":{"type":"object","properties":{"client_id":{"anyOf":[{"type":"string"},{}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"vp_formats":{"anyOf":[{"$ref":"#/definitions/Format"},{}]},"client_name":{"anyOf":[{"type":"string"},{}]},"logo_uri":{"anyOf":[{"type":"string"},{}]},"client_purpose":{"anyOf":[{},{"type":"string"}]}}},"SigningAlgo":{"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]},"ResponseType":{"type":"string","enum":["id_token","vp_token"]},"Scope":{"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]},"SubjectType":{"type":"string","enum":["public","pairwise"]},"Format":{"type":"object","properties":{"jwt":{"$ref":"#/definitions/JwtObject"},"jwt_vc":{"$ref":"#/definitions/JwtObject"},"jwt_vc_json":{"$ref":"#/definitions/JwtObject"},"jwt_vp":{"$ref":"#/definitions/JwtObject"},"jwt_vp_json":{"$ref":"#/definitions/JwtObject"},"ldp":{"$ref":"#/definitions/LdpObject"},"ldp_vc":{"$ref":"#/definitions/LdpObject"},"ldp_vp":{"$ref":"#/definitions/LdpObject"},"di":{"$ref":"#/definitions/DiObject"},"di_vc":{"$ref":"#/definitions/DiObject"},"di_vp":{"$ref":"#/definitions/DiObject"},"vc+sd-jwt":{"$ref":"#/definitions/SdJwtObject"},"mso_mdoc":{"$ref":"#/definitions/MsoMdocObject"}},"additionalProperties":false},"JwtObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false},"LdpObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}}},"required":["proof_type"],"additionalProperties":false},"DiObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}},"cryptosuite":{"type":"array","items":{"type":"string"}}},"required":["proof_type","cryptosuite"],"additionalProperties":false},"SdJwtObject":{"type":"object","properties":{"sd-jwt_alg_values":{"type":"array","items":{"type":"string"}},"kb-jwt_alg_values":{"type":"array","items":{"type":"string"}}},"additionalProperties":false},"MsoMdocObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false},"ResponseMode":{"type":"string","enum":["fragment","form_post","post","direct_post","query","direct_post.jwt","query.jwt","fragment.jwt"]},"ClaimPayloadVID1":{"type":"object","properties":{"id_token":{"$ref":"#/definitions/IdTokenClaimPayload"},"vp_token":{"$ref":"#/definitions/VpTokenClaimPayload"}}},"IdTokenClaimPayload":{"type":"object"},"VpTokenClaimPayload":{"type":"object","properties":{"presentation_definition":{"anyOf":[{"$ref":"#/definitions/PresentationDefinitionV1"},{"$ref":"#/definitions/PresentationDefinitionV2"}]},"presentation_definition_uri":{"type":"string"}},"additionalProperties":false},"PresentationDefinitionV1":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV1"}}},"required":["id","input_descriptors"],"additionalProperties":false},"SubmissionRequirement":{"type":"object","properties":{"name":{"type":"string"},"purpose":{"type":"string"},"rule":{"$ref":"#/definitions/Rules"},"count":{"type":"number"},"min":{"type":"number"},"max":{"type":"number"},"from":{"type":"string"},"from_nested":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}}},"required":["rule"],"additionalProperties":false},"Rules":{"type":"string","enum":["all","pick"]},"InputDescriptorV1":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"group":{"type":"array","items":{"type":"string"}},"schema":{"type":"array","items":{"$ref":"#/definitions/Schema"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV1"}},"required":["id","schema"],"additionalProperties":false},"Schema":{"type":"object","properties":{"uri":{"type":"string"},"required":{"type":"boolean"}},"required":["uri"],"additionalProperties":false},"Issuance":{"type":"object","properties":{"manifest":{"type":"string"}},"additionalProperties":{}},"ConstraintsV1":{"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV1"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false},"Optionality":{"type":"string","enum":["required","preferred"]},"Statuses":{"type":"object","properties":{"active":{"$ref":"#/definitions/PdStatus"},"suspended":{"$ref":"#/definitions/PdStatus"},"revoked":{"$ref":"#/definitions/PdStatus"}},"additionalProperties":false},"PdStatus":{"type":"object","properties":{"directive":{"$ref":"#/definitions/Directives"}},"additionalProperties":false},"Directives":{"type":"string","enum":["required","allowed","disallowed"]},"FieldV1":{"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV1"},"predicate":{"$ref":"#/definitions/Optionality"}},"required":["path"],"additionalProperties":false},"FilterV1":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"}},"required":["type"],"additionalProperties":false},"OneOfNumberStringBoolean":{"type":["boolean","number","string"]},"OneOfNumberString":{"type":["number","string"]},"HolderSubject":{"type":"object","properties":{"field_id":{"type":"array","items":{"type":"string"}},"directive":{"$ref":"#/definitions/Optionality"}},"required":["field_id","directive"],"additionalProperties":false},"PresentationDefinitionV2":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV2"}},"frame":{"type":"object"}},"required":["id","input_descriptors"],"additionalProperties":false},"InputDescriptorV2":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"group":{"type":"array","items":{"type":"string"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV2"}},"required":["id","constraints"],"additionalProperties":false},"ConstraintsV2":{"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV2"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false},"FieldV2":{"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV2"},"predicate":{"$ref":"#/definitions/Optionality"},"intent_to_retain":{"type":"boolean"},"name":{"type":"string"},"optional":{"type":"boolean"}},"required":["path"],"additionalProperties":false},"FilterV2":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false},"FilterV2Base":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"additionalProperties":false},"FilterV2BaseItems":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false}}};
const schema12 = {"type":"object","properties":{"registration":{"$ref":"#/definitions/RPRegistrationMetadataPayload"},"registration_uri":{"type":"string"},"iss":{"type":"string"},"sub":{"type":"string"},"aud":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"iat":{"type":"number"},"nbf":{"type":"number"},"type":{"type":"string"},"exp":{"type":"number"},"rexp":{"type":"number"},"jti":{"type":"string"},"scope":{"type":"string"},"response_type":{"anyOf":[{"$ref":"#/definitions/ResponseType"},{"type":"string"}]},"client_id":{"type":"string"},"redirect_uri":{"type":"string"},"id_token_hint":{"type":"string"},"nonce":{"type":"string"},"state":{"type":"string"},"response_mode":{"$ref":"#/definitions/ResponseMode"},"request":{"type":"string"},"request_uri":{"type":"string"},"claims":{"$ref":"#/definitions/ClaimPayloadVID1"}}};
const schema18 = {"type":"string","enum":["id_token","vp_token"]};
const schema25 = {"type":"string","enum":["fragment","form_post","post","direct_post","query","direct_post.jwt","query.jwt","fragment.jwt"]};
const schema13 = {"type":"object","properties":{"client_id":{"anyOf":[{"type":"string"},{}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"vp_formats":{"anyOf":[{"$ref":"#/definitions/Format"},{}]},"client_name":{"anyOf":[{"type":"string"},{}]},"logo_uri":{"anyOf":[{"type":"string"},{}]},"client_purpose":{"anyOf":[{},{"type":"string"}]}}};
const schema14 = {"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]};
const schema20 = {"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]};
const schema22 = {"type":"string","enum":["public","pairwise"]};

function validate12(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.client_id !== undefined){
const _errs1 = errors;
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.id_token_signing_alg_values_supported !== undefined){
let data1 = data.id_token_signing_alg_values_supported;
const _errs3 = errors;
const _errs4 = errors;
let valid1 = false;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(typeof data2 !== "string"){
const err0 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i0,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(!(((((data2 === "EdDSA") || (data2 === "RS256")) || (data2 === "PS256")) || (data2 === "ES256")) || (data2 === "ES256K"))){
const err1 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i0,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
const err2 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/properties/id_token_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
var _valid0 = _errs5 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
const _errs10 = errors;
if(typeof data1 !== "string"){
const err3 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(!(((((data1 === "EdDSA") || (data1 === "RS256")) || (data1 === "PS256")) || (data1 === "ES256")) || (data1 === "ES256K"))){
const err4 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid0 = _errs10 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
const err5 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/properties/id_token_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate12.errors = vErrors;
return false;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.request_object_signing_alg_values_supported !== undefined){
let data3 = data.request_object_signing_alg_values_supported;
const _errs13 = errors;
const _errs14 = errors;
let valid5 = false;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data3)){
var valid6 = true;
const len1 = data3.length;
for(let i1=0; i1<len1; i1++){
let data4 = data3[i1];
const _errs17 = errors;
if(typeof data4 !== "string"){
const err6 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i1,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(!(((((data4 === "EdDSA") || (data4 === "RS256")) || (data4 === "PS256")) || (data4 === "ES256")) || (data4 === "ES256K"))){
const err7 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i1,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var valid6 = _errs17 === errors;
if(!valid6){
break;
}
}
}
else {
const err8 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/properties/request_object_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
var _valid1 = _errs15 === errors;
valid5 = valid5 || _valid1;
if(!valid5){
const _errs20 = errors;
if(typeof data3 !== "string"){
const err9 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(!(((((data3 === "EdDSA") || (data3 === "RS256")) || (data3 === "PS256")) || (data3 === "ES256")) || (data3 === "ES256K"))){
const err10 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema14.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
var _valid1 = _errs20 === errors;
valid5 = valid5 || _valid1;
}
if(!valid5){
const err11 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/properties/request_object_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate12.errors = vErrors;
return false;
}
else {
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_types_supported !== undefined){
let data5 = data.response_types_supported;
const _errs23 = errors;
const _errs24 = errors;
let valid9 = false;
const _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data5)){
var valid10 = true;
const len2 = data5.length;
for(let i2=0; i2<len2; i2++){
let data6 = data5[i2];
const _errs27 = errors;
if(typeof data6 !== "string"){
const err12 = {instancePath:instancePath+"/response_types_supported/" + i2,schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if(!((data6 === "id_token") || (data6 === "vp_token"))){
const err13 = {instancePath:instancePath+"/response_types_supported/" + i2,schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
var valid10 = _errs27 === errors;
if(!valid10){
break;
}
}
}
else {
const err14 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/properties/response_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
var _valid2 = _errs25 === errors;
valid9 = valid9 || _valid2;
if(!valid9){
const _errs30 = errors;
if(typeof data5 !== "string"){
const err15 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(!((data5 === "id_token") || (data5 === "vp_token"))){
const err16 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
var _valid2 = _errs30 === errors;
valid9 = valid9 || _valid2;
}
if(!valid9){
const err17 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/properties/response_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
validate12.errors = vErrors;
return false;
}
else {
errors = _errs24;
if(vErrors !== null){
if(_errs24){
vErrors.length = _errs24;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.scopes_supported !== undefined){
let data7 = data.scopes_supported;
const _errs33 = errors;
const _errs34 = errors;
let valid13 = false;
const _errs35 = errors;
if(errors === _errs35){
if(Array.isArray(data7)){
var valid14 = true;
const len3 = data7.length;
for(let i3=0; i3<len3; i3++){
let data8 = data7[i3];
const _errs37 = errors;
if(typeof data8 !== "string"){
const err18 = {instancePath:instancePath+"/scopes_supported/" + i3,schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if(!((((((data8 === "openid") || (data8 === "openid did_authn")) || (data8 === "profile")) || (data8 === "email")) || (data8 === "address")) || (data8 === "phone"))){
const err19 = {instancePath:instancePath+"/scopes_supported/" + i3,schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema20.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
var valid14 = _errs37 === errors;
if(!valid14){
break;
}
}
}
else {
const err20 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/properties/scopes_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
var _valid3 = _errs35 === errors;
valid13 = valid13 || _valid3;
if(!valid13){
const _errs40 = errors;
if(typeof data7 !== "string"){
const err21 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(!((((((data7 === "openid") || (data7 === "openid did_authn")) || (data7 === "profile")) || (data7 === "email")) || (data7 === "address")) || (data7 === "phone"))){
const err22 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema20.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
var _valid3 = _errs40 === errors;
valid13 = valid13 || _valid3;
}
if(!valid13){
const err23 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/properties/scopes_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
validate12.errors = vErrors;
return false;
}
else {
errors = _errs34;
if(vErrors !== null){
if(_errs34){
vErrors.length = _errs34;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_types_supported !== undefined){
let data9 = data.subject_types_supported;
const _errs43 = errors;
const _errs44 = errors;
let valid17 = false;
const _errs45 = errors;
if(errors === _errs45){
if(Array.isArray(data9)){
var valid18 = true;
const len4 = data9.length;
for(let i4=0; i4<len4; i4++){
let data10 = data9[i4];
const _errs47 = errors;
if(typeof data10 !== "string"){
const err24 = {instancePath:instancePath+"/subject_types_supported/" + i4,schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
if(!((data10 === "public") || (data10 === "pairwise"))){
const err25 = {instancePath:instancePath+"/subject_types_supported/" + i4,schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema22.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
var valid18 = _errs47 === errors;
if(!valid18){
break;
}
}
}
else {
const err26 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/properties/subject_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
var _valid4 = _errs45 === errors;
valid17 = valid17 || _valid4;
if(!valid17){
const _errs50 = errors;
if(typeof data9 !== "string"){
const err27 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
if(!((data9 === "public") || (data9 === "pairwise"))){
const err28 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema22.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
var _valid4 = _errs50 === errors;
valid17 = valid17 || _valid4;
}
if(!valid17){
const err29 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/properties/subject_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
validate12.errors = vErrors;
return false;
}
else {
errors = _errs44;
if(vErrors !== null){
if(_errs44){
vErrors.length = _errs44;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_syntax_types_supported !== undefined){
let data11 = data.subject_syntax_types_supported;
const _errs53 = errors;
if(errors === _errs53){
if(Array.isArray(data11)){
var valid21 = true;
const len5 = data11.length;
for(let i5=0; i5<len5; i5++){
const _errs55 = errors;
if(typeof data11[i5] !== "string"){
validate12.errors = [{instancePath:instancePath+"/subject_syntax_types_supported/" + i5,schemaPath:"#/properties/subject_syntax_types_supported/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid21 = _errs55 === errors;
if(!valid21){
break;
}
}
}
else {
validate12.errors = [{instancePath:instancePath+"/subject_syntax_types_supported",schemaPath:"#/properties/subject_syntax_types_supported/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs53 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.vp_formats !== undefined){
const _errs57 = errors;
var valid0 = _errs57 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_name !== undefined){
const _errs59 = errors;
var valid0 = _errs59 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.logo_uri !== undefined){
const _errs61 = errors;
var valid0 = _errs61 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_purpose !== undefined){
const _errs63 = errors;
var valid0 = _errs63 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate12.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate12.errors = vErrors;
return errors === 0;
}

const schema26 = {"type":"object","properties":{"id_token":{"$ref":"#/definitions/IdTokenClaimPayload"},"vp_token":{"$ref":"#/definitions/VpTokenClaimPayload"}}};
const schema27 = {"type":"object"};
const schema28 = {"type":"object","properties":{"presentation_definition":{"anyOf":[{"$ref":"#/definitions/PresentationDefinitionV1"},{"$ref":"#/definitions/PresentationDefinitionV2"}]},"presentation_definition_uri":{"type":"string"}},"additionalProperties":false};
const schema29 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV1"}}},"required":["id","input_descriptors"],"additionalProperties":false};
const schema30 = {"type":"object","properties":{"jwt":{"$ref":"#/definitions/JwtObject"},"jwt_vc":{"$ref":"#/definitions/JwtObject"},"jwt_vc_json":{"$ref":"#/definitions/JwtObject"},"jwt_vp":{"$ref":"#/definitions/JwtObject"},"jwt_vp_json":{"$ref":"#/definitions/JwtObject"},"ldp":{"$ref":"#/definitions/LdpObject"},"ldp_vc":{"$ref":"#/definitions/LdpObject"},"ldp_vp":{"$ref":"#/definitions/LdpObject"},"di":{"$ref":"#/definitions/DiObject"},"di_vc":{"$ref":"#/definitions/DiObject"},"di_vp":{"$ref":"#/definitions/DiObject"},"vc+sd-jwt":{"$ref":"#/definitions/SdJwtObject"},"mso_mdoc":{"$ref":"#/definitions/MsoMdocObject"}},"additionalProperties":false};
const schema31 = {"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false};
const schema36 = {"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}}},"required":["proof_type"],"additionalProperties":false};
const schema39 = {"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}},"cryptosuite":{"type":"array","items":{"type":"string"}}},"required":["proof_type","cryptosuite"],"additionalProperties":false};
const schema42 = {"type":"object","properties":{"sd-jwt_alg_values":{"type":"array","items":{"type":"string"}},"kb-jwt_alg_values":{"type":"array","items":{"type":"string"}}},"additionalProperties":false};
const schema43 = {"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false};
const func2 = Object.prototype.hasOwnProperty;

function validate17(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema30.properties, key0))){
validate17.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.jwt !== undefined){
let data0 = data.jwt;
const _errs2 = errors;
const _errs3 = errors;
if(errors === _errs3){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
let missing0;
if((data0.alg === undefined) && (missing0 = "alg")){
validate17.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs5 = errors;
for(const key1 in data0){
if(!(key1 === "alg")){
validate17.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs5 === errors){
if(data0.alg !== undefined){
let data1 = data0.alg;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data1)){
var valid3 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(typeof data1[i0] !== "string"){
validate17.errors = [{instancePath:instancePath+"/jwt/alg/" + i0,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid3 = _errs8 === errors;
if(!valid3){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/jwt/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vc !== undefined){
let data3 = data.jwt_vc;
const _errs10 = errors;
const _errs11 = errors;
if(errors === _errs11){
if(data3 && typeof data3 == "object" && !Array.isArray(data3)){
let missing1;
if((data3.alg === undefined) && (missing1 = "alg")){
validate17.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
const _errs13 = errors;
for(const key2 in data3){
if(!(key2 === "alg")){
validate17.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs13 === errors){
if(data3.alg !== undefined){
let data4 = data3.alg;
const _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data4)){
var valid6 = true;
const len1 = data4.length;
for(let i1=0; i1<len1; i1++){
const _errs16 = errors;
if(typeof data4[i1] !== "string"){
validate17.errors = [{instancePath:instancePath+"/jwt_vc/alg/" + i1,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs16 === errors;
if(!valid6){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/jwt_vc/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vc_json !== undefined){
let data6 = data.jwt_vc_json;
const _errs18 = errors;
const _errs19 = errors;
if(errors === _errs19){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
let missing2;
if((data6.alg === undefined) && (missing2 = "alg")){
validate17.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
const _errs21 = errors;
for(const key3 in data6){
if(!(key3 === "alg")){
validate17.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs21 === errors){
if(data6.alg !== undefined){
let data7 = data6.alg;
const _errs22 = errors;
if(errors === _errs22){
if(Array.isArray(data7)){
var valid9 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs24 = errors;
if(typeof data7[i2] !== "string"){
validate17.errors = [{instancePath:instancePath+"/jwt_vc_json/alg/" + i2,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs24 === errors;
if(!valid9){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/jwt_vc_json/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vp !== undefined){
let data9 = data.jwt_vp;
const _errs26 = errors;
const _errs27 = errors;
if(errors === _errs27){
if(data9 && typeof data9 == "object" && !Array.isArray(data9)){
let missing3;
if((data9.alg === undefined) && (missing3 = "alg")){
validate17.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];
return false;
}
else {
const _errs29 = errors;
for(const key4 in data9){
if(!(key4 === "alg")){
validate17.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs29 === errors){
if(data9.alg !== undefined){
let data10 = data9.alg;
const _errs30 = errors;
if(errors === _errs30){
if(Array.isArray(data10)){
var valid12 = true;
const len3 = data10.length;
for(let i3=0; i3<len3; i3++){
const _errs32 = errors;
if(typeof data10[i3] !== "string"){
validate17.errors = [{instancePath:instancePath+"/jwt_vp/alg/" + i3,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs32 === errors;
if(!valid12){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/jwt_vp/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vp_json !== undefined){
let data12 = data.jwt_vp_json;
const _errs34 = errors;
const _errs35 = errors;
if(errors === _errs35){
if(data12 && typeof data12 == "object" && !Array.isArray(data12)){
let missing4;
if((data12.alg === undefined) && (missing4 = "alg")){
validate17.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];
return false;
}
else {
const _errs37 = errors;
for(const key5 in data12){
if(!(key5 === "alg")){
validate17.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs37 === errors){
if(data12.alg !== undefined){
let data13 = data12.alg;
const _errs38 = errors;
if(errors === _errs38){
if(Array.isArray(data13)){
var valid15 = true;
const len4 = data13.length;
for(let i4=0; i4<len4; i4++){
const _errs40 = errors;
if(typeof data13[i4] !== "string"){
validate17.errors = [{instancePath:instancePath+"/jwt_vp_json/alg/" + i4,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid15 = _errs40 === errors;
if(!valid15){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/jwt_vp_json/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp !== undefined){
let data15 = data.ldp;
const _errs42 = errors;
const _errs43 = errors;
if(errors === _errs43){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
let missing5;
if((data15.proof_type === undefined) && (missing5 = "proof_type")){
validate17.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"}];
return false;
}
else {
const _errs45 = errors;
for(const key6 in data15){
if(!(key6 === "proof_type")){
validate17.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key6},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs45 === errors){
if(data15.proof_type !== undefined){
let data16 = data15.proof_type;
const _errs46 = errors;
if(errors === _errs46){
if(Array.isArray(data16)){
var valid18 = true;
const len5 = data16.length;
for(let i5=0; i5<len5; i5++){
const _errs48 = errors;
if(typeof data16[i5] !== "string"){
validate17.errors = [{instancePath:instancePath+"/ldp/proof_type/" + i5,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid18 = _errs48 === errors;
if(!valid18){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/ldp/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp_vc !== undefined){
let data18 = data.ldp_vc;
const _errs50 = errors;
const _errs51 = errors;
if(errors === _errs51){
if(data18 && typeof data18 == "object" && !Array.isArray(data18)){
let missing6;
if((data18.proof_type === undefined) && (missing6 = "proof_type")){
validate17.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"}];
return false;
}
else {
const _errs53 = errors;
for(const key7 in data18){
if(!(key7 === "proof_type")){
validate17.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key7},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs53 === errors){
if(data18.proof_type !== undefined){
let data19 = data18.proof_type;
const _errs54 = errors;
if(errors === _errs54){
if(Array.isArray(data19)){
var valid21 = true;
const len6 = data19.length;
for(let i6=0; i6<len6; i6++){
const _errs56 = errors;
if(typeof data19[i6] !== "string"){
validate17.errors = [{instancePath:instancePath+"/ldp_vc/proof_type/" + i6,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid21 = _errs56 === errors;
if(!valid21){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/ldp_vc/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs50 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp_vp !== undefined){
let data21 = data.ldp_vp;
const _errs58 = errors;
const _errs59 = errors;
if(errors === _errs59){
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
let missing7;
if((data21.proof_type === undefined) && (missing7 = "proof_type")){
validate17.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"}];
return false;
}
else {
const _errs61 = errors;
for(const key8 in data21){
if(!(key8 === "proof_type")){
validate17.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key8},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs61 === errors){
if(data21.proof_type !== undefined){
let data22 = data21.proof_type;
const _errs62 = errors;
if(errors === _errs62){
if(Array.isArray(data22)){
var valid24 = true;
const len7 = data22.length;
for(let i7=0; i7<len7; i7++){
const _errs64 = errors;
if(typeof data22[i7] !== "string"){
validate17.errors = [{instancePath:instancePath+"/ldp_vp/proof_type/" + i7,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid24 = _errs64 === errors;
if(!valid24){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/ldp_vp/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs58 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di !== undefined){
let data24 = data.di;
const _errs66 = errors;
const _errs67 = errors;
if(errors === _errs67){
if(data24 && typeof data24 == "object" && !Array.isArray(data24)){
let missing8;
if(((data24.proof_type === undefined) && (missing8 = "proof_type")) || ((data24.cryptosuite === undefined) && (missing8 = "cryptosuite"))){
validate17.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing8},message:"must have required property '"+missing8+"'"}];
return false;
}
else {
const _errs69 = errors;
for(const key9 in data24){
if(!((key9 === "proof_type") || (key9 === "cryptosuite"))){
validate17.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key9},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs69 === errors){
if(data24.proof_type !== undefined){
let data25 = data24.proof_type;
const _errs70 = errors;
if(errors === _errs70){
if(Array.isArray(data25)){
var valid27 = true;
const len8 = data25.length;
for(let i8=0; i8<len8; i8++){
const _errs72 = errors;
if(typeof data25[i8] !== "string"){
validate17.errors = [{instancePath:instancePath+"/di/proof_type/" + i8,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid27 = _errs72 === errors;
if(!valid27){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/di/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid26 = _errs70 === errors;
}
else {
var valid26 = true;
}
if(valid26){
if(data24.cryptosuite !== undefined){
let data27 = data24.cryptosuite;
const _errs74 = errors;
if(errors === _errs74){
if(Array.isArray(data27)){
var valid28 = true;
const len9 = data27.length;
for(let i9=0; i9<len9; i9++){
const _errs76 = errors;
if(typeof data27[i9] !== "string"){
validate17.errors = [{instancePath:instancePath+"/di/cryptosuite/" + i9,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid28 = _errs76 === errors;
if(!valid28){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/di/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid26 = _errs74 === errors;
}
else {
var valid26 = true;
}
}
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs66 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di_vc !== undefined){
let data29 = data.di_vc;
const _errs78 = errors;
const _errs79 = errors;
if(errors === _errs79){
if(data29 && typeof data29 == "object" && !Array.isArray(data29)){
let missing9;
if(((data29.proof_type === undefined) && (missing9 = "proof_type")) || ((data29.cryptosuite === undefined) && (missing9 = "cryptosuite"))){
validate17.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing9},message:"must have required property '"+missing9+"'"}];
return false;
}
else {
const _errs81 = errors;
for(const key10 in data29){
if(!((key10 === "proof_type") || (key10 === "cryptosuite"))){
validate17.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key10},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs81 === errors){
if(data29.proof_type !== undefined){
let data30 = data29.proof_type;
const _errs82 = errors;
if(errors === _errs82){
if(Array.isArray(data30)){
var valid31 = true;
const len10 = data30.length;
for(let i10=0; i10<len10; i10++){
const _errs84 = errors;
if(typeof data30[i10] !== "string"){
validate17.errors = [{instancePath:instancePath+"/di_vc/proof_type/" + i10,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid31 = _errs84 === errors;
if(!valid31){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/di_vc/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid30 = _errs82 === errors;
}
else {
var valid30 = true;
}
if(valid30){
if(data29.cryptosuite !== undefined){
let data32 = data29.cryptosuite;
const _errs86 = errors;
if(errors === _errs86){
if(Array.isArray(data32)){
var valid32 = true;
const len11 = data32.length;
for(let i11=0; i11<len11; i11++){
const _errs88 = errors;
if(typeof data32[i11] !== "string"){
validate17.errors = [{instancePath:instancePath+"/di_vc/cryptosuite/" + i11,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid32 = _errs88 === errors;
if(!valid32){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/di_vc/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid30 = _errs86 === errors;
}
else {
var valid30 = true;
}
}
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs78 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di_vp !== undefined){
let data34 = data.di_vp;
const _errs90 = errors;
const _errs91 = errors;
if(errors === _errs91){
if(data34 && typeof data34 == "object" && !Array.isArray(data34)){
let missing10;
if(((data34.proof_type === undefined) && (missing10 = "proof_type")) || ((data34.cryptosuite === undefined) && (missing10 = "cryptosuite"))){
validate17.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing10},message:"must have required property '"+missing10+"'"}];
return false;
}
else {
const _errs93 = errors;
for(const key11 in data34){
if(!((key11 === "proof_type") || (key11 === "cryptosuite"))){
validate17.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key11},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs93 === errors){
if(data34.proof_type !== undefined){
let data35 = data34.proof_type;
const _errs94 = errors;
if(errors === _errs94){
if(Array.isArray(data35)){
var valid35 = true;
const len12 = data35.length;
for(let i12=0; i12<len12; i12++){
const _errs96 = errors;
if(typeof data35[i12] !== "string"){
validate17.errors = [{instancePath:instancePath+"/di_vp/proof_type/" + i12,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid35 = _errs96 === errors;
if(!valid35){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/di_vp/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid34 = _errs94 === errors;
}
else {
var valid34 = true;
}
if(valid34){
if(data34.cryptosuite !== undefined){
let data37 = data34.cryptosuite;
const _errs98 = errors;
if(errors === _errs98){
if(Array.isArray(data37)){
var valid36 = true;
const len13 = data37.length;
for(let i13=0; i13<len13; i13++){
const _errs100 = errors;
if(typeof data37[i13] !== "string"){
validate17.errors = [{instancePath:instancePath+"/di_vp/cryptosuite/" + i13,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid36 = _errs100 === errors;
if(!valid36){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/di_vp/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid34 = _errs98 === errors;
}
else {
var valid34 = true;
}
}
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs90 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data["vc+sd-jwt"] !== undefined){
let data39 = data["vc+sd-jwt"];
const _errs102 = errors;
const _errs103 = errors;
if(errors === _errs103){
if(data39 && typeof data39 == "object" && !Array.isArray(data39)){
const _errs105 = errors;
for(const key12 in data39){
if(!((key12 === "sd-jwt_alg_values") || (key12 === "kb-jwt_alg_values"))){
validate17.errors = [{instancePath:instancePath+"/vc+sd-jwt",schemaPath:"#/definitions/SdJwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key12},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs105 === errors){
if(data39["sd-jwt_alg_values"] !== undefined){
let data40 = data39["sd-jwt_alg_values"];
const _errs106 = errors;
if(errors === _errs106){
if(Array.isArray(data40)){
var valid39 = true;
const len14 = data40.length;
for(let i14=0; i14<len14; i14++){
const _errs108 = errors;
if(typeof data40[i14] !== "string"){
validate17.errors = [{instancePath:instancePath+"/vc+sd-jwt/sd-jwt_alg_values/" + i14,schemaPath:"#/definitions/SdJwtObject/properties/sd-jwt_alg_values/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid39 = _errs108 === errors;
if(!valid39){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/vc+sd-jwt/sd-jwt_alg_values",schemaPath:"#/definitions/SdJwtObject/properties/sd-jwt_alg_values/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs106 === errors;
}
else {
var valid38 = true;
}
if(valid38){
if(data39["kb-jwt_alg_values"] !== undefined){
let data42 = data39["kb-jwt_alg_values"];
const _errs110 = errors;
if(errors === _errs110){
if(Array.isArray(data42)){
var valid40 = true;
const len15 = data42.length;
for(let i15=0; i15<len15; i15++){
const _errs112 = errors;
if(typeof data42[i15] !== "string"){
validate17.errors = [{instancePath:instancePath+"/vc+sd-jwt/kb-jwt_alg_values/" + i15,schemaPath:"#/definitions/SdJwtObject/properties/kb-jwt_alg_values/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid40 = _errs112 === errors;
if(!valid40){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/vc+sd-jwt/kb-jwt_alg_values",schemaPath:"#/definitions/SdJwtObject/properties/kb-jwt_alg_values/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs110 === errors;
}
else {
var valid38 = true;
}
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/vc+sd-jwt",schemaPath:"#/definitions/SdJwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs102 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.mso_mdoc !== undefined){
let data44 = data.mso_mdoc;
const _errs114 = errors;
const _errs115 = errors;
if(errors === _errs115){
if(data44 && typeof data44 == "object" && !Array.isArray(data44)){
let missing11;
if((data44.alg === undefined) && (missing11 = "alg")){
validate17.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/required",keyword:"required",params:{missingProperty: missing11},message:"must have required property '"+missing11+"'"}];
return false;
}
else {
const _errs117 = errors;
for(const key13 in data44){
if(!(key13 === "alg")){
validate17.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key13},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs117 === errors){
if(data44.alg !== undefined){
let data45 = data44.alg;
const _errs118 = errors;
if(errors === _errs118){
if(Array.isArray(data45)){
var valid43 = true;
const len16 = data45.length;
for(let i16=0; i16<len16; i16++){
const _errs120 = errors;
if(typeof data45[i16] !== "string"){
validate17.errors = [{instancePath:instancePath+"/mso_mdoc/alg/" + i16,schemaPath:"#/definitions/MsoMdocObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid43 = _errs120 === errors;
if(!valid43){
break;
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/mso_mdoc/alg",schemaPath:"#/definitions/MsoMdocObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate17.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs114 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate17.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate17.errors = vErrors;
return errors === 0;
}

const schema44 = {"type":"object","properties":{"name":{"type":"string"},"purpose":{"type":"string"},"rule":{"$ref":"#/definitions/Rules"},"count":{"type":"number"},"min":{"type":"number"},"max":{"type":"number"},"from":{"type":"string"},"from_nested":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}}},"required":["rule"],"additionalProperties":false};
const schema45 = {"type":"string","enum":["all","pick"]};
const wrapper0 = {validate: validate19};

function validate19(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.rule === undefined) && (missing0 = "rule")){
validate19.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((((((key0 === "name") || (key0 === "purpose")) || (key0 === "rule")) || (key0 === "count")) || (key0 === "min")) || (key0 === "max")) || (key0 === "from")) || (key0 === "from_nested"))){
validate19.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.name !== undefined){
const _errs2 = errors;
if(typeof data.name !== "string"){
validate19.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs4 = errors;
if(typeof data.purpose !== "string"){
validate19.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rule !== undefined){
let data2 = data.rule;
const _errs6 = errors;
if(typeof data2 !== "string"){
validate19.errors = [{instancePath:instancePath+"/rule",schemaPath:"#/definitions/Rules/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data2 === "all") || (data2 === "pick"))){
validate19.errors = [{instancePath:instancePath+"/rule",schemaPath:"#/definitions/Rules/enum",keyword:"enum",params:{allowedValues: schema45.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.count !== undefined){
const _errs9 = errors;
if(!(typeof data.count == "number")){
validate19.errors = [{instancePath:instancePath+"/count",schemaPath:"#/properties/count/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.min !== undefined){
const _errs11 = errors;
if(!(typeof data.min == "number")){
validate19.errors = [{instancePath:instancePath+"/min",schemaPath:"#/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.max !== undefined){
const _errs13 = errors;
if(!(typeof data.max == "number")){
validate19.errors = [{instancePath:instancePath+"/max",schemaPath:"#/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.from !== undefined){
const _errs15 = errors;
if(typeof data.from !== "string"){
validate19.errors = [{instancePath:instancePath+"/from",schemaPath:"#/properties/from/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.from_nested !== undefined){
let data7 = data.from_nested;
const _errs17 = errors;
if(errors === _errs17){
if(Array.isArray(data7)){
var valid2 = true;
const len0 = data7.length;
for(let i0=0; i0<len0; i0++){
const _errs19 = errors;
if(!(wrapper0.validate(data7[i0], {instancePath:instancePath+"/from_nested/" + i0,parentData:data7,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? wrapper0.validate.errors : vErrors.concat(wrapper0.validate.errors);
errors = vErrors.length;
}
var valid2 = _errs19 === errors;
if(!valid2){
break;
}
}
}
else {
validate19.errors = [{instancePath:instancePath+"/from_nested",schemaPath:"#/properties/from_nested/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
else {
validate19.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate19.errors = vErrors;
return errors === 0;
}

const schema46 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"group":{"type":"array","items":{"type":"string"}},"schema":{"type":"array","items":{"$ref":"#/definitions/Schema"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV1"}},"required":["id","schema"],"additionalProperties":false};
const schema47 = {"type":"object","properties":{"uri":{"type":"string"},"required":{"type":"boolean"}},"required":["uri"],"additionalProperties":false};
const schema48 = {"type":"object","properties":{"manifest":{"type":"string"}},"additionalProperties":{}};
const schema49 = {"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV1"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false};
const schema50 = {"type":"string","enum":["required","preferred"]};
const schema51 = {"type":"object","properties":{"active":{"$ref":"#/definitions/PdStatus"},"suspended":{"$ref":"#/definitions/PdStatus"},"revoked":{"$ref":"#/definitions/PdStatus"}},"additionalProperties":false};
const schema52 = {"type":"object","properties":{"directive":{"$ref":"#/definitions/Directives"}},"additionalProperties":false};
const schema53 = {"type":"string","enum":["required","allowed","disallowed"]};

function validate24(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(key0 === "directive")){
validate24.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.directive !== undefined){
let data0 = data.directive;
if(typeof data0 !== "string"){
validate24.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Directives/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!(((data0 === "required") || (data0 === "allowed")) || (data0 === "disallowed"))){
validate24.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Directives/enum",keyword:"enum",params:{allowedValues: schema53.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate24.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate24.errors = vErrors;
return errors === 0;
}


function validate23(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(((key0 === "active") || (key0 === "suspended")) || (key0 === "revoked"))){
validate23.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.active !== undefined){
const _errs2 = errors;
if(!(validate24(data.active, {instancePath:instancePath+"/active",parentData:data,parentDataProperty:"active",rootData}))){
vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);
errors = vErrors.length;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suspended !== undefined){
const _errs3 = errors;
if(!(validate24(data.suspended, {instancePath:instancePath+"/suspended",parentData:data,parentDataProperty:"suspended",rootData}))){
vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);
errors = vErrors.length;
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.revoked !== undefined){
const _errs4 = errors;
if(!(validate24(data.revoked, {instancePath:instancePath+"/revoked",parentData:data,parentDataProperty:"revoked",rootData}))){
vErrors = vErrors === null ? validate24.errors : vErrors.concat(validate24.errors);
errors = vErrors.length;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate23.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate23.errors = vErrors;
return errors === 0;
}

const schema54 = {"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV1"},"predicate":{"$ref":"#/definitions/Optionality"}},"required":["path"],"additionalProperties":false};
const schema55 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"}},"required":["type"],"additionalProperties":false};
const schema56 = {"type":["boolean","number","string"]};
const schema58 = {"type":["number","string"]};

function validate30(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.type === undefined) && (missing0 = "type")){
validate30.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema55.properties, key0))){
validate30.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate30.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema56.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate30.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema56.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate30.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate30.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate30.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate30.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs18 = errors;
if(!(typeof data.minLength == "number")){
validate30.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs20 = errors;
if(!(typeof data.maxLength == "number")){
validate30.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data8 = data.minimum;
const _errs22 = errors;
if((!(typeof data8 == "number")) && (typeof data8 !== "string")){
validate30.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data9 = data.maximum;
const _errs25 = errors;
if((!(typeof data9 == "number")) && (typeof data9 !== "string")){
validate30.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data10 = data.not;
const _errs28 = errors;
if(!(data10 && typeof data10 == "object" && !Array.isArray(data10))){
validate30.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs30 = errors;
if(typeof data.pattern !== "string"){
validate30.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs32 = errors;
if(typeof data.type !== "string"){
validate30.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs32 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate30.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate30.errors = vErrors;
return errors === 0;
}


function validate29(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.path === undefined) && (missing0 = "path")){
validate29.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((key0 === "id") || (key0 === "path")) || (key0 === "purpose")) || (key0 === "filter")) || (key0 === "predicate"))){
validate29.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate29.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.path !== undefined){
let data1 = data.path;
const _errs4 = errors;
if(errors === _errs4){
if(Array.isArray(data1)){
var valid1 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs6 = errors;
if(typeof data1[i0] !== "string"){
validate29.errors = [{instancePath:instancePath+"/path/" + i0,schemaPath:"#/properties/path/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs6 === errors;
if(!valid1){
break;
}
}
}
else {
validate29.errors = [{instancePath:instancePath+"/path",schemaPath:"#/properties/path/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs8 = errors;
if(typeof data.purpose !== "string"){
validate29.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.filter !== undefined){
const _errs10 = errors;
if(!(validate30(data.filter, {instancePath:instancePath+"/filter",parentData:data,parentDataProperty:"filter",rootData}))){
vErrors = vErrors === null ? validate30.errors : vErrors.concat(validate30.errors);
errors = vErrors.length;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.predicate !== undefined){
let data5 = data.predicate;
const _errs11 = errors;
if(typeof data5 !== "string"){
validate29.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data5 === "required") || (data5 === "preferred"))){
validate29.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema50.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate29.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate29.errors = vErrors;
return errors === 0;
}

const schema64 = {"type":"object","properties":{"field_id":{"type":"array","items":{"type":"string"}},"directive":{"$ref":"#/definitions/Optionality"}},"required":["field_id","directive"],"additionalProperties":false};

function validate33(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.field_id === undefined) && (missing0 = "field_id")) || ((data.directive === undefined) && (missing0 = "directive"))){
validate33.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((key0 === "field_id") || (key0 === "directive"))){
validate33.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.field_id !== undefined){
let data0 = data.field_id;
const _errs2 = errors;
if(errors === _errs2){
if(Array.isArray(data0)){
var valid1 = true;
const len0 = data0.length;
for(let i0=0; i0<len0; i0++){
const _errs4 = errors;
if(typeof data0[i0] !== "string"){
validate33.errors = [{instancePath:instancePath+"/field_id/" + i0,schemaPath:"#/properties/field_id/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs4 === errors;
if(!valid1){
break;
}
}
}
else {
validate33.errors = [{instancePath:instancePath+"/field_id",schemaPath:"#/properties/field_id/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.directive !== undefined){
let data2 = data.directive;
const _errs6 = errors;
if(typeof data2 !== "string"){
validate33.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data2 === "required") || (data2 === "preferred"))){
validate33.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema50.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate33.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate33.errors = vErrors;
return errors === 0;
}


function validate22(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!((((((key0 === "limit_disclosure") || (key0 === "statuses")) || (key0 === "fields")) || (key0 === "subject_is_issuer")) || (key0 === "is_holder")) || (key0 === "same_subject"))){
validate22.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.limit_disclosure !== undefined){
let data0 = data.limit_disclosure;
const _errs2 = errors;
if(typeof data0 !== "string"){
validate22.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data0 === "required") || (data0 === "preferred"))){
validate22.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema50.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.statuses !== undefined){
const _errs5 = errors;
if(!(validate23(data.statuses, {instancePath:instancePath+"/statuses",parentData:data,parentDataProperty:"statuses",rootData}))){
vErrors = vErrors === null ? validate23.errors : vErrors.concat(validate23.errors);
errors = vErrors.length;
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.fields !== undefined){
let data2 = data.fields;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data2)){
var valid2 = true;
const len0 = data2.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(!(validate29(data2[i0], {instancePath:instancePath+"/fields/" + i0,parentData:data2,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate29.errors : vErrors.concat(validate29.errors);
errors = vErrors.length;
}
var valid2 = _errs8 === errors;
if(!valid2){
break;
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/fields",schemaPath:"#/properties/fields/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_is_issuer !== undefined){
let data4 = data.subject_is_issuer;
const _errs9 = errors;
if(typeof data4 !== "string"){
validate22.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data4 === "required") || (data4 === "preferred"))){
validate22.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema50.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.is_holder !== undefined){
let data5 = data.is_holder;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data5)){
var valid4 = true;
const len1 = data5.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate33(data5[i1], {instancePath:instancePath+"/is_holder/" + i1,parentData:data5,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate33.errors : vErrors.concat(validate33.errors);
errors = vErrors.length;
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/is_holder",schemaPath:"#/properties/is_holder/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.same_subject !== undefined){
let data7 = data.same_subject;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data7)){
var valid5 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs17 = errors;
if(!(validate33(data7[i2], {instancePath:instancePath+"/same_subject/" + i2,parentData:data7,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate33.errors : vErrors.concat(validate33.errors);
errors = vErrors.length;
}
var valid5 = _errs17 === errors;
if(!valid5){
break;
}
}
}
else {
validate22.errors = [{instancePath:instancePath+"/same_subject",schemaPath:"#/properties/same_subject/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate22.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate22.errors = vErrors;
return errors === 0;
}


function validate21(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.schema === undefined) && (missing0 = "schema"))){
validate21.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "group")) || (key0 === "schema")) || (key0 === "issuance")) || (key0 === "constraints"))){
validate21.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate21.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate21.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate21.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.group !== undefined){
let data3 = data.group;
const _errs8 = errors;
if(errors === _errs8){
if(Array.isArray(data3)){
var valid1 = true;
const len0 = data3.length;
for(let i0=0; i0<len0; i0++){
const _errs10 = errors;
if(typeof data3[i0] !== "string"){
validate21.errors = [{instancePath:instancePath+"/group/" + i0,schemaPath:"#/properties/group/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs10 === errors;
if(!valid1){
break;
}
}
}
else {
validate21.errors = [{instancePath:instancePath+"/group",schemaPath:"#/properties/group/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.schema !== undefined){
let data5 = data.schema;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data5)){
var valid2 = true;
const len1 = data5.length;
for(let i1=0; i1<len1; i1++){
let data6 = data5[i1];
const _errs14 = errors;
const _errs15 = errors;
if(errors === _errs15){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
let missing1;
if((data6.uri === undefined) && (missing1 = "uri")){
validate21.errors = [{instancePath:instancePath+"/schema/" + i1,schemaPath:"#/definitions/Schema/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
const _errs17 = errors;
for(const key1 in data6){
if(!((key1 === "uri") || (key1 === "required"))){
validate21.errors = [{instancePath:instancePath+"/schema/" + i1,schemaPath:"#/definitions/Schema/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs17 === errors){
if(data6.uri !== undefined){
const _errs18 = errors;
if(typeof data6.uri !== "string"){
validate21.errors = [{instancePath:instancePath+"/schema/" + i1+"/uri",schemaPath:"#/definitions/Schema/properties/uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs18 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data6.required !== undefined){
const _errs20 = errors;
if(typeof data6.required !== "boolean"){
validate21.errors = [{instancePath:instancePath+"/schema/" + i1+"/required",schemaPath:"#/definitions/Schema/properties/required/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid4 = _errs20 === errors;
}
else {
var valid4 = true;
}
}
}
}
}
else {
validate21.errors = [{instancePath:instancePath+"/schema/" + i1,schemaPath:"#/definitions/Schema/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid2 = _errs14 === errors;
if(!valid2){
break;
}
}
}
else {
validate21.errors = [{instancePath:instancePath+"/schema",schemaPath:"#/properties/schema/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.issuance !== undefined){
let data9 = data.issuance;
const _errs22 = errors;
if(errors === _errs22){
if(Array.isArray(data9)){
var valid5 = true;
const len2 = data9.length;
for(let i2=0; i2<len2; i2++){
let data10 = data9[i2];
const _errs24 = errors;
const _errs25 = errors;
if(errors === _errs25){
if(data10 && typeof data10 == "object" && !Array.isArray(data10)){
if(data10.manifest !== undefined){
if(typeof data10.manifest !== "string"){
validate21.errors = [{instancePath:instancePath+"/issuance/" + i2+"/manifest",schemaPath:"#/definitions/Issuance/properties/manifest/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
else {
validate21.errors = [{instancePath:instancePath+"/issuance/" + i2,schemaPath:"#/definitions/Issuance/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid5 = _errs24 === errors;
if(!valid5){
break;
}
}
}
else {
validate21.errors = [{instancePath:instancePath+"/issuance",schemaPath:"#/properties/issuance/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.constraints !== undefined){
const _errs30 = errors;
if(!(validate22(data.constraints, {instancePath:instancePath+"/constraints",parentData:data,parentDataProperty:"constraints",rootData}))){
vErrors = vErrors === null ? validate22.errors : vErrors.concat(validate22.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
else {
validate21.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate21.errors = vErrors;
return errors === 0;
}


function validate16(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.input_descriptors === undefined) && (missing0 = "input_descriptors"))){
validate16.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "submission_requirements")) || (key0 === "input_descriptors"))){
validate16.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate16.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate16.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate16.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs8 = errors;
if(!(validate17(data.format, {instancePath:instancePath+"/format",parentData:data,parentDataProperty:"format",rootData}))){
vErrors = vErrors === null ? validate17.errors : vErrors.concat(validate17.errors);
errors = vErrors.length;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.submission_requirements !== undefined){
let data4 = data.submission_requirements;
const _errs9 = errors;
if(errors === _errs9){
if(Array.isArray(data4)){
var valid1 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs11 = errors;
if(!(validate19(data4[i0], {instancePath:instancePath+"/submission_requirements/" + i0,parentData:data4,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate19.errors : vErrors.concat(validate19.errors);
errors = vErrors.length;
}
var valid1 = _errs11 === errors;
if(!valid1){
break;
}
}
}
else {
validate16.errors = [{instancePath:instancePath+"/submission_requirements",schemaPath:"#/properties/submission_requirements/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.input_descriptors !== undefined){
let data6 = data.input_descriptors;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data6)){
var valid2 = true;
const len1 = data6.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate21(data6[i1], {instancePath:instancePath+"/input_descriptors/" + i1,parentData:data6,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate21.errors : vErrors.concat(validate21.errors);
errors = vErrors.length;
}
var valid2 = _errs14 === errors;
if(!valid2){
break;
}
}
}
else {
validate16.errors = [{instancePath:instancePath+"/input_descriptors",schemaPath:"#/properties/input_descriptors/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
else {
validate16.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate16.errors = vErrors;
return errors === 0;
}

const schema66 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV2"}},"frame":{"type":"object"}},"required":["id","input_descriptors"],"additionalProperties":false};
const schema67 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"group":{"type":"array","items":{"type":"string"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV2"}},"required":["id","constraints"],"additionalProperties":false};
const schema69 = {"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV2"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false};
const schema71 = {"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV2"},"predicate":{"$ref":"#/definitions/Optionality"},"intent_to_retain":{"type":"boolean"},"name":{"type":"string"},"optional":{"type":"boolean"}},"required":["path"],"additionalProperties":false};
const schema72 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false};
const schema79 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"additionalProperties":false};
const wrapper1 = {validate: validate48};
const schema86 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false};
const wrapper3 = {validate: validate49};

function validate49(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.type === undefined) && (missing0 = "type")){
validate49.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema86.properties, key0))){
validate49.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate49.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema56.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate49.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema56.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate49.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate49.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate49.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate49.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMaximum !== undefined){
const _errs18 = errors;
if(typeof data.formatMaximum !== "string"){
validate49.errors = [{instancePath:instancePath+"/formatMaximum",schemaPath:"#/properties/formatMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMinimum !== undefined){
const _errs20 = errors;
if(typeof data.formatMinimum !== "string"){
validate49.errors = [{instancePath:instancePath+"/formatMinimum",schemaPath:"#/properties/formatMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMaximum !== undefined){
const _errs22 = errors;
if(typeof data.formatExclusiveMaximum !== "string"){
validate49.errors = [{instancePath:instancePath+"/formatExclusiveMaximum",schemaPath:"#/properties/formatExclusiveMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMinimum !== undefined){
const _errs24 = errors;
if(typeof data.formatExclusiveMinimum !== "string"){
validate49.errors = [{instancePath:instancePath+"/formatExclusiveMinimum",schemaPath:"#/properties/formatExclusiveMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs26 = errors;
if(!(typeof data.minLength == "number")){
validate49.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs28 = errors;
if(!(typeof data.maxLength == "number")){
validate49.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data12 = data.minimum;
const _errs30 = errors;
if((!(typeof data12 == "number")) && (typeof data12 !== "string")){
validate49.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data13 = data.maximum;
const _errs33 = errors;
if((!(typeof data13 == "number")) && (typeof data13 !== "string")){
validate49.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data14 = data.not;
const _errs36 = errors;
if(!(data14 && typeof data14 == "object" && !Array.isArray(data14))){
validate49.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs38 = errors;
if(typeof data.pattern !== "string"){
validate49.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs40 = errors;
if(typeof data.type !== "string"){
validate49.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.contains !== undefined){
const _errs42 = errors;
if(!(wrapper1.validate(data.contains, {instancePath:instancePath+"/contains",parentData:data,parentDataProperty:"contains",rootData}))){
vErrors = vErrors === null ? wrapper1.validate.errors : vErrors.concat(wrapper1.validate.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.items !== undefined){
const _errs43 = errors;
if(!(wrapper3.validate(data.items, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
vErrors = vErrors === null ? wrapper3.validate.errors : vErrors.concat(wrapper3.validate.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate49.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate49.errors = vErrors;
return errors === 0;
}


function validate48(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema79.properties, key0))){
validate48.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate48.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema56.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate48.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema56.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate48.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate48.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate48.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate48.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMaximum !== undefined){
const _errs18 = errors;
if(typeof data.formatMaximum !== "string"){
validate48.errors = [{instancePath:instancePath+"/formatMaximum",schemaPath:"#/properties/formatMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMinimum !== undefined){
const _errs20 = errors;
if(typeof data.formatMinimum !== "string"){
validate48.errors = [{instancePath:instancePath+"/formatMinimum",schemaPath:"#/properties/formatMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMaximum !== undefined){
const _errs22 = errors;
if(typeof data.formatExclusiveMaximum !== "string"){
validate48.errors = [{instancePath:instancePath+"/formatExclusiveMaximum",schemaPath:"#/properties/formatExclusiveMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMinimum !== undefined){
const _errs24 = errors;
if(typeof data.formatExclusiveMinimum !== "string"){
validate48.errors = [{instancePath:instancePath+"/formatExclusiveMinimum",schemaPath:"#/properties/formatExclusiveMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs26 = errors;
if(!(typeof data.minLength == "number")){
validate48.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs28 = errors;
if(!(typeof data.maxLength == "number")){
validate48.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data12 = data.minimum;
const _errs30 = errors;
if((!(typeof data12 == "number")) && (typeof data12 !== "string")){
validate48.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data13 = data.maximum;
const _errs33 = errors;
if((!(typeof data13 == "number")) && (typeof data13 !== "string")){
validate48.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data14 = data.not;
const _errs36 = errors;
if(!(data14 && typeof data14 == "object" && !Array.isArray(data14))){
validate48.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs38 = errors;
if(typeof data.pattern !== "string"){
validate48.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs40 = errors;
if(typeof data.type !== "string"){
validate48.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.contains !== undefined){
const _errs42 = errors;
if(!(wrapper1.validate(data.contains, {instancePath:instancePath+"/contains",parentData:data,parentDataProperty:"contains",rootData}))){
vErrors = vErrors === null ? wrapper1.validate.errors : vErrors.concat(wrapper1.validate.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.items !== undefined){
const _errs43 = errors;
if(!(validate49(data.items, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
vErrors = vErrors === null ? validate49.errors : vErrors.concat(validate49.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate48.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate48.errors = vErrors;
return errors === 0;
}


function validate47(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.type === undefined) && (missing0 = "type")){
validate47.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema72.properties, key0))){
validate47.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate47.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema56.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate47.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema56.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate47.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate47.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate47.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate47.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMaximum !== undefined){
const _errs18 = errors;
if(typeof data.formatMaximum !== "string"){
validate47.errors = [{instancePath:instancePath+"/formatMaximum",schemaPath:"#/properties/formatMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMinimum !== undefined){
const _errs20 = errors;
if(typeof data.formatMinimum !== "string"){
validate47.errors = [{instancePath:instancePath+"/formatMinimum",schemaPath:"#/properties/formatMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMaximum !== undefined){
const _errs22 = errors;
if(typeof data.formatExclusiveMaximum !== "string"){
validate47.errors = [{instancePath:instancePath+"/formatExclusiveMaximum",schemaPath:"#/properties/formatExclusiveMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMinimum !== undefined){
const _errs24 = errors;
if(typeof data.formatExclusiveMinimum !== "string"){
validate47.errors = [{instancePath:instancePath+"/formatExclusiveMinimum",schemaPath:"#/properties/formatExclusiveMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs26 = errors;
if(!(typeof data.minLength == "number")){
validate47.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs28 = errors;
if(!(typeof data.maxLength == "number")){
validate47.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data12 = data.minimum;
const _errs30 = errors;
if((!(typeof data12 == "number")) && (typeof data12 !== "string")){
validate47.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data13 = data.maximum;
const _errs33 = errors;
if((!(typeof data13 == "number")) && (typeof data13 !== "string")){
validate47.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema58.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data14 = data.not;
const _errs36 = errors;
if(!(data14 && typeof data14 == "object" && !Array.isArray(data14))){
validate47.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs38 = errors;
if(typeof data.pattern !== "string"){
validate47.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs40 = errors;
if(typeof data.type !== "string"){
validate47.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.contains !== undefined){
const _errs42 = errors;
if(!(validate48(data.contains, {instancePath:instancePath+"/contains",parentData:data,parentDataProperty:"contains",rootData}))){
vErrors = vErrors === null ? validate48.errors : vErrors.concat(validate48.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.items !== undefined){
const _errs43 = errors;
if(!(validate49(data.items, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
vErrors = vErrors === null ? validate49.errors : vErrors.concat(validate49.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate47.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate47.errors = vErrors;
return errors === 0;
}


function validate46(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.path === undefined) && (missing0 = "path")){
validate46.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((((((key0 === "id") || (key0 === "path")) || (key0 === "purpose")) || (key0 === "filter")) || (key0 === "predicate")) || (key0 === "intent_to_retain")) || (key0 === "name")) || (key0 === "optional"))){
validate46.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate46.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.path !== undefined){
let data1 = data.path;
const _errs4 = errors;
if(errors === _errs4){
if(Array.isArray(data1)){
var valid1 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs6 = errors;
if(typeof data1[i0] !== "string"){
validate46.errors = [{instancePath:instancePath+"/path/" + i0,schemaPath:"#/properties/path/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs6 === errors;
if(!valid1){
break;
}
}
}
else {
validate46.errors = [{instancePath:instancePath+"/path",schemaPath:"#/properties/path/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs8 = errors;
if(typeof data.purpose !== "string"){
validate46.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.filter !== undefined){
const _errs10 = errors;
if(!(validate47(data.filter, {instancePath:instancePath+"/filter",parentData:data,parentDataProperty:"filter",rootData}))){
vErrors = vErrors === null ? validate47.errors : vErrors.concat(validate47.errors);
errors = vErrors.length;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.predicate !== undefined){
let data5 = data.predicate;
const _errs11 = errors;
if(typeof data5 !== "string"){
validate46.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data5 === "required") || (data5 === "preferred"))){
validate46.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema50.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.intent_to_retain !== undefined){
const _errs14 = errors;
if(typeof data.intent_to_retain !== "boolean"){
validate46.errors = [{instancePath:instancePath+"/intent_to_retain",schemaPath:"#/properties/intent_to_retain/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs16 = errors;
if(typeof data.name !== "string"){
validate46.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.optional !== undefined){
const _errs18 = errors;
if(typeof data.optional !== "boolean"){
validate46.errors = [{instancePath:instancePath+"/optional",schemaPath:"#/properties/optional/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
else {
validate46.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate46.errors = vErrors;
return errors === 0;
}


function validate44(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!((((((key0 === "limit_disclosure") || (key0 === "statuses")) || (key0 === "fields")) || (key0 === "subject_is_issuer")) || (key0 === "is_holder")) || (key0 === "same_subject"))){
validate44.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.limit_disclosure !== undefined){
let data0 = data.limit_disclosure;
const _errs2 = errors;
if(typeof data0 !== "string"){
validate44.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data0 === "required") || (data0 === "preferred"))){
validate44.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema50.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.statuses !== undefined){
const _errs5 = errors;
if(!(validate23(data.statuses, {instancePath:instancePath+"/statuses",parentData:data,parentDataProperty:"statuses",rootData}))){
vErrors = vErrors === null ? validate23.errors : vErrors.concat(validate23.errors);
errors = vErrors.length;
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.fields !== undefined){
let data2 = data.fields;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data2)){
var valid2 = true;
const len0 = data2.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(!(validate46(data2[i0], {instancePath:instancePath+"/fields/" + i0,parentData:data2,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate46.errors : vErrors.concat(validate46.errors);
errors = vErrors.length;
}
var valid2 = _errs8 === errors;
if(!valid2){
break;
}
}
}
else {
validate44.errors = [{instancePath:instancePath+"/fields",schemaPath:"#/properties/fields/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_is_issuer !== undefined){
let data4 = data.subject_is_issuer;
const _errs9 = errors;
if(typeof data4 !== "string"){
validate44.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data4 === "required") || (data4 === "preferred"))){
validate44.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema50.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.is_holder !== undefined){
let data5 = data.is_holder;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data5)){
var valid4 = true;
const len1 = data5.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate33(data5[i1], {instancePath:instancePath+"/is_holder/" + i1,parentData:data5,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate33.errors : vErrors.concat(validate33.errors);
errors = vErrors.length;
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate44.errors = [{instancePath:instancePath+"/is_holder",schemaPath:"#/properties/is_holder/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.same_subject !== undefined){
let data7 = data.same_subject;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data7)){
var valid5 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs17 = errors;
if(!(validate33(data7[i2], {instancePath:instancePath+"/same_subject/" + i2,parentData:data7,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate33.errors : vErrors.concat(validate33.errors);
errors = vErrors.length;
}
var valid5 = _errs17 === errors;
if(!valid5){
break;
}
}
}
else {
validate44.errors = [{instancePath:instancePath+"/same_subject",schemaPath:"#/properties/same_subject/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate44.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate44.errors = vErrors;
return errors === 0;
}


function validate42(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.constraints === undefined) && (missing0 = "constraints"))){
validate42.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "group")) || (key0 === "issuance")) || (key0 === "constraints"))){
validate42.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate42.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate42.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate42.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs8 = errors;
if(!(validate17(data.format, {instancePath:instancePath+"/format",parentData:data,parentDataProperty:"format",rootData}))){
vErrors = vErrors === null ? validate17.errors : vErrors.concat(validate17.errors);
errors = vErrors.length;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.group !== undefined){
let data4 = data.group;
const _errs9 = errors;
if(errors === _errs9){
if(Array.isArray(data4)){
var valid1 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs11 = errors;
if(typeof data4[i0] !== "string"){
validate42.errors = [{instancePath:instancePath+"/group/" + i0,schemaPath:"#/properties/group/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs11 === errors;
if(!valid1){
break;
}
}
}
else {
validate42.errors = [{instancePath:instancePath+"/group",schemaPath:"#/properties/group/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.issuance !== undefined){
let data6 = data.issuance;
const _errs13 = errors;
if(errors === _errs13){
if(Array.isArray(data6)){
var valid2 = true;
const len1 = data6.length;
for(let i1=0; i1<len1; i1++){
let data7 = data6[i1];
const _errs15 = errors;
const _errs16 = errors;
if(errors === _errs16){
if(data7 && typeof data7 == "object" && !Array.isArray(data7)){
if(data7.manifest !== undefined){
if(typeof data7.manifest !== "string"){
validate42.errors = [{instancePath:instancePath+"/issuance/" + i1+"/manifest",schemaPath:"#/definitions/Issuance/properties/manifest/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
else {
validate42.errors = [{instancePath:instancePath+"/issuance/" + i1,schemaPath:"#/definitions/Issuance/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid2 = _errs15 === errors;
if(!valid2){
break;
}
}
}
else {
validate42.errors = [{instancePath:instancePath+"/issuance",schemaPath:"#/properties/issuance/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.constraints !== undefined){
const _errs21 = errors;
if(!(validate44(data.constraints, {instancePath:instancePath+"/constraints",parentData:data,parentDataProperty:"constraints",rootData}))){
vErrors = vErrors === null ? validate44.errors : vErrors.concat(validate44.errors);
errors = vErrors.length;
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
else {
validate42.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate42.errors = vErrors;
return errors === 0;
}


function validate39(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.input_descriptors === undefined) && (missing0 = "input_descriptors"))){
validate39.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "submission_requirements")) || (key0 === "input_descriptors")) || (key0 === "frame"))){
validate39.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate39.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate39.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate39.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs8 = errors;
if(!(validate17(data.format, {instancePath:instancePath+"/format",parentData:data,parentDataProperty:"format",rootData}))){
vErrors = vErrors === null ? validate17.errors : vErrors.concat(validate17.errors);
errors = vErrors.length;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.submission_requirements !== undefined){
let data4 = data.submission_requirements;
const _errs9 = errors;
if(errors === _errs9){
if(Array.isArray(data4)){
var valid1 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs11 = errors;
if(!(validate19(data4[i0], {instancePath:instancePath+"/submission_requirements/" + i0,parentData:data4,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate19.errors : vErrors.concat(validate19.errors);
errors = vErrors.length;
}
var valid1 = _errs11 === errors;
if(!valid1){
break;
}
}
}
else {
validate39.errors = [{instancePath:instancePath+"/submission_requirements",schemaPath:"#/properties/submission_requirements/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.input_descriptors !== undefined){
let data6 = data.input_descriptors;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data6)){
var valid2 = true;
const len1 = data6.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate42(data6[i1], {instancePath:instancePath+"/input_descriptors/" + i1,parentData:data6,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate42.errors : vErrors.concat(validate42.errors);
errors = vErrors.length;
}
var valid2 = _errs14 === errors;
if(!valid2){
break;
}
}
}
else {
validate39.errors = [{instancePath:instancePath+"/input_descriptors",schemaPath:"#/properties/input_descriptors/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.frame !== undefined){
let data8 = data.frame;
const _errs15 = errors;
if(!(data8 && typeof data8 == "object" && !Array.isArray(data8))){
validate39.errors = [{instancePath:instancePath+"/frame",schemaPath:"#/properties/frame/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
else {
validate39.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate39.errors = vErrors;
return errors === 0;
}


function validate15(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!((key0 === "presentation_definition") || (key0 === "presentation_definition_uri"))){
validate15.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.presentation_definition !== undefined){
let data0 = data.presentation_definition;
const _errs2 = errors;
const _errs3 = errors;
let valid1 = false;
const _errs4 = errors;
if(!(validate16(data0, {instancePath:instancePath+"/presentation_definition",parentData:data,parentDataProperty:"presentation_definition",rootData}))){
vErrors = vErrors === null ? validate16.errors : vErrors.concat(validate16.errors);
errors = vErrors.length;
}
var _valid0 = _errs4 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
const _errs5 = errors;
if(!(validate39(data0, {instancePath:instancePath+"/presentation_definition",parentData:data,parentDataProperty:"presentation_definition",rootData}))){
vErrors = vErrors === null ? validate39.errors : vErrors.concat(validate39.errors);
errors = vErrors.length;
}
var _valid0 = _errs5 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
const err0 = {instancePath:instancePath+"/presentation_definition",schemaPath:"#/properties/presentation_definition/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
validate15.errors = vErrors;
return false;
}
else {
errors = _errs3;
if(vErrors !== null){
if(_errs3){
vErrors.length = _errs3;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.presentation_definition_uri !== undefined){
const _errs6 = errors;
if(typeof data.presentation_definition_uri !== "string"){
validate15.errors = [{instancePath:instancePath+"/presentation_definition_uri",schemaPath:"#/properties/presentation_definition_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
}
}
}
else {
validate15.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate15.errors = vErrors;
return errors === 0;
}


function validate14(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.id_token !== undefined){
let data0 = data.id_token;
const _errs1 = errors;
if(!(data0 && typeof data0 == "object" && !Array.isArray(data0))){
validate14.errors = [{instancePath:instancePath+"/id_token",schemaPath:"#/definitions/IdTokenClaimPayload/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.vp_token !== undefined){
const _errs4 = errors;
if(!(validate15(data.vp_token, {instancePath:instancePath+"/vp_token",parentData:data,parentDataProperty:"vp_token",rootData}))){
vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);
errors = vErrors.length;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
}
}
else {
validate14.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate14.errors = vErrors;
return errors === 0;
}


function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.registration !== undefined){
const _errs1 = errors;
if(!(validate12(data.registration, {instancePath:instancePath+"/registration",parentData:data,parentDataProperty:"registration",rootData}))){
vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors);
errors = vErrors.length;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.registration_uri !== undefined){
const _errs2 = errors;
if(typeof data.registration_uri !== "string"){
validate11.errors = [{instancePath:instancePath+"/registration_uri",schemaPath:"#/properties/registration_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.iss !== undefined){
const _errs4 = errors;
if(typeof data.iss !== "string"){
validate11.errors = [{instancePath:instancePath+"/iss",schemaPath:"#/properties/iss/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.sub !== undefined){
const _errs6 = errors;
if(typeof data.sub !== "string"){
validate11.errors = [{instancePath:instancePath+"/sub",schemaPath:"#/properties/sub/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.aud !== undefined){
let data4 = data.aud;
const _errs8 = errors;
const _errs9 = errors;
let valid1 = false;
const _errs10 = errors;
if(typeof data4 !== "string"){
const err0 = {instancePath:instancePath+"/aud",schemaPath:"#/properties/aud/anyOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs10 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data4)){
var valid2 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs14 = errors;
if(typeof data4[i0] !== "string"){
const err1 = {instancePath:instancePath+"/aud/" + i0,schemaPath:"#/properties/aud/anyOf/1/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid2 = _errs14 === errors;
if(!valid2){
break;
}
}
}
else {
const err2 = {instancePath:instancePath+"/aud",schemaPath:"#/properties/aud/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
var _valid0 = _errs12 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
const err3 = {instancePath:instancePath+"/aud",schemaPath:"#/properties/aud/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
validate11.errors = vErrors;
return false;
}
else {
errors = _errs9;
if(vErrors !== null){
if(_errs9){
vErrors.length = _errs9;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.iat !== undefined){
const _errs16 = errors;
if(!(typeof data.iat == "number")){
validate11.errors = [{instancePath:instancePath+"/iat",schemaPath:"#/properties/iat/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.nbf !== undefined){
const _errs18 = errors;
if(!(typeof data.nbf == "number")){
validate11.errors = [{instancePath:instancePath+"/nbf",schemaPath:"#/properties/nbf/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs20 = errors;
if(typeof data.type !== "string"){
validate11.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exp !== undefined){
const _errs22 = errors;
if(!(typeof data.exp == "number")){
validate11.errors = [{instancePath:instancePath+"/exp",schemaPath:"#/properties/exp/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rexp !== undefined){
const _errs24 = errors;
if(!(typeof data.rexp == "number")){
validate11.errors = [{instancePath:instancePath+"/rexp",schemaPath:"#/properties/rexp/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jti !== undefined){
const _errs26 = errors;
if(typeof data.jti !== "string"){
validate11.errors = [{instancePath:instancePath+"/jti",schemaPath:"#/properties/jti/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.scope !== undefined){
const _errs28 = errors;
if(typeof data.scope !== "string"){
validate11.errors = [{instancePath:instancePath+"/scope",schemaPath:"#/properties/scope/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_type !== undefined){
let data13 = data.response_type;
const _errs30 = errors;
const _errs31 = errors;
let valid3 = false;
const _errs32 = errors;
if(typeof data13 !== "string"){
const err4 = {instancePath:instancePath+"/response_type",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(!((data13 === "id_token") || (data13 === "vp_token"))){
const err5 = {instancePath:instancePath+"/response_type",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema18.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var _valid1 = _errs32 === errors;
valid3 = valid3 || _valid1;
if(!valid3){
const _errs35 = errors;
if(typeof data13 !== "string"){
const err6 = {instancePath:instancePath+"/response_type",schemaPath:"#/properties/response_type/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
var _valid1 = _errs35 === errors;
valid3 = valid3 || _valid1;
}
if(!valid3){
const err7 = {instancePath:instancePath+"/response_type",schemaPath:"#/properties/response_type/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
validate11.errors = vErrors;
return false;
}
else {
errors = _errs31;
if(vErrors !== null){
if(_errs31){
vErrors.length = _errs31;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_id !== undefined){
const _errs37 = errors;
if(typeof data.client_id !== "string"){
validate11.errors = [{instancePath:instancePath+"/client_id",schemaPath:"#/properties/client_id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs37 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.redirect_uri !== undefined){
const _errs39 = errors;
if(typeof data.redirect_uri !== "string"){
validate11.errors = [{instancePath:instancePath+"/redirect_uri",schemaPath:"#/properties/redirect_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs39 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.id_token_hint !== undefined){
const _errs41 = errors;
if(typeof data.id_token_hint !== "string"){
validate11.errors = [{instancePath:instancePath+"/id_token_hint",schemaPath:"#/properties/id_token_hint/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.nonce !== undefined){
const _errs43 = errors;
if(typeof data.nonce !== "string"){
validate11.errors = [{instancePath:instancePath+"/nonce",schemaPath:"#/properties/nonce/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.state !== undefined){
const _errs45 = errors;
if(typeof data.state !== "string"){
validate11.errors = [{instancePath:instancePath+"/state",schemaPath:"#/properties/state/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_mode !== undefined){
let data19 = data.response_mode;
const _errs47 = errors;
if(typeof data19 !== "string"){
validate11.errors = [{instancePath:instancePath+"/response_mode",schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((((((((data19 === "fragment") || (data19 === "form_post")) || (data19 === "post")) || (data19 === "direct_post")) || (data19 === "query")) || (data19 === "direct_post.jwt")) || (data19 === "query.jwt")) || (data19 === "fragment.jwt"))){
validate11.errors = [{instancePath:instancePath+"/response_mode",schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema25.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs47 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.request !== undefined){
const _errs50 = errors;
if(typeof data.request !== "string"){
validate11.errors = [{instancePath:instancePath+"/request",schemaPath:"#/properties/request/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs50 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.request_uri !== undefined){
const _errs52 = errors;
if(typeof data.request_uri !== "string"){
validate11.errors = [{instancePath:instancePath+"/request_uri",schemaPath:"#/properties/request_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs52 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.claims !== undefined){
const _errs54 = errors;
if(!(validate14(data.claims, {instancePath:instancePath+"/claims",parentData:data,parentDataProperty:"claims",rootData}))){
vErrors = vErrors === null ? validate14.errors : vErrors.concat(validate14.errors);
errors = vErrors.length;
}
var valid0 = _errs54 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate11.errors = vErrors;
return errors === 0;
}


function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="AuthorizationRequestPayloadVID1Schema" */;
let vErrors = null;
let errors = 0;
if(!(validate11(data, {instancePath,parentData,parentDataProperty,rootData}))){
vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);
errors = vErrors.length;
}
validate10.errors = vErrors;
return errors === 0;
}

exports.AuthorizationRequestPayloadVD11Schema = validate63;
const schema95 = {"$id":"AuthorizationRequestPayloadVD11Schema","$schema":"http://json-schema.org/draft-07/schema#","$ref":"#/definitions/AuthorizationRequestPayloadVD11","definitions":{"AuthorizationRequestPayloadVD11":{"type":"object","properties":{"id_token_type":{"type":"string"},"client_metadata":{"$ref":"#/definitions/RPRegistrationMetadataPayload"},"client_metadata_uri":{"type":"string"},"iss":{"type":"string"},"sub":{"type":"string"},"aud":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"iat":{"type":"number"},"nbf":{"type":"number"},"type":{"type":"string"},"exp":{"type":"number"},"rexp":{"type":"number"},"jti":{"type":"string"},"scope":{"type":"string"},"response_type":{"anyOf":[{"$ref":"#/definitions/ResponseType"},{"type":"string"}]},"client_id":{"type":"string"},"redirect_uri":{"type":"string"},"id_token_hint":{"type":"string"},"nonce":{"type":"string"},"state":{"type":"string"},"response_mode":{"$ref":"#/definitions/ResponseMode"},"request":{"type":"string"},"request_uri":{"type":"string"},"claims":{"$ref":"#/definitions/ClaimPayloadCommon"},"presentation_definition":{"anyOf":[{"$ref":"#/definitions/PresentationDefinitionV1"},{"$ref":"#/definitions/PresentationDefinitionV2"},{"type":"array","items":{"$ref":"#/definitions/PresentationDefinitionV1"}},{"type":"array","items":{"$ref":"#/definitions/PresentationDefinitionV2"}}]},"presentation_definition_uri":{"type":"string"}}},"RPRegistrationMetadataPayload":{"type":"object","properties":{"client_id":{"anyOf":[{"type":"string"},{}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"vp_formats":{"anyOf":[{"$ref":"#/definitions/Format"},{}]},"client_name":{"anyOf":[{"type":"string"},{}]},"logo_uri":{"anyOf":[{"type":"string"},{}]},"client_purpose":{"anyOf":[{},{"type":"string"}]}}},"SigningAlgo":{"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]},"ResponseType":{"type":"string","enum":["id_token","vp_token"]},"Scope":{"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]},"SubjectType":{"type":"string","enum":["public","pairwise"]},"Format":{"type":"object","properties":{"jwt":{"$ref":"#/definitions/JwtObject"},"jwt_vc":{"$ref":"#/definitions/JwtObject"},"jwt_vc_json":{"$ref":"#/definitions/JwtObject"},"jwt_vp":{"$ref":"#/definitions/JwtObject"},"jwt_vp_json":{"$ref":"#/definitions/JwtObject"},"ldp":{"$ref":"#/definitions/LdpObject"},"ldp_vc":{"$ref":"#/definitions/LdpObject"},"ldp_vp":{"$ref":"#/definitions/LdpObject"},"di":{"$ref":"#/definitions/DiObject"},"di_vc":{"$ref":"#/definitions/DiObject"},"di_vp":{"$ref":"#/definitions/DiObject"},"vc+sd-jwt":{"$ref":"#/definitions/SdJwtObject"},"mso_mdoc":{"$ref":"#/definitions/MsoMdocObject"}},"additionalProperties":false},"JwtObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false},"LdpObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}}},"required":["proof_type"],"additionalProperties":false},"DiObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}},"cryptosuite":{"type":"array","items":{"type":"string"}}},"required":["proof_type","cryptosuite"],"additionalProperties":false},"SdJwtObject":{"type":"object","properties":{"sd-jwt_alg_values":{"type":"array","items":{"type":"string"}},"kb-jwt_alg_values":{"type":"array","items":{"type":"string"}}},"additionalProperties":false},"MsoMdocObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false},"ResponseMode":{"type":"string","enum":["fragment","form_post","post","direct_post","query","direct_post.jwt","query.jwt","fragment.jwt"]},"ClaimPayloadCommon":{"type":"object"},"PresentationDefinitionV1":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV1"}}},"required":["id","input_descriptors"],"additionalProperties":false},"SubmissionRequirement":{"type":"object","properties":{"name":{"type":"string"},"purpose":{"type":"string"},"rule":{"$ref":"#/definitions/Rules"},"count":{"type":"number"},"min":{"type":"number"},"max":{"type":"number"},"from":{"type":"string"},"from_nested":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}}},"required":["rule"],"additionalProperties":false},"Rules":{"type":"string","enum":["all","pick"]},"InputDescriptorV1":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"group":{"type":"array","items":{"type":"string"}},"schema":{"type":"array","items":{"$ref":"#/definitions/Schema"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV1"}},"required":["id","schema"],"additionalProperties":false},"Schema":{"type":"object","properties":{"uri":{"type":"string"},"required":{"type":"boolean"}},"required":["uri"],"additionalProperties":false},"Issuance":{"type":"object","properties":{"manifest":{"type":"string"}},"additionalProperties":{}},"ConstraintsV1":{"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV1"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false},"Optionality":{"type":"string","enum":["required","preferred"]},"Statuses":{"type":"object","properties":{"active":{"$ref":"#/definitions/PdStatus"},"suspended":{"$ref":"#/definitions/PdStatus"},"revoked":{"$ref":"#/definitions/PdStatus"}},"additionalProperties":false},"PdStatus":{"type":"object","properties":{"directive":{"$ref":"#/definitions/Directives"}},"additionalProperties":false},"Directives":{"type":"string","enum":["required","allowed","disallowed"]},"FieldV1":{"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV1"},"predicate":{"$ref":"#/definitions/Optionality"}},"required":["path"],"additionalProperties":false},"FilterV1":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"}},"required":["type"],"additionalProperties":false},"OneOfNumberStringBoolean":{"type":["boolean","number","string"]},"OneOfNumberString":{"type":["number","string"]},"HolderSubject":{"type":"object","properties":{"field_id":{"type":"array","items":{"type":"string"}},"directive":{"$ref":"#/definitions/Optionality"}},"required":["field_id","directive"],"additionalProperties":false},"PresentationDefinitionV2":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV2"}},"frame":{"type":"object"}},"required":["id","input_descriptors"],"additionalProperties":false},"InputDescriptorV2":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"group":{"type":"array","items":{"type":"string"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV2"}},"required":["id","constraints"],"additionalProperties":false},"ConstraintsV2":{"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV2"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false},"FieldV2":{"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV2"},"predicate":{"$ref":"#/definitions/Optionality"},"intent_to_retain":{"type":"boolean"},"name":{"type":"string"},"optional":{"type":"boolean"}},"required":["path"],"additionalProperties":false},"FilterV2":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false},"FilterV2Base":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"additionalProperties":false},"FilterV2BaseItems":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false}}};
const schema96 = {"type":"object","properties":{"id_token_type":{"type":"string"},"client_metadata":{"$ref":"#/definitions/RPRegistrationMetadataPayload"},"client_metadata_uri":{"type":"string"},"iss":{"type":"string"},"sub":{"type":"string"},"aud":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"iat":{"type":"number"},"nbf":{"type":"number"},"type":{"type":"string"},"exp":{"type":"number"},"rexp":{"type":"number"},"jti":{"type":"string"},"scope":{"type":"string"},"response_type":{"anyOf":[{"$ref":"#/definitions/ResponseType"},{"type":"string"}]},"client_id":{"type":"string"},"redirect_uri":{"type":"string"},"id_token_hint":{"type":"string"},"nonce":{"type":"string"},"state":{"type":"string"},"response_mode":{"$ref":"#/definitions/ResponseMode"},"request":{"type":"string"},"request_uri":{"type":"string"},"claims":{"$ref":"#/definitions/ClaimPayloadCommon"},"presentation_definition":{"anyOf":[{"$ref":"#/definitions/PresentationDefinitionV1"},{"$ref":"#/definitions/PresentationDefinitionV2"},{"type":"array","items":{"$ref":"#/definitions/PresentationDefinitionV1"}},{"type":"array","items":{"$ref":"#/definitions/PresentationDefinitionV2"}}]},"presentation_definition_uri":{"type":"string"}}};
const schema102 = {"type":"string","enum":["id_token","vp_token"]};
const schema109 = {"type":"string","enum":["fragment","form_post","post","direct_post","query","direct_post.jwt","query.jwt","fragment.jwt"]};
const schema110 = {"type":"object"};
const schema97 = {"type":"object","properties":{"client_id":{"anyOf":[{"type":"string"},{}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"vp_formats":{"anyOf":[{"$ref":"#/definitions/Format"},{}]},"client_name":{"anyOf":[{"type":"string"},{}]},"logo_uri":{"anyOf":[{"type":"string"},{}]},"client_purpose":{"anyOf":[{},{"type":"string"}]}}};
const schema98 = {"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]};
const schema104 = {"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]};
const schema106 = {"type":"string","enum":["public","pairwise"]};

function validate65(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.client_id !== undefined){
const _errs1 = errors;
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.id_token_signing_alg_values_supported !== undefined){
let data1 = data.id_token_signing_alg_values_supported;
const _errs3 = errors;
const _errs4 = errors;
let valid1 = false;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(typeof data2 !== "string"){
const err0 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i0,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(!(((((data2 === "EdDSA") || (data2 === "RS256")) || (data2 === "PS256")) || (data2 === "ES256")) || (data2 === "ES256K"))){
const err1 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i0,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema98.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
const err2 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/properties/id_token_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
var _valid0 = _errs5 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
const _errs10 = errors;
if(typeof data1 !== "string"){
const err3 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(!(((((data1 === "EdDSA") || (data1 === "RS256")) || (data1 === "PS256")) || (data1 === "ES256")) || (data1 === "ES256K"))){
const err4 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema98.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid0 = _errs10 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
const err5 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/properties/id_token_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate65.errors = vErrors;
return false;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.request_object_signing_alg_values_supported !== undefined){
let data3 = data.request_object_signing_alg_values_supported;
const _errs13 = errors;
const _errs14 = errors;
let valid5 = false;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data3)){
var valid6 = true;
const len1 = data3.length;
for(let i1=0; i1<len1; i1++){
let data4 = data3[i1];
const _errs17 = errors;
if(typeof data4 !== "string"){
const err6 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i1,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(!(((((data4 === "EdDSA") || (data4 === "RS256")) || (data4 === "PS256")) || (data4 === "ES256")) || (data4 === "ES256K"))){
const err7 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i1,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema98.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var valid6 = _errs17 === errors;
if(!valid6){
break;
}
}
}
else {
const err8 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/properties/request_object_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
var _valid1 = _errs15 === errors;
valid5 = valid5 || _valid1;
if(!valid5){
const _errs20 = errors;
if(typeof data3 !== "string"){
const err9 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(!(((((data3 === "EdDSA") || (data3 === "RS256")) || (data3 === "PS256")) || (data3 === "ES256")) || (data3 === "ES256K"))){
const err10 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema98.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
var _valid1 = _errs20 === errors;
valid5 = valid5 || _valid1;
}
if(!valid5){
const err11 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/properties/request_object_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate65.errors = vErrors;
return false;
}
else {
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_types_supported !== undefined){
let data5 = data.response_types_supported;
const _errs23 = errors;
const _errs24 = errors;
let valid9 = false;
const _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data5)){
var valid10 = true;
const len2 = data5.length;
for(let i2=0; i2<len2; i2++){
let data6 = data5[i2];
const _errs27 = errors;
if(typeof data6 !== "string"){
const err12 = {instancePath:instancePath+"/response_types_supported/" + i2,schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if(!((data6 === "id_token") || (data6 === "vp_token"))){
const err13 = {instancePath:instancePath+"/response_types_supported/" + i2,schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema102.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
var valid10 = _errs27 === errors;
if(!valid10){
break;
}
}
}
else {
const err14 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/properties/response_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
var _valid2 = _errs25 === errors;
valid9 = valid9 || _valid2;
if(!valid9){
const _errs30 = errors;
if(typeof data5 !== "string"){
const err15 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(!((data5 === "id_token") || (data5 === "vp_token"))){
const err16 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema102.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
var _valid2 = _errs30 === errors;
valid9 = valid9 || _valid2;
}
if(!valid9){
const err17 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/properties/response_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
validate65.errors = vErrors;
return false;
}
else {
errors = _errs24;
if(vErrors !== null){
if(_errs24){
vErrors.length = _errs24;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.scopes_supported !== undefined){
let data7 = data.scopes_supported;
const _errs33 = errors;
const _errs34 = errors;
let valid13 = false;
const _errs35 = errors;
if(errors === _errs35){
if(Array.isArray(data7)){
var valid14 = true;
const len3 = data7.length;
for(let i3=0; i3<len3; i3++){
let data8 = data7[i3];
const _errs37 = errors;
if(typeof data8 !== "string"){
const err18 = {instancePath:instancePath+"/scopes_supported/" + i3,schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if(!((((((data8 === "openid") || (data8 === "openid did_authn")) || (data8 === "profile")) || (data8 === "email")) || (data8 === "address")) || (data8 === "phone"))){
const err19 = {instancePath:instancePath+"/scopes_supported/" + i3,schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema104.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
var valid14 = _errs37 === errors;
if(!valid14){
break;
}
}
}
else {
const err20 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/properties/scopes_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
var _valid3 = _errs35 === errors;
valid13 = valid13 || _valid3;
if(!valid13){
const _errs40 = errors;
if(typeof data7 !== "string"){
const err21 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(!((((((data7 === "openid") || (data7 === "openid did_authn")) || (data7 === "profile")) || (data7 === "email")) || (data7 === "address")) || (data7 === "phone"))){
const err22 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema104.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
var _valid3 = _errs40 === errors;
valid13 = valid13 || _valid3;
}
if(!valid13){
const err23 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/properties/scopes_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
validate65.errors = vErrors;
return false;
}
else {
errors = _errs34;
if(vErrors !== null){
if(_errs34){
vErrors.length = _errs34;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_types_supported !== undefined){
let data9 = data.subject_types_supported;
const _errs43 = errors;
const _errs44 = errors;
let valid17 = false;
const _errs45 = errors;
if(errors === _errs45){
if(Array.isArray(data9)){
var valid18 = true;
const len4 = data9.length;
for(let i4=0; i4<len4; i4++){
let data10 = data9[i4];
const _errs47 = errors;
if(typeof data10 !== "string"){
const err24 = {instancePath:instancePath+"/subject_types_supported/" + i4,schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
if(!((data10 === "public") || (data10 === "pairwise"))){
const err25 = {instancePath:instancePath+"/subject_types_supported/" + i4,schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema106.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
var valid18 = _errs47 === errors;
if(!valid18){
break;
}
}
}
else {
const err26 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/properties/subject_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
var _valid4 = _errs45 === errors;
valid17 = valid17 || _valid4;
if(!valid17){
const _errs50 = errors;
if(typeof data9 !== "string"){
const err27 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
if(!((data9 === "public") || (data9 === "pairwise"))){
const err28 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema106.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
var _valid4 = _errs50 === errors;
valid17 = valid17 || _valid4;
}
if(!valid17){
const err29 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/properties/subject_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
validate65.errors = vErrors;
return false;
}
else {
errors = _errs44;
if(vErrors !== null){
if(_errs44){
vErrors.length = _errs44;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_syntax_types_supported !== undefined){
let data11 = data.subject_syntax_types_supported;
const _errs53 = errors;
if(errors === _errs53){
if(Array.isArray(data11)){
var valid21 = true;
const len5 = data11.length;
for(let i5=0; i5<len5; i5++){
const _errs55 = errors;
if(typeof data11[i5] !== "string"){
validate65.errors = [{instancePath:instancePath+"/subject_syntax_types_supported/" + i5,schemaPath:"#/properties/subject_syntax_types_supported/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid21 = _errs55 === errors;
if(!valid21){
break;
}
}
}
else {
validate65.errors = [{instancePath:instancePath+"/subject_syntax_types_supported",schemaPath:"#/properties/subject_syntax_types_supported/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs53 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.vp_formats !== undefined){
const _errs57 = errors;
var valid0 = _errs57 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_name !== undefined){
const _errs59 = errors;
var valid0 = _errs59 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.logo_uri !== undefined){
const _errs61 = errors;
var valid0 = _errs61 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_purpose !== undefined){
const _errs63 = errors;
var valid0 = _errs63 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate65.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate65.errors = vErrors;
return errors === 0;
}

const schema111 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV1"}}},"required":["id","input_descriptors"],"additionalProperties":false};
const schema112 = {"type":"object","properties":{"jwt":{"$ref":"#/definitions/JwtObject"},"jwt_vc":{"$ref":"#/definitions/JwtObject"},"jwt_vc_json":{"$ref":"#/definitions/JwtObject"},"jwt_vp":{"$ref":"#/definitions/JwtObject"},"jwt_vp_json":{"$ref":"#/definitions/JwtObject"},"ldp":{"$ref":"#/definitions/LdpObject"},"ldp_vc":{"$ref":"#/definitions/LdpObject"},"ldp_vp":{"$ref":"#/definitions/LdpObject"},"di":{"$ref":"#/definitions/DiObject"},"di_vc":{"$ref":"#/definitions/DiObject"},"di_vp":{"$ref":"#/definitions/DiObject"},"vc+sd-jwt":{"$ref":"#/definitions/SdJwtObject"},"mso_mdoc":{"$ref":"#/definitions/MsoMdocObject"}},"additionalProperties":false};
const schema113 = {"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false};
const schema118 = {"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}}},"required":["proof_type"],"additionalProperties":false};
const schema121 = {"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}},"cryptosuite":{"type":"array","items":{"type":"string"}}},"required":["proof_type","cryptosuite"],"additionalProperties":false};
const schema124 = {"type":"object","properties":{"sd-jwt_alg_values":{"type":"array","items":{"type":"string"}},"kb-jwt_alg_values":{"type":"array","items":{"type":"string"}}},"additionalProperties":false};
const schema125 = {"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false};

function validate68(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema112.properties, key0))){
validate68.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.jwt !== undefined){
let data0 = data.jwt;
const _errs2 = errors;
const _errs3 = errors;
if(errors === _errs3){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
let missing0;
if((data0.alg === undefined) && (missing0 = "alg")){
validate68.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs5 = errors;
for(const key1 in data0){
if(!(key1 === "alg")){
validate68.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs5 === errors){
if(data0.alg !== undefined){
let data1 = data0.alg;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data1)){
var valid3 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(typeof data1[i0] !== "string"){
validate68.errors = [{instancePath:instancePath+"/jwt/alg/" + i0,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid3 = _errs8 === errors;
if(!valid3){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/jwt/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vc !== undefined){
let data3 = data.jwt_vc;
const _errs10 = errors;
const _errs11 = errors;
if(errors === _errs11){
if(data3 && typeof data3 == "object" && !Array.isArray(data3)){
let missing1;
if((data3.alg === undefined) && (missing1 = "alg")){
validate68.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
const _errs13 = errors;
for(const key2 in data3){
if(!(key2 === "alg")){
validate68.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs13 === errors){
if(data3.alg !== undefined){
let data4 = data3.alg;
const _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data4)){
var valid6 = true;
const len1 = data4.length;
for(let i1=0; i1<len1; i1++){
const _errs16 = errors;
if(typeof data4[i1] !== "string"){
validate68.errors = [{instancePath:instancePath+"/jwt_vc/alg/" + i1,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs16 === errors;
if(!valid6){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/jwt_vc/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vc_json !== undefined){
let data6 = data.jwt_vc_json;
const _errs18 = errors;
const _errs19 = errors;
if(errors === _errs19){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
let missing2;
if((data6.alg === undefined) && (missing2 = "alg")){
validate68.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
const _errs21 = errors;
for(const key3 in data6){
if(!(key3 === "alg")){
validate68.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs21 === errors){
if(data6.alg !== undefined){
let data7 = data6.alg;
const _errs22 = errors;
if(errors === _errs22){
if(Array.isArray(data7)){
var valid9 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs24 = errors;
if(typeof data7[i2] !== "string"){
validate68.errors = [{instancePath:instancePath+"/jwt_vc_json/alg/" + i2,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs24 === errors;
if(!valid9){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/jwt_vc_json/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vp !== undefined){
let data9 = data.jwt_vp;
const _errs26 = errors;
const _errs27 = errors;
if(errors === _errs27){
if(data9 && typeof data9 == "object" && !Array.isArray(data9)){
let missing3;
if((data9.alg === undefined) && (missing3 = "alg")){
validate68.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];
return false;
}
else {
const _errs29 = errors;
for(const key4 in data9){
if(!(key4 === "alg")){
validate68.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs29 === errors){
if(data9.alg !== undefined){
let data10 = data9.alg;
const _errs30 = errors;
if(errors === _errs30){
if(Array.isArray(data10)){
var valid12 = true;
const len3 = data10.length;
for(let i3=0; i3<len3; i3++){
const _errs32 = errors;
if(typeof data10[i3] !== "string"){
validate68.errors = [{instancePath:instancePath+"/jwt_vp/alg/" + i3,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs32 === errors;
if(!valid12){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/jwt_vp/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vp_json !== undefined){
let data12 = data.jwt_vp_json;
const _errs34 = errors;
const _errs35 = errors;
if(errors === _errs35){
if(data12 && typeof data12 == "object" && !Array.isArray(data12)){
let missing4;
if((data12.alg === undefined) && (missing4 = "alg")){
validate68.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];
return false;
}
else {
const _errs37 = errors;
for(const key5 in data12){
if(!(key5 === "alg")){
validate68.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs37 === errors){
if(data12.alg !== undefined){
let data13 = data12.alg;
const _errs38 = errors;
if(errors === _errs38){
if(Array.isArray(data13)){
var valid15 = true;
const len4 = data13.length;
for(let i4=0; i4<len4; i4++){
const _errs40 = errors;
if(typeof data13[i4] !== "string"){
validate68.errors = [{instancePath:instancePath+"/jwt_vp_json/alg/" + i4,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid15 = _errs40 === errors;
if(!valid15){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/jwt_vp_json/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp !== undefined){
let data15 = data.ldp;
const _errs42 = errors;
const _errs43 = errors;
if(errors === _errs43){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
let missing5;
if((data15.proof_type === undefined) && (missing5 = "proof_type")){
validate68.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"}];
return false;
}
else {
const _errs45 = errors;
for(const key6 in data15){
if(!(key6 === "proof_type")){
validate68.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key6},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs45 === errors){
if(data15.proof_type !== undefined){
let data16 = data15.proof_type;
const _errs46 = errors;
if(errors === _errs46){
if(Array.isArray(data16)){
var valid18 = true;
const len5 = data16.length;
for(let i5=0; i5<len5; i5++){
const _errs48 = errors;
if(typeof data16[i5] !== "string"){
validate68.errors = [{instancePath:instancePath+"/ldp/proof_type/" + i5,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid18 = _errs48 === errors;
if(!valid18){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/ldp/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp_vc !== undefined){
let data18 = data.ldp_vc;
const _errs50 = errors;
const _errs51 = errors;
if(errors === _errs51){
if(data18 && typeof data18 == "object" && !Array.isArray(data18)){
let missing6;
if((data18.proof_type === undefined) && (missing6 = "proof_type")){
validate68.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"}];
return false;
}
else {
const _errs53 = errors;
for(const key7 in data18){
if(!(key7 === "proof_type")){
validate68.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key7},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs53 === errors){
if(data18.proof_type !== undefined){
let data19 = data18.proof_type;
const _errs54 = errors;
if(errors === _errs54){
if(Array.isArray(data19)){
var valid21 = true;
const len6 = data19.length;
for(let i6=0; i6<len6; i6++){
const _errs56 = errors;
if(typeof data19[i6] !== "string"){
validate68.errors = [{instancePath:instancePath+"/ldp_vc/proof_type/" + i6,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid21 = _errs56 === errors;
if(!valid21){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/ldp_vc/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs50 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp_vp !== undefined){
let data21 = data.ldp_vp;
const _errs58 = errors;
const _errs59 = errors;
if(errors === _errs59){
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
let missing7;
if((data21.proof_type === undefined) && (missing7 = "proof_type")){
validate68.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"}];
return false;
}
else {
const _errs61 = errors;
for(const key8 in data21){
if(!(key8 === "proof_type")){
validate68.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key8},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs61 === errors){
if(data21.proof_type !== undefined){
let data22 = data21.proof_type;
const _errs62 = errors;
if(errors === _errs62){
if(Array.isArray(data22)){
var valid24 = true;
const len7 = data22.length;
for(let i7=0; i7<len7; i7++){
const _errs64 = errors;
if(typeof data22[i7] !== "string"){
validate68.errors = [{instancePath:instancePath+"/ldp_vp/proof_type/" + i7,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid24 = _errs64 === errors;
if(!valid24){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/ldp_vp/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs58 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di !== undefined){
let data24 = data.di;
const _errs66 = errors;
const _errs67 = errors;
if(errors === _errs67){
if(data24 && typeof data24 == "object" && !Array.isArray(data24)){
let missing8;
if(((data24.proof_type === undefined) && (missing8 = "proof_type")) || ((data24.cryptosuite === undefined) && (missing8 = "cryptosuite"))){
validate68.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing8},message:"must have required property '"+missing8+"'"}];
return false;
}
else {
const _errs69 = errors;
for(const key9 in data24){
if(!((key9 === "proof_type") || (key9 === "cryptosuite"))){
validate68.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key9},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs69 === errors){
if(data24.proof_type !== undefined){
let data25 = data24.proof_type;
const _errs70 = errors;
if(errors === _errs70){
if(Array.isArray(data25)){
var valid27 = true;
const len8 = data25.length;
for(let i8=0; i8<len8; i8++){
const _errs72 = errors;
if(typeof data25[i8] !== "string"){
validate68.errors = [{instancePath:instancePath+"/di/proof_type/" + i8,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid27 = _errs72 === errors;
if(!valid27){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/di/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid26 = _errs70 === errors;
}
else {
var valid26 = true;
}
if(valid26){
if(data24.cryptosuite !== undefined){
let data27 = data24.cryptosuite;
const _errs74 = errors;
if(errors === _errs74){
if(Array.isArray(data27)){
var valid28 = true;
const len9 = data27.length;
for(let i9=0; i9<len9; i9++){
const _errs76 = errors;
if(typeof data27[i9] !== "string"){
validate68.errors = [{instancePath:instancePath+"/di/cryptosuite/" + i9,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid28 = _errs76 === errors;
if(!valid28){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/di/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid26 = _errs74 === errors;
}
else {
var valid26 = true;
}
}
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs66 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di_vc !== undefined){
let data29 = data.di_vc;
const _errs78 = errors;
const _errs79 = errors;
if(errors === _errs79){
if(data29 && typeof data29 == "object" && !Array.isArray(data29)){
let missing9;
if(((data29.proof_type === undefined) && (missing9 = "proof_type")) || ((data29.cryptosuite === undefined) && (missing9 = "cryptosuite"))){
validate68.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing9},message:"must have required property '"+missing9+"'"}];
return false;
}
else {
const _errs81 = errors;
for(const key10 in data29){
if(!((key10 === "proof_type") || (key10 === "cryptosuite"))){
validate68.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key10},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs81 === errors){
if(data29.proof_type !== undefined){
let data30 = data29.proof_type;
const _errs82 = errors;
if(errors === _errs82){
if(Array.isArray(data30)){
var valid31 = true;
const len10 = data30.length;
for(let i10=0; i10<len10; i10++){
const _errs84 = errors;
if(typeof data30[i10] !== "string"){
validate68.errors = [{instancePath:instancePath+"/di_vc/proof_type/" + i10,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid31 = _errs84 === errors;
if(!valid31){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/di_vc/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid30 = _errs82 === errors;
}
else {
var valid30 = true;
}
if(valid30){
if(data29.cryptosuite !== undefined){
let data32 = data29.cryptosuite;
const _errs86 = errors;
if(errors === _errs86){
if(Array.isArray(data32)){
var valid32 = true;
const len11 = data32.length;
for(let i11=0; i11<len11; i11++){
const _errs88 = errors;
if(typeof data32[i11] !== "string"){
validate68.errors = [{instancePath:instancePath+"/di_vc/cryptosuite/" + i11,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid32 = _errs88 === errors;
if(!valid32){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/di_vc/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid30 = _errs86 === errors;
}
else {
var valid30 = true;
}
}
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs78 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di_vp !== undefined){
let data34 = data.di_vp;
const _errs90 = errors;
const _errs91 = errors;
if(errors === _errs91){
if(data34 && typeof data34 == "object" && !Array.isArray(data34)){
let missing10;
if(((data34.proof_type === undefined) && (missing10 = "proof_type")) || ((data34.cryptosuite === undefined) && (missing10 = "cryptosuite"))){
validate68.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing10},message:"must have required property '"+missing10+"'"}];
return false;
}
else {
const _errs93 = errors;
for(const key11 in data34){
if(!((key11 === "proof_type") || (key11 === "cryptosuite"))){
validate68.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key11},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs93 === errors){
if(data34.proof_type !== undefined){
let data35 = data34.proof_type;
const _errs94 = errors;
if(errors === _errs94){
if(Array.isArray(data35)){
var valid35 = true;
const len12 = data35.length;
for(let i12=0; i12<len12; i12++){
const _errs96 = errors;
if(typeof data35[i12] !== "string"){
validate68.errors = [{instancePath:instancePath+"/di_vp/proof_type/" + i12,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid35 = _errs96 === errors;
if(!valid35){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/di_vp/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid34 = _errs94 === errors;
}
else {
var valid34 = true;
}
if(valid34){
if(data34.cryptosuite !== undefined){
let data37 = data34.cryptosuite;
const _errs98 = errors;
if(errors === _errs98){
if(Array.isArray(data37)){
var valid36 = true;
const len13 = data37.length;
for(let i13=0; i13<len13; i13++){
const _errs100 = errors;
if(typeof data37[i13] !== "string"){
validate68.errors = [{instancePath:instancePath+"/di_vp/cryptosuite/" + i13,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid36 = _errs100 === errors;
if(!valid36){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/di_vp/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid34 = _errs98 === errors;
}
else {
var valid34 = true;
}
}
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs90 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data["vc+sd-jwt"] !== undefined){
let data39 = data["vc+sd-jwt"];
const _errs102 = errors;
const _errs103 = errors;
if(errors === _errs103){
if(data39 && typeof data39 == "object" && !Array.isArray(data39)){
const _errs105 = errors;
for(const key12 in data39){
if(!((key12 === "sd-jwt_alg_values") || (key12 === "kb-jwt_alg_values"))){
validate68.errors = [{instancePath:instancePath+"/vc+sd-jwt",schemaPath:"#/definitions/SdJwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key12},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs105 === errors){
if(data39["sd-jwt_alg_values"] !== undefined){
let data40 = data39["sd-jwt_alg_values"];
const _errs106 = errors;
if(errors === _errs106){
if(Array.isArray(data40)){
var valid39 = true;
const len14 = data40.length;
for(let i14=0; i14<len14; i14++){
const _errs108 = errors;
if(typeof data40[i14] !== "string"){
validate68.errors = [{instancePath:instancePath+"/vc+sd-jwt/sd-jwt_alg_values/" + i14,schemaPath:"#/definitions/SdJwtObject/properties/sd-jwt_alg_values/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid39 = _errs108 === errors;
if(!valid39){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/vc+sd-jwt/sd-jwt_alg_values",schemaPath:"#/definitions/SdJwtObject/properties/sd-jwt_alg_values/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs106 === errors;
}
else {
var valid38 = true;
}
if(valid38){
if(data39["kb-jwt_alg_values"] !== undefined){
let data42 = data39["kb-jwt_alg_values"];
const _errs110 = errors;
if(errors === _errs110){
if(Array.isArray(data42)){
var valid40 = true;
const len15 = data42.length;
for(let i15=0; i15<len15; i15++){
const _errs112 = errors;
if(typeof data42[i15] !== "string"){
validate68.errors = [{instancePath:instancePath+"/vc+sd-jwt/kb-jwt_alg_values/" + i15,schemaPath:"#/definitions/SdJwtObject/properties/kb-jwt_alg_values/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid40 = _errs112 === errors;
if(!valid40){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/vc+sd-jwt/kb-jwt_alg_values",schemaPath:"#/definitions/SdJwtObject/properties/kb-jwt_alg_values/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs110 === errors;
}
else {
var valid38 = true;
}
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/vc+sd-jwt",schemaPath:"#/definitions/SdJwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs102 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.mso_mdoc !== undefined){
let data44 = data.mso_mdoc;
const _errs114 = errors;
const _errs115 = errors;
if(errors === _errs115){
if(data44 && typeof data44 == "object" && !Array.isArray(data44)){
let missing11;
if((data44.alg === undefined) && (missing11 = "alg")){
validate68.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/required",keyword:"required",params:{missingProperty: missing11},message:"must have required property '"+missing11+"'"}];
return false;
}
else {
const _errs117 = errors;
for(const key13 in data44){
if(!(key13 === "alg")){
validate68.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key13},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs117 === errors){
if(data44.alg !== undefined){
let data45 = data44.alg;
const _errs118 = errors;
if(errors === _errs118){
if(Array.isArray(data45)){
var valid43 = true;
const len16 = data45.length;
for(let i16=0; i16<len16; i16++){
const _errs120 = errors;
if(typeof data45[i16] !== "string"){
validate68.errors = [{instancePath:instancePath+"/mso_mdoc/alg/" + i16,schemaPath:"#/definitions/MsoMdocObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid43 = _errs120 === errors;
if(!valid43){
break;
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/mso_mdoc/alg",schemaPath:"#/definitions/MsoMdocObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate68.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs114 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate68.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate68.errors = vErrors;
return errors === 0;
}

const schema126 = {"type":"object","properties":{"name":{"type":"string"},"purpose":{"type":"string"},"rule":{"$ref":"#/definitions/Rules"},"count":{"type":"number"},"min":{"type":"number"},"max":{"type":"number"},"from":{"type":"string"},"from_nested":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}}},"required":["rule"],"additionalProperties":false};
const schema127 = {"type":"string","enum":["all","pick"]};
const wrapper4 = {validate: validate70};

function validate70(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.rule === undefined) && (missing0 = "rule")){
validate70.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((((((key0 === "name") || (key0 === "purpose")) || (key0 === "rule")) || (key0 === "count")) || (key0 === "min")) || (key0 === "max")) || (key0 === "from")) || (key0 === "from_nested"))){
validate70.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.name !== undefined){
const _errs2 = errors;
if(typeof data.name !== "string"){
validate70.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs4 = errors;
if(typeof data.purpose !== "string"){
validate70.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rule !== undefined){
let data2 = data.rule;
const _errs6 = errors;
if(typeof data2 !== "string"){
validate70.errors = [{instancePath:instancePath+"/rule",schemaPath:"#/definitions/Rules/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data2 === "all") || (data2 === "pick"))){
validate70.errors = [{instancePath:instancePath+"/rule",schemaPath:"#/definitions/Rules/enum",keyword:"enum",params:{allowedValues: schema127.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.count !== undefined){
const _errs9 = errors;
if(!(typeof data.count == "number")){
validate70.errors = [{instancePath:instancePath+"/count",schemaPath:"#/properties/count/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.min !== undefined){
const _errs11 = errors;
if(!(typeof data.min == "number")){
validate70.errors = [{instancePath:instancePath+"/min",schemaPath:"#/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.max !== undefined){
const _errs13 = errors;
if(!(typeof data.max == "number")){
validate70.errors = [{instancePath:instancePath+"/max",schemaPath:"#/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.from !== undefined){
const _errs15 = errors;
if(typeof data.from !== "string"){
validate70.errors = [{instancePath:instancePath+"/from",schemaPath:"#/properties/from/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.from_nested !== undefined){
let data7 = data.from_nested;
const _errs17 = errors;
if(errors === _errs17){
if(Array.isArray(data7)){
var valid2 = true;
const len0 = data7.length;
for(let i0=0; i0<len0; i0++){
const _errs19 = errors;
if(!(wrapper4.validate(data7[i0], {instancePath:instancePath+"/from_nested/" + i0,parentData:data7,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? wrapper4.validate.errors : vErrors.concat(wrapper4.validate.errors);
errors = vErrors.length;
}
var valid2 = _errs19 === errors;
if(!valid2){
break;
}
}
}
else {
validate70.errors = [{instancePath:instancePath+"/from_nested",schemaPath:"#/properties/from_nested/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
else {
validate70.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate70.errors = vErrors;
return errors === 0;
}

const schema128 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"group":{"type":"array","items":{"type":"string"}},"schema":{"type":"array","items":{"$ref":"#/definitions/Schema"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV1"}},"required":["id","schema"],"additionalProperties":false};
const schema129 = {"type":"object","properties":{"uri":{"type":"string"},"required":{"type":"boolean"}},"required":["uri"],"additionalProperties":false};
const schema130 = {"type":"object","properties":{"manifest":{"type":"string"}},"additionalProperties":{}};
const schema131 = {"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV1"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false};
const schema132 = {"type":"string","enum":["required","preferred"]};
const schema133 = {"type":"object","properties":{"active":{"$ref":"#/definitions/PdStatus"},"suspended":{"$ref":"#/definitions/PdStatus"},"revoked":{"$ref":"#/definitions/PdStatus"}},"additionalProperties":false};
const schema134 = {"type":"object","properties":{"directive":{"$ref":"#/definitions/Directives"}},"additionalProperties":false};
const schema135 = {"type":"string","enum":["required","allowed","disallowed"]};

function validate75(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(key0 === "directive")){
validate75.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.directive !== undefined){
let data0 = data.directive;
if(typeof data0 !== "string"){
validate75.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Directives/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!(((data0 === "required") || (data0 === "allowed")) || (data0 === "disallowed"))){
validate75.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Directives/enum",keyword:"enum",params:{allowedValues: schema135.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate75.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate75.errors = vErrors;
return errors === 0;
}


function validate74(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(((key0 === "active") || (key0 === "suspended")) || (key0 === "revoked"))){
validate74.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.active !== undefined){
const _errs2 = errors;
if(!(validate75(data.active, {instancePath:instancePath+"/active",parentData:data,parentDataProperty:"active",rootData}))){
vErrors = vErrors === null ? validate75.errors : vErrors.concat(validate75.errors);
errors = vErrors.length;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suspended !== undefined){
const _errs3 = errors;
if(!(validate75(data.suspended, {instancePath:instancePath+"/suspended",parentData:data,parentDataProperty:"suspended",rootData}))){
vErrors = vErrors === null ? validate75.errors : vErrors.concat(validate75.errors);
errors = vErrors.length;
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.revoked !== undefined){
const _errs4 = errors;
if(!(validate75(data.revoked, {instancePath:instancePath+"/revoked",parentData:data,parentDataProperty:"revoked",rootData}))){
vErrors = vErrors === null ? validate75.errors : vErrors.concat(validate75.errors);
errors = vErrors.length;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate74.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate74.errors = vErrors;
return errors === 0;
}

const schema136 = {"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV1"},"predicate":{"$ref":"#/definitions/Optionality"}},"required":["path"],"additionalProperties":false};
const schema137 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"}},"required":["type"],"additionalProperties":false};
const schema138 = {"type":["boolean","number","string"]};
const schema140 = {"type":["number","string"]};

function validate81(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.type === undefined) && (missing0 = "type")){
validate81.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema137.properties, key0))){
validate81.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate81.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema138.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate81.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema138.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate81.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate81.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate81.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate81.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs18 = errors;
if(!(typeof data.minLength == "number")){
validate81.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs20 = errors;
if(!(typeof data.maxLength == "number")){
validate81.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data8 = data.minimum;
const _errs22 = errors;
if((!(typeof data8 == "number")) && (typeof data8 !== "string")){
validate81.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data9 = data.maximum;
const _errs25 = errors;
if((!(typeof data9 == "number")) && (typeof data9 !== "string")){
validate81.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data10 = data.not;
const _errs28 = errors;
if(!(data10 && typeof data10 == "object" && !Array.isArray(data10))){
validate81.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs30 = errors;
if(typeof data.pattern !== "string"){
validate81.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs32 = errors;
if(typeof data.type !== "string"){
validate81.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs32 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate81.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate81.errors = vErrors;
return errors === 0;
}


function validate80(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.path === undefined) && (missing0 = "path")){
validate80.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((key0 === "id") || (key0 === "path")) || (key0 === "purpose")) || (key0 === "filter")) || (key0 === "predicate"))){
validate80.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate80.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.path !== undefined){
let data1 = data.path;
const _errs4 = errors;
if(errors === _errs4){
if(Array.isArray(data1)){
var valid1 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs6 = errors;
if(typeof data1[i0] !== "string"){
validate80.errors = [{instancePath:instancePath+"/path/" + i0,schemaPath:"#/properties/path/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs6 === errors;
if(!valid1){
break;
}
}
}
else {
validate80.errors = [{instancePath:instancePath+"/path",schemaPath:"#/properties/path/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs8 = errors;
if(typeof data.purpose !== "string"){
validate80.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.filter !== undefined){
const _errs10 = errors;
if(!(validate81(data.filter, {instancePath:instancePath+"/filter",parentData:data,parentDataProperty:"filter",rootData}))){
vErrors = vErrors === null ? validate81.errors : vErrors.concat(validate81.errors);
errors = vErrors.length;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.predicate !== undefined){
let data5 = data.predicate;
const _errs11 = errors;
if(typeof data5 !== "string"){
validate80.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data5 === "required") || (data5 === "preferred"))){
validate80.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema132.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate80.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate80.errors = vErrors;
return errors === 0;
}

const schema146 = {"type":"object","properties":{"field_id":{"type":"array","items":{"type":"string"}},"directive":{"$ref":"#/definitions/Optionality"}},"required":["field_id","directive"],"additionalProperties":false};

function validate84(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.field_id === undefined) && (missing0 = "field_id")) || ((data.directive === undefined) && (missing0 = "directive"))){
validate84.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((key0 === "field_id") || (key0 === "directive"))){
validate84.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.field_id !== undefined){
let data0 = data.field_id;
const _errs2 = errors;
if(errors === _errs2){
if(Array.isArray(data0)){
var valid1 = true;
const len0 = data0.length;
for(let i0=0; i0<len0; i0++){
const _errs4 = errors;
if(typeof data0[i0] !== "string"){
validate84.errors = [{instancePath:instancePath+"/field_id/" + i0,schemaPath:"#/properties/field_id/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs4 === errors;
if(!valid1){
break;
}
}
}
else {
validate84.errors = [{instancePath:instancePath+"/field_id",schemaPath:"#/properties/field_id/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.directive !== undefined){
let data2 = data.directive;
const _errs6 = errors;
if(typeof data2 !== "string"){
validate84.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data2 === "required") || (data2 === "preferred"))){
validate84.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema132.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate84.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate84.errors = vErrors;
return errors === 0;
}


function validate73(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!((((((key0 === "limit_disclosure") || (key0 === "statuses")) || (key0 === "fields")) || (key0 === "subject_is_issuer")) || (key0 === "is_holder")) || (key0 === "same_subject"))){
validate73.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.limit_disclosure !== undefined){
let data0 = data.limit_disclosure;
const _errs2 = errors;
if(typeof data0 !== "string"){
validate73.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data0 === "required") || (data0 === "preferred"))){
validate73.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema132.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.statuses !== undefined){
const _errs5 = errors;
if(!(validate74(data.statuses, {instancePath:instancePath+"/statuses",parentData:data,parentDataProperty:"statuses",rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.fields !== undefined){
let data2 = data.fields;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data2)){
var valid2 = true;
const len0 = data2.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(!(validate80(data2[i0], {instancePath:instancePath+"/fields/" + i0,parentData:data2,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate80.errors : vErrors.concat(validate80.errors);
errors = vErrors.length;
}
var valid2 = _errs8 === errors;
if(!valid2){
break;
}
}
}
else {
validate73.errors = [{instancePath:instancePath+"/fields",schemaPath:"#/properties/fields/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_is_issuer !== undefined){
let data4 = data.subject_is_issuer;
const _errs9 = errors;
if(typeof data4 !== "string"){
validate73.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data4 === "required") || (data4 === "preferred"))){
validate73.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema132.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.is_holder !== undefined){
let data5 = data.is_holder;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data5)){
var valid4 = true;
const len1 = data5.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate84(data5[i1], {instancePath:instancePath+"/is_holder/" + i1,parentData:data5,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate84.errors : vErrors.concat(validate84.errors);
errors = vErrors.length;
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate73.errors = [{instancePath:instancePath+"/is_holder",schemaPath:"#/properties/is_holder/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.same_subject !== undefined){
let data7 = data.same_subject;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data7)){
var valid5 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs17 = errors;
if(!(validate84(data7[i2], {instancePath:instancePath+"/same_subject/" + i2,parentData:data7,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate84.errors : vErrors.concat(validate84.errors);
errors = vErrors.length;
}
var valid5 = _errs17 === errors;
if(!valid5){
break;
}
}
}
else {
validate73.errors = [{instancePath:instancePath+"/same_subject",schemaPath:"#/properties/same_subject/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate73.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate73.errors = vErrors;
return errors === 0;
}


function validate72(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.schema === undefined) && (missing0 = "schema"))){
validate72.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "group")) || (key0 === "schema")) || (key0 === "issuance")) || (key0 === "constraints"))){
validate72.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate72.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate72.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate72.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.group !== undefined){
let data3 = data.group;
const _errs8 = errors;
if(errors === _errs8){
if(Array.isArray(data3)){
var valid1 = true;
const len0 = data3.length;
for(let i0=0; i0<len0; i0++){
const _errs10 = errors;
if(typeof data3[i0] !== "string"){
validate72.errors = [{instancePath:instancePath+"/group/" + i0,schemaPath:"#/properties/group/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs10 === errors;
if(!valid1){
break;
}
}
}
else {
validate72.errors = [{instancePath:instancePath+"/group",schemaPath:"#/properties/group/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.schema !== undefined){
let data5 = data.schema;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data5)){
var valid2 = true;
const len1 = data5.length;
for(let i1=0; i1<len1; i1++){
let data6 = data5[i1];
const _errs14 = errors;
const _errs15 = errors;
if(errors === _errs15){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
let missing1;
if((data6.uri === undefined) && (missing1 = "uri")){
validate72.errors = [{instancePath:instancePath+"/schema/" + i1,schemaPath:"#/definitions/Schema/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
const _errs17 = errors;
for(const key1 in data6){
if(!((key1 === "uri") || (key1 === "required"))){
validate72.errors = [{instancePath:instancePath+"/schema/" + i1,schemaPath:"#/definitions/Schema/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs17 === errors){
if(data6.uri !== undefined){
const _errs18 = errors;
if(typeof data6.uri !== "string"){
validate72.errors = [{instancePath:instancePath+"/schema/" + i1+"/uri",schemaPath:"#/definitions/Schema/properties/uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs18 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data6.required !== undefined){
const _errs20 = errors;
if(typeof data6.required !== "boolean"){
validate72.errors = [{instancePath:instancePath+"/schema/" + i1+"/required",schemaPath:"#/definitions/Schema/properties/required/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid4 = _errs20 === errors;
}
else {
var valid4 = true;
}
}
}
}
}
else {
validate72.errors = [{instancePath:instancePath+"/schema/" + i1,schemaPath:"#/definitions/Schema/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid2 = _errs14 === errors;
if(!valid2){
break;
}
}
}
else {
validate72.errors = [{instancePath:instancePath+"/schema",schemaPath:"#/properties/schema/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.issuance !== undefined){
let data9 = data.issuance;
const _errs22 = errors;
if(errors === _errs22){
if(Array.isArray(data9)){
var valid5 = true;
const len2 = data9.length;
for(let i2=0; i2<len2; i2++){
let data10 = data9[i2];
const _errs24 = errors;
const _errs25 = errors;
if(errors === _errs25){
if(data10 && typeof data10 == "object" && !Array.isArray(data10)){
if(data10.manifest !== undefined){
if(typeof data10.manifest !== "string"){
validate72.errors = [{instancePath:instancePath+"/issuance/" + i2+"/manifest",schemaPath:"#/definitions/Issuance/properties/manifest/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
else {
validate72.errors = [{instancePath:instancePath+"/issuance/" + i2,schemaPath:"#/definitions/Issuance/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid5 = _errs24 === errors;
if(!valid5){
break;
}
}
}
else {
validate72.errors = [{instancePath:instancePath+"/issuance",schemaPath:"#/properties/issuance/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.constraints !== undefined){
const _errs30 = errors;
if(!(validate73(data.constraints, {instancePath:instancePath+"/constraints",parentData:data,parentDataProperty:"constraints",rootData}))){
vErrors = vErrors === null ? validate73.errors : vErrors.concat(validate73.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
else {
validate72.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate72.errors = vErrors;
return errors === 0;
}


function validate67(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.input_descriptors === undefined) && (missing0 = "input_descriptors"))){
validate67.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "submission_requirements")) || (key0 === "input_descriptors"))){
validate67.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate67.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate67.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate67.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs8 = errors;
if(!(validate68(data.format, {instancePath:instancePath+"/format",parentData:data,parentDataProperty:"format",rootData}))){
vErrors = vErrors === null ? validate68.errors : vErrors.concat(validate68.errors);
errors = vErrors.length;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.submission_requirements !== undefined){
let data4 = data.submission_requirements;
const _errs9 = errors;
if(errors === _errs9){
if(Array.isArray(data4)){
var valid1 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs11 = errors;
if(!(validate70(data4[i0], {instancePath:instancePath+"/submission_requirements/" + i0,parentData:data4,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate70.errors : vErrors.concat(validate70.errors);
errors = vErrors.length;
}
var valid1 = _errs11 === errors;
if(!valid1){
break;
}
}
}
else {
validate67.errors = [{instancePath:instancePath+"/submission_requirements",schemaPath:"#/properties/submission_requirements/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.input_descriptors !== undefined){
let data6 = data.input_descriptors;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data6)){
var valid2 = true;
const len1 = data6.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate72(data6[i1], {instancePath:instancePath+"/input_descriptors/" + i1,parentData:data6,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate72.errors : vErrors.concat(validate72.errors);
errors = vErrors.length;
}
var valid2 = _errs14 === errors;
if(!valid2){
break;
}
}
}
else {
validate67.errors = [{instancePath:instancePath+"/input_descriptors",schemaPath:"#/properties/input_descriptors/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
else {
validate67.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate67.errors = vErrors;
return errors === 0;
}

const schema148 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV2"}},"frame":{"type":"object"}},"required":["id","input_descriptors"],"additionalProperties":false};
const schema149 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"group":{"type":"array","items":{"type":"string"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV2"}},"required":["id","constraints"],"additionalProperties":false};
const schema151 = {"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV2"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false};
const schema153 = {"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV2"},"predicate":{"$ref":"#/definitions/Optionality"},"intent_to_retain":{"type":"boolean"},"name":{"type":"string"},"optional":{"type":"boolean"}},"required":["path"],"additionalProperties":false};
const schema154 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false};
const schema161 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"additionalProperties":false};
const wrapper5 = {validate: validate99};
const schema168 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false};
const wrapper7 = {validate: validate100};

function validate100(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.type === undefined) && (missing0 = "type")){
validate100.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema168.properties, key0))){
validate100.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate100.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema138.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate100.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema138.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate100.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate100.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate100.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate100.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMaximum !== undefined){
const _errs18 = errors;
if(typeof data.formatMaximum !== "string"){
validate100.errors = [{instancePath:instancePath+"/formatMaximum",schemaPath:"#/properties/formatMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMinimum !== undefined){
const _errs20 = errors;
if(typeof data.formatMinimum !== "string"){
validate100.errors = [{instancePath:instancePath+"/formatMinimum",schemaPath:"#/properties/formatMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMaximum !== undefined){
const _errs22 = errors;
if(typeof data.formatExclusiveMaximum !== "string"){
validate100.errors = [{instancePath:instancePath+"/formatExclusiveMaximum",schemaPath:"#/properties/formatExclusiveMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMinimum !== undefined){
const _errs24 = errors;
if(typeof data.formatExclusiveMinimum !== "string"){
validate100.errors = [{instancePath:instancePath+"/formatExclusiveMinimum",schemaPath:"#/properties/formatExclusiveMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs26 = errors;
if(!(typeof data.minLength == "number")){
validate100.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs28 = errors;
if(!(typeof data.maxLength == "number")){
validate100.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data12 = data.minimum;
const _errs30 = errors;
if((!(typeof data12 == "number")) && (typeof data12 !== "string")){
validate100.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data13 = data.maximum;
const _errs33 = errors;
if((!(typeof data13 == "number")) && (typeof data13 !== "string")){
validate100.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data14 = data.not;
const _errs36 = errors;
if(!(data14 && typeof data14 == "object" && !Array.isArray(data14))){
validate100.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs38 = errors;
if(typeof data.pattern !== "string"){
validate100.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs40 = errors;
if(typeof data.type !== "string"){
validate100.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.contains !== undefined){
const _errs42 = errors;
if(!(wrapper5.validate(data.contains, {instancePath:instancePath+"/contains",parentData:data,parentDataProperty:"contains",rootData}))){
vErrors = vErrors === null ? wrapper5.validate.errors : vErrors.concat(wrapper5.validate.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.items !== undefined){
const _errs43 = errors;
if(!(wrapper7.validate(data.items, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
vErrors = vErrors === null ? wrapper7.validate.errors : vErrors.concat(wrapper7.validate.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate100.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate100.errors = vErrors;
return errors === 0;
}


function validate99(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema161.properties, key0))){
validate99.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate99.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema138.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate99.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema138.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate99.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate99.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate99.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate99.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMaximum !== undefined){
const _errs18 = errors;
if(typeof data.formatMaximum !== "string"){
validate99.errors = [{instancePath:instancePath+"/formatMaximum",schemaPath:"#/properties/formatMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMinimum !== undefined){
const _errs20 = errors;
if(typeof data.formatMinimum !== "string"){
validate99.errors = [{instancePath:instancePath+"/formatMinimum",schemaPath:"#/properties/formatMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMaximum !== undefined){
const _errs22 = errors;
if(typeof data.formatExclusiveMaximum !== "string"){
validate99.errors = [{instancePath:instancePath+"/formatExclusiveMaximum",schemaPath:"#/properties/formatExclusiveMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMinimum !== undefined){
const _errs24 = errors;
if(typeof data.formatExclusiveMinimum !== "string"){
validate99.errors = [{instancePath:instancePath+"/formatExclusiveMinimum",schemaPath:"#/properties/formatExclusiveMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs26 = errors;
if(!(typeof data.minLength == "number")){
validate99.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs28 = errors;
if(!(typeof data.maxLength == "number")){
validate99.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data12 = data.minimum;
const _errs30 = errors;
if((!(typeof data12 == "number")) && (typeof data12 !== "string")){
validate99.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data13 = data.maximum;
const _errs33 = errors;
if((!(typeof data13 == "number")) && (typeof data13 !== "string")){
validate99.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data14 = data.not;
const _errs36 = errors;
if(!(data14 && typeof data14 == "object" && !Array.isArray(data14))){
validate99.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs38 = errors;
if(typeof data.pattern !== "string"){
validate99.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs40 = errors;
if(typeof data.type !== "string"){
validate99.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.contains !== undefined){
const _errs42 = errors;
if(!(wrapper5.validate(data.contains, {instancePath:instancePath+"/contains",parentData:data,parentDataProperty:"contains",rootData}))){
vErrors = vErrors === null ? wrapper5.validate.errors : vErrors.concat(wrapper5.validate.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.items !== undefined){
const _errs43 = errors;
if(!(validate100(data.items, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
vErrors = vErrors === null ? validate100.errors : vErrors.concat(validate100.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate99.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate99.errors = vErrors;
return errors === 0;
}


function validate98(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.type === undefined) && (missing0 = "type")){
validate98.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema154.properties, key0))){
validate98.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate98.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema138.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate98.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema138.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate98.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate98.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate98.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate98.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMaximum !== undefined){
const _errs18 = errors;
if(typeof data.formatMaximum !== "string"){
validate98.errors = [{instancePath:instancePath+"/formatMaximum",schemaPath:"#/properties/formatMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMinimum !== undefined){
const _errs20 = errors;
if(typeof data.formatMinimum !== "string"){
validate98.errors = [{instancePath:instancePath+"/formatMinimum",schemaPath:"#/properties/formatMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMaximum !== undefined){
const _errs22 = errors;
if(typeof data.formatExclusiveMaximum !== "string"){
validate98.errors = [{instancePath:instancePath+"/formatExclusiveMaximum",schemaPath:"#/properties/formatExclusiveMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMinimum !== undefined){
const _errs24 = errors;
if(typeof data.formatExclusiveMinimum !== "string"){
validate98.errors = [{instancePath:instancePath+"/formatExclusiveMinimum",schemaPath:"#/properties/formatExclusiveMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs26 = errors;
if(!(typeof data.minLength == "number")){
validate98.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs28 = errors;
if(!(typeof data.maxLength == "number")){
validate98.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data12 = data.minimum;
const _errs30 = errors;
if((!(typeof data12 == "number")) && (typeof data12 !== "string")){
validate98.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data13 = data.maximum;
const _errs33 = errors;
if((!(typeof data13 == "number")) && (typeof data13 !== "string")){
validate98.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema140.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data14 = data.not;
const _errs36 = errors;
if(!(data14 && typeof data14 == "object" && !Array.isArray(data14))){
validate98.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs38 = errors;
if(typeof data.pattern !== "string"){
validate98.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs40 = errors;
if(typeof data.type !== "string"){
validate98.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.contains !== undefined){
const _errs42 = errors;
if(!(validate99(data.contains, {instancePath:instancePath+"/contains",parentData:data,parentDataProperty:"contains",rootData}))){
vErrors = vErrors === null ? validate99.errors : vErrors.concat(validate99.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.items !== undefined){
const _errs43 = errors;
if(!(validate100(data.items, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
vErrors = vErrors === null ? validate100.errors : vErrors.concat(validate100.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate98.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate98.errors = vErrors;
return errors === 0;
}


function validate97(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.path === undefined) && (missing0 = "path")){
validate97.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((((((key0 === "id") || (key0 === "path")) || (key0 === "purpose")) || (key0 === "filter")) || (key0 === "predicate")) || (key0 === "intent_to_retain")) || (key0 === "name")) || (key0 === "optional"))){
validate97.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate97.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.path !== undefined){
let data1 = data.path;
const _errs4 = errors;
if(errors === _errs4){
if(Array.isArray(data1)){
var valid1 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs6 = errors;
if(typeof data1[i0] !== "string"){
validate97.errors = [{instancePath:instancePath+"/path/" + i0,schemaPath:"#/properties/path/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs6 === errors;
if(!valid1){
break;
}
}
}
else {
validate97.errors = [{instancePath:instancePath+"/path",schemaPath:"#/properties/path/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs8 = errors;
if(typeof data.purpose !== "string"){
validate97.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.filter !== undefined){
const _errs10 = errors;
if(!(validate98(data.filter, {instancePath:instancePath+"/filter",parentData:data,parentDataProperty:"filter",rootData}))){
vErrors = vErrors === null ? validate98.errors : vErrors.concat(validate98.errors);
errors = vErrors.length;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.predicate !== undefined){
let data5 = data.predicate;
const _errs11 = errors;
if(typeof data5 !== "string"){
validate97.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data5 === "required") || (data5 === "preferred"))){
validate97.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema132.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.intent_to_retain !== undefined){
const _errs14 = errors;
if(typeof data.intent_to_retain !== "boolean"){
validate97.errors = [{instancePath:instancePath+"/intent_to_retain",schemaPath:"#/properties/intent_to_retain/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs16 = errors;
if(typeof data.name !== "string"){
validate97.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.optional !== undefined){
const _errs18 = errors;
if(typeof data.optional !== "boolean"){
validate97.errors = [{instancePath:instancePath+"/optional",schemaPath:"#/properties/optional/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
else {
validate97.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate97.errors = vErrors;
return errors === 0;
}


function validate95(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!((((((key0 === "limit_disclosure") || (key0 === "statuses")) || (key0 === "fields")) || (key0 === "subject_is_issuer")) || (key0 === "is_holder")) || (key0 === "same_subject"))){
validate95.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.limit_disclosure !== undefined){
let data0 = data.limit_disclosure;
const _errs2 = errors;
if(typeof data0 !== "string"){
validate95.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data0 === "required") || (data0 === "preferred"))){
validate95.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema132.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.statuses !== undefined){
const _errs5 = errors;
if(!(validate74(data.statuses, {instancePath:instancePath+"/statuses",parentData:data,parentDataProperty:"statuses",rootData}))){
vErrors = vErrors === null ? validate74.errors : vErrors.concat(validate74.errors);
errors = vErrors.length;
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.fields !== undefined){
let data2 = data.fields;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data2)){
var valid2 = true;
const len0 = data2.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(!(validate97(data2[i0], {instancePath:instancePath+"/fields/" + i0,parentData:data2,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate97.errors : vErrors.concat(validate97.errors);
errors = vErrors.length;
}
var valid2 = _errs8 === errors;
if(!valid2){
break;
}
}
}
else {
validate95.errors = [{instancePath:instancePath+"/fields",schemaPath:"#/properties/fields/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_is_issuer !== undefined){
let data4 = data.subject_is_issuer;
const _errs9 = errors;
if(typeof data4 !== "string"){
validate95.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data4 === "required") || (data4 === "preferred"))){
validate95.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema132.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.is_holder !== undefined){
let data5 = data.is_holder;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data5)){
var valid4 = true;
const len1 = data5.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate84(data5[i1], {instancePath:instancePath+"/is_holder/" + i1,parentData:data5,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate84.errors : vErrors.concat(validate84.errors);
errors = vErrors.length;
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate95.errors = [{instancePath:instancePath+"/is_holder",schemaPath:"#/properties/is_holder/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.same_subject !== undefined){
let data7 = data.same_subject;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data7)){
var valid5 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs17 = errors;
if(!(validate84(data7[i2], {instancePath:instancePath+"/same_subject/" + i2,parentData:data7,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate84.errors : vErrors.concat(validate84.errors);
errors = vErrors.length;
}
var valid5 = _errs17 === errors;
if(!valid5){
break;
}
}
}
else {
validate95.errors = [{instancePath:instancePath+"/same_subject",schemaPath:"#/properties/same_subject/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate95.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate95.errors = vErrors;
return errors === 0;
}


function validate93(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.constraints === undefined) && (missing0 = "constraints"))){
validate93.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "group")) || (key0 === "issuance")) || (key0 === "constraints"))){
validate93.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate93.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate93.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate93.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs8 = errors;
if(!(validate68(data.format, {instancePath:instancePath+"/format",parentData:data,parentDataProperty:"format",rootData}))){
vErrors = vErrors === null ? validate68.errors : vErrors.concat(validate68.errors);
errors = vErrors.length;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.group !== undefined){
let data4 = data.group;
const _errs9 = errors;
if(errors === _errs9){
if(Array.isArray(data4)){
var valid1 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs11 = errors;
if(typeof data4[i0] !== "string"){
validate93.errors = [{instancePath:instancePath+"/group/" + i0,schemaPath:"#/properties/group/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs11 === errors;
if(!valid1){
break;
}
}
}
else {
validate93.errors = [{instancePath:instancePath+"/group",schemaPath:"#/properties/group/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.issuance !== undefined){
let data6 = data.issuance;
const _errs13 = errors;
if(errors === _errs13){
if(Array.isArray(data6)){
var valid2 = true;
const len1 = data6.length;
for(let i1=0; i1<len1; i1++){
let data7 = data6[i1];
const _errs15 = errors;
const _errs16 = errors;
if(errors === _errs16){
if(data7 && typeof data7 == "object" && !Array.isArray(data7)){
if(data7.manifest !== undefined){
if(typeof data7.manifest !== "string"){
validate93.errors = [{instancePath:instancePath+"/issuance/" + i1+"/manifest",schemaPath:"#/definitions/Issuance/properties/manifest/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
else {
validate93.errors = [{instancePath:instancePath+"/issuance/" + i1,schemaPath:"#/definitions/Issuance/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid2 = _errs15 === errors;
if(!valid2){
break;
}
}
}
else {
validate93.errors = [{instancePath:instancePath+"/issuance",schemaPath:"#/properties/issuance/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.constraints !== undefined){
const _errs21 = errors;
if(!(validate95(data.constraints, {instancePath:instancePath+"/constraints",parentData:data,parentDataProperty:"constraints",rootData}))){
vErrors = vErrors === null ? validate95.errors : vErrors.concat(validate95.errors);
errors = vErrors.length;
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
else {
validate93.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate93.errors = vErrors;
return errors === 0;
}


function validate90(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.input_descriptors === undefined) && (missing0 = "input_descriptors"))){
validate90.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "submission_requirements")) || (key0 === "input_descriptors")) || (key0 === "frame"))){
validate90.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate90.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate90.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate90.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs8 = errors;
if(!(validate68(data.format, {instancePath:instancePath+"/format",parentData:data,parentDataProperty:"format",rootData}))){
vErrors = vErrors === null ? validate68.errors : vErrors.concat(validate68.errors);
errors = vErrors.length;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.submission_requirements !== undefined){
let data4 = data.submission_requirements;
const _errs9 = errors;
if(errors === _errs9){
if(Array.isArray(data4)){
var valid1 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs11 = errors;
if(!(validate70(data4[i0], {instancePath:instancePath+"/submission_requirements/" + i0,parentData:data4,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate70.errors : vErrors.concat(validate70.errors);
errors = vErrors.length;
}
var valid1 = _errs11 === errors;
if(!valid1){
break;
}
}
}
else {
validate90.errors = [{instancePath:instancePath+"/submission_requirements",schemaPath:"#/properties/submission_requirements/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.input_descriptors !== undefined){
let data6 = data.input_descriptors;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data6)){
var valid2 = true;
const len1 = data6.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate93(data6[i1], {instancePath:instancePath+"/input_descriptors/" + i1,parentData:data6,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate93.errors : vErrors.concat(validate93.errors);
errors = vErrors.length;
}
var valid2 = _errs14 === errors;
if(!valid2){
break;
}
}
}
else {
validate90.errors = [{instancePath:instancePath+"/input_descriptors",schemaPath:"#/properties/input_descriptors/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.frame !== undefined){
let data8 = data.frame;
const _errs15 = errors;
if(!(data8 && typeof data8 == "object" && !Array.isArray(data8))){
validate90.errors = [{instancePath:instancePath+"/frame",schemaPath:"#/properties/frame/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
else {
validate90.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate90.errors = vErrors;
return errors === 0;
}


function validate64(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.id_token_type !== undefined){
const _errs1 = errors;
if(typeof data.id_token_type !== "string"){
validate64.errors = [{instancePath:instancePath+"/id_token_type",schemaPath:"#/properties/id_token_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_metadata !== undefined){
const _errs3 = errors;
if(!(validate65(data.client_metadata, {instancePath:instancePath+"/client_metadata",parentData:data,parentDataProperty:"client_metadata",rootData}))){
vErrors = vErrors === null ? validate65.errors : vErrors.concat(validate65.errors);
errors = vErrors.length;
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_metadata_uri !== undefined){
const _errs4 = errors;
if(typeof data.client_metadata_uri !== "string"){
validate64.errors = [{instancePath:instancePath+"/client_metadata_uri",schemaPath:"#/properties/client_metadata_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.iss !== undefined){
const _errs6 = errors;
if(typeof data.iss !== "string"){
validate64.errors = [{instancePath:instancePath+"/iss",schemaPath:"#/properties/iss/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.sub !== undefined){
const _errs8 = errors;
if(typeof data.sub !== "string"){
validate64.errors = [{instancePath:instancePath+"/sub",schemaPath:"#/properties/sub/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.aud !== undefined){
let data5 = data.aud;
const _errs10 = errors;
const _errs11 = errors;
let valid1 = false;
const _errs12 = errors;
if(typeof data5 !== "string"){
const err0 = {instancePath:instancePath+"/aud",schemaPath:"#/properties/aud/anyOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs12 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
const _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid2 = true;
const len0 = data5.length;
for(let i0=0; i0<len0; i0++){
const _errs16 = errors;
if(typeof data5[i0] !== "string"){
const err1 = {instancePath:instancePath+"/aud/" + i0,schemaPath:"#/properties/aud/anyOf/1/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid2 = _errs16 === errors;
if(!valid2){
break;
}
}
}
else {
const err2 = {instancePath:instancePath+"/aud",schemaPath:"#/properties/aud/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
var _valid0 = _errs14 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
const err3 = {instancePath:instancePath+"/aud",schemaPath:"#/properties/aud/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
validate64.errors = vErrors;
return false;
}
else {
errors = _errs11;
if(vErrors !== null){
if(_errs11){
vErrors.length = _errs11;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.iat !== undefined){
const _errs18 = errors;
if(!(typeof data.iat == "number")){
validate64.errors = [{instancePath:instancePath+"/iat",schemaPath:"#/properties/iat/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.nbf !== undefined){
const _errs20 = errors;
if(!(typeof data.nbf == "number")){
validate64.errors = [{instancePath:instancePath+"/nbf",schemaPath:"#/properties/nbf/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs22 = errors;
if(typeof data.type !== "string"){
validate64.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exp !== undefined){
const _errs24 = errors;
if(!(typeof data.exp == "number")){
validate64.errors = [{instancePath:instancePath+"/exp",schemaPath:"#/properties/exp/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rexp !== undefined){
const _errs26 = errors;
if(!(typeof data.rexp == "number")){
validate64.errors = [{instancePath:instancePath+"/rexp",schemaPath:"#/properties/rexp/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jti !== undefined){
const _errs28 = errors;
if(typeof data.jti !== "string"){
validate64.errors = [{instancePath:instancePath+"/jti",schemaPath:"#/properties/jti/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.scope !== undefined){
const _errs30 = errors;
if(typeof data.scope !== "string"){
validate64.errors = [{instancePath:instancePath+"/scope",schemaPath:"#/properties/scope/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_type !== undefined){
let data14 = data.response_type;
const _errs32 = errors;
const _errs33 = errors;
let valid3 = false;
const _errs34 = errors;
if(typeof data14 !== "string"){
const err4 = {instancePath:instancePath+"/response_type",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(!((data14 === "id_token") || (data14 === "vp_token"))){
const err5 = {instancePath:instancePath+"/response_type",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema102.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var _valid1 = _errs34 === errors;
valid3 = valid3 || _valid1;
if(!valid3){
const _errs37 = errors;
if(typeof data14 !== "string"){
const err6 = {instancePath:instancePath+"/response_type",schemaPath:"#/properties/response_type/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
var _valid1 = _errs37 === errors;
valid3 = valid3 || _valid1;
}
if(!valid3){
const err7 = {instancePath:instancePath+"/response_type",schemaPath:"#/properties/response_type/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
validate64.errors = vErrors;
return false;
}
else {
errors = _errs33;
if(vErrors !== null){
if(_errs33){
vErrors.length = _errs33;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs32 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_id !== undefined){
const _errs39 = errors;
if(typeof data.client_id !== "string"){
validate64.errors = [{instancePath:instancePath+"/client_id",schemaPath:"#/properties/client_id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs39 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.redirect_uri !== undefined){
const _errs41 = errors;
if(typeof data.redirect_uri !== "string"){
validate64.errors = [{instancePath:instancePath+"/redirect_uri",schemaPath:"#/properties/redirect_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.id_token_hint !== undefined){
const _errs43 = errors;
if(typeof data.id_token_hint !== "string"){
validate64.errors = [{instancePath:instancePath+"/id_token_hint",schemaPath:"#/properties/id_token_hint/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.nonce !== undefined){
const _errs45 = errors;
if(typeof data.nonce !== "string"){
validate64.errors = [{instancePath:instancePath+"/nonce",schemaPath:"#/properties/nonce/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.state !== undefined){
const _errs47 = errors;
if(typeof data.state !== "string"){
validate64.errors = [{instancePath:instancePath+"/state",schemaPath:"#/properties/state/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs47 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_mode !== undefined){
let data20 = data.response_mode;
const _errs49 = errors;
if(typeof data20 !== "string"){
validate64.errors = [{instancePath:instancePath+"/response_mode",schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((((((((data20 === "fragment") || (data20 === "form_post")) || (data20 === "post")) || (data20 === "direct_post")) || (data20 === "query")) || (data20 === "direct_post.jwt")) || (data20 === "query.jwt")) || (data20 === "fragment.jwt"))){
validate64.errors = [{instancePath:instancePath+"/response_mode",schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema109.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs49 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.request !== undefined){
const _errs52 = errors;
if(typeof data.request !== "string"){
validate64.errors = [{instancePath:instancePath+"/request",schemaPath:"#/properties/request/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs52 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.request_uri !== undefined){
const _errs54 = errors;
if(typeof data.request_uri !== "string"){
validate64.errors = [{instancePath:instancePath+"/request_uri",schemaPath:"#/properties/request_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs54 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.claims !== undefined){
let data23 = data.claims;
const _errs56 = errors;
if(!(data23 && typeof data23 == "object" && !Array.isArray(data23))){
validate64.errors = [{instancePath:instancePath+"/claims",schemaPath:"#/definitions/ClaimPayloadCommon/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs56 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.presentation_definition !== undefined){
let data24 = data.presentation_definition;
const _errs59 = errors;
const _errs60 = errors;
let valid7 = false;
const _errs61 = errors;
if(!(validate67(data24, {instancePath:instancePath+"/presentation_definition",parentData:data,parentDataProperty:"presentation_definition",rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var _valid2 = _errs61 === errors;
valid7 = valid7 || _valid2;
if(!valid7){
const _errs62 = errors;
if(!(validate90(data24, {instancePath:instancePath+"/presentation_definition",parentData:data,parentDataProperty:"presentation_definition",rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var _valid2 = _errs62 === errors;
valid7 = valid7 || _valid2;
if(!valid7){
const _errs63 = errors;
if(errors === _errs63){
if(Array.isArray(data24)){
var valid8 = true;
const len1 = data24.length;
for(let i1=0; i1<len1; i1++){
const _errs65 = errors;
if(!(validate67(data24[i1], {instancePath:instancePath+"/presentation_definition/" + i1,parentData:data24,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate67.errors : vErrors.concat(validate67.errors);
errors = vErrors.length;
}
var valid8 = _errs65 === errors;
if(!valid8){
break;
}
}
}
else {
const err8 = {instancePath:instancePath+"/presentation_definition",schemaPath:"#/properties/presentation_definition/anyOf/2/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
var _valid2 = _errs63 === errors;
valid7 = valid7 || _valid2;
if(!valid7){
const _errs66 = errors;
if(errors === _errs66){
if(Array.isArray(data24)){
var valid9 = true;
const len2 = data24.length;
for(let i2=0; i2<len2; i2++){
const _errs68 = errors;
if(!(validate90(data24[i2], {instancePath:instancePath+"/presentation_definition/" + i2,parentData:data24,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate90.errors : vErrors.concat(validate90.errors);
errors = vErrors.length;
}
var valid9 = _errs68 === errors;
if(!valid9){
break;
}
}
}
else {
const err9 = {instancePath:instancePath+"/presentation_definition",schemaPath:"#/properties/presentation_definition/anyOf/3/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
var _valid2 = _errs66 === errors;
valid7 = valid7 || _valid2;
}
}
}
if(!valid7){
const err10 = {instancePath:instancePath+"/presentation_definition",schemaPath:"#/properties/presentation_definition/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
validate64.errors = vErrors;
return false;
}
else {
errors = _errs60;
if(vErrors !== null){
if(_errs60){
vErrors.length = _errs60;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs59 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.presentation_definition_uri !== undefined){
const _errs69 = errors;
if(typeof data.presentation_definition_uri !== "string"){
validate64.errors = [{instancePath:instancePath+"/presentation_definition_uri",schemaPath:"#/properties/presentation_definition_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs69 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate64.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate64.errors = vErrors;
return errors === 0;
}


function validate63(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="AuthorizationRequestPayloadVD11Schema" */;
let vErrors = null;
let errors = 0;
if(!(validate64(data, {instancePath,parentData,parentDataProperty,rootData}))){
vErrors = vErrors === null ? validate64.errors : vErrors.concat(validate64.errors);
errors = vErrors.length;
}
validate63.errors = vErrors;
return errors === 0;
}

exports.AuthorizationRequestPayloadVD12OID4VPD18Schema = validate114;
const schema177 = {"$id":"AuthorizationRequestPayloadVD12OID4VPD18Schema","$schema":"http://json-schema.org/draft-07/schema#","$ref":"#/definitions/AuthorizationRequestPayloadVD12OID4VPD18","definitions":{"AuthorizationRequestPayloadVD12OID4VPD18":{"type":"object","properties":{"id_token_type":{"type":"string"},"client_metadata":{"$ref":"#/definitions/RPRegistrationMetadataPayload"},"client_metadata_uri":{"type":"string"},"iss":{"type":"string"},"sub":{"type":"string"},"aud":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"iat":{"type":"number"},"nbf":{"type":"number"},"type":{"type":"string"},"exp":{"type":"number"},"rexp":{"type":"number"},"jti":{"type":"string"},"scope":{"type":"string"},"response_type":{"anyOf":[{"$ref":"#/definitions/ResponseType"},{"type":"string"}]},"client_id":{"type":"string"},"redirect_uri":{"type":"string"},"id_token_hint":{"type":"string"},"nonce":{"type":"string"},"state":{"type":"string"},"response_mode":{"$ref":"#/definitions/ResponseMode"},"request":{"type":"string"},"request_uri":{"type":"string"},"claims":{"$ref":"#/definitions/ClaimPayloadCommon"},"presentation_definition":{"anyOf":[{"$ref":"#/definitions/PresentationDefinitionV1"},{"$ref":"#/definitions/PresentationDefinitionV2"},{"type":"array","items":{"$ref":"#/definitions/PresentationDefinitionV1"}},{"type":"array","items":{"$ref":"#/definitions/PresentationDefinitionV2"}}]},"presentation_definition_uri":{"type":"string"},"client_id_scheme":{"$ref":"#/definitions/ClientIdSchemeOID4VPD18"},"response_uri":{"type":"string"}}},"RPRegistrationMetadataPayload":{"type":"object","properties":{"client_id":{"anyOf":[{"type":"string"},{}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"vp_formats":{"anyOf":[{"$ref":"#/definitions/Format"},{}]},"client_name":{"anyOf":[{"type":"string"},{}]},"logo_uri":{"anyOf":[{"type":"string"},{}]},"client_purpose":{"anyOf":[{},{"type":"string"}]}}},"SigningAlgo":{"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]},"ResponseType":{"type":"string","enum":["id_token","vp_token"]},"Scope":{"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]},"SubjectType":{"type":"string","enum":["public","pairwise"]},"Format":{"type":"object","properties":{"jwt":{"$ref":"#/definitions/JwtObject"},"jwt_vc":{"$ref":"#/definitions/JwtObject"},"jwt_vc_json":{"$ref":"#/definitions/JwtObject"},"jwt_vp":{"$ref":"#/definitions/JwtObject"},"jwt_vp_json":{"$ref":"#/definitions/JwtObject"},"ldp":{"$ref":"#/definitions/LdpObject"},"ldp_vc":{"$ref":"#/definitions/LdpObject"},"ldp_vp":{"$ref":"#/definitions/LdpObject"},"di":{"$ref":"#/definitions/DiObject"},"di_vc":{"$ref":"#/definitions/DiObject"},"di_vp":{"$ref":"#/definitions/DiObject"},"vc+sd-jwt":{"$ref":"#/definitions/SdJwtObject"},"mso_mdoc":{"$ref":"#/definitions/MsoMdocObject"}},"additionalProperties":false},"JwtObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false},"LdpObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}}},"required":["proof_type"],"additionalProperties":false},"DiObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}},"cryptosuite":{"type":"array","items":{"type":"string"}}},"required":["proof_type","cryptosuite"],"additionalProperties":false},"SdJwtObject":{"type":"object","properties":{"sd-jwt_alg_values":{"type":"array","items":{"type":"string"}},"kb-jwt_alg_values":{"type":"array","items":{"type":"string"}}},"additionalProperties":false},"MsoMdocObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false},"ResponseMode":{"type":"string","enum":["fragment","form_post","post","direct_post","query","direct_post.jwt","query.jwt","fragment.jwt"]},"ClaimPayloadCommon":{"type":"object"},"PresentationDefinitionV1":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV1"}}},"required":["id","input_descriptors"],"additionalProperties":false},"SubmissionRequirement":{"type":"object","properties":{"name":{"type":"string"},"purpose":{"type":"string"},"rule":{"$ref":"#/definitions/Rules"},"count":{"type":"number"},"min":{"type":"number"},"max":{"type":"number"},"from":{"type":"string"},"from_nested":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}}},"required":["rule"],"additionalProperties":false},"Rules":{"type":"string","enum":["all","pick"]},"InputDescriptorV1":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"group":{"type":"array","items":{"type":"string"}},"schema":{"type":"array","items":{"$ref":"#/definitions/Schema"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV1"}},"required":["id","schema"],"additionalProperties":false},"Schema":{"type":"object","properties":{"uri":{"type":"string"},"required":{"type":"boolean"}},"required":["uri"],"additionalProperties":false},"Issuance":{"type":"object","properties":{"manifest":{"type":"string"}},"additionalProperties":{}},"ConstraintsV1":{"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV1"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false},"Optionality":{"type":"string","enum":["required","preferred"]},"Statuses":{"type":"object","properties":{"active":{"$ref":"#/definitions/PdStatus"},"suspended":{"$ref":"#/definitions/PdStatus"},"revoked":{"$ref":"#/definitions/PdStatus"}},"additionalProperties":false},"PdStatus":{"type":"object","properties":{"directive":{"$ref":"#/definitions/Directives"}},"additionalProperties":false},"Directives":{"type":"string","enum":["required","allowed","disallowed"]},"FieldV1":{"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV1"},"predicate":{"$ref":"#/definitions/Optionality"}},"required":["path"],"additionalProperties":false},"FilterV1":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"}},"required":["type"],"additionalProperties":false},"OneOfNumberStringBoolean":{"type":["boolean","number","string"]},"OneOfNumberString":{"type":["number","string"]},"HolderSubject":{"type":"object","properties":{"field_id":{"type":"array","items":{"type":"string"}},"directive":{"$ref":"#/definitions/Optionality"}},"required":["field_id","directive"],"additionalProperties":false},"PresentationDefinitionV2":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV2"}},"frame":{"type":"object"}},"required":["id","input_descriptors"],"additionalProperties":false},"InputDescriptorV2":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"group":{"type":"array","items":{"type":"string"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV2"}},"required":["id","constraints"],"additionalProperties":false},"ConstraintsV2":{"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV2"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false},"FieldV2":{"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV2"},"predicate":{"$ref":"#/definitions/Optionality"},"intent_to_retain":{"type":"boolean"},"name":{"type":"string"},"optional":{"type":"boolean"}},"required":["path"],"additionalProperties":false},"FilterV2":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false},"FilterV2Base":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"additionalProperties":false},"FilterV2BaseItems":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false},"ClientIdSchemeOID4VPD18":{"type":"string","enum":["pre-registered","redirect_uri","entity_id","did"]}}};
const schema178 = {"type":"object","properties":{"id_token_type":{"type":"string"},"client_metadata":{"$ref":"#/definitions/RPRegistrationMetadataPayload"},"client_metadata_uri":{"type":"string"},"iss":{"type":"string"},"sub":{"type":"string"},"aud":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"iat":{"type":"number"},"nbf":{"type":"number"},"type":{"type":"string"},"exp":{"type":"number"},"rexp":{"type":"number"},"jti":{"type":"string"},"scope":{"type":"string"},"response_type":{"anyOf":[{"$ref":"#/definitions/ResponseType"},{"type":"string"}]},"client_id":{"type":"string"},"redirect_uri":{"type":"string"},"id_token_hint":{"type":"string"},"nonce":{"type":"string"},"state":{"type":"string"},"response_mode":{"$ref":"#/definitions/ResponseMode"},"request":{"type":"string"},"request_uri":{"type":"string"},"claims":{"$ref":"#/definitions/ClaimPayloadCommon"},"presentation_definition":{"anyOf":[{"$ref":"#/definitions/PresentationDefinitionV1"},{"$ref":"#/definitions/PresentationDefinitionV2"},{"type":"array","items":{"$ref":"#/definitions/PresentationDefinitionV1"}},{"type":"array","items":{"$ref":"#/definitions/PresentationDefinitionV2"}}]},"presentation_definition_uri":{"type":"string"},"client_id_scheme":{"$ref":"#/definitions/ClientIdSchemeOID4VPD18"},"response_uri":{"type":"string"}}};
const schema184 = {"type":"string","enum":["id_token","vp_token"]};
const schema191 = {"type":"string","enum":["fragment","form_post","post","direct_post","query","direct_post.jwt","query.jwt","fragment.jwt"]};
const schema192 = {"type":"object"};
const schema259 = {"type":"string","enum":["pre-registered","redirect_uri","entity_id","did"]};
const schema179 = {"type":"object","properties":{"client_id":{"anyOf":[{"type":"string"},{}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"vp_formats":{"anyOf":[{"$ref":"#/definitions/Format"},{}]},"client_name":{"anyOf":[{"type":"string"},{}]},"logo_uri":{"anyOf":[{"type":"string"},{}]},"client_purpose":{"anyOf":[{},{"type":"string"}]}}};
const schema180 = {"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]};
const schema186 = {"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]};
const schema188 = {"type":"string","enum":["public","pairwise"]};

function validate116(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.client_id !== undefined){
const _errs1 = errors;
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.id_token_signing_alg_values_supported !== undefined){
let data1 = data.id_token_signing_alg_values_supported;
const _errs3 = errors;
const _errs4 = errors;
let valid1 = false;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(typeof data2 !== "string"){
const err0 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i0,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(!(((((data2 === "EdDSA") || (data2 === "RS256")) || (data2 === "PS256")) || (data2 === "ES256")) || (data2 === "ES256K"))){
const err1 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i0,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema180.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
const err2 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/properties/id_token_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
var _valid0 = _errs5 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
const _errs10 = errors;
if(typeof data1 !== "string"){
const err3 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(!(((((data1 === "EdDSA") || (data1 === "RS256")) || (data1 === "PS256")) || (data1 === "ES256")) || (data1 === "ES256K"))){
const err4 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema180.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid0 = _errs10 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
const err5 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/properties/id_token_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate116.errors = vErrors;
return false;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.request_object_signing_alg_values_supported !== undefined){
let data3 = data.request_object_signing_alg_values_supported;
const _errs13 = errors;
const _errs14 = errors;
let valid5 = false;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data3)){
var valid6 = true;
const len1 = data3.length;
for(let i1=0; i1<len1; i1++){
let data4 = data3[i1];
const _errs17 = errors;
if(typeof data4 !== "string"){
const err6 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i1,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(!(((((data4 === "EdDSA") || (data4 === "RS256")) || (data4 === "PS256")) || (data4 === "ES256")) || (data4 === "ES256K"))){
const err7 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i1,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema180.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var valid6 = _errs17 === errors;
if(!valid6){
break;
}
}
}
else {
const err8 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/properties/request_object_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
var _valid1 = _errs15 === errors;
valid5 = valid5 || _valid1;
if(!valid5){
const _errs20 = errors;
if(typeof data3 !== "string"){
const err9 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(!(((((data3 === "EdDSA") || (data3 === "RS256")) || (data3 === "PS256")) || (data3 === "ES256")) || (data3 === "ES256K"))){
const err10 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema180.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
var _valid1 = _errs20 === errors;
valid5 = valid5 || _valid1;
}
if(!valid5){
const err11 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/properties/request_object_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate116.errors = vErrors;
return false;
}
else {
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_types_supported !== undefined){
let data5 = data.response_types_supported;
const _errs23 = errors;
const _errs24 = errors;
let valid9 = false;
const _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data5)){
var valid10 = true;
const len2 = data5.length;
for(let i2=0; i2<len2; i2++){
let data6 = data5[i2];
const _errs27 = errors;
if(typeof data6 !== "string"){
const err12 = {instancePath:instancePath+"/response_types_supported/" + i2,schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if(!((data6 === "id_token") || (data6 === "vp_token"))){
const err13 = {instancePath:instancePath+"/response_types_supported/" + i2,schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema184.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
var valid10 = _errs27 === errors;
if(!valid10){
break;
}
}
}
else {
const err14 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/properties/response_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
var _valid2 = _errs25 === errors;
valid9 = valid9 || _valid2;
if(!valid9){
const _errs30 = errors;
if(typeof data5 !== "string"){
const err15 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(!((data5 === "id_token") || (data5 === "vp_token"))){
const err16 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema184.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
var _valid2 = _errs30 === errors;
valid9 = valid9 || _valid2;
}
if(!valid9){
const err17 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/properties/response_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
validate116.errors = vErrors;
return false;
}
else {
errors = _errs24;
if(vErrors !== null){
if(_errs24){
vErrors.length = _errs24;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.scopes_supported !== undefined){
let data7 = data.scopes_supported;
const _errs33 = errors;
const _errs34 = errors;
let valid13 = false;
const _errs35 = errors;
if(errors === _errs35){
if(Array.isArray(data7)){
var valid14 = true;
const len3 = data7.length;
for(let i3=0; i3<len3; i3++){
let data8 = data7[i3];
const _errs37 = errors;
if(typeof data8 !== "string"){
const err18 = {instancePath:instancePath+"/scopes_supported/" + i3,schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if(!((((((data8 === "openid") || (data8 === "openid did_authn")) || (data8 === "profile")) || (data8 === "email")) || (data8 === "address")) || (data8 === "phone"))){
const err19 = {instancePath:instancePath+"/scopes_supported/" + i3,schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema186.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
var valid14 = _errs37 === errors;
if(!valid14){
break;
}
}
}
else {
const err20 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/properties/scopes_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
var _valid3 = _errs35 === errors;
valid13 = valid13 || _valid3;
if(!valid13){
const _errs40 = errors;
if(typeof data7 !== "string"){
const err21 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(!((((((data7 === "openid") || (data7 === "openid did_authn")) || (data7 === "profile")) || (data7 === "email")) || (data7 === "address")) || (data7 === "phone"))){
const err22 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema186.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
var _valid3 = _errs40 === errors;
valid13 = valid13 || _valid3;
}
if(!valid13){
const err23 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/properties/scopes_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
validate116.errors = vErrors;
return false;
}
else {
errors = _errs34;
if(vErrors !== null){
if(_errs34){
vErrors.length = _errs34;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_types_supported !== undefined){
let data9 = data.subject_types_supported;
const _errs43 = errors;
const _errs44 = errors;
let valid17 = false;
const _errs45 = errors;
if(errors === _errs45){
if(Array.isArray(data9)){
var valid18 = true;
const len4 = data9.length;
for(let i4=0; i4<len4; i4++){
let data10 = data9[i4];
const _errs47 = errors;
if(typeof data10 !== "string"){
const err24 = {instancePath:instancePath+"/subject_types_supported/" + i4,schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
if(!((data10 === "public") || (data10 === "pairwise"))){
const err25 = {instancePath:instancePath+"/subject_types_supported/" + i4,schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema188.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
var valid18 = _errs47 === errors;
if(!valid18){
break;
}
}
}
else {
const err26 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/properties/subject_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
var _valid4 = _errs45 === errors;
valid17 = valid17 || _valid4;
if(!valid17){
const _errs50 = errors;
if(typeof data9 !== "string"){
const err27 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
if(!((data9 === "public") || (data9 === "pairwise"))){
const err28 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema188.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
var _valid4 = _errs50 === errors;
valid17 = valid17 || _valid4;
}
if(!valid17){
const err29 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/properties/subject_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
validate116.errors = vErrors;
return false;
}
else {
errors = _errs44;
if(vErrors !== null){
if(_errs44){
vErrors.length = _errs44;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_syntax_types_supported !== undefined){
let data11 = data.subject_syntax_types_supported;
const _errs53 = errors;
if(errors === _errs53){
if(Array.isArray(data11)){
var valid21 = true;
const len5 = data11.length;
for(let i5=0; i5<len5; i5++){
const _errs55 = errors;
if(typeof data11[i5] !== "string"){
validate116.errors = [{instancePath:instancePath+"/subject_syntax_types_supported/" + i5,schemaPath:"#/properties/subject_syntax_types_supported/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid21 = _errs55 === errors;
if(!valid21){
break;
}
}
}
else {
validate116.errors = [{instancePath:instancePath+"/subject_syntax_types_supported",schemaPath:"#/properties/subject_syntax_types_supported/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs53 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.vp_formats !== undefined){
const _errs57 = errors;
var valid0 = _errs57 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_name !== undefined){
const _errs59 = errors;
var valid0 = _errs59 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.logo_uri !== undefined){
const _errs61 = errors;
var valid0 = _errs61 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_purpose !== undefined){
const _errs63 = errors;
var valid0 = _errs63 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate116.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate116.errors = vErrors;
return errors === 0;
}

const schema193 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV1"}}},"required":["id","input_descriptors"],"additionalProperties":false};
const schema194 = {"type":"object","properties":{"jwt":{"$ref":"#/definitions/JwtObject"},"jwt_vc":{"$ref":"#/definitions/JwtObject"},"jwt_vc_json":{"$ref":"#/definitions/JwtObject"},"jwt_vp":{"$ref":"#/definitions/JwtObject"},"jwt_vp_json":{"$ref":"#/definitions/JwtObject"},"ldp":{"$ref":"#/definitions/LdpObject"},"ldp_vc":{"$ref":"#/definitions/LdpObject"},"ldp_vp":{"$ref":"#/definitions/LdpObject"},"di":{"$ref":"#/definitions/DiObject"},"di_vc":{"$ref":"#/definitions/DiObject"},"di_vp":{"$ref":"#/definitions/DiObject"},"vc+sd-jwt":{"$ref":"#/definitions/SdJwtObject"},"mso_mdoc":{"$ref":"#/definitions/MsoMdocObject"}},"additionalProperties":false};
const schema195 = {"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false};
const schema200 = {"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}}},"required":["proof_type"],"additionalProperties":false};
const schema203 = {"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}},"cryptosuite":{"type":"array","items":{"type":"string"}}},"required":["proof_type","cryptosuite"],"additionalProperties":false};
const schema206 = {"type":"object","properties":{"sd-jwt_alg_values":{"type":"array","items":{"type":"string"}},"kb-jwt_alg_values":{"type":"array","items":{"type":"string"}}},"additionalProperties":false};
const schema207 = {"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false};

function validate119(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema194.properties, key0))){
validate119.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.jwt !== undefined){
let data0 = data.jwt;
const _errs2 = errors;
const _errs3 = errors;
if(errors === _errs3){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
let missing0;
if((data0.alg === undefined) && (missing0 = "alg")){
validate119.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs5 = errors;
for(const key1 in data0){
if(!(key1 === "alg")){
validate119.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs5 === errors){
if(data0.alg !== undefined){
let data1 = data0.alg;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data1)){
var valid3 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(typeof data1[i0] !== "string"){
validate119.errors = [{instancePath:instancePath+"/jwt/alg/" + i0,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid3 = _errs8 === errors;
if(!valid3){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/jwt/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vc !== undefined){
let data3 = data.jwt_vc;
const _errs10 = errors;
const _errs11 = errors;
if(errors === _errs11){
if(data3 && typeof data3 == "object" && !Array.isArray(data3)){
let missing1;
if((data3.alg === undefined) && (missing1 = "alg")){
validate119.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
const _errs13 = errors;
for(const key2 in data3){
if(!(key2 === "alg")){
validate119.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs13 === errors){
if(data3.alg !== undefined){
let data4 = data3.alg;
const _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data4)){
var valid6 = true;
const len1 = data4.length;
for(let i1=0; i1<len1; i1++){
const _errs16 = errors;
if(typeof data4[i1] !== "string"){
validate119.errors = [{instancePath:instancePath+"/jwt_vc/alg/" + i1,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs16 === errors;
if(!valid6){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/jwt_vc/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vc_json !== undefined){
let data6 = data.jwt_vc_json;
const _errs18 = errors;
const _errs19 = errors;
if(errors === _errs19){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
let missing2;
if((data6.alg === undefined) && (missing2 = "alg")){
validate119.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
const _errs21 = errors;
for(const key3 in data6){
if(!(key3 === "alg")){
validate119.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs21 === errors){
if(data6.alg !== undefined){
let data7 = data6.alg;
const _errs22 = errors;
if(errors === _errs22){
if(Array.isArray(data7)){
var valid9 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs24 = errors;
if(typeof data7[i2] !== "string"){
validate119.errors = [{instancePath:instancePath+"/jwt_vc_json/alg/" + i2,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs24 === errors;
if(!valid9){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/jwt_vc_json/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vp !== undefined){
let data9 = data.jwt_vp;
const _errs26 = errors;
const _errs27 = errors;
if(errors === _errs27){
if(data9 && typeof data9 == "object" && !Array.isArray(data9)){
let missing3;
if((data9.alg === undefined) && (missing3 = "alg")){
validate119.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];
return false;
}
else {
const _errs29 = errors;
for(const key4 in data9){
if(!(key4 === "alg")){
validate119.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs29 === errors){
if(data9.alg !== undefined){
let data10 = data9.alg;
const _errs30 = errors;
if(errors === _errs30){
if(Array.isArray(data10)){
var valid12 = true;
const len3 = data10.length;
for(let i3=0; i3<len3; i3++){
const _errs32 = errors;
if(typeof data10[i3] !== "string"){
validate119.errors = [{instancePath:instancePath+"/jwt_vp/alg/" + i3,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs32 === errors;
if(!valid12){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/jwt_vp/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vp_json !== undefined){
let data12 = data.jwt_vp_json;
const _errs34 = errors;
const _errs35 = errors;
if(errors === _errs35){
if(data12 && typeof data12 == "object" && !Array.isArray(data12)){
let missing4;
if((data12.alg === undefined) && (missing4 = "alg")){
validate119.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];
return false;
}
else {
const _errs37 = errors;
for(const key5 in data12){
if(!(key5 === "alg")){
validate119.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs37 === errors){
if(data12.alg !== undefined){
let data13 = data12.alg;
const _errs38 = errors;
if(errors === _errs38){
if(Array.isArray(data13)){
var valid15 = true;
const len4 = data13.length;
for(let i4=0; i4<len4; i4++){
const _errs40 = errors;
if(typeof data13[i4] !== "string"){
validate119.errors = [{instancePath:instancePath+"/jwt_vp_json/alg/" + i4,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid15 = _errs40 === errors;
if(!valid15){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/jwt_vp_json/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp !== undefined){
let data15 = data.ldp;
const _errs42 = errors;
const _errs43 = errors;
if(errors === _errs43){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
let missing5;
if((data15.proof_type === undefined) && (missing5 = "proof_type")){
validate119.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"}];
return false;
}
else {
const _errs45 = errors;
for(const key6 in data15){
if(!(key6 === "proof_type")){
validate119.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key6},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs45 === errors){
if(data15.proof_type !== undefined){
let data16 = data15.proof_type;
const _errs46 = errors;
if(errors === _errs46){
if(Array.isArray(data16)){
var valid18 = true;
const len5 = data16.length;
for(let i5=0; i5<len5; i5++){
const _errs48 = errors;
if(typeof data16[i5] !== "string"){
validate119.errors = [{instancePath:instancePath+"/ldp/proof_type/" + i5,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid18 = _errs48 === errors;
if(!valid18){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/ldp/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp_vc !== undefined){
let data18 = data.ldp_vc;
const _errs50 = errors;
const _errs51 = errors;
if(errors === _errs51){
if(data18 && typeof data18 == "object" && !Array.isArray(data18)){
let missing6;
if((data18.proof_type === undefined) && (missing6 = "proof_type")){
validate119.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"}];
return false;
}
else {
const _errs53 = errors;
for(const key7 in data18){
if(!(key7 === "proof_type")){
validate119.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key7},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs53 === errors){
if(data18.proof_type !== undefined){
let data19 = data18.proof_type;
const _errs54 = errors;
if(errors === _errs54){
if(Array.isArray(data19)){
var valid21 = true;
const len6 = data19.length;
for(let i6=0; i6<len6; i6++){
const _errs56 = errors;
if(typeof data19[i6] !== "string"){
validate119.errors = [{instancePath:instancePath+"/ldp_vc/proof_type/" + i6,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid21 = _errs56 === errors;
if(!valid21){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/ldp_vc/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs50 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp_vp !== undefined){
let data21 = data.ldp_vp;
const _errs58 = errors;
const _errs59 = errors;
if(errors === _errs59){
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
let missing7;
if((data21.proof_type === undefined) && (missing7 = "proof_type")){
validate119.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"}];
return false;
}
else {
const _errs61 = errors;
for(const key8 in data21){
if(!(key8 === "proof_type")){
validate119.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key8},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs61 === errors){
if(data21.proof_type !== undefined){
let data22 = data21.proof_type;
const _errs62 = errors;
if(errors === _errs62){
if(Array.isArray(data22)){
var valid24 = true;
const len7 = data22.length;
for(let i7=0; i7<len7; i7++){
const _errs64 = errors;
if(typeof data22[i7] !== "string"){
validate119.errors = [{instancePath:instancePath+"/ldp_vp/proof_type/" + i7,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid24 = _errs64 === errors;
if(!valid24){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/ldp_vp/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs58 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di !== undefined){
let data24 = data.di;
const _errs66 = errors;
const _errs67 = errors;
if(errors === _errs67){
if(data24 && typeof data24 == "object" && !Array.isArray(data24)){
let missing8;
if(((data24.proof_type === undefined) && (missing8 = "proof_type")) || ((data24.cryptosuite === undefined) && (missing8 = "cryptosuite"))){
validate119.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing8},message:"must have required property '"+missing8+"'"}];
return false;
}
else {
const _errs69 = errors;
for(const key9 in data24){
if(!((key9 === "proof_type") || (key9 === "cryptosuite"))){
validate119.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key9},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs69 === errors){
if(data24.proof_type !== undefined){
let data25 = data24.proof_type;
const _errs70 = errors;
if(errors === _errs70){
if(Array.isArray(data25)){
var valid27 = true;
const len8 = data25.length;
for(let i8=0; i8<len8; i8++){
const _errs72 = errors;
if(typeof data25[i8] !== "string"){
validate119.errors = [{instancePath:instancePath+"/di/proof_type/" + i8,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid27 = _errs72 === errors;
if(!valid27){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/di/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid26 = _errs70 === errors;
}
else {
var valid26 = true;
}
if(valid26){
if(data24.cryptosuite !== undefined){
let data27 = data24.cryptosuite;
const _errs74 = errors;
if(errors === _errs74){
if(Array.isArray(data27)){
var valid28 = true;
const len9 = data27.length;
for(let i9=0; i9<len9; i9++){
const _errs76 = errors;
if(typeof data27[i9] !== "string"){
validate119.errors = [{instancePath:instancePath+"/di/cryptosuite/" + i9,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid28 = _errs76 === errors;
if(!valid28){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/di/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid26 = _errs74 === errors;
}
else {
var valid26 = true;
}
}
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs66 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di_vc !== undefined){
let data29 = data.di_vc;
const _errs78 = errors;
const _errs79 = errors;
if(errors === _errs79){
if(data29 && typeof data29 == "object" && !Array.isArray(data29)){
let missing9;
if(((data29.proof_type === undefined) && (missing9 = "proof_type")) || ((data29.cryptosuite === undefined) && (missing9 = "cryptosuite"))){
validate119.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing9},message:"must have required property '"+missing9+"'"}];
return false;
}
else {
const _errs81 = errors;
for(const key10 in data29){
if(!((key10 === "proof_type") || (key10 === "cryptosuite"))){
validate119.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key10},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs81 === errors){
if(data29.proof_type !== undefined){
let data30 = data29.proof_type;
const _errs82 = errors;
if(errors === _errs82){
if(Array.isArray(data30)){
var valid31 = true;
const len10 = data30.length;
for(let i10=0; i10<len10; i10++){
const _errs84 = errors;
if(typeof data30[i10] !== "string"){
validate119.errors = [{instancePath:instancePath+"/di_vc/proof_type/" + i10,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid31 = _errs84 === errors;
if(!valid31){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/di_vc/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid30 = _errs82 === errors;
}
else {
var valid30 = true;
}
if(valid30){
if(data29.cryptosuite !== undefined){
let data32 = data29.cryptosuite;
const _errs86 = errors;
if(errors === _errs86){
if(Array.isArray(data32)){
var valid32 = true;
const len11 = data32.length;
for(let i11=0; i11<len11; i11++){
const _errs88 = errors;
if(typeof data32[i11] !== "string"){
validate119.errors = [{instancePath:instancePath+"/di_vc/cryptosuite/" + i11,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid32 = _errs88 === errors;
if(!valid32){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/di_vc/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid30 = _errs86 === errors;
}
else {
var valid30 = true;
}
}
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs78 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di_vp !== undefined){
let data34 = data.di_vp;
const _errs90 = errors;
const _errs91 = errors;
if(errors === _errs91){
if(data34 && typeof data34 == "object" && !Array.isArray(data34)){
let missing10;
if(((data34.proof_type === undefined) && (missing10 = "proof_type")) || ((data34.cryptosuite === undefined) && (missing10 = "cryptosuite"))){
validate119.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing10},message:"must have required property '"+missing10+"'"}];
return false;
}
else {
const _errs93 = errors;
for(const key11 in data34){
if(!((key11 === "proof_type") || (key11 === "cryptosuite"))){
validate119.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key11},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs93 === errors){
if(data34.proof_type !== undefined){
let data35 = data34.proof_type;
const _errs94 = errors;
if(errors === _errs94){
if(Array.isArray(data35)){
var valid35 = true;
const len12 = data35.length;
for(let i12=0; i12<len12; i12++){
const _errs96 = errors;
if(typeof data35[i12] !== "string"){
validate119.errors = [{instancePath:instancePath+"/di_vp/proof_type/" + i12,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid35 = _errs96 === errors;
if(!valid35){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/di_vp/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid34 = _errs94 === errors;
}
else {
var valid34 = true;
}
if(valid34){
if(data34.cryptosuite !== undefined){
let data37 = data34.cryptosuite;
const _errs98 = errors;
if(errors === _errs98){
if(Array.isArray(data37)){
var valid36 = true;
const len13 = data37.length;
for(let i13=0; i13<len13; i13++){
const _errs100 = errors;
if(typeof data37[i13] !== "string"){
validate119.errors = [{instancePath:instancePath+"/di_vp/cryptosuite/" + i13,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid36 = _errs100 === errors;
if(!valid36){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/di_vp/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid34 = _errs98 === errors;
}
else {
var valid34 = true;
}
}
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs90 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data["vc+sd-jwt"] !== undefined){
let data39 = data["vc+sd-jwt"];
const _errs102 = errors;
const _errs103 = errors;
if(errors === _errs103){
if(data39 && typeof data39 == "object" && !Array.isArray(data39)){
const _errs105 = errors;
for(const key12 in data39){
if(!((key12 === "sd-jwt_alg_values") || (key12 === "kb-jwt_alg_values"))){
validate119.errors = [{instancePath:instancePath+"/vc+sd-jwt",schemaPath:"#/definitions/SdJwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key12},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs105 === errors){
if(data39["sd-jwt_alg_values"] !== undefined){
let data40 = data39["sd-jwt_alg_values"];
const _errs106 = errors;
if(errors === _errs106){
if(Array.isArray(data40)){
var valid39 = true;
const len14 = data40.length;
for(let i14=0; i14<len14; i14++){
const _errs108 = errors;
if(typeof data40[i14] !== "string"){
validate119.errors = [{instancePath:instancePath+"/vc+sd-jwt/sd-jwt_alg_values/" + i14,schemaPath:"#/definitions/SdJwtObject/properties/sd-jwt_alg_values/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid39 = _errs108 === errors;
if(!valid39){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/vc+sd-jwt/sd-jwt_alg_values",schemaPath:"#/definitions/SdJwtObject/properties/sd-jwt_alg_values/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs106 === errors;
}
else {
var valid38 = true;
}
if(valid38){
if(data39["kb-jwt_alg_values"] !== undefined){
let data42 = data39["kb-jwt_alg_values"];
const _errs110 = errors;
if(errors === _errs110){
if(Array.isArray(data42)){
var valid40 = true;
const len15 = data42.length;
for(let i15=0; i15<len15; i15++){
const _errs112 = errors;
if(typeof data42[i15] !== "string"){
validate119.errors = [{instancePath:instancePath+"/vc+sd-jwt/kb-jwt_alg_values/" + i15,schemaPath:"#/definitions/SdJwtObject/properties/kb-jwt_alg_values/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid40 = _errs112 === errors;
if(!valid40){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/vc+sd-jwt/kb-jwt_alg_values",schemaPath:"#/definitions/SdJwtObject/properties/kb-jwt_alg_values/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs110 === errors;
}
else {
var valid38 = true;
}
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/vc+sd-jwt",schemaPath:"#/definitions/SdJwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs102 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.mso_mdoc !== undefined){
let data44 = data.mso_mdoc;
const _errs114 = errors;
const _errs115 = errors;
if(errors === _errs115){
if(data44 && typeof data44 == "object" && !Array.isArray(data44)){
let missing11;
if((data44.alg === undefined) && (missing11 = "alg")){
validate119.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/required",keyword:"required",params:{missingProperty: missing11},message:"must have required property '"+missing11+"'"}];
return false;
}
else {
const _errs117 = errors;
for(const key13 in data44){
if(!(key13 === "alg")){
validate119.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key13},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs117 === errors){
if(data44.alg !== undefined){
let data45 = data44.alg;
const _errs118 = errors;
if(errors === _errs118){
if(Array.isArray(data45)){
var valid43 = true;
const len16 = data45.length;
for(let i16=0; i16<len16; i16++){
const _errs120 = errors;
if(typeof data45[i16] !== "string"){
validate119.errors = [{instancePath:instancePath+"/mso_mdoc/alg/" + i16,schemaPath:"#/definitions/MsoMdocObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid43 = _errs120 === errors;
if(!valid43){
break;
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/mso_mdoc/alg",schemaPath:"#/definitions/MsoMdocObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate119.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs114 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate119.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate119.errors = vErrors;
return errors === 0;
}

const schema208 = {"type":"object","properties":{"name":{"type":"string"},"purpose":{"type":"string"},"rule":{"$ref":"#/definitions/Rules"},"count":{"type":"number"},"min":{"type":"number"},"max":{"type":"number"},"from":{"type":"string"},"from_nested":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}}},"required":["rule"],"additionalProperties":false};
const schema209 = {"type":"string","enum":["all","pick"]};
const wrapper8 = {validate: validate121};

function validate121(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.rule === undefined) && (missing0 = "rule")){
validate121.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((((((key0 === "name") || (key0 === "purpose")) || (key0 === "rule")) || (key0 === "count")) || (key0 === "min")) || (key0 === "max")) || (key0 === "from")) || (key0 === "from_nested"))){
validate121.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.name !== undefined){
const _errs2 = errors;
if(typeof data.name !== "string"){
validate121.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs4 = errors;
if(typeof data.purpose !== "string"){
validate121.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rule !== undefined){
let data2 = data.rule;
const _errs6 = errors;
if(typeof data2 !== "string"){
validate121.errors = [{instancePath:instancePath+"/rule",schemaPath:"#/definitions/Rules/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data2 === "all") || (data2 === "pick"))){
validate121.errors = [{instancePath:instancePath+"/rule",schemaPath:"#/definitions/Rules/enum",keyword:"enum",params:{allowedValues: schema209.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.count !== undefined){
const _errs9 = errors;
if(!(typeof data.count == "number")){
validate121.errors = [{instancePath:instancePath+"/count",schemaPath:"#/properties/count/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.min !== undefined){
const _errs11 = errors;
if(!(typeof data.min == "number")){
validate121.errors = [{instancePath:instancePath+"/min",schemaPath:"#/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.max !== undefined){
const _errs13 = errors;
if(!(typeof data.max == "number")){
validate121.errors = [{instancePath:instancePath+"/max",schemaPath:"#/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.from !== undefined){
const _errs15 = errors;
if(typeof data.from !== "string"){
validate121.errors = [{instancePath:instancePath+"/from",schemaPath:"#/properties/from/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.from_nested !== undefined){
let data7 = data.from_nested;
const _errs17 = errors;
if(errors === _errs17){
if(Array.isArray(data7)){
var valid2 = true;
const len0 = data7.length;
for(let i0=0; i0<len0; i0++){
const _errs19 = errors;
if(!(wrapper8.validate(data7[i0], {instancePath:instancePath+"/from_nested/" + i0,parentData:data7,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? wrapper8.validate.errors : vErrors.concat(wrapper8.validate.errors);
errors = vErrors.length;
}
var valid2 = _errs19 === errors;
if(!valid2){
break;
}
}
}
else {
validate121.errors = [{instancePath:instancePath+"/from_nested",schemaPath:"#/properties/from_nested/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
else {
validate121.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate121.errors = vErrors;
return errors === 0;
}

const schema210 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"group":{"type":"array","items":{"type":"string"}},"schema":{"type":"array","items":{"$ref":"#/definitions/Schema"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV1"}},"required":["id","schema"],"additionalProperties":false};
const schema211 = {"type":"object","properties":{"uri":{"type":"string"},"required":{"type":"boolean"}},"required":["uri"],"additionalProperties":false};
const schema212 = {"type":"object","properties":{"manifest":{"type":"string"}},"additionalProperties":{}};
const schema213 = {"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV1"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false};
const schema214 = {"type":"string","enum":["required","preferred"]};
const schema215 = {"type":"object","properties":{"active":{"$ref":"#/definitions/PdStatus"},"suspended":{"$ref":"#/definitions/PdStatus"},"revoked":{"$ref":"#/definitions/PdStatus"}},"additionalProperties":false};
const schema216 = {"type":"object","properties":{"directive":{"$ref":"#/definitions/Directives"}},"additionalProperties":false};
const schema217 = {"type":"string","enum":["required","allowed","disallowed"]};

function validate126(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(key0 === "directive")){
validate126.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.directive !== undefined){
let data0 = data.directive;
if(typeof data0 !== "string"){
validate126.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Directives/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!(((data0 === "required") || (data0 === "allowed")) || (data0 === "disallowed"))){
validate126.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Directives/enum",keyword:"enum",params:{allowedValues: schema217.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate126.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate126.errors = vErrors;
return errors === 0;
}


function validate125(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(((key0 === "active") || (key0 === "suspended")) || (key0 === "revoked"))){
validate125.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.active !== undefined){
const _errs2 = errors;
if(!(validate126(data.active, {instancePath:instancePath+"/active",parentData:data,parentDataProperty:"active",rootData}))){
vErrors = vErrors === null ? validate126.errors : vErrors.concat(validate126.errors);
errors = vErrors.length;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suspended !== undefined){
const _errs3 = errors;
if(!(validate126(data.suspended, {instancePath:instancePath+"/suspended",parentData:data,parentDataProperty:"suspended",rootData}))){
vErrors = vErrors === null ? validate126.errors : vErrors.concat(validate126.errors);
errors = vErrors.length;
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.revoked !== undefined){
const _errs4 = errors;
if(!(validate126(data.revoked, {instancePath:instancePath+"/revoked",parentData:data,parentDataProperty:"revoked",rootData}))){
vErrors = vErrors === null ? validate126.errors : vErrors.concat(validate126.errors);
errors = vErrors.length;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate125.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate125.errors = vErrors;
return errors === 0;
}

const schema218 = {"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV1"},"predicate":{"$ref":"#/definitions/Optionality"}},"required":["path"],"additionalProperties":false};
const schema219 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"}},"required":["type"],"additionalProperties":false};
const schema220 = {"type":["boolean","number","string"]};
const schema222 = {"type":["number","string"]};

function validate132(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.type === undefined) && (missing0 = "type")){
validate132.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema219.properties, key0))){
validate132.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate132.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema220.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate132.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema220.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate132.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate132.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate132.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate132.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs18 = errors;
if(!(typeof data.minLength == "number")){
validate132.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs20 = errors;
if(!(typeof data.maxLength == "number")){
validate132.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data8 = data.minimum;
const _errs22 = errors;
if((!(typeof data8 == "number")) && (typeof data8 !== "string")){
validate132.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data9 = data.maximum;
const _errs25 = errors;
if((!(typeof data9 == "number")) && (typeof data9 !== "string")){
validate132.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data10 = data.not;
const _errs28 = errors;
if(!(data10 && typeof data10 == "object" && !Array.isArray(data10))){
validate132.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs30 = errors;
if(typeof data.pattern !== "string"){
validate132.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs32 = errors;
if(typeof data.type !== "string"){
validate132.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs32 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate132.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate132.errors = vErrors;
return errors === 0;
}


function validate131(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.path === undefined) && (missing0 = "path")){
validate131.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((key0 === "id") || (key0 === "path")) || (key0 === "purpose")) || (key0 === "filter")) || (key0 === "predicate"))){
validate131.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate131.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.path !== undefined){
let data1 = data.path;
const _errs4 = errors;
if(errors === _errs4){
if(Array.isArray(data1)){
var valid1 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs6 = errors;
if(typeof data1[i0] !== "string"){
validate131.errors = [{instancePath:instancePath+"/path/" + i0,schemaPath:"#/properties/path/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs6 === errors;
if(!valid1){
break;
}
}
}
else {
validate131.errors = [{instancePath:instancePath+"/path",schemaPath:"#/properties/path/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs8 = errors;
if(typeof data.purpose !== "string"){
validate131.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.filter !== undefined){
const _errs10 = errors;
if(!(validate132(data.filter, {instancePath:instancePath+"/filter",parentData:data,parentDataProperty:"filter",rootData}))){
vErrors = vErrors === null ? validate132.errors : vErrors.concat(validate132.errors);
errors = vErrors.length;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.predicate !== undefined){
let data5 = data.predicate;
const _errs11 = errors;
if(typeof data5 !== "string"){
validate131.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data5 === "required") || (data5 === "preferred"))){
validate131.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema214.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate131.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate131.errors = vErrors;
return errors === 0;
}

const schema228 = {"type":"object","properties":{"field_id":{"type":"array","items":{"type":"string"}},"directive":{"$ref":"#/definitions/Optionality"}},"required":["field_id","directive"],"additionalProperties":false};

function validate135(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.field_id === undefined) && (missing0 = "field_id")) || ((data.directive === undefined) && (missing0 = "directive"))){
validate135.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((key0 === "field_id") || (key0 === "directive"))){
validate135.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.field_id !== undefined){
let data0 = data.field_id;
const _errs2 = errors;
if(errors === _errs2){
if(Array.isArray(data0)){
var valid1 = true;
const len0 = data0.length;
for(let i0=0; i0<len0; i0++){
const _errs4 = errors;
if(typeof data0[i0] !== "string"){
validate135.errors = [{instancePath:instancePath+"/field_id/" + i0,schemaPath:"#/properties/field_id/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs4 === errors;
if(!valid1){
break;
}
}
}
else {
validate135.errors = [{instancePath:instancePath+"/field_id",schemaPath:"#/properties/field_id/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.directive !== undefined){
let data2 = data.directive;
const _errs6 = errors;
if(typeof data2 !== "string"){
validate135.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data2 === "required") || (data2 === "preferred"))){
validate135.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema214.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate135.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate135.errors = vErrors;
return errors === 0;
}


function validate124(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!((((((key0 === "limit_disclosure") || (key0 === "statuses")) || (key0 === "fields")) || (key0 === "subject_is_issuer")) || (key0 === "is_holder")) || (key0 === "same_subject"))){
validate124.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.limit_disclosure !== undefined){
let data0 = data.limit_disclosure;
const _errs2 = errors;
if(typeof data0 !== "string"){
validate124.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data0 === "required") || (data0 === "preferred"))){
validate124.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema214.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.statuses !== undefined){
const _errs5 = errors;
if(!(validate125(data.statuses, {instancePath:instancePath+"/statuses",parentData:data,parentDataProperty:"statuses",rootData}))){
vErrors = vErrors === null ? validate125.errors : vErrors.concat(validate125.errors);
errors = vErrors.length;
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.fields !== undefined){
let data2 = data.fields;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data2)){
var valid2 = true;
const len0 = data2.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(!(validate131(data2[i0], {instancePath:instancePath+"/fields/" + i0,parentData:data2,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate131.errors : vErrors.concat(validate131.errors);
errors = vErrors.length;
}
var valid2 = _errs8 === errors;
if(!valid2){
break;
}
}
}
else {
validate124.errors = [{instancePath:instancePath+"/fields",schemaPath:"#/properties/fields/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_is_issuer !== undefined){
let data4 = data.subject_is_issuer;
const _errs9 = errors;
if(typeof data4 !== "string"){
validate124.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data4 === "required") || (data4 === "preferred"))){
validate124.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema214.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.is_holder !== undefined){
let data5 = data.is_holder;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data5)){
var valid4 = true;
const len1 = data5.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate135(data5[i1], {instancePath:instancePath+"/is_holder/" + i1,parentData:data5,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate135.errors : vErrors.concat(validate135.errors);
errors = vErrors.length;
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate124.errors = [{instancePath:instancePath+"/is_holder",schemaPath:"#/properties/is_holder/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.same_subject !== undefined){
let data7 = data.same_subject;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data7)){
var valid5 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs17 = errors;
if(!(validate135(data7[i2], {instancePath:instancePath+"/same_subject/" + i2,parentData:data7,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate135.errors : vErrors.concat(validate135.errors);
errors = vErrors.length;
}
var valid5 = _errs17 === errors;
if(!valid5){
break;
}
}
}
else {
validate124.errors = [{instancePath:instancePath+"/same_subject",schemaPath:"#/properties/same_subject/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate124.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate124.errors = vErrors;
return errors === 0;
}


function validate123(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.schema === undefined) && (missing0 = "schema"))){
validate123.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "group")) || (key0 === "schema")) || (key0 === "issuance")) || (key0 === "constraints"))){
validate123.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate123.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate123.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate123.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.group !== undefined){
let data3 = data.group;
const _errs8 = errors;
if(errors === _errs8){
if(Array.isArray(data3)){
var valid1 = true;
const len0 = data3.length;
for(let i0=0; i0<len0; i0++){
const _errs10 = errors;
if(typeof data3[i0] !== "string"){
validate123.errors = [{instancePath:instancePath+"/group/" + i0,schemaPath:"#/properties/group/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs10 === errors;
if(!valid1){
break;
}
}
}
else {
validate123.errors = [{instancePath:instancePath+"/group",schemaPath:"#/properties/group/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.schema !== undefined){
let data5 = data.schema;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data5)){
var valid2 = true;
const len1 = data5.length;
for(let i1=0; i1<len1; i1++){
let data6 = data5[i1];
const _errs14 = errors;
const _errs15 = errors;
if(errors === _errs15){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
let missing1;
if((data6.uri === undefined) && (missing1 = "uri")){
validate123.errors = [{instancePath:instancePath+"/schema/" + i1,schemaPath:"#/definitions/Schema/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
const _errs17 = errors;
for(const key1 in data6){
if(!((key1 === "uri") || (key1 === "required"))){
validate123.errors = [{instancePath:instancePath+"/schema/" + i1,schemaPath:"#/definitions/Schema/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs17 === errors){
if(data6.uri !== undefined){
const _errs18 = errors;
if(typeof data6.uri !== "string"){
validate123.errors = [{instancePath:instancePath+"/schema/" + i1+"/uri",schemaPath:"#/definitions/Schema/properties/uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs18 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data6.required !== undefined){
const _errs20 = errors;
if(typeof data6.required !== "boolean"){
validate123.errors = [{instancePath:instancePath+"/schema/" + i1+"/required",schemaPath:"#/definitions/Schema/properties/required/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid4 = _errs20 === errors;
}
else {
var valid4 = true;
}
}
}
}
}
else {
validate123.errors = [{instancePath:instancePath+"/schema/" + i1,schemaPath:"#/definitions/Schema/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid2 = _errs14 === errors;
if(!valid2){
break;
}
}
}
else {
validate123.errors = [{instancePath:instancePath+"/schema",schemaPath:"#/properties/schema/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.issuance !== undefined){
let data9 = data.issuance;
const _errs22 = errors;
if(errors === _errs22){
if(Array.isArray(data9)){
var valid5 = true;
const len2 = data9.length;
for(let i2=0; i2<len2; i2++){
let data10 = data9[i2];
const _errs24 = errors;
const _errs25 = errors;
if(errors === _errs25){
if(data10 && typeof data10 == "object" && !Array.isArray(data10)){
if(data10.manifest !== undefined){
if(typeof data10.manifest !== "string"){
validate123.errors = [{instancePath:instancePath+"/issuance/" + i2+"/manifest",schemaPath:"#/definitions/Issuance/properties/manifest/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
else {
validate123.errors = [{instancePath:instancePath+"/issuance/" + i2,schemaPath:"#/definitions/Issuance/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid5 = _errs24 === errors;
if(!valid5){
break;
}
}
}
else {
validate123.errors = [{instancePath:instancePath+"/issuance",schemaPath:"#/properties/issuance/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.constraints !== undefined){
const _errs30 = errors;
if(!(validate124(data.constraints, {instancePath:instancePath+"/constraints",parentData:data,parentDataProperty:"constraints",rootData}))){
vErrors = vErrors === null ? validate124.errors : vErrors.concat(validate124.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
else {
validate123.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate123.errors = vErrors;
return errors === 0;
}


function validate118(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.input_descriptors === undefined) && (missing0 = "input_descriptors"))){
validate118.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "submission_requirements")) || (key0 === "input_descriptors"))){
validate118.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate118.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate118.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate118.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs8 = errors;
if(!(validate119(data.format, {instancePath:instancePath+"/format",parentData:data,parentDataProperty:"format",rootData}))){
vErrors = vErrors === null ? validate119.errors : vErrors.concat(validate119.errors);
errors = vErrors.length;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.submission_requirements !== undefined){
let data4 = data.submission_requirements;
const _errs9 = errors;
if(errors === _errs9){
if(Array.isArray(data4)){
var valid1 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs11 = errors;
if(!(validate121(data4[i0], {instancePath:instancePath+"/submission_requirements/" + i0,parentData:data4,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate121.errors : vErrors.concat(validate121.errors);
errors = vErrors.length;
}
var valid1 = _errs11 === errors;
if(!valid1){
break;
}
}
}
else {
validate118.errors = [{instancePath:instancePath+"/submission_requirements",schemaPath:"#/properties/submission_requirements/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.input_descriptors !== undefined){
let data6 = data.input_descriptors;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data6)){
var valid2 = true;
const len1 = data6.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate123(data6[i1], {instancePath:instancePath+"/input_descriptors/" + i1,parentData:data6,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate123.errors : vErrors.concat(validate123.errors);
errors = vErrors.length;
}
var valid2 = _errs14 === errors;
if(!valid2){
break;
}
}
}
else {
validate118.errors = [{instancePath:instancePath+"/input_descriptors",schemaPath:"#/properties/input_descriptors/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
else {
validate118.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate118.errors = vErrors;
return errors === 0;
}

const schema230 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV2"}},"frame":{"type":"object"}},"required":["id","input_descriptors"],"additionalProperties":false};
const schema231 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"group":{"type":"array","items":{"type":"string"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV2"}},"required":["id","constraints"],"additionalProperties":false};
const schema233 = {"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV2"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false};
const schema235 = {"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV2"},"predicate":{"$ref":"#/definitions/Optionality"},"intent_to_retain":{"type":"boolean"},"name":{"type":"string"},"optional":{"type":"boolean"}},"required":["path"],"additionalProperties":false};
const schema236 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false};
const schema243 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"additionalProperties":false};
const wrapper9 = {validate: validate150};
const schema250 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false};
const wrapper11 = {validate: validate151};

function validate151(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.type === undefined) && (missing0 = "type")){
validate151.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema250.properties, key0))){
validate151.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate151.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema220.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate151.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema220.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate151.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate151.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate151.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate151.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMaximum !== undefined){
const _errs18 = errors;
if(typeof data.formatMaximum !== "string"){
validate151.errors = [{instancePath:instancePath+"/formatMaximum",schemaPath:"#/properties/formatMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMinimum !== undefined){
const _errs20 = errors;
if(typeof data.formatMinimum !== "string"){
validate151.errors = [{instancePath:instancePath+"/formatMinimum",schemaPath:"#/properties/formatMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMaximum !== undefined){
const _errs22 = errors;
if(typeof data.formatExclusiveMaximum !== "string"){
validate151.errors = [{instancePath:instancePath+"/formatExclusiveMaximum",schemaPath:"#/properties/formatExclusiveMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMinimum !== undefined){
const _errs24 = errors;
if(typeof data.formatExclusiveMinimum !== "string"){
validate151.errors = [{instancePath:instancePath+"/formatExclusiveMinimum",schemaPath:"#/properties/formatExclusiveMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs26 = errors;
if(!(typeof data.minLength == "number")){
validate151.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs28 = errors;
if(!(typeof data.maxLength == "number")){
validate151.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data12 = data.minimum;
const _errs30 = errors;
if((!(typeof data12 == "number")) && (typeof data12 !== "string")){
validate151.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data13 = data.maximum;
const _errs33 = errors;
if((!(typeof data13 == "number")) && (typeof data13 !== "string")){
validate151.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data14 = data.not;
const _errs36 = errors;
if(!(data14 && typeof data14 == "object" && !Array.isArray(data14))){
validate151.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs38 = errors;
if(typeof data.pattern !== "string"){
validate151.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs40 = errors;
if(typeof data.type !== "string"){
validate151.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.contains !== undefined){
const _errs42 = errors;
if(!(wrapper9.validate(data.contains, {instancePath:instancePath+"/contains",parentData:data,parentDataProperty:"contains",rootData}))){
vErrors = vErrors === null ? wrapper9.validate.errors : vErrors.concat(wrapper9.validate.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.items !== undefined){
const _errs43 = errors;
if(!(wrapper11.validate(data.items, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
vErrors = vErrors === null ? wrapper11.validate.errors : vErrors.concat(wrapper11.validate.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate151.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate151.errors = vErrors;
return errors === 0;
}


function validate150(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema243.properties, key0))){
validate150.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate150.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema220.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate150.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema220.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate150.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate150.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate150.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate150.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMaximum !== undefined){
const _errs18 = errors;
if(typeof data.formatMaximum !== "string"){
validate150.errors = [{instancePath:instancePath+"/formatMaximum",schemaPath:"#/properties/formatMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMinimum !== undefined){
const _errs20 = errors;
if(typeof data.formatMinimum !== "string"){
validate150.errors = [{instancePath:instancePath+"/formatMinimum",schemaPath:"#/properties/formatMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMaximum !== undefined){
const _errs22 = errors;
if(typeof data.formatExclusiveMaximum !== "string"){
validate150.errors = [{instancePath:instancePath+"/formatExclusiveMaximum",schemaPath:"#/properties/formatExclusiveMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMinimum !== undefined){
const _errs24 = errors;
if(typeof data.formatExclusiveMinimum !== "string"){
validate150.errors = [{instancePath:instancePath+"/formatExclusiveMinimum",schemaPath:"#/properties/formatExclusiveMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs26 = errors;
if(!(typeof data.minLength == "number")){
validate150.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs28 = errors;
if(!(typeof data.maxLength == "number")){
validate150.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data12 = data.minimum;
const _errs30 = errors;
if((!(typeof data12 == "number")) && (typeof data12 !== "string")){
validate150.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data13 = data.maximum;
const _errs33 = errors;
if((!(typeof data13 == "number")) && (typeof data13 !== "string")){
validate150.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data14 = data.not;
const _errs36 = errors;
if(!(data14 && typeof data14 == "object" && !Array.isArray(data14))){
validate150.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs38 = errors;
if(typeof data.pattern !== "string"){
validate150.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs40 = errors;
if(typeof data.type !== "string"){
validate150.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.contains !== undefined){
const _errs42 = errors;
if(!(wrapper9.validate(data.contains, {instancePath:instancePath+"/contains",parentData:data,parentDataProperty:"contains",rootData}))){
vErrors = vErrors === null ? wrapper9.validate.errors : vErrors.concat(wrapper9.validate.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.items !== undefined){
const _errs43 = errors;
if(!(validate151(data.items, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
vErrors = vErrors === null ? validate151.errors : vErrors.concat(validate151.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate150.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate150.errors = vErrors;
return errors === 0;
}


function validate149(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.type === undefined) && (missing0 = "type")){
validate149.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema236.properties, key0))){
validate149.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate149.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema220.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate149.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema220.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate149.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate149.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate149.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate149.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMaximum !== undefined){
const _errs18 = errors;
if(typeof data.formatMaximum !== "string"){
validate149.errors = [{instancePath:instancePath+"/formatMaximum",schemaPath:"#/properties/formatMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMinimum !== undefined){
const _errs20 = errors;
if(typeof data.formatMinimum !== "string"){
validate149.errors = [{instancePath:instancePath+"/formatMinimum",schemaPath:"#/properties/formatMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMaximum !== undefined){
const _errs22 = errors;
if(typeof data.formatExclusiveMaximum !== "string"){
validate149.errors = [{instancePath:instancePath+"/formatExclusiveMaximum",schemaPath:"#/properties/formatExclusiveMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMinimum !== undefined){
const _errs24 = errors;
if(typeof data.formatExclusiveMinimum !== "string"){
validate149.errors = [{instancePath:instancePath+"/formatExclusiveMinimum",schemaPath:"#/properties/formatExclusiveMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs26 = errors;
if(!(typeof data.minLength == "number")){
validate149.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs28 = errors;
if(!(typeof data.maxLength == "number")){
validate149.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data12 = data.minimum;
const _errs30 = errors;
if((!(typeof data12 == "number")) && (typeof data12 !== "string")){
validate149.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data13 = data.maximum;
const _errs33 = errors;
if((!(typeof data13 == "number")) && (typeof data13 !== "string")){
validate149.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema222.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data14 = data.not;
const _errs36 = errors;
if(!(data14 && typeof data14 == "object" && !Array.isArray(data14))){
validate149.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs38 = errors;
if(typeof data.pattern !== "string"){
validate149.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs40 = errors;
if(typeof data.type !== "string"){
validate149.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.contains !== undefined){
const _errs42 = errors;
if(!(validate150(data.contains, {instancePath:instancePath+"/contains",parentData:data,parentDataProperty:"contains",rootData}))){
vErrors = vErrors === null ? validate150.errors : vErrors.concat(validate150.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.items !== undefined){
const _errs43 = errors;
if(!(validate151(data.items, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
vErrors = vErrors === null ? validate151.errors : vErrors.concat(validate151.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate149.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate149.errors = vErrors;
return errors === 0;
}


function validate148(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.path === undefined) && (missing0 = "path")){
validate148.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((((((key0 === "id") || (key0 === "path")) || (key0 === "purpose")) || (key0 === "filter")) || (key0 === "predicate")) || (key0 === "intent_to_retain")) || (key0 === "name")) || (key0 === "optional"))){
validate148.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate148.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.path !== undefined){
let data1 = data.path;
const _errs4 = errors;
if(errors === _errs4){
if(Array.isArray(data1)){
var valid1 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs6 = errors;
if(typeof data1[i0] !== "string"){
validate148.errors = [{instancePath:instancePath+"/path/" + i0,schemaPath:"#/properties/path/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs6 === errors;
if(!valid1){
break;
}
}
}
else {
validate148.errors = [{instancePath:instancePath+"/path",schemaPath:"#/properties/path/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs8 = errors;
if(typeof data.purpose !== "string"){
validate148.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.filter !== undefined){
const _errs10 = errors;
if(!(validate149(data.filter, {instancePath:instancePath+"/filter",parentData:data,parentDataProperty:"filter",rootData}))){
vErrors = vErrors === null ? validate149.errors : vErrors.concat(validate149.errors);
errors = vErrors.length;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.predicate !== undefined){
let data5 = data.predicate;
const _errs11 = errors;
if(typeof data5 !== "string"){
validate148.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data5 === "required") || (data5 === "preferred"))){
validate148.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema214.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.intent_to_retain !== undefined){
const _errs14 = errors;
if(typeof data.intent_to_retain !== "boolean"){
validate148.errors = [{instancePath:instancePath+"/intent_to_retain",schemaPath:"#/properties/intent_to_retain/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs16 = errors;
if(typeof data.name !== "string"){
validate148.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.optional !== undefined){
const _errs18 = errors;
if(typeof data.optional !== "boolean"){
validate148.errors = [{instancePath:instancePath+"/optional",schemaPath:"#/properties/optional/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
else {
validate148.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate148.errors = vErrors;
return errors === 0;
}


function validate146(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!((((((key0 === "limit_disclosure") || (key0 === "statuses")) || (key0 === "fields")) || (key0 === "subject_is_issuer")) || (key0 === "is_holder")) || (key0 === "same_subject"))){
validate146.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.limit_disclosure !== undefined){
let data0 = data.limit_disclosure;
const _errs2 = errors;
if(typeof data0 !== "string"){
validate146.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data0 === "required") || (data0 === "preferred"))){
validate146.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema214.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.statuses !== undefined){
const _errs5 = errors;
if(!(validate125(data.statuses, {instancePath:instancePath+"/statuses",parentData:data,parentDataProperty:"statuses",rootData}))){
vErrors = vErrors === null ? validate125.errors : vErrors.concat(validate125.errors);
errors = vErrors.length;
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.fields !== undefined){
let data2 = data.fields;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data2)){
var valid2 = true;
const len0 = data2.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(!(validate148(data2[i0], {instancePath:instancePath+"/fields/" + i0,parentData:data2,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate148.errors : vErrors.concat(validate148.errors);
errors = vErrors.length;
}
var valid2 = _errs8 === errors;
if(!valid2){
break;
}
}
}
else {
validate146.errors = [{instancePath:instancePath+"/fields",schemaPath:"#/properties/fields/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_is_issuer !== undefined){
let data4 = data.subject_is_issuer;
const _errs9 = errors;
if(typeof data4 !== "string"){
validate146.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data4 === "required") || (data4 === "preferred"))){
validate146.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema214.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.is_holder !== undefined){
let data5 = data.is_holder;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data5)){
var valid4 = true;
const len1 = data5.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate135(data5[i1], {instancePath:instancePath+"/is_holder/" + i1,parentData:data5,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate135.errors : vErrors.concat(validate135.errors);
errors = vErrors.length;
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate146.errors = [{instancePath:instancePath+"/is_holder",schemaPath:"#/properties/is_holder/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.same_subject !== undefined){
let data7 = data.same_subject;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data7)){
var valid5 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs17 = errors;
if(!(validate135(data7[i2], {instancePath:instancePath+"/same_subject/" + i2,parentData:data7,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate135.errors : vErrors.concat(validate135.errors);
errors = vErrors.length;
}
var valid5 = _errs17 === errors;
if(!valid5){
break;
}
}
}
else {
validate146.errors = [{instancePath:instancePath+"/same_subject",schemaPath:"#/properties/same_subject/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate146.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate146.errors = vErrors;
return errors === 0;
}


function validate144(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.constraints === undefined) && (missing0 = "constraints"))){
validate144.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "group")) || (key0 === "issuance")) || (key0 === "constraints"))){
validate144.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate144.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate144.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate144.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs8 = errors;
if(!(validate119(data.format, {instancePath:instancePath+"/format",parentData:data,parentDataProperty:"format",rootData}))){
vErrors = vErrors === null ? validate119.errors : vErrors.concat(validate119.errors);
errors = vErrors.length;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.group !== undefined){
let data4 = data.group;
const _errs9 = errors;
if(errors === _errs9){
if(Array.isArray(data4)){
var valid1 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs11 = errors;
if(typeof data4[i0] !== "string"){
validate144.errors = [{instancePath:instancePath+"/group/" + i0,schemaPath:"#/properties/group/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs11 === errors;
if(!valid1){
break;
}
}
}
else {
validate144.errors = [{instancePath:instancePath+"/group",schemaPath:"#/properties/group/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.issuance !== undefined){
let data6 = data.issuance;
const _errs13 = errors;
if(errors === _errs13){
if(Array.isArray(data6)){
var valid2 = true;
const len1 = data6.length;
for(let i1=0; i1<len1; i1++){
let data7 = data6[i1];
const _errs15 = errors;
const _errs16 = errors;
if(errors === _errs16){
if(data7 && typeof data7 == "object" && !Array.isArray(data7)){
if(data7.manifest !== undefined){
if(typeof data7.manifest !== "string"){
validate144.errors = [{instancePath:instancePath+"/issuance/" + i1+"/manifest",schemaPath:"#/definitions/Issuance/properties/manifest/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
else {
validate144.errors = [{instancePath:instancePath+"/issuance/" + i1,schemaPath:"#/definitions/Issuance/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid2 = _errs15 === errors;
if(!valid2){
break;
}
}
}
else {
validate144.errors = [{instancePath:instancePath+"/issuance",schemaPath:"#/properties/issuance/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.constraints !== undefined){
const _errs21 = errors;
if(!(validate146(data.constraints, {instancePath:instancePath+"/constraints",parentData:data,parentDataProperty:"constraints",rootData}))){
vErrors = vErrors === null ? validate146.errors : vErrors.concat(validate146.errors);
errors = vErrors.length;
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
else {
validate144.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate144.errors = vErrors;
return errors === 0;
}


function validate141(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.input_descriptors === undefined) && (missing0 = "input_descriptors"))){
validate141.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "submission_requirements")) || (key0 === "input_descriptors")) || (key0 === "frame"))){
validate141.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate141.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate141.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate141.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs8 = errors;
if(!(validate119(data.format, {instancePath:instancePath+"/format",parentData:data,parentDataProperty:"format",rootData}))){
vErrors = vErrors === null ? validate119.errors : vErrors.concat(validate119.errors);
errors = vErrors.length;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.submission_requirements !== undefined){
let data4 = data.submission_requirements;
const _errs9 = errors;
if(errors === _errs9){
if(Array.isArray(data4)){
var valid1 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs11 = errors;
if(!(validate121(data4[i0], {instancePath:instancePath+"/submission_requirements/" + i0,parentData:data4,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate121.errors : vErrors.concat(validate121.errors);
errors = vErrors.length;
}
var valid1 = _errs11 === errors;
if(!valid1){
break;
}
}
}
else {
validate141.errors = [{instancePath:instancePath+"/submission_requirements",schemaPath:"#/properties/submission_requirements/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.input_descriptors !== undefined){
let data6 = data.input_descriptors;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data6)){
var valid2 = true;
const len1 = data6.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate144(data6[i1], {instancePath:instancePath+"/input_descriptors/" + i1,parentData:data6,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate144.errors : vErrors.concat(validate144.errors);
errors = vErrors.length;
}
var valid2 = _errs14 === errors;
if(!valid2){
break;
}
}
}
else {
validate141.errors = [{instancePath:instancePath+"/input_descriptors",schemaPath:"#/properties/input_descriptors/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.frame !== undefined){
let data8 = data.frame;
const _errs15 = errors;
if(!(data8 && typeof data8 == "object" && !Array.isArray(data8))){
validate141.errors = [{instancePath:instancePath+"/frame",schemaPath:"#/properties/frame/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
else {
validate141.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate141.errors = vErrors;
return errors === 0;
}


function validate115(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.id_token_type !== undefined){
const _errs1 = errors;
if(typeof data.id_token_type !== "string"){
validate115.errors = [{instancePath:instancePath+"/id_token_type",schemaPath:"#/properties/id_token_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_metadata !== undefined){
const _errs3 = errors;
if(!(validate116(data.client_metadata, {instancePath:instancePath+"/client_metadata",parentData:data,parentDataProperty:"client_metadata",rootData}))){
vErrors = vErrors === null ? validate116.errors : vErrors.concat(validate116.errors);
errors = vErrors.length;
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_metadata_uri !== undefined){
const _errs4 = errors;
if(typeof data.client_metadata_uri !== "string"){
validate115.errors = [{instancePath:instancePath+"/client_metadata_uri",schemaPath:"#/properties/client_metadata_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.iss !== undefined){
const _errs6 = errors;
if(typeof data.iss !== "string"){
validate115.errors = [{instancePath:instancePath+"/iss",schemaPath:"#/properties/iss/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.sub !== undefined){
const _errs8 = errors;
if(typeof data.sub !== "string"){
validate115.errors = [{instancePath:instancePath+"/sub",schemaPath:"#/properties/sub/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.aud !== undefined){
let data5 = data.aud;
const _errs10 = errors;
const _errs11 = errors;
let valid1 = false;
const _errs12 = errors;
if(typeof data5 !== "string"){
const err0 = {instancePath:instancePath+"/aud",schemaPath:"#/properties/aud/anyOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs12 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
const _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid2 = true;
const len0 = data5.length;
for(let i0=0; i0<len0; i0++){
const _errs16 = errors;
if(typeof data5[i0] !== "string"){
const err1 = {instancePath:instancePath+"/aud/" + i0,schemaPath:"#/properties/aud/anyOf/1/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid2 = _errs16 === errors;
if(!valid2){
break;
}
}
}
else {
const err2 = {instancePath:instancePath+"/aud",schemaPath:"#/properties/aud/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
var _valid0 = _errs14 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
const err3 = {instancePath:instancePath+"/aud",schemaPath:"#/properties/aud/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
validate115.errors = vErrors;
return false;
}
else {
errors = _errs11;
if(vErrors !== null){
if(_errs11){
vErrors.length = _errs11;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.iat !== undefined){
const _errs18 = errors;
if(!(typeof data.iat == "number")){
validate115.errors = [{instancePath:instancePath+"/iat",schemaPath:"#/properties/iat/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.nbf !== undefined){
const _errs20 = errors;
if(!(typeof data.nbf == "number")){
validate115.errors = [{instancePath:instancePath+"/nbf",schemaPath:"#/properties/nbf/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs22 = errors;
if(typeof data.type !== "string"){
validate115.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exp !== undefined){
const _errs24 = errors;
if(!(typeof data.exp == "number")){
validate115.errors = [{instancePath:instancePath+"/exp",schemaPath:"#/properties/exp/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rexp !== undefined){
const _errs26 = errors;
if(!(typeof data.rexp == "number")){
validate115.errors = [{instancePath:instancePath+"/rexp",schemaPath:"#/properties/rexp/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jti !== undefined){
const _errs28 = errors;
if(typeof data.jti !== "string"){
validate115.errors = [{instancePath:instancePath+"/jti",schemaPath:"#/properties/jti/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.scope !== undefined){
const _errs30 = errors;
if(typeof data.scope !== "string"){
validate115.errors = [{instancePath:instancePath+"/scope",schemaPath:"#/properties/scope/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_type !== undefined){
let data14 = data.response_type;
const _errs32 = errors;
const _errs33 = errors;
let valid3 = false;
const _errs34 = errors;
if(typeof data14 !== "string"){
const err4 = {instancePath:instancePath+"/response_type",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(!((data14 === "id_token") || (data14 === "vp_token"))){
const err5 = {instancePath:instancePath+"/response_type",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema184.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var _valid1 = _errs34 === errors;
valid3 = valid3 || _valid1;
if(!valid3){
const _errs37 = errors;
if(typeof data14 !== "string"){
const err6 = {instancePath:instancePath+"/response_type",schemaPath:"#/properties/response_type/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
var _valid1 = _errs37 === errors;
valid3 = valid3 || _valid1;
}
if(!valid3){
const err7 = {instancePath:instancePath+"/response_type",schemaPath:"#/properties/response_type/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
validate115.errors = vErrors;
return false;
}
else {
errors = _errs33;
if(vErrors !== null){
if(_errs33){
vErrors.length = _errs33;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs32 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_id !== undefined){
const _errs39 = errors;
if(typeof data.client_id !== "string"){
validate115.errors = [{instancePath:instancePath+"/client_id",schemaPath:"#/properties/client_id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs39 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.redirect_uri !== undefined){
const _errs41 = errors;
if(typeof data.redirect_uri !== "string"){
validate115.errors = [{instancePath:instancePath+"/redirect_uri",schemaPath:"#/properties/redirect_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.id_token_hint !== undefined){
const _errs43 = errors;
if(typeof data.id_token_hint !== "string"){
validate115.errors = [{instancePath:instancePath+"/id_token_hint",schemaPath:"#/properties/id_token_hint/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.nonce !== undefined){
const _errs45 = errors;
if(typeof data.nonce !== "string"){
validate115.errors = [{instancePath:instancePath+"/nonce",schemaPath:"#/properties/nonce/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.state !== undefined){
const _errs47 = errors;
if(typeof data.state !== "string"){
validate115.errors = [{instancePath:instancePath+"/state",schemaPath:"#/properties/state/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs47 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_mode !== undefined){
let data20 = data.response_mode;
const _errs49 = errors;
if(typeof data20 !== "string"){
validate115.errors = [{instancePath:instancePath+"/response_mode",schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((((((((data20 === "fragment") || (data20 === "form_post")) || (data20 === "post")) || (data20 === "direct_post")) || (data20 === "query")) || (data20 === "direct_post.jwt")) || (data20 === "query.jwt")) || (data20 === "fragment.jwt"))){
validate115.errors = [{instancePath:instancePath+"/response_mode",schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema191.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs49 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.request !== undefined){
const _errs52 = errors;
if(typeof data.request !== "string"){
validate115.errors = [{instancePath:instancePath+"/request",schemaPath:"#/properties/request/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs52 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.request_uri !== undefined){
const _errs54 = errors;
if(typeof data.request_uri !== "string"){
validate115.errors = [{instancePath:instancePath+"/request_uri",schemaPath:"#/properties/request_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs54 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.claims !== undefined){
let data23 = data.claims;
const _errs56 = errors;
if(!(data23 && typeof data23 == "object" && !Array.isArray(data23))){
validate115.errors = [{instancePath:instancePath+"/claims",schemaPath:"#/definitions/ClaimPayloadCommon/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs56 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.presentation_definition !== undefined){
let data24 = data.presentation_definition;
const _errs59 = errors;
const _errs60 = errors;
let valid7 = false;
const _errs61 = errors;
if(!(validate118(data24, {instancePath:instancePath+"/presentation_definition",parentData:data,parentDataProperty:"presentation_definition",rootData}))){
vErrors = vErrors === null ? validate118.errors : vErrors.concat(validate118.errors);
errors = vErrors.length;
}
var _valid2 = _errs61 === errors;
valid7 = valid7 || _valid2;
if(!valid7){
const _errs62 = errors;
if(!(validate141(data24, {instancePath:instancePath+"/presentation_definition",parentData:data,parentDataProperty:"presentation_definition",rootData}))){
vErrors = vErrors === null ? validate141.errors : vErrors.concat(validate141.errors);
errors = vErrors.length;
}
var _valid2 = _errs62 === errors;
valid7 = valid7 || _valid2;
if(!valid7){
const _errs63 = errors;
if(errors === _errs63){
if(Array.isArray(data24)){
var valid8 = true;
const len1 = data24.length;
for(let i1=0; i1<len1; i1++){
const _errs65 = errors;
if(!(validate118(data24[i1], {instancePath:instancePath+"/presentation_definition/" + i1,parentData:data24,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate118.errors : vErrors.concat(validate118.errors);
errors = vErrors.length;
}
var valid8 = _errs65 === errors;
if(!valid8){
break;
}
}
}
else {
const err8 = {instancePath:instancePath+"/presentation_definition",schemaPath:"#/properties/presentation_definition/anyOf/2/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
var _valid2 = _errs63 === errors;
valid7 = valid7 || _valid2;
if(!valid7){
const _errs66 = errors;
if(errors === _errs66){
if(Array.isArray(data24)){
var valid9 = true;
const len2 = data24.length;
for(let i2=0; i2<len2; i2++){
const _errs68 = errors;
if(!(validate141(data24[i2], {instancePath:instancePath+"/presentation_definition/" + i2,parentData:data24,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate141.errors : vErrors.concat(validate141.errors);
errors = vErrors.length;
}
var valid9 = _errs68 === errors;
if(!valid9){
break;
}
}
}
else {
const err9 = {instancePath:instancePath+"/presentation_definition",schemaPath:"#/properties/presentation_definition/anyOf/3/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
var _valid2 = _errs66 === errors;
valid7 = valid7 || _valid2;
}
}
}
if(!valid7){
const err10 = {instancePath:instancePath+"/presentation_definition",schemaPath:"#/properties/presentation_definition/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
validate115.errors = vErrors;
return false;
}
else {
errors = _errs60;
if(vErrors !== null){
if(_errs60){
vErrors.length = _errs60;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs59 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.presentation_definition_uri !== undefined){
const _errs69 = errors;
if(typeof data.presentation_definition_uri !== "string"){
validate115.errors = [{instancePath:instancePath+"/presentation_definition_uri",schemaPath:"#/properties/presentation_definition_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs69 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_id_scheme !== undefined){
let data28 = data.client_id_scheme;
const _errs71 = errors;
if(typeof data28 !== "string"){
validate115.errors = [{instancePath:instancePath+"/client_id_scheme",schemaPath:"#/definitions/ClientIdSchemeOID4VPD18/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((((data28 === "pre-registered") || (data28 === "redirect_uri")) || (data28 === "entity_id")) || (data28 === "did"))){
validate115.errors = [{instancePath:instancePath+"/client_id_scheme",schemaPath:"#/definitions/ClientIdSchemeOID4VPD18/enum",keyword:"enum",params:{allowedValues: schema259.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs71 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_uri !== undefined){
const _errs74 = errors;
if(typeof data.response_uri !== "string"){
validate115.errors = [{instancePath:instancePath+"/response_uri",schemaPath:"#/properties/response_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs74 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate115.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate115.errors = vErrors;
return errors === 0;
}


function validate114(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="AuthorizationRequestPayloadVD12OID4VPD18Schema" */;
let vErrors = null;
let errors = 0;
if(!(validate115(data, {instancePath,parentData,parentDataProperty,rootData}))){
vErrors = vErrors === null ? validate115.errors : vErrors.concat(validate115.errors);
errors = vErrors.length;
}
validate114.errors = vErrors;
return errors === 0;
}

exports.AuthorizationRequestPayloadVD12OID4VPD20Schema = validate165;
const schema260 = {"$id":"AuthorizationRequestPayloadVD12OID4VPD20Schema","$schema":"http://json-schema.org/draft-07/schema#","$ref":"#/definitions/AuthorizationRequestPayloadVD12OID4VPD20","definitions":{"AuthorizationRequestPayloadVD12OID4VPD20":{"type":"object","properties":{"id_token_type":{"type":"string"},"client_metadata":{"$ref":"#/definitions/RPRegistrationMetadataPayload"},"client_metadata_uri":{"type":"string"},"iss":{"type":"string"},"sub":{"type":"string"},"aud":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"iat":{"type":"number"},"nbf":{"type":"number"},"type":{"type":"string"},"exp":{"type":"number"},"rexp":{"type":"number"},"jti":{"type":"string"},"scope":{"type":"string"},"response_type":{"anyOf":[{"$ref":"#/definitions/ResponseType"},{"type":"string"}]},"client_id":{"type":"string"},"redirect_uri":{"type":"string"},"id_token_hint":{"type":"string"},"nonce":{"type":"string"},"state":{"type":"string"},"response_mode":{"$ref":"#/definitions/ResponseMode"},"request":{"type":"string"},"request_uri":{"type":"string"},"claims":{"$ref":"#/definitions/ClaimPayloadCommon"},"presentation_definition":{"anyOf":[{"$ref":"#/definitions/PresentationDefinitionV1"},{"$ref":"#/definitions/PresentationDefinitionV2"},{"type":"array","items":{"$ref":"#/definitions/PresentationDefinitionV1"}},{"type":"array","items":{"$ref":"#/definitions/PresentationDefinitionV2"}}]},"presentation_definition_uri":{"type":"string"},"client_id_scheme":{"$ref":"#/definitions/ClientIdSchemeOID4VPD20"},"response_uri":{"type":"string"}}},"RPRegistrationMetadataPayload":{"type":"object","properties":{"client_id":{"anyOf":[{"type":"string"},{}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"vp_formats":{"anyOf":[{"$ref":"#/definitions/Format"},{}]},"client_name":{"anyOf":[{"type":"string"},{}]},"logo_uri":{"anyOf":[{"type":"string"},{}]},"client_purpose":{"anyOf":[{},{"type":"string"}]}}},"SigningAlgo":{"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]},"ResponseType":{"type":"string","enum":["id_token","vp_token"]},"Scope":{"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]},"SubjectType":{"type":"string","enum":["public","pairwise"]},"Format":{"type":"object","properties":{"jwt":{"$ref":"#/definitions/JwtObject"},"jwt_vc":{"$ref":"#/definitions/JwtObject"},"jwt_vc_json":{"$ref":"#/definitions/JwtObject"},"jwt_vp":{"$ref":"#/definitions/JwtObject"},"jwt_vp_json":{"$ref":"#/definitions/JwtObject"},"ldp":{"$ref":"#/definitions/LdpObject"},"ldp_vc":{"$ref":"#/definitions/LdpObject"},"ldp_vp":{"$ref":"#/definitions/LdpObject"},"di":{"$ref":"#/definitions/DiObject"},"di_vc":{"$ref":"#/definitions/DiObject"},"di_vp":{"$ref":"#/definitions/DiObject"},"vc+sd-jwt":{"$ref":"#/definitions/SdJwtObject"},"mso_mdoc":{"$ref":"#/definitions/MsoMdocObject"}},"additionalProperties":false},"JwtObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false},"LdpObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}}},"required":["proof_type"],"additionalProperties":false},"DiObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}},"cryptosuite":{"type":"array","items":{"type":"string"}}},"required":["proof_type","cryptosuite"],"additionalProperties":false},"SdJwtObject":{"type":"object","properties":{"sd-jwt_alg_values":{"type":"array","items":{"type":"string"}},"kb-jwt_alg_values":{"type":"array","items":{"type":"string"}}},"additionalProperties":false},"MsoMdocObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false},"ResponseMode":{"type":"string","enum":["fragment","form_post","post","direct_post","query","direct_post.jwt","query.jwt","fragment.jwt"]},"ClaimPayloadCommon":{"type":"object"},"PresentationDefinitionV1":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV1"}}},"required":["id","input_descriptors"],"additionalProperties":false},"SubmissionRequirement":{"type":"object","properties":{"name":{"type":"string"},"purpose":{"type":"string"},"rule":{"$ref":"#/definitions/Rules"},"count":{"type":"number"},"min":{"type":"number"},"max":{"type":"number"},"from":{"type":"string"},"from_nested":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}}},"required":["rule"],"additionalProperties":false},"Rules":{"type":"string","enum":["all","pick"]},"InputDescriptorV1":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"group":{"type":"array","items":{"type":"string"}},"schema":{"type":"array","items":{"$ref":"#/definitions/Schema"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV1"}},"required":["id","schema"],"additionalProperties":false},"Schema":{"type":"object","properties":{"uri":{"type":"string"},"required":{"type":"boolean"}},"required":["uri"],"additionalProperties":false},"Issuance":{"type":"object","properties":{"manifest":{"type":"string"}},"additionalProperties":{}},"ConstraintsV1":{"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV1"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false},"Optionality":{"type":"string","enum":["required","preferred"]},"Statuses":{"type":"object","properties":{"active":{"$ref":"#/definitions/PdStatus"},"suspended":{"$ref":"#/definitions/PdStatus"},"revoked":{"$ref":"#/definitions/PdStatus"}},"additionalProperties":false},"PdStatus":{"type":"object","properties":{"directive":{"$ref":"#/definitions/Directives"}},"additionalProperties":false},"Directives":{"type":"string","enum":["required","allowed","disallowed"]},"FieldV1":{"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV1"},"predicate":{"$ref":"#/definitions/Optionality"}},"required":["path"],"additionalProperties":false},"FilterV1":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"}},"required":["type"],"additionalProperties":false},"OneOfNumberStringBoolean":{"type":["boolean","number","string"]},"OneOfNumberString":{"type":["number","string"]},"HolderSubject":{"type":"object","properties":{"field_id":{"type":"array","items":{"type":"string"}},"directive":{"$ref":"#/definitions/Optionality"}},"required":["field_id","directive"],"additionalProperties":false},"PresentationDefinitionV2":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV2"}},"frame":{"type":"object"}},"required":["id","input_descriptors"],"additionalProperties":false},"InputDescriptorV2":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"group":{"type":"array","items":{"type":"string"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV2"}},"required":["id","constraints"],"additionalProperties":false},"ConstraintsV2":{"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV2"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false},"FieldV2":{"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV2"},"predicate":{"$ref":"#/definitions/Optionality"},"intent_to_retain":{"type":"boolean"},"name":{"type":"string"},"optional":{"type":"boolean"}},"required":["path"],"additionalProperties":false},"FilterV2":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false},"FilterV2Base":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"additionalProperties":false},"FilterV2BaseItems":{"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false},"ClientIdSchemeOID4VPD20":{"anyOf":[{"$ref":"#/definitions/ClientIdSchemeOID4VPD18"},{"type":"string","const":"x509_san_dns"},{"type":"string","const":"x509_san_uri"},{"type":"string","const":"verifier_attestation"}]},"ClientIdSchemeOID4VPD18":{"type":"string","enum":["pre-registered","redirect_uri","entity_id","did"]}}};
const schema261 = {"type":"object","properties":{"id_token_type":{"type":"string"},"client_metadata":{"$ref":"#/definitions/RPRegistrationMetadataPayload"},"client_metadata_uri":{"type":"string"},"iss":{"type":"string"},"sub":{"type":"string"},"aud":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"iat":{"type":"number"},"nbf":{"type":"number"},"type":{"type":"string"},"exp":{"type":"number"},"rexp":{"type":"number"},"jti":{"type":"string"},"scope":{"type":"string"},"response_type":{"anyOf":[{"$ref":"#/definitions/ResponseType"},{"type":"string"}]},"client_id":{"type":"string"},"redirect_uri":{"type":"string"},"id_token_hint":{"type":"string"},"nonce":{"type":"string"},"state":{"type":"string"},"response_mode":{"$ref":"#/definitions/ResponseMode"},"request":{"type":"string"},"request_uri":{"type":"string"},"claims":{"$ref":"#/definitions/ClaimPayloadCommon"},"presentation_definition":{"anyOf":[{"$ref":"#/definitions/PresentationDefinitionV1"},{"$ref":"#/definitions/PresentationDefinitionV2"},{"type":"array","items":{"$ref":"#/definitions/PresentationDefinitionV1"}},{"type":"array","items":{"$ref":"#/definitions/PresentationDefinitionV2"}}]},"presentation_definition_uri":{"type":"string"},"client_id_scheme":{"$ref":"#/definitions/ClientIdSchemeOID4VPD20"},"response_uri":{"type":"string"}}};
const schema267 = {"type":"string","enum":["id_token","vp_token"]};
const schema274 = {"type":"string","enum":["fragment","form_post","post","direct_post","query","direct_post.jwt","query.jwt","fragment.jwt"]};
const schema275 = {"type":"object"};
const schema262 = {"type":"object","properties":{"client_id":{"anyOf":[{"type":"string"},{}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"vp_formats":{"anyOf":[{"$ref":"#/definitions/Format"},{}]},"client_name":{"anyOf":[{"type":"string"},{}]},"logo_uri":{"anyOf":[{"type":"string"},{}]},"client_purpose":{"anyOf":[{},{"type":"string"}]}}};
const schema263 = {"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]};
const schema269 = {"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]};
const schema271 = {"type":"string","enum":["public","pairwise"]};

function validate167(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.client_id !== undefined){
const _errs1 = errors;
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.id_token_signing_alg_values_supported !== undefined){
let data1 = data.id_token_signing_alg_values_supported;
const _errs3 = errors;
const _errs4 = errors;
let valid1 = false;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(typeof data2 !== "string"){
const err0 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i0,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(!(((((data2 === "EdDSA") || (data2 === "RS256")) || (data2 === "PS256")) || (data2 === "ES256")) || (data2 === "ES256K"))){
const err1 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i0,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema263.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
const err2 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/properties/id_token_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
var _valid0 = _errs5 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
const _errs10 = errors;
if(typeof data1 !== "string"){
const err3 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(!(((((data1 === "EdDSA") || (data1 === "RS256")) || (data1 === "PS256")) || (data1 === "ES256")) || (data1 === "ES256K"))){
const err4 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema263.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid0 = _errs10 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
const err5 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/properties/id_token_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate167.errors = vErrors;
return false;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.request_object_signing_alg_values_supported !== undefined){
let data3 = data.request_object_signing_alg_values_supported;
const _errs13 = errors;
const _errs14 = errors;
let valid5 = false;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data3)){
var valid6 = true;
const len1 = data3.length;
for(let i1=0; i1<len1; i1++){
let data4 = data3[i1];
const _errs17 = errors;
if(typeof data4 !== "string"){
const err6 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i1,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(!(((((data4 === "EdDSA") || (data4 === "RS256")) || (data4 === "PS256")) || (data4 === "ES256")) || (data4 === "ES256K"))){
const err7 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i1,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema263.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var valid6 = _errs17 === errors;
if(!valid6){
break;
}
}
}
else {
const err8 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/properties/request_object_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
var _valid1 = _errs15 === errors;
valid5 = valid5 || _valid1;
if(!valid5){
const _errs20 = errors;
if(typeof data3 !== "string"){
const err9 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(!(((((data3 === "EdDSA") || (data3 === "RS256")) || (data3 === "PS256")) || (data3 === "ES256")) || (data3 === "ES256K"))){
const err10 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema263.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
var _valid1 = _errs20 === errors;
valid5 = valid5 || _valid1;
}
if(!valid5){
const err11 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/properties/request_object_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate167.errors = vErrors;
return false;
}
else {
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_types_supported !== undefined){
let data5 = data.response_types_supported;
const _errs23 = errors;
const _errs24 = errors;
let valid9 = false;
const _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data5)){
var valid10 = true;
const len2 = data5.length;
for(let i2=0; i2<len2; i2++){
let data6 = data5[i2];
const _errs27 = errors;
if(typeof data6 !== "string"){
const err12 = {instancePath:instancePath+"/response_types_supported/" + i2,schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if(!((data6 === "id_token") || (data6 === "vp_token"))){
const err13 = {instancePath:instancePath+"/response_types_supported/" + i2,schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema267.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
var valid10 = _errs27 === errors;
if(!valid10){
break;
}
}
}
else {
const err14 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/properties/response_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
var _valid2 = _errs25 === errors;
valid9 = valid9 || _valid2;
if(!valid9){
const _errs30 = errors;
if(typeof data5 !== "string"){
const err15 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(!((data5 === "id_token") || (data5 === "vp_token"))){
const err16 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema267.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
var _valid2 = _errs30 === errors;
valid9 = valid9 || _valid2;
}
if(!valid9){
const err17 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/properties/response_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
validate167.errors = vErrors;
return false;
}
else {
errors = _errs24;
if(vErrors !== null){
if(_errs24){
vErrors.length = _errs24;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.scopes_supported !== undefined){
let data7 = data.scopes_supported;
const _errs33 = errors;
const _errs34 = errors;
let valid13 = false;
const _errs35 = errors;
if(errors === _errs35){
if(Array.isArray(data7)){
var valid14 = true;
const len3 = data7.length;
for(let i3=0; i3<len3; i3++){
let data8 = data7[i3];
const _errs37 = errors;
if(typeof data8 !== "string"){
const err18 = {instancePath:instancePath+"/scopes_supported/" + i3,schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if(!((((((data8 === "openid") || (data8 === "openid did_authn")) || (data8 === "profile")) || (data8 === "email")) || (data8 === "address")) || (data8 === "phone"))){
const err19 = {instancePath:instancePath+"/scopes_supported/" + i3,schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema269.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
var valid14 = _errs37 === errors;
if(!valid14){
break;
}
}
}
else {
const err20 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/properties/scopes_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
var _valid3 = _errs35 === errors;
valid13 = valid13 || _valid3;
if(!valid13){
const _errs40 = errors;
if(typeof data7 !== "string"){
const err21 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(!((((((data7 === "openid") || (data7 === "openid did_authn")) || (data7 === "profile")) || (data7 === "email")) || (data7 === "address")) || (data7 === "phone"))){
const err22 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema269.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
var _valid3 = _errs40 === errors;
valid13 = valid13 || _valid3;
}
if(!valid13){
const err23 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/properties/scopes_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
validate167.errors = vErrors;
return false;
}
else {
errors = _errs34;
if(vErrors !== null){
if(_errs34){
vErrors.length = _errs34;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_types_supported !== undefined){
let data9 = data.subject_types_supported;
const _errs43 = errors;
const _errs44 = errors;
let valid17 = false;
const _errs45 = errors;
if(errors === _errs45){
if(Array.isArray(data9)){
var valid18 = true;
const len4 = data9.length;
for(let i4=0; i4<len4; i4++){
let data10 = data9[i4];
const _errs47 = errors;
if(typeof data10 !== "string"){
const err24 = {instancePath:instancePath+"/subject_types_supported/" + i4,schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
if(!((data10 === "public") || (data10 === "pairwise"))){
const err25 = {instancePath:instancePath+"/subject_types_supported/" + i4,schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema271.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
var valid18 = _errs47 === errors;
if(!valid18){
break;
}
}
}
else {
const err26 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/properties/subject_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
var _valid4 = _errs45 === errors;
valid17 = valid17 || _valid4;
if(!valid17){
const _errs50 = errors;
if(typeof data9 !== "string"){
const err27 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
if(!((data9 === "public") || (data9 === "pairwise"))){
const err28 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema271.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
var _valid4 = _errs50 === errors;
valid17 = valid17 || _valid4;
}
if(!valid17){
const err29 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/properties/subject_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
validate167.errors = vErrors;
return false;
}
else {
errors = _errs44;
if(vErrors !== null){
if(_errs44){
vErrors.length = _errs44;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_syntax_types_supported !== undefined){
let data11 = data.subject_syntax_types_supported;
const _errs53 = errors;
if(errors === _errs53){
if(Array.isArray(data11)){
var valid21 = true;
const len5 = data11.length;
for(let i5=0; i5<len5; i5++){
const _errs55 = errors;
if(typeof data11[i5] !== "string"){
validate167.errors = [{instancePath:instancePath+"/subject_syntax_types_supported/" + i5,schemaPath:"#/properties/subject_syntax_types_supported/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid21 = _errs55 === errors;
if(!valid21){
break;
}
}
}
else {
validate167.errors = [{instancePath:instancePath+"/subject_syntax_types_supported",schemaPath:"#/properties/subject_syntax_types_supported/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs53 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.vp_formats !== undefined){
const _errs57 = errors;
var valid0 = _errs57 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_name !== undefined){
const _errs59 = errors;
var valid0 = _errs59 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.logo_uri !== undefined){
const _errs61 = errors;
var valid0 = _errs61 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_purpose !== undefined){
const _errs63 = errors;
var valid0 = _errs63 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate167.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate167.errors = vErrors;
return errors === 0;
}

const schema276 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV1"}}},"required":["id","input_descriptors"],"additionalProperties":false};
const schema277 = {"type":"object","properties":{"jwt":{"$ref":"#/definitions/JwtObject"},"jwt_vc":{"$ref":"#/definitions/JwtObject"},"jwt_vc_json":{"$ref":"#/definitions/JwtObject"},"jwt_vp":{"$ref":"#/definitions/JwtObject"},"jwt_vp_json":{"$ref":"#/definitions/JwtObject"},"ldp":{"$ref":"#/definitions/LdpObject"},"ldp_vc":{"$ref":"#/definitions/LdpObject"},"ldp_vp":{"$ref":"#/definitions/LdpObject"},"di":{"$ref":"#/definitions/DiObject"},"di_vc":{"$ref":"#/definitions/DiObject"},"di_vp":{"$ref":"#/definitions/DiObject"},"vc+sd-jwt":{"$ref":"#/definitions/SdJwtObject"},"mso_mdoc":{"$ref":"#/definitions/MsoMdocObject"}},"additionalProperties":false};
const schema278 = {"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false};
const schema283 = {"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}}},"required":["proof_type"],"additionalProperties":false};
const schema286 = {"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}},"cryptosuite":{"type":"array","items":{"type":"string"}}},"required":["proof_type","cryptosuite"],"additionalProperties":false};
const schema289 = {"type":"object","properties":{"sd-jwt_alg_values":{"type":"array","items":{"type":"string"}},"kb-jwt_alg_values":{"type":"array","items":{"type":"string"}}},"additionalProperties":false};
const schema290 = {"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false};

function validate170(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema277.properties, key0))){
validate170.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.jwt !== undefined){
let data0 = data.jwt;
const _errs2 = errors;
const _errs3 = errors;
if(errors === _errs3){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
let missing0;
if((data0.alg === undefined) && (missing0 = "alg")){
validate170.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs5 = errors;
for(const key1 in data0){
if(!(key1 === "alg")){
validate170.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs5 === errors){
if(data0.alg !== undefined){
let data1 = data0.alg;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data1)){
var valid3 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(typeof data1[i0] !== "string"){
validate170.errors = [{instancePath:instancePath+"/jwt/alg/" + i0,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid3 = _errs8 === errors;
if(!valid3){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/jwt/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vc !== undefined){
let data3 = data.jwt_vc;
const _errs10 = errors;
const _errs11 = errors;
if(errors === _errs11){
if(data3 && typeof data3 == "object" && !Array.isArray(data3)){
let missing1;
if((data3.alg === undefined) && (missing1 = "alg")){
validate170.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
const _errs13 = errors;
for(const key2 in data3){
if(!(key2 === "alg")){
validate170.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs13 === errors){
if(data3.alg !== undefined){
let data4 = data3.alg;
const _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data4)){
var valid6 = true;
const len1 = data4.length;
for(let i1=0; i1<len1; i1++){
const _errs16 = errors;
if(typeof data4[i1] !== "string"){
validate170.errors = [{instancePath:instancePath+"/jwt_vc/alg/" + i1,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs16 === errors;
if(!valid6){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/jwt_vc/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vc_json !== undefined){
let data6 = data.jwt_vc_json;
const _errs18 = errors;
const _errs19 = errors;
if(errors === _errs19){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
let missing2;
if((data6.alg === undefined) && (missing2 = "alg")){
validate170.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
const _errs21 = errors;
for(const key3 in data6){
if(!(key3 === "alg")){
validate170.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs21 === errors){
if(data6.alg !== undefined){
let data7 = data6.alg;
const _errs22 = errors;
if(errors === _errs22){
if(Array.isArray(data7)){
var valid9 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs24 = errors;
if(typeof data7[i2] !== "string"){
validate170.errors = [{instancePath:instancePath+"/jwt_vc_json/alg/" + i2,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs24 === errors;
if(!valid9){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/jwt_vc_json/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vp !== undefined){
let data9 = data.jwt_vp;
const _errs26 = errors;
const _errs27 = errors;
if(errors === _errs27){
if(data9 && typeof data9 == "object" && !Array.isArray(data9)){
let missing3;
if((data9.alg === undefined) && (missing3 = "alg")){
validate170.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];
return false;
}
else {
const _errs29 = errors;
for(const key4 in data9){
if(!(key4 === "alg")){
validate170.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs29 === errors){
if(data9.alg !== undefined){
let data10 = data9.alg;
const _errs30 = errors;
if(errors === _errs30){
if(Array.isArray(data10)){
var valid12 = true;
const len3 = data10.length;
for(let i3=0; i3<len3; i3++){
const _errs32 = errors;
if(typeof data10[i3] !== "string"){
validate170.errors = [{instancePath:instancePath+"/jwt_vp/alg/" + i3,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs32 === errors;
if(!valid12){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/jwt_vp/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vp_json !== undefined){
let data12 = data.jwt_vp_json;
const _errs34 = errors;
const _errs35 = errors;
if(errors === _errs35){
if(data12 && typeof data12 == "object" && !Array.isArray(data12)){
let missing4;
if((data12.alg === undefined) && (missing4 = "alg")){
validate170.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];
return false;
}
else {
const _errs37 = errors;
for(const key5 in data12){
if(!(key5 === "alg")){
validate170.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs37 === errors){
if(data12.alg !== undefined){
let data13 = data12.alg;
const _errs38 = errors;
if(errors === _errs38){
if(Array.isArray(data13)){
var valid15 = true;
const len4 = data13.length;
for(let i4=0; i4<len4; i4++){
const _errs40 = errors;
if(typeof data13[i4] !== "string"){
validate170.errors = [{instancePath:instancePath+"/jwt_vp_json/alg/" + i4,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid15 = _errs40 === errors;
if(!valid15){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/jwt_vp_json/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp !== undefined){
let data15 = data.ldp;
const _errs42 = errors;
const _errs43 = errors;
if(errors === _errs43){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
let missing5;
if((data15.proof_type === undefined) && (missing5 = "proof_type")){
validate170.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"}];
return false;
}
else {
const _errs45 = errors;
for(const key6 in data15){
if(!(key6 === "proof_type")){
validate170.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key6},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs45 === errors){
if(data15.proof_type !== undefined){
let data16 = data15.proof_type;
const _errs46 = errors;
if(errors === _errs46){
if(Array.isArray(data16)){
var valid18 = true;
const len5 = data16.length;
for(let i5=0; i5<len5; i5++){
const _errs48 = errors;
if(typeof data16[i5] !== "string"){
validate170.errors = [{instancePath:instancePath+"/ldp/proof_type/" + i5,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid18 = _errs48 === errors;
if(!valid18){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/ldp/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp_vc !== undefined){
let data18 = data.ldp_vc;
const _errs50 = errors;
const _errs51 = errors;
if(errors === _errs51){
if(data18 && typeof data18 == "object" && !Array.isArray(data18)){
let missing6;
if((data18.proof_type === undefined) && (missing6 = "proof_type")){
validate170.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"}];
return false;
}
else {
const _errs53 = errors;
for(const key7 in data18){
if(!(key7 === "proof_type")){
validate170.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key7},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs53 === errors){
if(data18.proof_type !== undefined){
let data19 = data18.proof_type;
const _errs54 = errors;
if(errors === _errs54){
if(Array.isArray(data19)){
var valid21 = true;
const len6 = data19.length;
for(let i6=0; i6<len6; i6++){
const _errs56 = errors;
if(typeof data19[i6] !== "string"){
validate170.errors = [{instancePath:instancePath+"/ldp_vc/proof_type/" + i6,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid21 = _errs56 === errors;
if(!valid21){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/ldp_vc/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs50 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp_vp !== undefined){
let data21 = data.ldp_vp;
const _errs58 = errors;
const _errs59 = errors;
if(errors === _errs59){
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
let missing7;
if((data21.proof_type === undefined) && (missing7 = "proof_type")){
validate170.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"}];
return false;
}
else {
const _errs61 = errors;
for(const key8 in data21){
if(!(key8 === "proof_type")){
validate170.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key8},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs61 === errors){
if(data21.proof_type !== undefined){
let data22 = data21.proof_type;
const _errs62 = errors;
if(errors === _errs62){
if(Array.isArray(data22)){
var valid24 = true;
const len7 = data22.length;
for(let i7=0; i7<len7; i7++){
const _errs64 = errors;
if(typeof data22[i7] !== "string"){
validate170.errors = [{instancePath:instancePath+"/ldp_vp/proof_type/" + i7,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid24 = _errs64 === errors;
if(!valid24){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/ldp_vp/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs58 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di !== undefined){
let data24 = data.di;
const _errs66 = errors;
const _errs67 = errors;
if(errors === _errs67){
if(data24 && typeof data24 == "object" && !Array.isArray(data24)){
let missing8;
if(((data24.proof_type === undefined) && (missing8 = "proof_type")) || ((data24.cryptosuite === undefined) && (missing8 = "cryptosuite"))){
validate170.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing8},message:"must have required property '"+missing8+"'"}];
return false;
}
else {
const _errs69 = errors;
for(const key9 in data24){
if(!((key9 === "proof_type") || (key9 === "cryptosuite"))){
validate170.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key9},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs69 === errors){
if(data24.proof_type !== undefined){
let data25 = data24.proof_type;
const _errs70 = errors;
if(errors === _errs70){
if(Array.isArray(data25)){
var valid27 = true;
const len8 = data25.length;
for(let i8=0; i8<len8; i8++){
const _errs72 = errors;
if(typeof data25[i8] !== "string"){
validate170.errors = [{instancePath:instancePath+"/di/proof_type/" + i8,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid27 = _errs72 === errors;
if(!valid27){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/di/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid26 = _errs70 === errors;
}
else {
var valid26 = true;
}
if(valid26){
if(data24.cryptosuite !== undefined){
let data27 = data24.cryptosuite;
const _errs74 = errors;
if(errors === _errs74){
if(Array.isArray(data27)){
var valid28 = true;
const len9 = data27.length;
for(let i9=0; i9<len9; i9++){
const _errs76 = errors;
if(typeof data27[i9] !== "string"){
validate170.errors = [{instancePath:instancePath+"/di/cryptosuite/" + i9,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid28 = _errs76 === errors;
if(!valid28){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/di/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid26 = _errs74 === errors;
}
else {
var valid26 = true;
}
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs66 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di_vc !== undefined){
let data29 = data.di_vc;
const _errs78 = errors;
const _errs79 = errors;
if(errors === _errs79){
if(data29 && typeof data29 == "object" && !Array.isArray(data29)){
let missing9;
if(((data29.proof_type === undefined) && (missing9 = "proof_type")) || ((data29.cryptosuite === undefined) && (missing9 = "cryptosuite"))){
validate170.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing9},message:"must have required property '"+missing9+"'"}];
return false;
}
else {
const _errs81 = errors;
for(const key10 in data29){
if(!((key10 === "proof_type") || (key10 === "cryptosuite"))){
validate170.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key10},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs81 === errors){
if(data29.proof_type !== undefined){
let data30 = data29.proof_type;
const _errs82 = errors;
if(errors === _errs82){
if(Array.isArray(data30)){
var valid31 = true;
const len10 = data30.length;
for(let i10=0; i10<len10; i10++){
const _errs84 = errors;
if(typeof data30[i10] !== "string"){
validate170.errors = [{instancePath:instancePath+"/di_vc/proof_type/" + i10,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid31 = _errs84 === errors;
if(!valid31){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/di_vc/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid30 = _errs82 === errors;
}
else {
var valid30 = true;
}
if(valid30){
if(data29.cryptosuite !== undefined){
let data32 = data29.cryptosuite;
const _errs86 = errors;
if(errors === _errs86){
if(Array.isArray(data32)){
var valid32 = true;
const len11 = data32.length;
for(let i11=0; i11<len11; i11++){
const _errs88 = errors;
if(typeof data32[i11] !== "string"){
validate170.errors = [{instancePath:instancePath+"/di_vc/cryptosuite/" + i11,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid32 = _errs88 === errors;
if(!valid32){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/di_vc/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid30 = _errs86 === errors;
}
else {
var valid30 = true;
}
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs78 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di_vp !== undefined){
let data34 = data.di_vp;
const _errs90 = errors;
const _errs91 = errors;
if(errors === _errs91){
if(data34 && typeof data34 == "object" && !Array.isArray(data34)){
let missing10;
if(((data34.proof_type === undefined) && (missing10 = "proof_type")) || ((data34.cryptosuite === undefined) && (missing10 = "cryptosuite"))){
validate170.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing10},message:"must have required property '"+missing10+"'"}];
return false;
}
else {
const _errs93 = errors;
for(const key11 in data34){
if(!((key11 === "proof_type") || (key11 === "cryptosuite"))){
validate170.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key11},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs93 === errors){
if(data34.proof_type !== undefined){
let data35 = data34.proof_type;
const _errs94 = errors;
if(errors === _errs94){
if(Array.isArray(data35)){
var valid35 = true;
const len12 = data35.length;
for(let i12=0; i12<len12; i12++){
const _errs96 = errors;
if(typeof data35[i12] !== "string"){
validate170.errors = [{instancePath:instancePath+"/di_vp/proof_type/" + i12,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid35 = _errs96 === errors;
if(!valid35){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/di_vp/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid34 = _errs94 === errors;
}
else {
var valid34 = true;
}
if(valid34){
if(data34.cryptosuite !== undefined){
let data37 = data34.cryptosuite;
const _errs98 = errors;
if(errors === _errs98){
if(Array.isArray(data37)){
var valid36 = true;
const len13 = data37.length;
for(let i13=0; i13<len13; i13++){
const _errs100 = errors;
if(typeof data37[i13] !== "string"){
validate170.errors = [{instancePath:instancePath+"/di_vp/cryptosuite/" + i13,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid36 = _errs100 === errors;
if(!valid36){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/di_vp/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid34 = _errs98 === errors;
}
else {
var valid34 = true;
}
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs90 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data["vc+sd-jwt"] !== undefined){
let data39 = data["vc+sd-jwt"];
const _errs102 = errors;
const _errs103 = errors;
if(errors === _errs103){
if(data39 && typeof data39 == "object" && !Array.isArray(data39)){
const _errs105 = errors;
for(const key12 in data39){
if(!((key12 === "sd-jwt_alg_values") || (key12 === "kb-jwt_alg_values"))){
validate170.errors = [{instancePath:instancePath+"/vc+sd-jwt",schemaPath:"#/definitions/SdJwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key12},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs105 === errors){
if(data39["sd-jwt_alg_values"] !== undefined){
let data40 = data39["sd-jwt_alg_values"];
const _errs106 = errors;
if(errors === _errs106){
if(Array.isArray(data40)){
var valid39 = true;
const len14 = data40.length;
for(let i14=0; i14<len14; i14++){
const _errs108 = errors;
if(typeof data40[i14] !== "string"){
validate170.errors = [{instancePath:instancePath+"/vc+sd-jwt/sd-jwt_alg_values/" + i14,schemaPath:"#/definitions/SdJwtObject/properties/sd-jwt_alg_values/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid39 = _errs108 === errors;
if(!valid39){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/vc+sd-jwt/sd-jwt_alg_values",schemaPath:"#/definitions/SdJwtObject/properties/sd-jwt_alg_values/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs106 === errors;
}
else {
var valid38 = true;
}
if(valid38){
if(data39["kb-jwt_alg_values"] !== undefined){
let data42 = data39["kb-jwt_alg_values"];
const _errs110 = errors;
if(errors === _errs110){
if(Array.isArray(data42)){
var valid40 = true;
const len15 = data42.length;
for(let i15=0; i15<len15; i15++){
const _errs112 = errors;
if(typeof data42[i15] !== "string"){
validate170.errors = [{instancePath:instancePath+"/vc+sd-jwt/kb-jwt_alg_values/" + i15,schemaPath:"#/definitions/SdJwtObject/properties/kb-jwt_alg_values/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid40 = _errs112 === errors;
if(!valid40){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/vc+sd-jwt/kb-jwt_alg_values",schemaPath:"#/definitions/SdJwtObject/properties/kb-jwt_alg_values/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs110 === errors;
}
else {
var valid38 = true;
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/vc+sd-jwt",schemaPath:"#/definitions/SdJwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs102 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.mso_mdoc !== undefined){
let data44 = data.mso_mdoc;
const _errs114 = errors;
const _errs115 = errors;
if(errors === _errs115){
if(data44 && typeof data44 == "object" && !Array.isArray(data44)){
let missing11;
if((data44.alg === undefined) && (missing11 = "alg")){
validate170.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/required",keyword:"required",params:{missingProperty: missing11},message:"must have required property '"+missing11+"'"}];
return false;
}
else {
const _errs117 = errors;
for(const key13 in data44){
if(!(key13 === "alg")){
validate170.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key13},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs117 === errors){
if(data44.alg !== undefined){
let data45 = data44.alg;
const _errs118 = errors;
if(errors === _errs118){
if(Array.isArray(data45)){
var valid43 = true;
const len16 = data45.length;
for(let i16=0; i16<len16; i16++){
const _errs120 = errors;
if(typeof data45[i16] !== "string"){
validate170.errors = [{instancePath:instancePath+"/mso_mdoc/alg/" + i16,schemaPath:"#/definitions/MsoMdocObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid43 = _errs120 === errors;
if(!valid43){
break;
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/mso_mdoc/alg",schemaPath:"#/definitions/MsoMdocObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate170.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs114 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate170.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate170.errors = vErrors;
return errors === 0;
}

const schema291 = {"type":"object","properties":{"name":{"type":"string"},"purpose":{"type":"string"},"rule":{"$ref":"#/definitions/Rules"},"count":{"type":"number"},"min":{"type":"number"},"max":{"type":"number"},"from":{"type":"string"},"from_nested":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}}},"required":["rule"],"additionalProperties":false};
const schema292 = {"type":"string","enum":["all","pick"]};
const wrapper12 = {validate: validate172};

function validate172(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.rule === undefined) && (missing0 = "rule")){
validate172.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((((((key0 === "name") || (key0 === "purpose")) || (key0 === "rule")) || (key0 === "count")) || (key0 === "min")) || (key0 === "max")) || (key0 === "from")) || (key0 === "from_nested"))){
validate172.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.name !== undefined){
const _errs2 = errors;
if(typeof data.name !== "string"){
validate172.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs4 = errors;
if(typeof data.purpose !== "string"){
validate172.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rule !== undefined){
let data2 = data.rule;
const _errs6 = errors;
if(typeof data2 !== "string"){
validate172.errors = [{instancePath:instancePath+"/rule",schemaPath:"#/definitions/Rules/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data2 === "all") || (data2 === "pick"))){
validate172.errors = [{instancePath:instancePath+"/rule",schemaPath:"#/definitions/Rules/enum",keyword:"enum",params:{allowedValues: schema292.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.count !== undefined){
const _errs9 = errors;
if(!(typeof data.count == "number")){
validate172.errors = [{instancePath:instancePath+"/count",schemaPath:"#/properties/count/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.min !== undefined){
const _errs11 = errors;
if(!(typeof data.min == "number")){
validate172.errors = [{instancePath:instancePath+"/min",schemaPath:"#/properties/min/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.max !== undefined){
const _errs13 = errors;
if(!(typeof data.max == "number")){
validate172.errors = [{instancePath:instancePath+"/max",schemaPath:"#/properties/max/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.from !== undefined){
const _errs15 = errors;
if(typeof data.from !== "string"){
validate172.errors = [{instancePath:instancePath+"/from",schemaPath:"#/properties/from/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.from_nested !== undefined){
let data7 = data.from_nested;
const _errs17 = errors;
if(errors === _errs17){
if(Array.isArray(data7)){
var valid2 = true;
const len0 = data7.length;
for(let i0=0; i0<len0; i0++){
const _errs19 = errors;
if(!(wrapper12.validate(data7[i0], {instancePath:instancePath+"/from_nested/" + i0,parentData:data7,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? wrapper12.validate.errors : vErrors.concat(wrapper12.validate.errors);
errors = vErrors.length;
}
var valid2 = _errs19 === errors;
if(!valid2){
break;
}
}
}
else {
validate172.errors = [{instancePath:instancePath+"/from_nested",schemaPath:"#/properties/from_nested/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
else {
validate172.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate172.errors = vErrors;
return errors === 0;
}

const schema293 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"group":{"type":"array","items":{"type":"string"}},"schema":{"type":"array","items":{"$ref":"#/definitions/Schema"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV1"}},"required":["id","schema"],"additionalProperties":false};
const schema294 = {"type":"object","properties":{"uri":{"type":"string"},"required":{"type":"boolean"}},"required":["uri"],"additionalProperties":false};
const schema295 = {"type":"object","properties":{"manifest":{"type":"string"}},"additionalProperties":{}};
const schema296 = {"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV1"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false};
const schema297 = {"type":"string","enum":["required","preferred"]};
const schema298 = {"type":"object","properties":{"active":{"$ref":"#/definitions/PdStatus"},"suspended":{"$ref":"#/definitions/PdStatus"},"revoked":{"$ref":"#/definitions/PdStatus"}},"additionalProperties":false};
const schema299 = {"type":"object","properties":{"directive":{"$ref":"#/definitions/Directives"}},"additionalProperties":false};
const schema300 = {"type":"string","enum":["required","allowed","disallowed"]};

function validate177(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(key0 === "directive")){
validate177.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.directive !== undefined){
let data0 = data.directive;
if(typeof data0 !== "string"){
validate177.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Directives/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!(((data0 === "required") || (data0 === "allowed")) || (data0 === "disallowed"))){
validate177.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Directives/enum",keyword:"enum",params:{allowedValues: schema300.enum},message:"must be equal to one of the allowed values"}];
return false;
}
}
}
}
else {
validate177.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate177.errors = vErrors;
return errors === 0;
}


function validate176(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(((key0 === "active") || (key0 === "suspended")) || (key0 === "revoked"))){
validate176.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.active !== undefined){
const _errs2 = errors;
if(!(validate177(data.active, {instancePath:instancePath+"/active",parentData:data,parentDataProperty:"active",rootData}))){
vErrors = vErrors === null ? validate177.errors : vErrors.concat(validate177.errors);
errors = vErrors.length;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.suspended !== undefined){
const _errs3 = errors;
if(!(validate177(data.suspended, {instancePath:instancePath+"/suspended",parentData:data,parentDataProperty:"suspended",rootData}))){
vErrors = vErrors === null ? validate177.errors : vErrors.concat(validate177.errors);
errors = vErrors.length;
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.revoked !== undefined){
const _errs4 = errors;
if(!(validate177(data.revoked, {instancePath:instancePath+"/revoked",parentData:data,parentDataProperty:"revoked",rootData}))){
vErrors = vErrors === null ? validate177.errors : vErrors.concat(validate177.errors);
errors = vErrors.length;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate176.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate176.errors = vErrors;
return errors === 0;
}

const schema301 = {"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV1"},"predicate":{"$ref":"#/definitions/Optionality"}},"required":["path"],"additionalProperties":false};
const schema302 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"}},"required":["type"],"additionalProperties":false};
const schema303 = {"type":["boolean","number","string"]};
const schema305 = {"type":["number","string"]};

function validate183(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.type === undefined) && (missing0 = "type")){
validate183.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema302.properties, key0))){
validate183.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate183.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema303.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate183.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema303.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate183.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate183.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate183.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate183.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs18 = errors;
if(!(typeof data.minLength == "number")){
validate183.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs20 = errors;
if(!(typeof data.maxLength == "number")){
validate183.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data8 = data.minimum;
const _errs22 = errors;
if((!(typeof data8 == "number")) && (typeof data8 !== "string")){
validate183.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data9 = data.maximum;
const _errs25 = errors;
if((!(typeof data9 == "number")) && (typeof data9 !== "string")){
validate183.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data10 = data.not;
const _errs28 = errors;
if(!(data10 && typeof data10 == "object" && !Array.isArray(data10))){
validate183.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs30 = errors;
if(typeof data.pattern !== "string"){
validate183.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs32 = errors;
if(typeof data.type !== "string"){
validate183.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs32 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate183.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate183.errors = vErrors;
return errors === 0;
}


function validate182(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.path === undefined) && (missing0 = "path")){
validate182.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((key0 === "id") || (key0 === "path")) || (key0 === "purpose")) || (key0 === "filter")) || (key0 === "predicate"))){
validate182.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate182.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.path !== undefined){
let data1 = data.path;
const _errs4 = errors;
if(errors === _errs4){
if(Array.isArray(data1)){
var valid1 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs6 = errors;
if(typeof data1[i0] !== "string"){
validate182.errors = [{instancePath:instancePath+"/path/" + i0,schemaPath:"#/properties/path/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs6 === errors;
if(!valid1){
break;
}
}
}
else {
validate182.errors = [{instancePath:instancePath+"/path",schemaPath:"#/properties/path/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs8 = errors;
if(typeof data.purpose !== "string"){
validate182.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.filter !== undefined){
const _errs10 = errors;
if(!(validate183(data.filter, {instancePath:instancePath+"/filter",parentData:data,parentDataProperty:"filter",rootData}))){
vErrors = vErrors === null ? validate183.errors : vErrors.concat(validate183.errors);
errors = vErrors.length;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.predicate !== undefined){
let data5 = data.predicate;
const _errs11 = errors;
if(typeof data5 !== "string"){
validate182.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data5 === "required") || (data5 === "preferred"))){
validate182.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema297.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate182.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate182.errors = vErrors;
return errors === 0;
}

const schema311 = {"type":"object","properties":{"field_id":{"type":"array","items":{"type":"string"}},"directive":{"$ref":"#/definitions/Optionality"}},"required":["field_id","directive"],"additionalProperties":false};

function validate186(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.field_id === undefined) && (missing0 = "field_id")) || ((data.directive === undefined) && (missing0 = "directive"))){
validate186.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((key0 === "field_id") || (key0 === "directive"))){
validate186.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.field_id !== undefined){
let data0 = data.field_id;
const _errs2 = errors;
if(errors === _errs2){
if(Array.isArray(data0)){
var valid1 = true;
const len0 = data0.length;
for(let i0=0; i0<len0; i0++){
const _errs4 = errors;
if(typeof data0[i0] !== "string"){
validate186.errors = [{instancePath:instancePath+"/field_id/" + i0,schemaPath:"#/properties/field_id/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs4 === errors;
if(!valid1){
break;
}
}
}
else {
validate186.errors = [{instancePath:instancePath+"/field_id",schemaPath:"#/properties/field_id/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.directive !== undefined){
let data2 = data.directive;
const _errs6 = errors;
if(typeof data2 !== "string"){
validate186.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data2 === "required") || (data2 === "preferred"))){
validate186.errors = [{instancePath:instancePath+"/directive",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema297.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
else {
validate186.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate186.errors = vErrors;
return errors === 0;
}


function validate175(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!((((((key0 === "limit_disclosure") || (key0 === "statuses")) || (key0 === "fields")) || (key0 === "subject_is_issuer")) || (key0 === "is_holder")) || (key0 === "same_subject"))){
validate175.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.limit_disclosure !== undefined){
let data0 = data.limit_disclosure;
const _errs2 = errors;
if(typeof data0 !== "string"){
validate175.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data0 === "required") || (data0 === "preferred"))){
validate175.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema297.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.statuses !== undefined){
const _errs5 = errors;
if(!(validate176(data.statuses, {instancePath:instancePath+"/statuses",parentData:data,parentDataProperty:"statuses",rootData}))){
vErrors = vErrors === null ? validate176.errors : vErrors.concat(validate176.errors);
errors = vErrors.length;
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.fields !== undefined){
let data2 = data.fields;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data2)){
var valid2 = true;
const len0 = data2.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(!(validate182(data2[i0], {instancePath:instancePath+"/fields/" + i0,parentData:data2,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate182.errors : vErrors.concat(validate182.errors);
errors = vErrors.length;
}
var valid2 = _errs8 === errors;
if(!valid2){
break;
}
}
}
else {
validate175.errors = [{instancePath:instancePath+"/fields",schemaPath:"#/properties/fields/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_is_issuer !== undefined){
let data4 = data.subject_is_issuer;
const _errs9 = errors;
if(typeof data4 !== "string"){
validate175.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data4 === "required") || (data4 === "preferred"))){
validate175.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema297.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.is_holder !== undefined){
let data5 = data.is_holder;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data5)){
var valid4 = true;
const len1 = data5.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate186(data5[i1], {instancePath:instancePath+"/is_holder/" + i1,parentData:data5,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate186.errors : vErrors.concat(validate186.errors);
errors = vErrors.length;
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate175.errors = [{instancePath:instancePath+"/is_holder",schemaPath:"#/properties/is_holder/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.same_subject !== undefined){
let data7 = data.same_subject;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data7)){
var valid5 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs17 = errors;
if(!(validate186(data7[i2], {instancePath:instancePath+"/same_subject/" + i2,parentData:data7,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate186.errors : vErrors.concat(validate186.errors);
errors = vErrors.length;
}
var valid5 = _errs17 === errors;
if(!valid5){
break;
}
}
}
else {
validate175.errors = [{instancePath:instancePath+"/same_subject",schemaPath:"#/properties/same_subject/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate175.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate175.errors = vErrors;
return errors === 0;
}


function validate174(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.schema === undefined) && (missing0 = "schema"))){
validate174.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "group")) || (key0 === "schema")) || (key0 === "issuance")) || (key0 === "constraints"))){
validate174.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate174.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate174.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate174.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.group !== undefined){
let data3 = data.group;
const _errs8 = errors;
if(errors === _errs8){
if(Array.isArray(data3)){
var valid1 = true;
const len0 = data3.length;
for(let i0=0; i0<len0; i0++){
const _errs10 = errors;
if(typeof data3[i0] !== "string"){
validate174.errors = [{instancePath:instancePath+"/group/" + i0,schemaPath:"#/properties/group/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs10 === errors;
if(!valid1){
break;
}
}
}
else {
validate174.errors = [{instancePath:instancePath+"/group",schemaPath:"#/properties/group/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.schema !== undefined){
let data5 = data.schema;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data5)){
var valid2 = true;
const len1 = data5.length;
for(let i1=0; i1<len1; i1++){
let data6 = data5[i1];
const _errs14 = errors;
const _errs15 = errors;
if(errors === _errs15){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
let missing1;
if((data6.uri === undefined) && (missing1 = "uri")){
validate174.errors = [{instancePath:instancePath+"/schema/" + i1,schemaPath:"#/definitions/Schema/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
const _errs17 = errors;
for(const key1 in data6){
if(!((key1 === "uri") || (key1 === "required"))){
validate174.errors = [{instancePath:instancePath+"/schema/" + i1,schemaPath:"#/definitions/Schema/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs17 === errors){
if(data6.uri !== undefined){
const _errs18 = errors;
if(typeof data6.uri !== "string"){
validate174.errors = [{instancePath:instancePath+"/schema/" + i1+"/uri",schemaPath:"#/definitions/Schema/properties/uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs18 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data6.required !== undefined){
const _errs20 = errors;
if(typeof data6.required !== "boolean"){
validate174.errors = [{instancePath:instancePath+"/schema/" + i1+"/required",schemaPath:"#/definitions/Schema/properties/required/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid4 = _errs20 === errors;
}
else {
var valid4 = true;
}
}
}
}
}
else {
validate174.errors = [{instancePath:instancePath+"/schema/" + i1,schemaPath:"#/definitions/Schema/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid2 = _errs14 === errors;
if(!valid2){
break;
}
}
}
else {
validate174.errors = [{instancePath:instancePath+"/schema",schemaPath:"#/properties/schema/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.issuance !== undefined){
let data9 = data.issuance;
const _errs22 = errors;
if(errors === _errs22){
if(Array.isArray(data9)){
var valid5 = true;
const len2 = data9.length;
for(let i2=0; i2<len2; i2++){
let data10 = data9[i2];
const _errs24 = errors;
const _errs25 = errors;
if(errors === _errs25){
if(data10 && typeof data10 == "object" && !Array.isArray(data10)){
if(data10.manifest !== undefined){
if(typeof data10.manifest !== "string"){
validate174.errors = [{instancePath:instancePath+"/issuance/" + i2+"/manifest",schemaPath:"#/definitions/Issuance/properties/manifest/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
else {
validate174.errors = [{instancePath:instancePath+"/issuance/" + i2,schemaPath:"#/definitions/Issuance/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid5 = _errs24 === errors;
if(!valid5){
break;
}
}
}
else {
validate174.errors = [{instancePath:instancePath+"/issuance",schemaPath:"#/properties/issuance/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.constraints !== undefined){
const _errs30 = errors;
if(!(validate175(data.constraints, {instancePath:instancePath+"/constraints",parentData:data,parentDataProperty:"constraints",rootData}))){
vErrors = vErrors === null ? validate175.errors : vErrors.concat(validate175.errors);
errors = vErrors.length;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
else {
validate174.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate174.errors = vErrors;
return errors === 0;
}


function validate169(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.input_descriptors === undefined) && (missing0 = "input_descriptors"))){
validate169.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "submission_requirements")) || (key0 === "input_descriptors"))){
validate169.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate169.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate169.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate169.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs8 = errors;
if(!(validate170(data.format, {instancePath:instancePath+"/format",parentData:data,parentDataProperty:"format",rootData}))){
vErrors = vErrors === null ? validate170.errors : vErrors.concat(validate170.errors);
errors = vErrors.length;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.submission_requirements !== undefined){
let data4 = data.submission_requirements;
const _errs9 = errors;
if(errors === _errs9){
if(Array.isArray(data4)){
var valid1 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs11 = errors;
if(!(validate172(data4[i0], {instancePath:instancePath+"/submission_requirements/" + i0,parentData:data4,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate172.errors : vErrors.concat(validate172.errors);
errors = vErrors.length;
}
var valid1 = _errs11 === errors;
if(!valid1){
break;
}
}
}
else {
validate169.errors = [{instancePath:instancePath+"/submission_requirements",schemaPath:"#/properties/submission_requirements/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.input_descriptors !== undefined){
let data6 = data.input_descriptors;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data6)){
var valid2 = true;
const len1 = data6.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate174(data6[i1], {instancePath:instancePath+"/input_descriptors/" + i1,parentData:data6,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate174.errors : vErrors.concat(validate174.errors);
errors = vErrors.length;
}
var valid2 = _errs14 === errors;
if(!valid2){
break;
}
}
}
else {
validate169.errors = [{instancePath:instancePath+"/input_descriptors",schemaPath:"#/properties/input_descriptors/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
else {
validate169.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate169.errors = vErrors;
return errors === 0;
}

const schema313 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"submission_requirements":{"type":"array","items":{"$ref":"#/definitions/SubmissionRequirement"}},"input_descriptors":{"type":"array","items":{"$ref":"#/definitions/InputDescriptorV2"}},"frame":{"type":"object"}},"required":["id","input_descriptors"],"additionalProperties":false};
const schema314 = {"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"purpose":{"type":"string"},"format":{"$ref":"#/definitions/Format"},"group":{"type":"array","items":{"type":"string"}},"issuance":{"type":"array","items":{"$ref":"#/definitions/Issuance"}},"constraints":{"$ref":"#/definitions/ConstraintsV2"}},"required":["id","constraints"],"additionalProperties":false};
const schema316 = {"type":"object","properties":{"limit_disclosure":{"$ref":"#/definitions/Optionality"},"statuses":{"$ref":"#/definitions/Statuses"},"fields":{"type":"array","items":{"$ref":"#/definitions/FieldV2"}},"subject_is_issuer":{"$ref":"#/definitions/Optionality"},"is_holder":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}},"same_subject":{"type":"array","items":{"$ref":"#/definitions/HolderSubject"}}},"additionalProperties":false};
const schema318 = {"type":"object","properties":{"id":{"type":"string"},"path":{"type":"array","items":{"type":"string"}},"purpose":{"type":"string"},"filter":{"$ref":"#/definitions/FilterV2"},"predicate":{"$ref":"#/definitions/Optionality"},"intent_to_retain":{"type":"boolean"},"name":{"type":"string"},"optional":{"type":"boolean"}},"required":["path"],"additionalProperties":false};
const schema319 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false};
const schema326 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"additionalProperties":false};
const wrapper13 = {validate: validate201};
const schema333 = {"type":"object","properties":{"const":{"$ref":"#/definitions/OneOfNumberStringBoolean"},"enum":{"type":"array","items":{"$ref":"#/definitions/OneOfNumberStringBoolean"}},"exclusiveMinimum":{"$ref":"#/definitions/OneOfNumberString"},"exclusiveMaximum":{"$ref":"#/definitions/OneOfNumberString"},"format":{"type":"string"},"formatMaximum":{"type":"string"},"formatMinimum":{"type":"string"},"formatExclusiveMaximum":{"type":"string"},"formatExclusiveMinimum":{"type":"string"},"minLength":{"type":"number"},"maxLength":{"type":"number"},"minimum":{"$ref":"#/definitions/OneOfNumberString"},"maximum":{"$ref":"#/definitions/OneOfNumberString"},"not":{"type":"object"},"pattern":{"type":"string"},"type":{"type":"string"},"contains":{"$ref":"#/definitions/FilterV2Base"},"items":{"$ref":"#/definitions/FilterV2BaseItems"}},"required":["type"],"additionalProperties":false};
const wrapper15 = {validate: validate202};

function validate202(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.type === undefined) && (missing0 = "type")){
validate202.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema333.properties, key0))){
validate202.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate202.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema303.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate202.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema303.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate202.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate202.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate202.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate202.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMaximum !== undefined){
const _errs18 = errors;
if(typeof data.formatMaximum !== "string"){
validate202.errors = [{instancePath:instancePath+"/formatMaximum",schemaPath:"#/properties/formatMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMinimum !== undefined){
const _errs20 = errors;
if(typeof data.formatMinimum !== "string"){
validate202.errors = [{instancePath:instancePath+"/formatMinimum",schemaPath:"#/properties/formatMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMaximum !== undefined){
const _errs22 = errors;
if(typeof data.formatExclusiveMaximum !== "string"){
validate202.errors = [{instancePath:instancePath+"/formatExclusiveMaximum",schemaPath:"#/properties/formatExclusiveMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMinimum !== undefined){
const _errs24 = errors;
if(typeof data.formatExclusiveMinimum !== "string"){
validate202.errors = [{instancePath:instancePath+"/formatExclusiveMinimum",schemaPath:"#/properties/formatExclusiveMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs26 = errors;
if(!(typeof data.minLength == "number")){
validate202.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs28 = errors;
if(!(typeof data.maxLength == "number")){
validate202.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data12 = data.minimum;
const _errs30 = errors;
if((!(typeof data12 == "number")) && (typeof data12 !== "string")){
validate202.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data13 = data.maximum;
const _errs33 = errors;
if((!(typeof data13 == "number")) && (typeof data13 !== "string")){
validate202.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data14 = data.not;
const _errs36 = errors;
if(!(data14 && typeof data14 == "object" && !Array.isArray(data14))){
validate202.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs38 = errors;
if(typeof data.pattern !== "string"){
validate202.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs40 = errors;
if(typeof data.type !== "string"){
validate202.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.contains !== undefined){
const _errs42 = errors;
if(!(wrapper13.validate(data.contains, {instancePath:instancePath+"/contains",parentData:data,parentDataProperty:"contains",rootData}))){
vErrors = vErrors === null ? wrapper13.validate.errors : vErrors.concat(wrapper13.validate.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.items !== undefined){
const _errs43 = errors;
if(!(wrapper15.validate(data.items, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
vErrors = vErrors === null ? wrapper15.validate.errors : vErrors.concat(wrapper15.validate.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate202.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate202.errors = vErrors;
return errors === 0;
}


function validate201(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema326.properties, key0))){
validate201.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate201.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema303.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate201.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema303.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate201.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate201.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate201.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate201.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMaximum !== undefined){
const _errs18 = errors;
if(typeof data.formatMaximum !== "string"){
validate201.errors = [{instancePath:instancePath+"/formatMaximum",schemaPath:"#/properties/formatMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMinimum !== undefined){
const _errs20 = errors;
if(typeof data.formatMinimum !== "string"){
validate201.errors = [{instancePath:instancePath+"/formatMinimum",schemaPath:"#/properties/formatMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMaximum !== undefined){
const _errs22 = errors;
if(typeof data.formatExclusiveMaximum !== "string"){
validate201.errors = [{instancePath:instancePath+"/formatExclusiveMaximum",schemaPath:"#/properties/formatExclusiveMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMinimum !== undefined){
const _errs24 = errors;
if(typeof data.formatExclusiveMinimum !== "string"){
validate201.errors = [{instancePath:instancePath+"/formatExclusiveMinimum",schemaPath:"#/properties/formatExclusiveMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs26 = errors;
if(!(typeof data.minLength == "number")){
validate201.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs28 = errors;
if(!(typeof data.maxLength == "number")){
validate201.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data12 = data.minimum;
const _errs30 = errors;
if((!(typeof data12 == "number")) && (typeof data12 !== "string")){
validate201.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data13 = data.maximum;
const _errs33 = errors;
if((!(typeof data13 == "number")) && (typeof data13 !== "string")){
validate201.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data14 = data.not;
const _errs36 = errors;
if(!(data14 && typeof data14 == "object" && !Array.isArray(data14))){
validate201.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs38 = errors;
if(typeof data.pattern !== "string"){
validate201.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs40 = errors;
if(typeof data.type !== "string"){
validate201.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.contains !== undefined){
const _errs42 = errors;
if(!(wrapper13.validate(data.contains, {instancePath:instancePath+"/contains",parentData:data,parentDataProperty:"contains",rootData}))){
vErrors = vErrors === null ? wrapper13.validate.errors : vErrors.concat(wrapper13.validate.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.items !== undefined){
const _errs43 = errors;
if(!(validate202(data.items, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
vErrors = vErrors === null ? validate202.errors : vErrors.concat(validate202.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate201.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate201.errors = vErrors;
return errors === 0;
}


function validate200(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.type === undefined) && (missing0 = "type")){
validate200.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema319.properties, key0))){
validate200.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.const !== undefined){
let data0 = data.const;
const _errs2 = errors;
if(((typeof data0 !== "boolean") && (!(typeof data0 == "number"))) && (typeof data0 !== "string")){
validate200.errors = [{instancePath:instancePath+"/const",schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema303.type},message:"must be boolean,number,string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.enum !== undefined){
let data1 = data.enum;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(((typeof data2 !== "boolean") && (!(typeof data2 == "number"))) && (typeof data2 !== "string")){
validate200.errors = [{instancePath:instancePath+"/enum/" + i0,schemaPath:"#/definitions/OneOfNumberStringBoolean/type",keyword:"type",params:{type: schema303.type},message:"must be boolean,number,string"}];
return false;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
validate200.errors = [{instancePath:instancePath+"/enum",schemaPath:"#/properties/enum/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMinimum !== undefined){
let data3 = data.exclusiveMinimum;
const _errs10 = errors;
if((!(typeof data3 == "number")) && (typeof data3 !== "string")){
validate200.errors = [{instancePath:instancePath+"/exclusiveMinimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exclusiveMaximum !== undefined){
let data4 = data.exclusiveMaximum;
const _errs13 = errors;
if((!(typeof data4 == "number")) && (typeof data4 !== "string")){
validate200.errors = [{instancePath:instancePath+"/exclusiveMaximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs16 = errors;
if(typeof data.format !== "string"){
validate200.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMaximum !== undefined){
const _errs18 = errors;
if(typeof data.formatMaximum !== "string"){
validate200.errors = [{instancePath:instancePath+"/formatMaximum",schemaPath:"#/properties/formatMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatMinimum !== undefined){
const _errs20 = errors;
if(typeof data.formatMinimum !== "string"){
validate200.errors = [{instancePath:instancePath+"/formatMinimum",schemaPath:"#/properties/formatMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMaximum !== undefined){
const _errs22 = errors;
if(typeof data.formatExclusiveMaximum !== "string"){
validate200.errors = [{instancePath:instancePath+"/formatExclusiveMaximum",schemaPath:"#/properties/formatExclusiveMaximum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.formatExclusiveMinimum !== undefined){
const _errs24 = errors;
if(typeof data.formatExclusiveMinimum !== "string"){
validate200.errors = [{instancePath:instancePath+"/formatExclusiveMinimum",schemaPath:"#/properties/formatExclusiveMinimum/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minLength !== undefined){
const _errs26 = errors;
if(!(typeof data.minLength == "number")){
validate200.errors = [{instancePath:instancePath+"/minLength",schemaPath:"#/properties/minLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maxLength !== undefined){
const _errs28 = errors;
if(!(typeof data.maxLength == "number")){
validate200.errors = [{instancePath:instancePath+"/maxLength",schemaPath:"#/properties/maxLength/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.minimum !== undefined){
let data12 = data.minimum;
const _errs30 = errors;
if((!(typeof data12 == "number")) && (typeof data12 !== "string")){
validate200.errors = [{instancePath:instancePath+"/minimum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.maximum !== undefined){
let data13 = data.maximum;
const _errs33 = errors;
if((!(typeof data13 == "number")) && (typeof data13 !== "string")){
validate200.errors = [{instancePath:instancePath+"/maximum",schemaPath:"#/definitions/OneOfNumberString/type",keyword:"type",params:{type: schema305.type},message:"must be number,string"}];
return false;
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.not !== undefined){
let data14 = data.not;
const _errs36 = errors;
if(!(data14 && typeof data14 == "object" && !Array.isArray(data14))){
validate200.errors = [{instancePath:instancePath+"/not",schemaPath:"#/properties/not/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs36 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.pattern !== undefined){
const _errs38 = errors;
if(typeof data.pattern !== "string"){
validate200.errors = [{instancePath:instancePath+"/pattern",schemaPath:"#/properties/pattern/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs38 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs40 = errors;
if(typeof data.type !== "string"){
validate200.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs40 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.contains !== undefined){
const _errs42 = errors;
if(!(validate201(data.contains, {instancePath:instancePath+"/contains",parentData:data,parentDataProperty:"contains",rootData}))){
vErrors = vErrors === null ? validate201.errors : vErrors.concat(validate201.errors);
errors = vErrors.length;
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.items !== undefined){
const _errs43 = errors;
if(!(validate202(data.items, {instancePath:instancePath+"/items",parentData:data,parentDataProperty:"items",rootData}))){
vErrors = vErrors === null ? validate202.errors : vErrors.concat(validate202.errors);
errors = vErrors.length;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate200.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate200.errors = vErrors;
return errors === 0;
}


function validate199(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.path === undefined) && (missing0 = "path")){
validate199.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((((((key0 === "id") || (key0 === "path")) || (key0 === "purpose")) || (key0 === "filter")) || (key0 === "predicate")) || (key0 === "intent_to_retain")) || (key0 === "name")) || (key0 === "optional"))){
validate199.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate199.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.path !== undefined){
let data1 = data.path;
const _errs4 = errors;
if(errors === _errs4){
if(Array.isArray(data1)){
var valid1 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs6 = errors;
if(typeof data1[i0] !== "string"){
validate199.errors = [{instancePath:instancePath+"/path/" + i0,schemaPath:"#/properties/path/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs6 === errors;
if(!valid1){
break;
}
}
}
else {
validate199.errors = [{instancePath:instancePath+"/path",schemaPath:"#/properties/path/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs8 = errors;
if(typeof data.purpose !== "string"){
validate199.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.filter !== undefined){
const _errs10 = errors;
if(!(validate200(data.filter, {instancePath:instancePath+"/filter",parentData:data,parentDataProperty:"filter",rootData}))){
vErrors = vErrors === null ? validate200.errors : vErrors.concat(validate200.errors);
errors = vErrors.length;
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.predicate !== undefined){
let data5 = data.predicate;
const _errs11 = errors;
if(typeof data5 !== "string"){
validate199.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data5 === "required") || (data5 === "preferred"))){
validate199.errors = [{instancePath:instancePath+"/predicate",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema297.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.intent_to_retain !== undefined){
const _errs14 = errors;
if(typeof data.intent_to_retain !== "boolean"){
validate199.errors = [{instancePath:instancePath+"/intent_to_retain",schemaPath:"#/properties/intent_to_retain/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs14 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs16 = errors;
if(typeof data.name !== "string"){
validate199.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.optional !== undefined){
const _errs18 = errors;
if(typeof data.optional !== "boolean"){
validate199.errors = [{instancePath:instancePath+"/optional",schemaPath:"#/properties/optional/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
else {
validate199.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate199.errors = vErrors;
return errors === 0;
}


function validate197(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!((((((key0 === "limit_disclosure") || (key0 === "statuses")) || (key0 === "fields")) || (key0 === "subject_is_issuer")) || (key0 === "is_holder")) || (key0 === "same_subject"))){
validate197.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.limit_disclosure !== undefined){
let data0 = data.limit_disclosure;
const _errs2 = errors;
if(typeof data0 !== "string"){
validate197.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data0 === "required") || (data0 === "preferred"))){
validate197.errors = [{instancePath:instancePath+"/limit_disclosure",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema297.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.statuses !== undefined){
const _errs5 = errors;
if(!(validate176(data.statuses, {instancePath:instancePath+"/statuses",parentData:data,parentDataProperty:"statuses",rootData}))){
vErrors = vErrors === null ? validate176.errors : vErrors.concat(validate176.errors);
errors = vErrors.length;
}
var valid0 = _errs5 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.fields !== undefined){
let data2 = data.fields;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data2)){
var valid2 = true;
const len0 = data2.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(!(validate199(data2[i0], {instancePath:instancePath+"/fields/" + i0,parentData:data2,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate199.errors : vErrors.concat(validate199.errors);
errors = vErrors.length;
}
var valid2 = _errs8 === errors;
if(!valid2){
break;
}
}
}
else {
validate197.errors = [{instancePath:instancePath+"/fields",schemaPath:"#/properties/fields/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_is_issuer !== undefined){
let data4 = data.subject_is_issuer;
const _errs9 = errors;
if(typeof data4 !== "string"){
validate197.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data4 === "required") || (data4 === "preferred"))){
validate197.errors = [{instancePath:instancePath+"/subject_is_issuer",schemaPath:"#/definitions/Optionality/enum",keyword:"enum",params:{allowedValues: schema297.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.is_holder !== undefined){
let data5 = data.is_holder;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data5)){
var valid4 = true;
const len1 = data5.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate186(data5[i1], {instancePath:instancePath+"/is_holder/" + i1,parentData:data5,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate186.errors : vErrors.concat(validate186.errors);
errors = vErrors.length;
}
var valid4 = _errs14 === errors;
if(!valid4){
break;
}
}
}
else {
validate197.errors = [{instancePath:instancePath+"/is_holder",schemaPath:"#/properties/is_holder/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.same_subject !== undefined){
let data7 = data.same_subject;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data7)){
var valid5 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs17 = errors;
if(!(validate186(data7[i2], {instancePath:instancePath+"/same_subject/" + i2,parentData:data7,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate186.errors : vErrors.concat(validate186.errors);
errors = vErrors.length;
}
var valid5 = _errs17 === errors;
if(!valid5){
break;
}
}
}
else {
validate197.errors = [{instancePath:instancePath+"/same_subject",schemaPath:"#/properties/same_subject/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate197.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate197.errors = vErrors;
return errors === 0;
}


function validate195(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.constraints === undefined) && (missing0 = "constraints"))){
validate195.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "group")) || (key0 === "issuance")) || (key0 === "constraints"))){
validate195.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate195.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate195.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate195.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs8 = errors;
if(!(validate170(data.format, {instancePath:instancePath+"/format",parentData:data,parentDataProperty:"format",rootData}))){
vErrors = vErrors === null ? validate170.errors : vErrors.concat(validate170.errors);
errors = vErrors.length;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.group !== undefined){
let data4 = data.group;
const _errs9 = errors;
if(errors === _errs9){
if(Array.isArray(data4)){
var valid1 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs11 = errors;
if(typeof data4[i0] !== "string"){
validate195.errors = [{instancePath:instancePath+"/group/" + i0,schemaPath:"#/properties/group/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid1 = _errs11 === errors;
if(!valid1){
break;
}
}
}
else {
validate195.errors = [{instancePath:instancePath+"/group",schemaPath:"#/properties/group/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.issuance !== undefined){
let data6 = data.issuance;
const _errs13 = errors;
if(errors === _errs13){
if(Array.isArray(data6)){
var valid2 = true;
const len1 = data6.length;
for(let i1=0; i1<len1; i1++){
let data7 = data6[i1];
const _errs15 = errors;
const _errs16 = errors;
if(errors === _errs16){
if(data7 && typeof data7 == "object" && !Array.isArray(data7)){
if(data7.manifest !== undefined){
if(typeof data7.manifest !== "string"){
validate195.errors = [{instancePath:instancePath+"/issuance/" + i1+"/manifest",schemaPath:"#/definitions/Issuance/properties/manifest/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
}
}
else {
validate195.errors = [{instancePath:instancePath+"/issuance/" + i1,schemaPath:"#/definitions/Issuance/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid2 = _errs15 === errors;
if(!valid2){
break;
}
}
}
else {
validate195.errors = [{instancePath:instancePath+"/issuance",schemaPath:"#/properties/issuance/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.constraints !== undefined){
const _errs21 = errors;
if(!(validate197(data.constraints, {instancePath:instancePath+"/constraints",parentData:data,parentDataProperty:"constraints",rootData}))){
vErrors = vErrors === null ? validate197.errors : vErrors.concat(validate197.errors);
errors = vErrors.length;
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
else {
validate195.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate195.errors = vErrors;
return errors === 0;
}


function validate192(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data.id === undefined) && (missing0 = "id")) || ((data.input_descriptors === undefined) && (missing0 = "input_descriptors"))){
validate192.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((((key0 === "id") || (key0 === "name")) || (key0 === "purpose")) || (key0 === "format")) || (key0 === "submission_requirements")) || (key0 === "input_descriptors")) || (key0 === "frame"))){
validate192.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate192.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs4 = errors;
if(typeof data.name !== "string"){
validate192.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.purpose !== undefined){
const _errs6 = errors;
if(typeof data.purpose !== "string"){
validate192.errors = [{instancePath:instancePath+"/purpose",schemaPath:"#/properties/purpose/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs8 = errors;
if(!(validate170(data.format, {instancePath:instancePath+"/format",parentData:data,parentDataProperty:"format",rootData}))){
vErrors = vErrors === null ? validate170.errors : vErrors.concat(validate170.errors);
errors = vErrors.length;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.submission_requirements !== undefined){
let data4 = data.submission_requirements;
const _errs9 = errors;
if(errors === _errs9){
if(Array.isArray(data4)){
var valid1 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs11 = errors;
if(!(validate172(data4[i0], {instancePath:instancePath+"/submission_requirements/" + i0,parentData:data4,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate172.errors : vErrors.concat(validate172.errors);
errors = vErrors.length;
}
var valid1 = _errs11 === errors;
if(!valid1){
break;
}
}
}
else {
validate192.errors = [{instancePath:instancePath+"/submission_requirements",schemaPath:"#/properties/submission_requirements/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.input_descriptors !== undefined){
let data6 = data.input_descriptors;
const _errs12 = errors;
if(errors === _errs12){
if(Array.isArray(data6)){
var valid2 = true;
const len1 = data6.length;
for(let i1=0; i1<len1; i1++){
const _errs14 = errors;
if(!(validate195(data6[i1], {instancePath:instancePath+"/input_descriptors/" + i1,parentData:data6,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate195.errors : vErrors.concat(validate195.errors);
errors = vErrors.length;
}
var valid2 = _errs14 === errors;
if(!valid2){
break;
}
}
}
else {
validate192.errors = [{instancePath:instancePath+"/input_descriptors",schemaPath:"#/properties/input_descriptors/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs12 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.frame !== undefined){
let data8 = data.frame;
const _errs15 = errors;
if(!(data8 && typeof data8 == "object" && !Array.isArray(data8))){
validate192.errors = [{instancePath:instancePath+"/frame",schemaPath:"#/properties/frame/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
else {
validate192.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate192.errors = vErrors;
return errors === 0;
}

const schema342 = {"anyOf":[{"$ref":"#/definitions/ClientIdSchemeOID4VPD18"},{"type":"string","const":"x509_san_dns"},{"type":"string","const":"x509_san_uri"},{"type":"string","const":"verifier_attestation"}]};
const schema343 = {"type":"string","enum":["pre-registered","redirect_uri","entity_id","did"]};

function validate215(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
const _errs0 = errors;
let valid0 = false;
const _errs1 = errors;
if(typeof data !== "string"){
const err0 = {instancePath,schemaPath:"#/definitions/ClientIdSchemeOID4VPD18/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(!((((data === "pre-registered") || (data === "redirect_uri")) || (data === "entity_id")) || (data === "did"))){
const err1 = {instancePath,schemaPath:"#/definitions/ClientIdSchemeOID4VPD18/enum",keyword:"enum",params:{allowedValues: schema343.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs4 = errors;
if(typeof data !== "string"){
const err2 = {instancePath,schemaPath:"#/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if("x509_san_dns" !== data){
const err3 = {instancePath,schemaPath:"#/anyOf/1/const",keyword:"const",params:{allowedValue: "x509_san_dns"},message:"must be equal to constant"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var _valid0 = _errs4 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs6 = errors;
if(typeof data !== "string"){
const err4 = {instancePath,schemaPath:"#/anyOf/2/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if("x509_san_uri" !== data){
const err5 = {instancePath,schemaPath:"#/anyOf/2/const",keyword:"const",params:{allowedValue: "x509_san_uri"},message:"must be equal to constant"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var _valid0 = _errs6 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs8 = errors;
if(typeof data !== "string"){
const err6 = {instancePath,schemaPath:"#/anyOf/3/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("verifier_attestation" !== data){
const err7 = {instancePath,schemaPath:"#/anyOf/3/const",keyword:"const",params:{allowedValue: "verifier_attestation"},message:"must be equal to constant"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var _valid0 = _errs8 === errors;
valid0 = valid0 || _valid0;
}
}
}
if(!valid0){
const err8 = {instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
validate215.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate215.errors = vErrors;
return errors === 0;
}


function validate166(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.id_token_type !== undefined){
const _errs1 = errors;
if(typeof data.id_token_type !== "string"){
validate166.errors = [{instancePath:instancePath+"/id_token_type",schemaPath:"#/properties/id_token_type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_metadata !== undefined){
const _errs3 = errors;
if(!(validate167(data.client_metadata, {instancePath:instancePath+"/client_metadata",parentData:data,parentDataProperty:"client_metadata",rootData}))){
vErrors = vErrors === null ? validate167.errors : vErrors.concat(validate167.errors);
errors = vErrors.length;
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_metadata_uri !== undefined){
const _errs4 = errors;
if(typeof data.client_metadata_uri !== "string"){
validate166.errors = [{instancePath:instancePath+"/client_metadata_uri",schemaPath:"#/properties/client_metadata_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.iss !== undefined){
const _errs6 = errors;
if(typeof data.iss !== "string"){
validate166.errors = [{instancePath:instancePath+"/iss",schemaPath:"#/properties/iss/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.sub !== undefined){
const _errs8 = errors;
if(typeof data.sub !== "string"){
validate166.errors = [{instancePath:instancePath+"/sub",schemaPath:"#/properties/sub/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.aud !== undefined){
let data5 = data.aud;
const _errs10 = errors;
const _errs11 = errors;
let valid1 = false;
const _errs12 = errors;
if(typeof data5 !== "string"){
const err0 = {instancePath:instancePath+"/aud",schemaPath:"#/properties/aud/anyOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs12 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
const _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data5)){
var valid2 = true;
const len0 = data5.length;
for(let i0=0; i0<len0; i0++){
const _errs16 = errors;
if(typeof data5[i0] !== "string"){
const err1 = {instancePath:instancePath+"/aud/" + i0,schemaPath:"#/properties/aud/anyOf/1/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid2 = _errs16 === errors;
if(!valid2){
break;
}
}
}
else {
const err2 = {instancePath:instancePath+"/aud",schemaPath:"#/properties/aud/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
var _valid0 = _errs14 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
const err3 = {instancePath:instancePath+"/aud",schemaPath:"#/properties/aud/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
validate166.errors = vErrors;
return false;
}
else {
errors = _errs11;
if(vErrors !== null){
if(_errs11){
vErrors.length = _errs11;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.iat !== undefined){
const _errs18 = errors;
if(!(typeof data.iat == "number")){
validate166.errors = [{instancePath:instancePath+"/iat",schemaPath:"#/properties/iat/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.nbf !== undefined){
const _errs20 = errors;
if(!(typeof data.nbf == "number")){
validate166.errors = [{instancePath:instancePath+"/nbf",schemaPath:"#/properties/nbf/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs20 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
const _errs22 = errors;
if(typeof data.type !== "string"){
validate166.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs22 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.exp !== undefined){
const _errs24 = errors;
if(!(typeof data.exp == "number")){
validate166.errors = [{instancePath:instancePath+"/exp",schemaPath:"#/properties/exp/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs24 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.rexp !== undefined){
const _errs26 = errors;
if(!(typeof data.rexp == "number")){
validate166.errors = [{instancePath:instancePath+"/rexp",schemaPath:"#/properties/rexp/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jti !== undefined){
const _errs28 = errors;
if(typeof data.jti !== "string"){
validate166.errors = [{instancePath:instancePath+"/jti",schemaPath:"#/properties/jti/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.scope !== undefined){
const _errs30 = errors;
if(typeof data.scope !== "string"){
validate166.errors = [{instancePath:instancePath+"/scope",schemaPath:"#/properties/scope/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_type !== undefined){
let data14 = data.response_type;
const _errs32 = errors;
const _errs33 = errors;
let valid3 = false;
const _errs34 = errors;
if(typeof data14 !== "string"){
const err4 = {instancePath:instancePath+"/response_type",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(!((data14 === "id_token") || (data14 === "vp_token"))){
const err5 = {instancePath:instancePath+"/response_type",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema267.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var _valid1 = _errs34 === errors;
valid3 = valid3 || _valid1;
if(!valid3){
const _errs37 = errors;
if(typeof data14 !== "string"){
const err6 = {instancePath:instancePath+"/response_type",schemaPath:"#/properties/response_type/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
var _valid1 = _errs37 === errors;
valid3 = valid3 || _valid1;
}
if(!valid3){
const err7 = {instancePath:instancePath+"/response_type",schemaPath:"#/properties/response_type/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
validate166.errors = vErrors;
return false;
}
else {
errors = _errs33;
if(vErrors !== null){
if(_errs33){
vErrors.length = _errs33;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs32 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_id !== undefined){
const _errs39 = errors;
if(typeof data.client_id !== "string"){
validate166.errors = [{instancePath:instancePath+"/client_id",schemaPath:"#/properties/client_id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs39 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.redirect_uri !== undefined){
const _errs41 = errors;
if(typeof data.redirect_uri !== "string"){
validate166.errors = [{instancePath:instancePath+"/redirect_uri",schemaPath:"#/properties/redirect_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs41 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.id_token_hint !== undefined){
const _errs43 = errors;
if(typeof data.id_token_hint !== "string"){
validate166.errors = [{instancePath:instancePath+"/id_token_hint",schemaPath:"#/properties/id_token_hint/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.nonce !== undefined){
const _errs45 = errors;
if(typeof data.nonce !== "string"){
validate166.errors = [{instancePath:instancePath+"/nonce",schemaPath:"#/properties/nonce/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs45 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.state !== undefined){
const _errs47 = errors;
if(typeof data.state !== "string"){
validate166.errors = [{instancePath:instancePath+"/state",schemaPath:"#/properties/state/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs47 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_mode !== undefined){
let data20 = data.response_mode;
const _errs49 = errors;
if(typeof data20 !== "string"){
validate166.errors = [{instancePath:instancePath+"/response_mode",schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((((((((data20 === "fragment") || (data20 === "form_post")) || (data20 === "post")) || (data20 === "direct_post")) || (data20 === "query")) || (data20 === "direct_post.jwt")) || (data20 === "query.jwt")) || (data20 === "fragment.jwt"))){
validate166.errors = [{instancePath:instancePath+"/response_mode",schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema274.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs49 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.request !== undefined){
const _errs52 = errors;
if(typeof data.request !== "string"){
validate166.errors = [{instancePath:instancePath+"/request",schemaPath:"#/properties/request/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs52 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.request_uri !== undefined){
const _errs54 = errors;
if(typeof data.request_uri !== "string"){
validate166.errors = [{instancePath:instancePath+"/request_uri",schemaPath:"#/properties/request_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs54 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.claims !== undefined){
let data23 = data.claims;
const _errs56 = errors;
if(!(data23 && typeof data23 == "object" && !Array.isArray(data23))){
validate166.errors = [{instancePath:instancePath+"/claims",schemaPath:"#/definitions/ClaimPayloadCommon/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
var valid0 = _errs56 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.presentation_definition !== undefined){
let data24 = data.presentation_definition;
const _errs59 = errors;
const _errs60 = errors;
let valid7 = false;
const _errs61 = errors;
if(!(validate169(data24, {instancePath:instancePath+"/presentation_definition",parentData:data,parentDataProperty:"presentation_definition",rootData}))){
vErrors = vErrors === null ? validate169.errors : vErrors.concat(validate169.errors);
errors = vErrors.length;
}
var _valid2 = _errs61 === errors;
valid7 = valid7 || _valid2;
if(!valid7){
const _errs62 = errors;
if(!(validate192(data24, {instancePath:instancePath+"/presentation_definition",parentData:data,parentDataProperty:"presentation_definition",rootData}))){
vErrors = vErrors === null ? validate192.errors : vErrors.concat(validate192.errors);
errors = vErrors.length;
}
var _valid2 = _errs62 === errors;
valid7 = valid7 || _valid2;
if(!valid7){
const _errs63 = errors;
if(errors === _errs63){
if(Array.isArray(data24)){
var valid8 = true;
const len1 = data24.length;
for(let i1=0; i1<len1; i1++){
const _errs65 = errors;
if(!(validate169(data24[i1], {instancePath:instancePath+"/presentation_definition/" + i1,parentData:data24,parentDataProperty:i1,rootData}))){
vErrors = vErrors === null ? validate169.errors : vErrors.concat(validate169.errors);
errors = vErrors.length;
}
var valid8 = _errs65 === errors;
if(!valid8){
break;
}
}
}
else {
const err8 = {instancePath:instancePath+"/presentation_definition",schemaPath:"#/properties/presentation_definition/anyOf/2/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
var _valid2 = _errs63 === errors;
valid7 = valid7 || _valid2;
if(!valid7){
const _errs66 = errors;
if(errors === _errs66){
if(Array.isArray(data24)){
var valid9 = true;
const len2 = data24.length;
for(let i2=0; i2<len2; i2++){
const _errs68 = errors;
if(!(validate192(data24[i2], {instancePath:instancePath+"/presentation_definition/" + i2,parentData:data24,parentDataProperty:i2,rootData}))){
vErrors = vErrors === null ? validate192.errors : vErrors.concat(validate192.errors);
errors = vErrors.length;
}
var valid9 = _errs68 === errors;
if(!valid9){
break;
}
}
}
else {
const err9 = {instancePath:instancePath+"/presentation_definition",schemaPath:"#/properties/presentation_definition/anyOf/3/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
var _valid2 = _errs66 === errors;
valid7 = valid7 || _valid2;
}
}
}
if(!valid7){
const err10 = {instancePath:instancePath+"/presentation_definition",schemaPath:"#/properties/presentation_definition/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
validate166.errors = vErrors;
return false;
}
else {
errors = _errs60;
if(vErrors !== null){
if(_errs60){
vErrors.length = _errs60;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs59 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.presentation_definition_uri !== undefined){
const _errs69 = errors;
if(typeof data.presentation_definition_uri !== "string"){
validate166.errors = [{instancePath:instancePath+"/presentation_definition_uri",schemaPath:"#/properties/presentation_definition_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs69 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_id_scheme !== undefined){
const _errs71 = errors;
if(!(validate215(data.client_id_scheme, {instancePath:instancePath+"/client_id_scheme",parentData:data,parentDataProperty:"client_id_scheme",rootData}))){
vErrors = vErrors === null ? validate215.errors : vErrors.concat(validate215.errors);
errors = vErrors.length;
}
var valid0 = _errs71 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_uri !== undefined){
const _errs72 = errors;
if(typeof data.response_uri !== "string"){
validate166.errors = [{instancePath:instancePath+"/response_uri",schemaPath:"#/properties/response_uri/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs72 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate166.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate166.errors = vErrors;
return errors === 0;
}


function validate165(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="AuthorizationRequestPayloadVD12OID4VPD20Schema" */;
let vErrors = null;
let errors = 0;
if(!(validate166(data, {instancePath,parentData,parentDataProperty,rootData}))){
vErrors = vErrors === null ? validate166.errors : vErrors.concat(validate166.errors);
errors = vErrors.length;
}
validate165.errors = vErrors;
return errors === 0;
}

exports.AuthorizationResponseOptsSchema = validate218;
const schema344 = {"$id":"AuthorizationResponseOptsSchema","$schema":"http://json-schema.org/draft-07/schema#","$ref":"#/definitions/AuthorizationResponseOpts","definitions":{"AuthorizationResponseOpts":{"type":"object","properties":{"responseURI":{"type":"string"},"responseURIType":{"$ref":"#/definitions/ResponseURIType"},"registration":{"$ref":"#/definitions/ResponseRegistrationOpts"},"version":{"$ref":"#/definitions/SupportedVersion"},"audience":{"type":"string"},"createJwtCallback":{"$ref":"#/definitions/CreateJwtCallback"},"jwtIssuer":{"$ref":"#/definitions/JwtIssuer"},"responseMode":{"$ref":"#/definitions/ResponseMode"},"responseType":{"type":"array","items":{"$ref":"#/definitions/ResponseType"},"minItems":1,"maxItems":1},"expiresIn":{"type":"number"},"accessToken":{"type":"string"},"tokenType":{"type":"string"},"refreshToken":{"type":"string"},"presentationExchange":{"$ref":"#/definitions/PresentationExchangeResponseOpts"}},"required":["createJwtCallback"],"additionalProperties":false},"ResponseURIType":{"type":"string","enum":["response_uri","redirect_uri"]},"ResponseRegistrationOpts":{"anyOf":[{"type":"object","properties":{"passBy":{"$ref":"#/definitions/PassBy"},"reference_uri":{"type":"string"},"targets":{"$ref":"#/definitions/PropertyTargets"},"id_token_encrypted_response_alg":{"$ref":"#/definitions/EncKeyAlgorithm"},"id_token_encrypted_response_enc":{"$ref":"#/definitions/EncSymmetricAlgorithmCode"},"authorizationEndpoint":{"anyOf":[{"$ref":"#/definitions/Schema"},{"type":"string"}]},"issuer":{"anyOf":[{"$ref":"#/definitions/ResponseIss"},{"type":"string"}]},"responseTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subjectTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"idTokenSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"requestObjectSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"tokenEndpoint":{"type":"string"},"userinfoEndpoint":{"type":"string"},"jwksUri":{"type":"string"},"registrationEndpoint":{"type":"string"},"responseModesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseMode"}},{"$ref":"#/definitions/ResponseMode"}]},"grantTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/GrantType"}},{"$ref":"#/definitions/GrantType"}]},"acrValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AuthenticationContextReferences"}},{"$ref":"#/definitions/AuthenticationContextReferences"}]},"idTokenEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"idTokenEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"userinfoSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfoEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfoEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"requestObjectEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"requestObjectEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"tokenEndpointAuthMethodsSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TokenEndpointAuthMethod"}},{"$ref":"#/definitions/TokenEndpointAuthMethod"}]},"tokenEndpointAuthSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"displayValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claimTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ClaimType"}},{"$ref":"#/definitions/ClaimType"}]},"claimsSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"serviceDocumentation":{"type":"string"},"claimsLocalesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"uiLocalesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claimsParameterSupported":{"type":"boolean"},"requestParameterSupported":{"type":"boolean"},"requestUriParameterSupported":{"type":"boolean"},"requireRequestUriRegistration":{"type":"boolean"},"opPolicyUri":{"type":"string"},"opTosUri":{"type":"string"},"client_id":{"type":"string"},"redirectUris":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"clientName":{"type":"string"},"clientUri":{"type":"string"},"scope":{"type":"string"},"contacts":{"type":"array","items":{"type":"string"}},"tosUri":{"type":"string"},"policyUri":{"type":"string"},"jwks":{"$ref":"#/definitions/JWKS"},"softwareId":{"type":"string"},"softwareVersion":{"type":"string"},"tokenEndpointAuthMethod":{"type":"string"},"applicationType":{"type":"string"},"responseTypes":{"type":"string"},"grantTypes":{"type":"string"},"vpFormats":{"$ref":"#/definitions/Format"},"logo_uri":{"type":"string"},"clientPurpose":{"type":"string"}},"required":["passBy"]},{"type":"object","properties":{"passBy":{"$ref":"#/definitions/PassBy"},"reference_uri":{"type":"string"},"targets":{"$ref":"#/definitions/PropertyTargets"},"id_token_encrypted_response_alg":{"$ref":"#/definitions/EncKeyAlgorithm"},"id_token_encrypted_response_enc":{"$ref":"#/definitions/EncSymmetricAlgorithmCode"},"authorizationEndpoint":{"anyOf":[{"$ref":"#/definitions/Schema"},{"type":"string"}]},"issuer":{"anyOf":[{"$ref":"#/definitions/ResponseIss"},{"type":"string"}]},"responseTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subjectTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"idTokenSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"requestObjectSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"tokenEndpoint":{"type":"string"},"userinfoEndpoint":{"type":"string"},"jwksUri":{"type":"string"},"registrationEndpoint":{"type":"string"},"responseModesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseMode"}},{"$ref":"#/definitions/ResponseMode"}]},"grantTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/GrantType"}},{"$ref":"#/definitions/GrantType"}]},"acrValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AuthenticationContextReferences"}},{"$ref":"#/definitions/AuthenticationContextReferences"}]},"idTokenEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"idTokenEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"userinfoSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfoEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfoEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"requestObjectEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"requestObjectEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"tokenEndpointAuthMethodsSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TokenEndpointAuthMethod"}},{"$ref":"#/definitions/TokenEndpointAuthMethod"}]},"tokenEndpointAuthSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"displayValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claimTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ClaimType"}},{"$ref":"#/definitions/ClaimType"}]},"claimsSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"serviceDocumentation":{"type":"string"},"claimsLocalesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"uiLocalesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claimsParameterSupported":{"type":"boolean"},"requestParameterSupported":{"type":"boolean"},"requestUriParameterSupported":{"type":"boolean"},"requireRequestUriRegistration":{"type":"boolean"},"opPolicyUri":{"type":"string"},"opTosUri":{"type":"string"},"client_id":{"type":"string"},"redirectUris":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"clientName":{"type":"string"},"clientUri":{"type":"string"},"scope":{"type":"string"},"contacts":{"type":"array","items":{"type":"string"}},"tosUri":{"type":"string"},"policyUri":{"type":"string"},"jwks":{"$ref":"#/definitions/JWKS"},"softwareId":{"type":"string"},"softwareVersion":{"type":"string"},"tokenEndpointAuthMethod":{"type":"string"},"applicationType":{"type":"string"},"responseTypes":{"type":"string"},"grantTypes":{"type":"string"},"vpFormats":{"$ref":"#/definitions/Format"}},"required":["passBy"]},{"type":"object","properties":{"passBy":{"$ref":"#/definitions/PassBy"},"reference_uri":{"type":"string"},"targets":{"$ref":"#/definitions/PropertyTargets"},"id_token_encrypted_response_alg":{"$ref":"#/definitions/EncKeyAlgorithm"},"id_token_encrypted_response_enc":{"$ref":"#/definitions/EncSymmetricAlgorithmCode"},"authorizationEndpoint":{"anyOf":[{"$ref":"#/definitions/Schema"},{"type":"string"}]},"issuer":{"anyOf":[{"$ref":"#/definitions/ResponseIss"},{"type":"string"}]},"responseTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subjectTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"idTokenSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"requestObjectSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"tokenEndpoint":{"type":"string"},"userinfoEndpoint":{"type":"string"},"jwksUri":{"type":"string"},"registrationEndpoint":{"type":"string"},"responseModesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseMode"}},{"$ref":"#/definitions/ResponseMode"}]},"grantTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/GrantType"}},{"$ref":"#/definitions/GrantType"}]},"acrValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AuthenticationContextReferences"}},{"$ref":"#/definitions/AuthenticationContextReferences"}]},"idTokenEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"idTokenEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"userinfoSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfoEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfoEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"requestObjectEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"requestObjectEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"tokenEndpointAuthMethodsSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TokenEndpointAuthMethod"}},{"$ref":"#/definitions/TokenEndpointAuthMethod"}]},"tokenEndpointAuthSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"displayValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claimTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ClaimType"}},{"$ref":"#/definitions/ClaimType"}]},"claimsSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"serviceDocumentation":{"type":"string"},"claimsLocalesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"uiLocalesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claimsParameterSupported":{"type":"boolean"},"requestParameterSupported":{"type":"boolean"},"requestUriParameterSupported":{"type":"boolean"},"requireRequestUriRegistration":{"type":"boolean"},"opPolicyUri":{"type":"string"},"opTosUri":{"type":"string"},"idTokenTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/IdTokenType"}},{"$ref":"#/definitions/IdTokenType"}]},"vpFormatsSupported":{"$ref":"#/definitions/Format"}},"required":["passBy"]}]},"PassBy":{"type":"string","enum":["NONE","REFERENCE","VALUE"]},"PropertyTargets":{"anyOf":[{"$ref":"#/definitions/PropertyTarget"},{"type":"array","items":{"$ref":"#/definitions/PropertyTarget"}}]},"PropertyTarget":{"type":"string","enum":["authorization-request","request-object"],"description":"Determines where a property will end up. Methods that support this argument are optional. If you do not provide any value it will default to all targets."},"EncKeyAlgorithm":{"type":"string","const":"ECDH-ES"},"EncSymmetricAlgorithmCode":{"type":"string","const":"XC20P"},"Schema":{"type":"string","enum":["openid:","openid-vc:"]},"ResponseIss":{"type":"string","enum":["https://self-issued.me","https://self-issued.me/v2","https://self-issued.me/v2/openid-vc"]},"ResponseType":{"type":"string","enum":["id_token","vp_token"]},"Scope":{"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]},"SubjectType":{"type":"string","enum":["public","pairwise"]},"SigningAlgo":{"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]},"ResponseMode":{"type":"string","enum":["fragment","form_post","post","direct_post","query","direct_post.jwt","query.jwt","fragment.jwt"]},"GrantType":{"type":"string","enum":["authorization_code","implicit"]},"AuthenticationContextReferences":{"type":"string","enum":["phr","phrh"]},"TokenEndpointAuthMethod":{"type":"string","enum":["client_secret_post","client_secret_basic","client_secret_jwt","private_key_jwt"]},"ClaimType":{"type":"string","enum":["normal","aggregated","distributed"]},"JWKS":{"type":"object","properties":{"keys":{"type":"array","items":{"$ref":"#/definitions/JWK"}}},"required":["keys"],"additionalProperties":false},"JWK":{"type":"object","properties":{"kty":{"type":"string"},"crv":{"type":"string"},"x":{"type":"string"},"y":{"type":"string"},"e":{"type":"string"},"n":{"type":"string"},"alg":{"type":"string"},"d":{"type":"string"},"dp":{"type":"string"},"dq":{"type":"string"},"ext":{"type":"boolean"},"k":{"type":"string"},"key_ops":{"type":"array","items":{"type":"string"}},"kid":{"type":"string"},"oth":{"type":"array","items":{"type":"object","properties":{"d":{"type":"string"},"r":{"type":"string"},"t":{"type":"string"}},"additionalProperties":false}},"p":{"type":"string"},"q":{"type":"string"},"qi":{"type":"string"},"use":{"type":"string"},"x5c":{"type":"array","items":{"type":"string"}},"x5t":{"type":"string"},"x5t#S256":{"type":"string"},"x5u":{"type":"string"}},"additionalProperties":{}},"Format":{"type":"object","properties":{"jwt":{"$ref":"#/definitions/JwtObject"},"jwt_vc":{"$ref":"#/definitions/JwtObject"},"jwt_vc_json":{"$ref":"#/definitions/JwtObject"},"jwt_vp":{"$ref":"#/definitions/JwtObject"},"jwt_vp_json":{"$ref":"#/definitions/JwtObject"},"ldp":{"$ref":"#/definitions/LdpObject"},"ldp_vc":{"$ref":"#/definitions/LdpObject"},"ldp_vp":{"$ref":"#/definitions/LdpObject"},"di":{"$ref":"#/definitions/DiObject"},"di_vc":{"$ref":"#/definitions/DiObject"},"di_vp":{"$ref":"#/definitions/DiObject"},"vc+sd-jwt":{"$ref":"#/definitions/SdJwtObject"},"mso_mdoc":{"$ref":"#/definitions/MsoMdocObject"}},"additionalProperties":false},"JwtObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false},"LdpObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}}},"required":["proof_type"],"additionalProperties":false},"DiObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}},"cryptosuite":{"type":"array","items":{"type":"string"}}},"required":["proof_type","cryptosuite"],"additionalProperties":false},"SdJwtObject":{"type":"object","properties":{"sd-jwt_alg_values":{"type":"array","items":{"type":"string"}},"kb-jwt_alg_values":{"type":"array","items":{"type":"string"}}},"additionalProperties":false},"MsoMdocObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false},"IdTokenType":{"type":"string","enum":["subject_signed","attester_signed"]},"SupportedVersion":{"type":"number","enum":[70,110,180,200,71]},"CreateJwtCallback":{"$ref":"#/definitions/CreateJwtCallback%3CJwtIssuerWithContext%3E"},"CreateJwtCallback<JwtIssuerWithContext>":{"properties":{"isFunction":{"type":"boolean","const":true}}},"JwtIssuer":{"anyOf":[{"$ref":"#/definitions/JwtIssuerDid"},{"$ref":"#/definitions/JwtIssuerX5c"},{"$ref":"#/definitions/JwtIssuerJwk"},{"$ref":"#/definitions/JwtIssuerCustom"}]},"JwtIssuerDid":{"type":"object","properties":{"method":{"type":"string","const":"did"},"options":{"type":"object","additionalProperties":{},"description":"Additional options for the issuance context"},"didUrl":{"type":"string"},"alg":{"anyOf":[{"$ref":"#/definitions/SigningAlgo"},{"type":"string"}]}},"required":["alg","didUrl","method"],"additionalProperties":false},"JwtIssuerX5c":{"type":"object","properties":{"method":{"type":"string","const":"x5c"},"options":{"type":"object","additionalProperties":{},"description":"Additional options for the issuance context"},"alg":{"anyOf":[{"$ref":"#/definitions/SigningAlgo"},{"type":"string"}]},"x5c":{"type":"array","items":{"type":"string"},"description":"Array of base64-encoded certificate strings in the DER-format.\n\nThe certificate containing the public key corresponding to the key used to digitally sign the JWS MUST be the first certificate."},"issuer":{"type":"string","description":"The issuer jwt\n\nThis value will be used as the iss value of the issue jwt. It is also used as the client_id. And will also be set as the redirect_uri\n\nIt must match an entry in the x5c certificate leaf entry dnsName / uriName"}},"required":["alg","issuer","method","x5c"],"additionalProperties":false},"JwtIssuerJwk":{"type":"object","properties":{"method":{"type":"string","const":"jwk"},"options":{"type":"object","additionalProperties":{},"description":"Additional options for the issuance context"},"alg":{"anyOf":[{"$ref":"#/definitions/SigningAlgo"},{"type":"string"}]},"jwk":{"$ref":"#/definitions/JWK"}},"required":["alg","jwk","method"],"additionalProperties":false},"JwtIssuerCustom":{"type":"object","properties":{"method":{"type":"string","const":"custom"},"options":{"type":"object","additionalProperties":{},"description":"Additional options for the issuance context"}},"required":["method"],"additionalProperties":false},"PresentationExchangeResponseOpts":{"type":"object","properties":{"verifiablePresentations":{"type":"array","items":{"anyOf":[{"$ref":"#/definitions/W3CVerifiablePresentation"},{"$ref":"#/definitions/CompactSdJwtVc"},{"$ref":"#/definitions/MdocOid4vpMdocVpToken"}]}},"vpTokenLocation":{"$ref":"#/definitions/VPTokenLocation"},"presentationSubmission":{"$ref":"#/definitions/PresentationSubmission"},"restrictToFormats":{"$ref":"#/definitions/Format"},"restrictToDIDMethods":{"type":"array","items":{"type":"string"}}},"required":["verifiablePresentations"],"additionalProperties":false},"W3CVerifiablePresentation":{"anyOf":[{"$ref":"#/definitions/IVerifiablePresentation"},{"$ref":"#/definitions/CompactJWT"}],"description":"Represents a signed Verifiable Presentation (includes proof), in either JSON or compact JWT format. See  {@link  https://www.w3.org/TR/vc-data-model/#presentations VC data model }  See  {@link  https://www.w3.org/TR/vc-data-model/#proof-formats proof formats }"},"IVerifiablePresentation":{"type":"object","properties":{"proof":{"anyOf":[{"$ref":"#/definitions/IProof"},{"type":"array","items":{"$ref":"#/definitions/IProof"}}]},"id":{"type":"string"},"@context":{"anyOf":[{"$ref":"#/definitions/ICredentialContextType"},{"type":"array","items":{"$ref":"#/definitions/ICredentialContextType"}}]},"type":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"verifiableCredential":{"type":"array","items":{"$ref":"#/definitions/W3CVerifiableCredential"}},"presentation_submission":{"$ref":"#/definitions/PresentationSubmission"},"holder":{"type":"string"},"verifier":{"type":"string"}},"required":["@context","proof"]},"IProof":{"type":"object","properties":{"type":{"anyOf":[{"$ref":"#/definitions/IProofType"},{"type":"string"}]},"created":{"type":"string"},"proofPurpose":{"anyOf":[{"$ref":"#/definitions/IProofPurpose"},{"type":"string"}]},"verificationMethod":{"type":"string"},"challenge":{"type":"string"},"domain":{"type":"string"},"proofValue":{"type":"string"},"jws":{"type":"string"},"jwt":{"type":"string"},"mso_mdoc":{"type":"string"},"nonce":{"type":"string"},"requiredRevealStatements":{"type":"array","items":{"type":"string"}}},"required":["type","created","proofPurpose","verificationMethod"]},"IProofType":{"type":"string","enum":["Ed25519Signature2018","Ed25519Signature2020","EcdsaSecp256k1Signature2019","EcdsaSecp256k1RecoverySignature2020","JsonWebSignature2020","RsaSignature2018","GpgSignature2020","JcsEd25519Signature2020","BbsBlsSignatureProof2020","BbsBlsBoundSignatureProof2020","JwtProof2020","SdJwtProof2024","MsoMdocProof2024"]},"IProofPurpose":{"type":"string","enum":["verificationMethod","assertionMethod","authentication","keyAgreement","contactAgreement","capabilityInvocation","capabilityDelegation"]},"ICredentialContextType":{"anyOf":[{"type":"object","properties":{"name":{"type":"string"},"did":{"type":"string"}}},{"type":"string"}]},"W3CVerifiableCredential":{"anyOf":[{"$ref":"#/definitions/IVerifiableCredential"},{"$ref":"#/definitions/CompactJWT"}],"description":"Represents a signed Verifiable Credential (includes proof), in either JSON, compact JWT or compact SD-JWT VC format. See  {@link  https://www.w3.org/TR/vc-data-model/#credentials VC data model }  See  {@link  https://www.w3.org/TR/vc-data-model/#proof-formats proof formats }"},"IVerifiableCredential":{"type":"object","properties":{"proof":{"anyOf":[{"$ref":"#/definitions/IProof"},{"type":"array","items":{"$ref":"#/definitions/IProof"}}]},"@context":{"anyOf":[{"$ref":"#/definitions/ICredentialContextType"},{"type":"array","items":{"$ref":"#/definitions/ICredentialContextType"}}]},"type":{"type":"array","items":{"type":"string"}},"credentialSchema":{"anyOf":[{"$ref":"#/definitions/ICredentialSchemaType"},{"type":"array","items":{"$ref":"#/definitions/ICredentialSchemaType"}}]},"issuer":{"anyOf":[{"$ref":"#/definitions/IIssuerId"},{"$ref":"#/definitions/IIssuer"}]},"issuanceDate":{"type":"string"},"credentialSubject":{"anyOf":[{"type":"object","properties":{"id":{"type":"string"}}},{"type":"array","items":{"type":"object","properties":{"id":{"type":"string"}}}}]},"expirationDate":{"type":"string"},"id":{"type":"string"},"credentialStatus":{"$ref":"#/definitions/ICredentialStatus"},"description":{"type":"string"},"name":{"type":"string"}},"required":["@context","credentialSubject","issuanceDate","issuer","proof","type"]},"ICredentialSchemaType":{"anyOf":[{"$ref":"#/definitions/ICredentialSchema"},{"type":"string"}]},"ICredentialSchema":{"type":"object","properties":{"id":{"type":"string"},"type":{"type":"string"}},"required":["id"],"additionalProperties":false},"IIssuerId":{"type":"string"},"IIssuer":{"type":"object","properties":{"id":{"type":"string"}},"required":["id"]},"ICredentialStatus":{"type":"object","properties":{"id":{"type":"string"},"type":{"type":"string"}},"required":["id","type"]},"CompactJWT":{"type":"string","description":"Represents a Json Web Token in compact form."},"PresentationSubmission":{"type":"object","properties":{"id":{"type":"string","description":"A UUID or some other unique ID to identify this Presentation Submission"},"definition_id":{"type":"string","description":"A UUID or some other unique ID to identify this Presentation Definition"},"descriptor_map":{"type":"array","items":{"$ref":"#/definitions/Descriptor"},"description":"List of descriptors of how the claims are being mapped to presentation definition"}},"required":["id","definition_id","descriptor_map"],"additionalProperties":false,"description":"It expresses how the inputs are presented as proofs to a Verifier."},"Descriptor":{"type":"object","properties":{"id":{"type":"string","description":"ID to identify the descriptor from Presentation Definition Input Descriptor it coresponds to."},"path":{"type":"string","description":"The path where the verifiable credential is located in the presentation submission json"},"path_nested":{"$ref":"#/definitions/Descriptor"},"format":{"type":"string","description":"The Proof or JWT algorith that the proof is in"}},"required":["id","path","format"],"additionalProperties":false,"description":"descriptor map laying out the structure of the presentation submission."},"CompactSdJwtVc":{"type":"string","description":"Represents a selective disclosure JWT vc in compact form."},"MdocOid4vpMdocVpToken":{"type":"string"},"VPTokenLocation":{"type":"string","enum":["authorization_response","id_token","token_response"]}}};
const schema345 = {"type":"object","properties":{"responseURI":{"type":"string"},"responseURIType":{"$ref":"#/definitions/ResponseURIType"},"registration":{"$ref":"#/definitions/ResponseRegistrationOpts"},"version":{"$ref":"#/definitions/SupportedVersion"},"audience":{"type":"string"},"createJwtCallback":{"$ref":"#/definitions/CreateJwtCallback"},"jwtIssuer":{"$ref":"#/definitions/JwtIssuer"},"responseMode":{"$ref":"#/definitions/ResponseMode"},"responseType":{"type":"array","items":{"$ref":"#/definitions/ResponseType"},"minItems":1,"maxItems":1},"expiresIn":{"type":"number"},"accessToken":{"type":"string"},"tokenType":{"type":"string"},"refreshToken":{"type":"string"},"presentationExchange":{"$ref":"#/definitions/PresentationExchangeResponseOpts"}},"required":["createJwtCallback"],"additionalProperties":false};
const schema346 = {"type":"string","enum":["response_uri","redirect_uri"]};
const schema474 = {"type":"number","enum":[70,110,180,200,71]};
const schema475 = {"properties":{"isFunction":{"type":"boolean","const":true}}};
const schema366 = {"type":"string","enum":["fragment","form_post","post","direct_post","query","direct_post.jwt","query.jwt","fragment.jwt"]};
const schema356 = {"type":"string","enum":["id_token","vp_token"]};
const schema347 = {"anyOf":[{"type":"object","properties":{"passBy":{"$ref":"#/definitions/PassBy"},"reference_uri":{"type":"string"},"targets":{"$ref":"#/definitions/PropertyTargets"},"id_token_encrypted_response_alg":{"$ref":"#/definitions/EncKeyAlgorithm"},"id_token_encrypted_response_enc":{"$ref":"#/definitions/EncSymmetricAlgorithmCode"},"authorizationEndpoint":{"anyOf":[{"$ref":"#/definitions/Schema"},{"type":"string"}]},"issuer":{"anyOf":[{"$ref":"#/definitions/ResponseIss"},{"type":"string"}]},"responseTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subjectTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"idTokenSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"requestObjectSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"tokenEndpoint":{"type":"string"},"userinfoEndpoint":{"type":"string"},"jwksUri":{"type":"string"},"registrationEndpoint":{"type":"string"},"responseModesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseMode"}},{"$ref":"#/definitions/ResponseMode"}]},"grantTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/GrantType"}},{"$ref":"#/definitions/GrantType"}]},"acrValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AuthenticationContextReferences"}},{"$ref":"#/definitions/AuthenticationContextReferences"}]},"idTokenEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"idTokenEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"userinfoSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfoEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfoEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"requestObjectEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"requestObjectEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"tokenEndpointAuthMethodsSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TokenEndpointAuthMethod"}},{"$ref":"#/definitions/TokenEndpointAuthMethod"}]},"tokenEndpointAuthSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"displayValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claimTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ClaimType"}},{"$ref":"#/definitions/ClaimType"}]},"claimsSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"serviceDocumentation":{"type":"string"},"claimsLocalesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"uiLocalesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claimsParameterSupported":{"type":"boolean"},"requestParameterSupported":{"type":"boolean"},"requestUriParameterSupported":{"type":"boolean"},"requireRequestUriRegistration":{"type":"boolean"},"opPolicyUri":{"type":"string"},"opTosUri":{"type":"string"},"client_id":{"type":"string"},"redirectUris":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"clientName":{"type":"string"},"clientUri":{"type":"string"},"scope":{"type":"string"},"contacts":{"type":"array","items":{"type":"string"}},"tosUri":{"type":"string"},"policyUri":{"type":"string"},"jwks":{"$ref":"#/definitions/JWKS"},"softwareId":{"type":"string"},"softwareVersion":{"type":"string"},"tokenEndpointAuthMethod":{"type":"string"},"applicationType":{"type":"string"},"responseTypes":{"type":"string"},"grantTypes":{"type":"string"},"vpFormats":{"$ref":"#/definitions/Format"},"logo_uri":{"type":"string"},"clientPurpose":{"type":"string"}},"required":["passBy"]},{"type":"object","properties":{"passBy":{"$ref":"#/definitions/PassBy"},"reference_uri":{"type":"string"},"targets":{"$ref":"#/definitions/PropertyTargets"},"id_token_encrypted_response_alg":{"$ref":"#/definitions/EncKeyAlgorithm"},"id_token_encrypted_response_enc":{"$ref":"#/definitions/EncSymmetricAlgorithmCode"},"authorizationEndpoint":{"anyOf":[{"$ref":"#/definitions/Schema"},{"type":"string"}]},"issuer":{"anyOf":[{"$ref":"#/definitions/ResponseIss"},{"type":"string"}]},"responseTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subjectTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"idTokenSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"requestObjectSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"tokenEndpoint":{"type":"string"},"userinfoEndpoint":{"type":"string"},"jwksUri":{"type":"string"},"registrationEndpoint":{"type":"string"},"responseModesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseMode"}},{"$ref":"#/definitions/ResponseMode"}]},"grantTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/GrantType"}},{"$ref":"#/definitions/GrantType"}]},"acrValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AuthenticationContextReferences"}},{"$ref":"#/definitions/AuthenticationContextReferences"}]},"idTokenEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"idTokenEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"userinfoSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfoEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfoEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"requestObjectEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"requestObjectEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"tokenEndpointAuthMethodsSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TokenEndpointAuthMethod"}},{"$ref":"#/definitions/TokenEndpointAuthMethod"}]},"tokenEndpointAuthSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"displayValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claimTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ClaimType"}},{"$ref":"#/definitions/ClaimType"}]},"claimsSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"serviceDocumentation":{"type":"string"},"claimsLocalesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"uiLocalesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claimsParameterSupported":{"type":"boolean"},"requestParameterSupported":{"type":"boolean"},"requestUriParameterSupported":{"type":"boolean"},"requireRequestUriRegistration":{"type":"boolean"},"opPolicyUri":{"type":"string"},"opTosUri":{"type":"string"},"client_id":{"type":"string"},"redirectUris":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"clientName":{"type":"string"},"clientUri":{"type":"string"},"scope":{"type":"string"},"contacts":{"type":"array","items":{"type":"string"}},"tosUri":{"type":"string"},"policyUri":{"type":"string"},"jwks":{"$ref":"#/definitions/JWKS"},"softwareId":{"type":"string"},"softwareVersion":{"type":"string"},"tokenEndpointAuthMethod":{"type":"string"},"applicationType":{"type":"string"},"responseTypes":{"type":"string"},"grantTypes":{"type":"string"},"vpFormats":{"$ref":"#/definitions/Format"}},"required":["passBy"]},{"type":"object","properties":{"passBy":{"$ref":"#/definitions/PassBy"},"reference_uri":{"type":"string"},"targets":{"$ref":"#/definitions/PropertyTargets"},"id_token_encrypted_response_alg":{"$ref":"#/definitions/EncKeyAlgorithm"},"id_token_encrypted_response_enc":{"$ref":"#/definitions/EncSymmetricAlgorithmCode"},"authorizationEndpoint":{"anyOf":[{"$ref":"#/definitions/Schema"},{"type":"string"}]},"issuer":{"anyOf":[{"$ref":"#/definitions/ResponseIss"},{"type":"string"}]},"responseTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subjectTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"idTokenSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"requestObjectSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"tokenEndpoint":{"type":"string"},"userinfoEndpoint":{"type":"string"},"jwksUri":{"type":"string"},"registrationEndpoint":{"type":"string"},"responseModesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseMode"}},{"$ref":"#/definitions/ResponseMode"}]},"grantTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/GrantType"}},{"$ref":"#/definitions/GrantType"}]},"acrValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AuthenticationContextReferences"}},{"$ref":"#/definitions/AuthenticationContextReferences"}]},"idTokenEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"idTokenEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"userinfoSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfoEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfoEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"requestObjectEncryptionAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"requestObjectEncryptionEncValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"tokenEndpointAuthMethodsSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TokenEndpointAuthMethod"}},{"$ref":"#/definitions/TokenEndpointAuthMethod"}]},"tokenEndpointAuthSigningAlgValuesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"displayValuesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claimTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ClaimType"}},{"$ref":"#/definitions/ClaimType"}]},"claimsSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"serviceDocumentation":{"type":"string"},"claimsLocalesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"uiLocalesSupported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claimsParameterSupported":{"type":"boolean"},"requestParameterSupported":{"type":"boolean"},"requestUriParameterSupported":{"type":"boolean"},"requireRequestUriRegistration":{"type":"boolean"},"opPolicyUri":{"type":"string"},"opTosUri":{"type":"string"},"idTokenTypesSupported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/IdTokenType"}},{"$ref":"#/definitions/IdTokenType"}]},"vpFormatsSupported":{"$ref":"#/definitions/Format"}},"required":["passBy"]}]};
const schema348 = {"type":"string","enum":["NONE","REFERENCE","VALUE"]};
const schema352 = {"type":"string","const":"ECDH-ES"};
const schema353 = {"type":"string","const":"XC20P"};
const schema354 = {"type":"string","enum":["openid:","openid-vc:"]};
const schema355 = {"type":"string","enum":["https://self-issued.me","https://self-issued.me/v2","https://self-issued.me/v2/openid-vc"]};
const schema358 = {"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]};
const schema360 = {"type":"string","enum":["public","pairwise"]};
const schema362 = {"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]};
const schema368 = {"type":"string","enum":["authorization_code","implicit"]};
const schema370 = {"type":"string","enum":["phr","phrh"]};
const schema380 = {"type":"string","enum":["client_secret_post","client_secret_basic","client_secret_jwt","private_key_jwt"]};
const schema384 = {"type":"string","enum":["normal","aggregated","distributed"]};
const schema472 = {"type":"string","enum":["subject_signed","attester_signed"]};
const schema349 = {"anyOf":[{"$ref":"#/definitions/PropertyTarget"},{"type":"array","items":{"$ref":"#/definitions/PropertyTarget"}}]};
const schema350 = {"type":"string","enum":["authorization-request","request-object"],"description":"Determines where a property will end up. Methods that support this argument are optional. If you do not provide any value it will default to all targets."};

function validate221(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
const _errs0 = errors;
let valid0 = false;
const _errs1 = errors;
if(typeof data !== "string"){
const err0 = {instancePath,schemaPath:"#/definitions/PropertyTarget/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(!((data === "authorization-request") || (data === "request-object"))){
const err1 = {instancePath,schemaPath:"#/definitions/PropertyTarget/enum",keyword:"enum",params:{allowedValues: schema350.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs4 = errors;
if(errors === _errs4){
if(Array.isArray(data)){
var valid2 = true;
const len0 = data.length;
for(let i0=0; i0<len0; i0++){
let data0 = data[i0];
const _errs6 = errors;
if(typeof data0 !== "string"){
const err2 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/PropertyTarget/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if(!((data0 === "authorization-request") || (data0 === "request-object"))){
const err3 = {instancePath:instancePath+"/" + i0,schemaPath:"#/definitions/PropertyTarget/enum",keyword:"enum",params:{allowedValues: schema350.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid2 = _errs6 === errors;
if(!valid2){
break;
}
}
}
else {
const err4 = {instancePath,schemaPath:"#/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
var _valid0 = _errs4 === errors;
valid0 = valid0 || _valid0;
}
if(!valid0){
const err5 = {instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate221.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate221.errors = vErrors;
return errors === 0;
}

const schema386 = {"type":"object","properties":{"keys":{"type":"array","items":{"$ref":"#/definitions/JWK"}}},"required":["keys"],"additionalProperties":false};
const schema387 = {"type":"object","properties":{"kty":{"type":"string"},"crv":{"type":"string"},"x":{"type":"string"},"y":{"type":"string"},"e":{"type":"string"},"n":{"type":"string"},"alg":{"type":"string"},"d":{"type":"string"},"dp":{"type":"string"},"dq":{"type":"string"},"ext":{"type":"boolean"},"k":{"type":"string"},"key_ops":{"type":"array","items":{"type":"string"}},"kid":{"type":"string"},"oth":{"type":"array","items":{"type":"object","properties":{"d":{"type":"string"},"r":{"type":"string"},"t":{"type":"string"}},"additionalProperties":false}},"p":{"type":"string"},"q":{"type":"string"},"qi":{"type":"string"},"use":{"type":"string"},"x5c":{"type":"array","items":{"type":"string"}},"x5t":{"type":"string"},"x5t#S256":{"type":"string"},"x5u":{"type":"string"}},"additionalProperties":{}};

function validate223(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.keys === undefined) && (missing0 = "keys")){
validate223.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(key0 === "keys")){
validate223.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.keys !== undefined){
let data0 = data.keys;
const _errs2 = errors;
if(errors === _errs2){
if(Array.isArray(data0)){
var valid1 = true;
const len0 = data0.length;
for(let i0=0; i0<len0; i0++){
let data1 = data0[i0];
const _errs4 = errors;
const _errs5 = errors;
if(errors === _errs5){
if(data1 && typeof data1 == "object" && !Array.isArray(data1)){
const _errs7 = errors;
for(const key1 in data1){
if(!(func2.call(schema387.properties, key1))){
const _errs8 = errors;
var valid3 = _errs8 === errors;
if(!valid3){
break;
}
}
}
if(_errs7 === errors){
if(data1.kty !== undefined){
const _errs9 = errors;
if(typeof data1.kty !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/kty",schemaPath:"#/definitions/JWK/properties/kty/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs9 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.crv !== undefined){
const _errs11 = errors;
if(typeof data1.crv !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/crv",schemaPath:"#/definitions/JWK/properties/crv/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs11 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.x !== undefined){
const _errs13 = errors;
if(typeof data1.x !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/x",schemaPath:"#/definitions/JWK/properties/x/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs13 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.y !== undefined){
const _errs15 = errors;
if(typeof data1.y !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/y",schemaPath:"#/definitions/JWK/properties/y/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs15 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.e !== undefined){
const _errs17 = errors;
if(typeof data1.e !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/e",schemaPath:"#/definitions/JWK/properties/e/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs17 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.n !== undefined){
const _errs19 = errors;
if(typeof data1.n !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/n",schemaPath:"#/definitions/JWK/properties/n/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs19 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.alg !== undefined){
const _errs21 = errors;
if(typeof data1.alg !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/alg",schemaPath:"#/definitions/JWK/properties/alg/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs21 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.d !== undefined){
const _errs23 = errors;
if(typeof data1.d !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/d",schemaPath:"#/definitions/JWK/properties/d/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs23 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.dp !== undefined){
const _errs25 = errors;
if(typeof data1.dp !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/dp",schemaPath:"#/definitions/JWK/properties/dp/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs25 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.dq !== undefined){
const _errs27 = errors;
if(typeof data1.dq !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/dq",schemaPath:"#/definitions/JWK/properties/dq/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs27 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.ext !== undefined){
const _errs29 = errors;
if(typeof data1.ext !== "boolean"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/ext",schemaPath:"#/definitions/JWK/properties/ext/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid4 = _errs29 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.k !== undefined){
const _errs31 = errors;
if(typeof data1.k !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/k",schemaPath:"#/definitions/JWK/properties/k/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs31 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.key_ops !== undefined){
let data15 = data1.key_ops;
const _errs33 = errors;
if(errors === _errs33){
if(Array.isArray(data15)){
var valid5 = true;
const len1 = data15.length;
for(let i1=0; i1<len1; i1++){
const _errs35 = errors;
if(typeof data15[i1] !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/key_ops/" + i1,schemaPath:"#/definitions/JWK/properties/key_ops/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid5 = _errs35 === errors;
if(!valid5){
break;
}
}
}
else {
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/key_ops",schemaPath:"#/definitions/JWK/properties/key_ops/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid4 = _errs33 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.kid !== undefined){
const _errs37 = errors;
if(typeof data1.kid !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/kid",schemaPath:"#/definitions/JWK/properties/kid/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs37 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.oth !== undefined){
let data18 = data1.oth;
const _errs39 = errors;
if(errors === _errs39){
if(Array.isArray(data18)){
var valid6 = true;
const len2 = data18.length;
for(let i2=0; i2<len2; i2++){
let data19 = data18[i2];
const _errs41 = errors;
if(errors === _errs41){
if(data19 && typeof data19 == "object" && !Array.isArray(data19)){
const _errs43 = errors;
for(const key2 in data19){
if(!(((key2 === "d") || (key2 === "r")) || (key2 === "t"))){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/oth/" + i2,schemaPath:"#/definitions/JWK/properties/oth/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs43 === errors){
if(data19.d !== undefined){
const _errs44 = errors;
if(typeof data19.d !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/oth/" + i2+"/d",schemaPath:"#/definitions/JWK/properties/oth/items/properties/d/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid7 = _errs44 === errors;
}
else {
var valid7 = true;
}
if(valid7){
if(data19.r !== undefined){
const _errs46 = errors;
if(typeof data19.r !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/oth/" + i2+"/r",schemaPath:"#/definitions/JWK/properties/oth/items/properties/r/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid7 = _errs46 === errors;
}
else {
var valid7 = true;
}
if(valid7){
if(data19.t !== undefined){
const _errs48 = errors;
if(typeof data19.t !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/oth/" + i2+"/t",schemaPath:"#/definitions/JWK/properties/oth/items/properties/t/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid7 = _errs48 === errors;
}
else {
var valid7 = true;
}
}
}
}
}
else {
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/oth/" + i2,schemaPath:"#/definitions/JWK/properties/oth/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid6 = _errs41 === errors;
if(!valid6){
break;
}
}
}
else {
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/oth",schemaPath:"#/definitions/JWK/properties/oth/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid4 = _errs39 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.p !== undefined){
const _errs50 = errors;
if(typeof data1.p !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/p",schemaPath:"#/definitions/JWK/properties/p/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs50 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.q !== undefined){
const _errs52 = errors;
if(typeof data1.q !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/q",schemaPath:"#/definitions/JWK/properties/q/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs52 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.qi !== undefined){
const _errs54 = errors;
if(typeof data1.qi !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/qi",schemaPath:"#/definitions/JWK/properties/qi/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs54 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.use !== undefined){
const _errs56 = errors;
if(typeof data1.use !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/use",schemaPath:"#/definitions/JWK/properties/use/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs56 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.x5c !== undefined){
let data27 = data1.x5c;
const _errs58 = errors;
if(errors === _errs58){
if(Array.isArray(data27)){
var valid8 = true;
const len3 = data27.length;
for(let i3=0; i3<len3; i3++){
const _errs60 = errors;
if(typeof data27[i3] !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/x5c/" + i3,schemaPath:"#/definitions/JWK/properties/x5c/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid8 = _errs60 === errors;
if(!valid8){
break;
}
}
}
else {
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/x5c",schemaPath:"#/definitions/JWK/properties/x5c/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid4 = _errs58 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.x5t !== undefined){
const _errs62 = errors;
if(typeof data1.x5t !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/x5t",schemaPath:"#/definitions/JWK/properties/x5t/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs62 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1["x5t#S256"] !== undefined){
const _errs64 = errors;
if(typeof data1["x5t#S256"] !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/x5t#S256",schemaPath:"#/definitions/JWK/properties/x5t%23S256/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs64 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.x5u !== undefined){
const _errs66 = errors;
if(typeof data1.x5u !== "string"){
validate223.errors = [{instancePath:instancePath+"/keys/" + i0+"/x5u",schemaPath:"#/definitions/JWK/properties/x5u/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs66 === errors;
}
else {
var valid4 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate223.errors = [{instancePath:instancePath+"/keys/" + i0,schemaPath:"#/definitions/JWK/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid1 = _errs4 === errors;
if(!valid1){
break;
}
}
}
else {
validate223.errors = [{instancePath:instancePath+"/keys",schemaPath:"#/properties/keys/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate223.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate223.errors = vErrors;
return errors === 0;
}

const schema388 = {"type":"object","properties":{"jwt":{"$ref":"#/definitions/JwtObject"},"jwt_vc":{"$ref":"#/definitions/JwtObject"},"jwt_vc_json":{"$ref":"#/definitions/JwtObject"},"jwt_vp":{"$ref":"#/definitions/JwtObject"},"jwt_vp_json":{"$ref":"#/definitions/JwtObject"},"ldp":{"$ref":"#/definitions/LdpObject"},"ldp_vc":{"$ref":"#/definitions/LdpObject"},"ldp_vp":{"$ref":"#/definitions/LdpObject"},"di":{"$ref":"#/definitions/DiObject"},"di_vc":{"$ref":"#/definitions/DiObject"},"di_vp":{"$ref":"#/definitions/DiObject"},"vc+sd-jwt":{"$ref":"#/definitions/SdJwtObject"},"mso_mdoc":{"$ref":"#/definitions/MsoMdocObject"}},"additionalProperties":false};
const schema389 = {"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false};
const schema394 = {"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}}},"required":["proof_type"],"additionalProperties":false};
const schema397 = {"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}},"cryptosuite":{"type":"array","items":{"type":"string"}}},"required":["proof_type","cryptosuite"],"additionalProperties":false};
const schema400 = {"type":"object","properties":{"sd-jwt_alg_values":{"type":"array","items":{"type":"string"}},"kb-jwt_alg_values":{"type":"array","items":{"type":"string"}}},"additionalProperties":false};
const schema401 = {"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false};

function validate225(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema388.properties, key0))){
validate225.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.jwt !== undefined){
let data0 = data.jwt;
const _errs2 = errors;
const _errs3 = errors;
if(errors === _errs3){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
let missing0;
if((data0.alg === undefined) && (missing0 = "alg")){
validate225.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs5 = errors;
for(const key1 in data0){
if(!(key1 === "alg")){
validate225.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs5 === errors){
if(data0.alg !== undefined){
let data1 = data0.alg;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data1)){
var valid3 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(typeof data1[i0] !== "string"){
validate225.errors = [{instancePath:instancePath+"/jwt/alg/" + i0,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid3 = _errs8 === errors;
if(!valid3){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/jwt/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vc !== undefined){
let data3 = data.jwt_vc;
const _errs10 = errors;
const _errs11 = errors;
if(errors === _errs11){
if(data3 && typeof data3 == "object" && !Array.isArray(data3)){
let missing1;
if((data3.alg === undefined) && (missing1 = "alg")){
validate225.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
const _errs13 = errors;
for(const key2 in data3){
if(!(key2 === "alg")){
validate225.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs13 === errors){
if(data3.alg !== undefined){
let data4 = data3.alg;
const _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data4)){
var valid6 = true;
const len1 = data4.length;
for(let i1=0; i1<len1; i1++){
const _errs16 = errors;
if(typeof data4[i1] !== "string"){
validate225.errors = [{instancePath:instancePath+"/jwt_vc/alg/" + i1,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs16 === errors;
if(!valid6){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/jwt_vc/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vc_json !== undefined){
let data6 = data.jwt_vc_json;
const _errs18 = errors;
const _errs19 = errors;
if(errors === _errs19){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
let missing2;
if((data6.alg === undefined) && (missing2 = "alg")){
validate225.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
const _errs21 = errors;
for(const key3 in data6){
if(!(key3 === "alg")){
validate225.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs21 === errors){
if(data6.alg !== undefined){
let data7 = data6.alg;
const _errs22 = errors;
if(errors === _errs22){
if(Array.isArray(data7)){
var valid9 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs24 = errors;
if(typeof data7[i2] !== "string"){
validate225.errors = [{instancePath:instancePath+"/jwt_vc_json/alg/" + i2,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs24 === errors;
if(!valid9){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/jwt_vc_json/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vp !== undefined){
let data9 = data.jwt_vp;
const _errs26 = errors;
const _errs27 = errors;
if(errors === _errs27){
if(data9 && typeof data9 == "object" && !Array.isArray(data9)){
let missing3;
if((data9.alg === undefined) && (missing3 = "alg")){
validate225.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];
return false;
}
else {
const _errs29 = errors;
for(const key4 in data9){
if(!(key4 === "alg")){
validate225.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs29 === errors){
if(data9.alg !== undefined){
let data10 = data9.alg;
const _errs30 = errors;
if(errors === _errs30){
if(Array.isArray(data10)){
var valid12 = true;
const len3 = data10.length;
for(let i3=0; i3<len3; i3++){
const _errs32 = errors;
if(typeof data10[i3] !== "string"){
validate225.errors = [{instancePath:instancePath+"/jwt_vp/alg/" + i3,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs32 === errors;
if(!valid12){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/jwt_vp/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vp_json !== undefined){
let data12 = data.jwt_vp_json;
const _errs34 = errors;
const _errs35 = errors;
if(errors === _errs35){
if(data12 && typeof data12 == "object" && !Array.isArray(data12)){
let missing4;
if((data12.alg === undefined) && (missing4 = "alg")){
validate225.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];
return false;
}
else {
const _errs37 = errors;
for(const key5 in data12){
if(!(key5 === "alg")){
validate225.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs37 === errors){
if(data12.alg !== undefined){
let data13 = data12.alg;
const _errs38 = errors;
if(errors === _errs38){
if(Array.isArray(data13)){
var valid15 = true;
const len4 = data13.length;
for(let i4=0; i4<len4; i4++){
const _errs40 = errors;
if(typeof data13[i4] !== "string"){
validate225.errors = [{instancePath:instancePath+"/jwt_vp_json/alg/" + i4,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid15 = _errs40 === errors;
if(!valid15){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/jwt_vp_json/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp !== undefined){
let data15 = data.ldp;
const _errs42 = errors;
const _errs43 = errors;
if(errors === _errs43){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
let missing5;
if((data15.proof_type === undefined) && (missing5 = "proof_type")){
validate225.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"}];
return false;
}
else {
const _errs45 = errors;
for(const key6 in data15){
if(!(key6 === "proof_type")){
validate225.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key6},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs45 === errors){
if(data15.proof_type !== undefined){
let data16 = data15.proof_type;
const _errs46 = errors;
if(errors === _errs46){
if(Array.isArray(data16)){
var valid18 = true;
const len5 = data16.length;
for(let i5=0; i5<len5; i5++){
const _errs48 = errors;
if(typeof data16[i5] !== "string"){
validate225.errors = [{instancePath:instancePath+"/ldp/proof_type/" + i5,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid18 = _errs48 === errors;
if(!valid18){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/ldp/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp_vc !== undefined){
let data18 = data.ldp_vc;
const _errs50 = errors;
const _errs51 = errors;
if(errors === _errs51){
if(data18 && typeof data18 == "object" && !Array.isArray(data18)){
let missing6;
if((data18.proof_type === undefined) && (missing6 = "proof_type")){
validate225.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"}];
return false;
}
else {
const _errs53 = errors;
for(const key7 in data18){
if(!(key7 === "proof_type")){
validate225.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key7},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs53 === errors){
if(data18.proof_type !== undefined){
let data19 = data18.proof_type;
const _errs54 = errors;
if(errors === _errs54){
if(Array.isArray(data19)){
var valid21 = true;
const len6 = data19.length;
for(let i6=0; i6<len6; i6++){
const _errs56 = errors;
if(typeof data19[i6] !== "string"){
validate225.errors = [{instancePath:instancePath+"/ldp_vc/proof_type/" + i6,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid21 = _errs56 === errors;
if(!valid21){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/ldp_vc/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs50 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp_vp !== undefined){
let data21 = data.ldp_vp;
const _errs58 = errors;
const _errs59 = errors;
if(errors === _errs59){
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
let missing7;
if((data21.proof_type === undefined) && (missing7 = "proof_type")){
validate225.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"}];
return false;
}
else {
const _errs61 = errors;
for(const key8 in data21){
if(!(key8 === "proof_type")){
validate225.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key8},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs61 === errors){
if(data21.proof_type !== undefined){
let data22 = data21.proof_type;
const _errs62 = errors;
if(errors === _errs62){
if(Array.isArray(data22)){
var valid24 = true;
const len7 = data22.length;
for(let i7=0; i7<len7; i7++){
const _errs64 = errors;
if(typeof data22[i7] !== "string"){
validate225.errors = [{instancePath:instancePath+"/ldp_vp/proof_type/" + i7,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid24 = _errs64 === errors;
if(!valid24){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/ldp_vp/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs58 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di !== undefined){
let data24 = data.di;
const _errs66 = errors;
const _errs67 = errors;
if(errors === _errs67){
if(data24 && typeof data24 == "object" && !Array.isArray(data24)){
let missing8;
if(((data24.proof_type === undefined) && (missing8 = "proof_type")) || ((data24.cryptosuite === undefined) && (missing8 = "cryptosuite"))){
validate225.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing8},message:"must have required property '"+missing8+"'"}];
return false;
}
else {
const _errs69 = errors;
for(const key9 in data24){
if(!((key9 === "proof_type") || (key9 === "cryptosuite"))){
validate225.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key9},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs69 === errors){
if(data24.proof_type !== undefined){
let data25 = data24.proof_type;
const _errs70 = errors;
if(errors === _errs70){
if(Array.isArray(data25)){
var valid27 = true;
const len8 = data25.length;
for(let i8=0; i8<len8; i8++){
const _errs72 = errors;
if(typeof data25[i8] !== "string"){
validate225.errors = [{instancePath:instancePath+"/di/proof_type/" + i8,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid27 = _errs72 === errors;
if(!valid27){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/di/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid26 = _errs70 === errors;
}
else {
var valid26 = true;
}
if(valid26){
if(data24.cryptosuite !== undefined){
let data27 = data24.cryptosuite;
const _errs74 = errors;
if(errors === _errs74){
if(Array.isArray(data27)){
var valid28 = true;
const len9 = data27.length;
for(let i9=0; i9<len9; i9++){
const _errs76 = errors;
if(typeof data27[i9] !== "string"){
validate225.errors = [{instancePath:instancePath+"/di/cryptosuite/" + i9,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid28 = _errs76 === errors;
if(!valid28){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/di/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid26 = _errs74 === errors;
}
else {
var valid26 = true;
}
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs66 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di_vc !== undefined){
let data29 = data.di_vc;
const _errs78 = errors;
const _errs79 = errors;
if(errors === _errs79){
if(data29 && typeof data29 == "object" && !Array.isArray(data29)){
let missing9;
if(((data29.proof_type === undefined) && (missing9 = "proof_type")) || ((data29.cryptosuite === undefined) && (missing9 = "cryptosuite"))){
validate225.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing9},message:"must have required property '"+missing9+"'"}];
return false;
}
else {
const _errs81 = errors;
for(const key10 in data29){
if(!((key10 === "proof_type") || (key10 === "cryptosuite"))){
validate225.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key10},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs81 === errors){
if(data29.proof_type !== undefined){
let data30 = data29.proof_type;
const _errs82 = errors;
if(errors === _errs82){
if(Array.isArray(data30)){
var valid31 = true;
const len10 = data30.length;
for(let i10=0; i10<len10; i10++){
const _errs84 = errors;
if(typeof data30[i10] !== "string"){
validate225.errors = [{instancePath:instancePath+"/di_vc/proof_type/" + i10,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid31 = _errs84 === errors;
if(!valid31){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/di_vc/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid30 = _errs82 === errors;
}
else {
var valid30 = true;
}
if(valid30){
if(data29.cryptosuite !== undefined){
let data32 = data29.cryptosuite;
const _errs86 = errors;
if(errors === _errs86){
if(Array.isArray(data32)){
var valid32 = true;
const len11 = data32.length;
for(let i11=0; i11<len11; i11++){
const _errs88 = errors;
if(typeof data32[i11] !== "string"){
validate225.errors = [{instancePath:instancePath+"/di_vc/cryptosuite/" + i11,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid32 = _errs88 === errors;
if(!valid32){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/di_vc/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid30 = _errs86 === errors;
}
else {
var valid30 = true;
}
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs78 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di_vp !== undefined){
let data34 = data.di_vp;
const _errs90 = errors;
const _errs91 = errors;
if(errors === _errs91){
if(data34 && typeof data34 == "object" && !Array.isArray(data34)){
let missing10;
if(((data34.proof_type === undefined) && (missing10 = "proof_type")) || ((data34.cryptosuite === undefined) && (missing10 = "cryptosuite"))){
validate225.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing10},message:"must have required property '"+missing10+"'"}];
return false;
}
else {
const _errs93 = errors;
for(const key11 in data34){
if(!((key11 === "proof_type") || (key11 === "cryptosuite"))){
validate225.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key11},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs93 === errors){
if(data34.proof_type !== undefined){
let data35 = data34.proof_type;
const _errs94 = errors;
if(errors === _errs94){
if(Array.isArray(data35)){
var valid35 = true;
const len12 = data35.length;
for(let i12=0; i12<len12; i12++){
const _errs96 = errors;
if(typeof data35[i12] !== "string"){
validate225.errors = [{instancePath:instancePath+"/di_vp/proof_type/" + i12,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid35 = _errs96 === errors;
if(!valid35){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/di_vp/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid34 = _errs94 === errors;
}
else {
var valid34 = true;
}
if(valid34){
if(data34.cryptosuite !== undefined){
let data37 = data34.cryptosuite;
const _errs98 = errors;
if(errors === _errs98){
if(Array.isArray(data37)){
var valid36 = true;
const len13 = data37.length;
for(let i13=0; i13<len13; i13++){
const _errs100 = errors;
if(typeof data37[i13] !== "string"){
validate225.errors = [{instancePath:instancePath+"/di_vp/cryptosuite/" + i13,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid36 = _errs100 === errors;
if(!valid36){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/di_vp/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid34 = _errs98 === errors;
}
else {
var valid34 = true;
}
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs90 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data["vc+sd-jwt"] !== undefined){
let data39 = data["vc+sd-jwt"];
const _errs102 = errors;
const _errs103 = errors;
if(errors === _errs103){
if(data39 && typeof data39 == "object" && !Array.isArray(data39)){
const _errs105 = errors;
for(const key12 in data39){
if(!((key12 === "sd-jwt_alg_values") || (key12 === "kb-jwt_alg_values"))){
validate225.errors = [{instancePath:instancePath+"/vc+sd-jwt",schemaPath:"#/definitions/SdJwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key12},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs105 === errors){
if(data39["sd-jwt_alg_values"] !== undefined){
let data40 = data39["sd-jwt_alg_values"];
const _errs106 = errors;
if(errors === _errs106){
if(Array.isArray(data40)){
var valid39 = true;
const len14 = data40.length;
for(let i14=0; i14<len14; i14++){
const _errs108 = errors;
if(typeof data40[i14] !== "string"){
validate225.errors = [{instancePath:instancePath+"/vc+sd-jwt/sd-jwt_alg_values/" + i14,schemaPath:"#/definitions/SdJwtObject/properties/sd-jwt_alg_values/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid39 = _errs108 === errors;
if(!valid39){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/vc+sd-jwt/sd-jwt_alg_values",schemaPath:"#/definitions/SdJwtObject/properties/sd-jwt_alg_values/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs106 === errors;
}
else {
var valid38 = true;
}
if(valid38){
if(data39["kb-jwt_alg_values"] !== undefined){
let data42 = data39["kb-jwt_alg_values"];
const _errs110 = errors;
if(errors === _errs110){
if(Array.isArray(data42)){
var valid40 = true;
const len15 = data42.length;
for(let i15=0; i15<len15; i15++){
const _errs112 = errors;
if(typeof data42[i15] !== "string"){
validate225.errors = [{instancePath:instancePath+"/vc+sd-jwt/kb-jwt_alg_values/" + i15,schemaPath:"#/definitions/SdJwtObject/properties/kb-jwt_alg_values/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid40 = _errs112 === errors;
if(!valid40){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/vc+sd-jwt/kb-jwt_alg_values",schemaPath:"#/definitions/SdJwtObject/properties/kb-jwt_alg_values/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs110 === errors;
}
else {
var valid38 = true;
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/vc+sd-jwt",schemaPath:"#/definitions/SdJwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs102 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.mso_mdoc !== undefined){
let data44 = data.mso_mdoc;
const _errs114 = errors;
const _errs115 = errors;
if(errors === _errs115){
if(data44 && typeof data44 == "object" && !Array.isArray(data44)){
let missing11;
if((data44.alg === undefined) && (missing11 = "alg")){
validate225.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/required",keyword:"required",params:{missingProperty: missing11},message:"must have required property '"+missing11+"'"}];
return false;
}
else {
const _errs117 = errors;
for(const key13 in data44){
if(!(key13 === "alg")){
validate225.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key13},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs117 === errors){
if(data44.alg !== undefined){
let data45 = data44.alg;
const _errs118 = errors;
if(errors === _errs118){
if(Array.isArray(data45)){
var valid43 = true;
const len16 = data45.length;
for(let i16=0; i16<len16; i16++){
const _errs120 = errors;
if(typeof data45[i16] !== "string"){
validate225.errors = [{instancePath:instancePath+"/mso_mdoc/alg/" + i16,schemaPath:"#/definitions/MsoMdocObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid43 = _errs120 === errors;
if(!valid43){
break;
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/mso_mdoc/alg",schemaPath:"#/definitions/MsoMdocObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate225.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs114 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate225.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate225.errors = vErrors;
return errors === 0;
}


function validate220(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
const _errs0 = errors;
let valid0 = false;
const _errs1 = errors;
if(errors === _errs1){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.passBy === undefined) && (missing0 = "passBy")){
const err0 = {instancePath,schemaPath:"#/anyOf/0/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
else {
if(data.passBy !== undefined){
let data0 = data.passBy;
const _errs3 = errors;
if(typeof data0 !== "string"){
const err1 = {instancePath:instancePath+"/passBy",schemaPath:"#/definitions/PassBy/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
if(!(((data0 === "NONE") || (data0 === "REFERENCE")) || (data0 === "VALUE"))){
const err2 = {instancePath:instancePath+"/passBy",schemaPath:"#/definitions/PassBy/enum",keyword:"enum",params:{allowedValues: schema348.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var valid1 = _errs3 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.reference_uri !== undefined){
const _errs6 = errors;
if(typeof data.reference_uri !== "string"){
const err3 = {instancePath:instancePath+"/reference_uri",schemaPath:"#/anyOf/0/properties/reference_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid1 = _errs6 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.targets !== undefined){
const _errs8 = errors;
if(!(validate221(data.targets, {instancePath:instancePath+"/targets",parentData:data,parentDataProperty:"targets",rootData}))){
vErrors = vErrors === null ? validate221.errors : vErrors.concat(validate221.errors);
errors = vErrors.length;
}
var valid1 = _errs8 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.id_token_encrypted_response_alg !== undefined){
let data3 = data.id_token_encrypted_response_alg;
const _errs9 = errors;
if(typeof data3 !== "string"){
const err4 = {instancePath:instancePath+"/id_token_encrypted_response_alg",schemaPath:"#/definitions/EncKeyAlgorithm/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if("ECDH-ES" !== data3){
const err5 = {instancePath:instancePath+"/id_token_encrypted_response_alg",schemaPath:"#/definitions/EncKeyAlgorithm/const",keyword:"const",params:{allowedValue: "ECDH-ES"},message:"must be equal to constant"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var valid1 = _errs9 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.id_token_encrypted_response_enc !== undefined){
let data4 = data.id_token_encrypted_response_enc;
const _errs12 = errors;
if(typeof data4 !== "string"){
const err6 = {instancePath:instancePath+"/id_token_encrypted_response_enc",schemaPath:"#/definitions/EncSymmetricAlgorithmCode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if("XC20P" !== data4){
const err7 = {instancePath:instancePath+"/id_token_encrypted_response_enc",schemaPath:"#/definitions/EncSymmetricAlgorithmCode/const",keyword:"const",params:{allowedValue: "XC20P"},message:"must be equal to constant"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var valid1 = _errs12 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.authorizationEndpoint !== undefined){
let data5 = data.authorizationEndpoint;
const _errs15 = errors;
const _errs16 = errors;
let valid5 = false;
const _errs17 = errors;
if(typeof data5 !== "string"){
const err8 = {instancePath:instancePath+"/authorizationEndpoint",schemaPath:"#/definitions/Schema/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(!((data5 === "openid:") || (data5 === "openid-vc:"))){
const err9 = {instancePath:instancePath+"/authorizationEndpoint",schemaPath:"#/definitions/Schema/enum",keyword:"enum",params:{allowedValues: schema354.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
var _valid1 = _errs17 === errors;
valid5 = valid5 || _valid1;
if(!valid5){
const _errs20 = errors;
if(typeof data5 !== "string"){
const err10 = {instancePath:instancePath+"/authorizationEndpoint",schemaPath:"#/anyOf/0/properties/authorizationEndpoint/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
var _valid1 = _errs20 === errors;
valid5 = valid5 || _valid1;
}
if(!valid5){
const err11 = {instancePath:instancePath+"/authorizationEndpoint",schemaPath:"#/anyOf/0/properties/authorizationEndpoint/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
else {
errors = _errs16;
if(vErrors !== null){
if(_errs16){
vErrors.length = _errs16;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs15 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.issuer !== undefined){
let data6 = data.issuer;
const _errs22 = errors;
const _errs23 = errors;
let valid7 = false;
const _errs24 = errors;
if(typeof data6 !== "string"){
const err12 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/ResponseIss/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if(!(((data6 === "https://self-issued.me") || (data6 === "https://self-issued.me/v2")) || (data6 === "https://self-issued.me/v2/openid-vc"))){
const err13 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/ResponseIss/enum",keyword:"enum",params:{allowedValues: schema355.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
var _valid2 = _errs24 === errors;
valid7 = valid7 || _valid2;
if(!valid7){
const _errs27 = errors;
if(typeof data6 !== "string"){
const err14 = {instancePath:instancePath+"/issuer",schemaPath:"#/anyOf/0/properties/issuer/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
var _valid2 = _errs27 === errors;
valid7 = valid7 || _valid2;
}
if(!valid7){
const err15 = {instancePath:instancePath+"/issuer",schemaPath:"#/anyOf/0/properties/issuer/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
else {
errors = _errs23;
if(vErrors !== null){
if(_errs23){
vErrors.length = _errs23;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs22 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.responseTypesSupported !== undefined){
let data7 = data.responseTypesSupported;
const _errs29 = errors;
const _errs30 = errors;
let valid9 = false;
const _errs31 = errors;
if(errors === _errs31){
if(Array.isArray(data7)){
var valid10 = true;
const len0 = data7.length;
for(let i0=0; i0<len0; i0++){
let data8 = data7[i0];
const _errs33 = errors;
if(typeof data8 !== "string"){
const err16 = {instancePath:instancePath+"/responseTypesSupported/" + i0,schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
if(!((data8 === "id_token") || (data8 === "vp_token"))){
const err17 = {instancePath:instancePath+"/responseTypesSupported/" + i0,schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema356.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
var valid10 = _errs33 === errors;
if(!valid10){
break;
}
}
}
else {
const err18 = {instancePath:instancePath+"/responseTypesSupported",schemaPath:"#/anyOf/0/properties/responseTypesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
var _valid3 = _errs31 === errors;
valid9 = valid9 || _valid3;
if(!valid9){
const _errs36 = errors;
if(typeof data7 !== "string"){
const err19 = {instancePath:instancePath+"/responseTypesSupported",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
if(!((data7 === "id_token") || (data7 === "vp_token"))){
const err20 = {instancePath:instancePath+"/responseTypesSupported",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema356.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
var _valid3 = _errs36 === errors;
valid9 = valid9 || _valid3;
}
if(!valid9){
const err21 = {instancePath:instancePath+"/responseTypesSupported",schemaPath:"#/anyOf/0/properties/responseTypesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
else {
errors = _errs30;
if(vErrors !== null){
if(_errs30){
vErrors.length = _errs30;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs29 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.scopesSupported !== undefined){
let data9 = data.scopesSupported;
const _errs39 = errors;
const _errs40 = errors;
let valid13 = false;
const _errs41 = errors;
if(errors === _errs41){
if(Array.isArray(data9)){
var valid14 = true;
const len1 = data9.length;
for(let i1=0; i1<len1; i1++){
let data10 = data9[i1];
const _errs43 = errors;
if(typeof data10 !== "string"){
const err22 = {instancePath:instancePath+"/scopesSupported/" + i1,schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
if(!((((((data10 === "openid") || (data10 === "openid did_authn")) || (data10 === "profile")) || (data10 === "email")) || (data10 === "address")) || (data10 === "phone"))){
const err23 = {instancePath:instancePath+"/scopesSupported/" + i1,schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema358.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
var valid14 = _errs43 === errors;
if(!valid14){
break;
}
}
}
else {
const err24 = {instancePath:instancePath+"/scopesSupported",schemaPath:"#/anyOf/0/properties/scopesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
var _valid4 = _errs41 === errors;
valid13 = valid13 || _valid4;
if(!valid13){
const _errs46 = errors;
if(typeof data9 !== "string"){
const err25 = {instancePath:instancePath+"/scopesSupported",schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
if(!((((((data9 === "openid") || (data9 === "openid did_authn")) || (data9 === "profile")) || (data9 === "email")) || (data9 === "address")) || (data9 === "phone"))){
const err26 = {instancePath:instancePath+"/scopesSupported",schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema358.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
var _valid4 = _errs46 === errors;
valid13 = valid13 || _valid4;
}
if(!valid13){
const err27 = {instancePath:instancePath+"/scopesSupported",schemaPath:"#/anyOf/0/properties/scopesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
else {
errors = _errs40;
if(vErrors !== null){
if(_errs40){
vErrors.length = _errs40;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs39 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.subjectTypesSupported !== undefined){
let data11 = data.subjectTypesSupported;
const _errs49 = errors;
const _errs50 = errors;
let valid17 = false;
const _errs51 = errors;
if(errors === _errs51){
if(Array.isArray(data11)){
var valid18 = true;
const len2 = data11.length;
for(let i2=0; i2<len2; i2++){
let data12 = data11[i2];
const _errs53 = errors;
if(typeof data12 !== "string"){
const err28 = {instancePath:instancePath+"/subjectTypesSupported/" + i2,schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
if(!((data12 === "public") || (data12 === "pairwise"))){
const err29 = {instancePath:instancePath+"/subjectTypesSupported/" + i2,schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema360.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
var valid18 = _errs53 === errors;
if(!valid18){
break;
}
}
}
else {
const err30 = {instancePath:instancePath+"/subjectTypesSupported",schemaPath:"#/anyOf/0/properties/subjectTypesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
}
var _valid5 = _errs51 === errors;
valid17 = valid17 || _valid5;
if(!valid17){
const _errs56 = errors;
if(typeof data11 !== "string"){
const err31 = {instancePath:instancePath+"/subjectTypesSupported",schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
if(!((data11 === "public") || (data11 === "pairwise"))){
const err32 = {instancePath:instancePath+"/subjectTypesSupported",schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema360.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
var _valid5 = _errs56 === errors;
valid17 = valid17 || _valid5;
}
if(!valid17){
const err33 = {instancePath:instancePath+"/subjectTypesSupported",schemaPath:"#/anyOf/0/properties/subjectTypesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
else {
errors = _errs50;
if(vErrors !== null){
if(_errs50){
vErrors.length = _errs50;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs49 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.idTokenSigningAlgValuesSupported !== undefined){
let data13 = data.idTokenSigningAlgValuesSupported;
const _errs59 = errors;
const _errs60 = errors;
let valid21 = false;
const _errs61 = errors;
if(errors === _errs61){
if(Array.isArray(data13)){
var valid22 = true;
const len3 = data13.length;
for(let i3=0; i3<len3; i3++){
let data14 = data13[i3];
const _errs63 = errors;
if(typeof data14 !== "string"){
const err34 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported/" + i3,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
if(!(((((data14 === "EdDSA") || (data14 === "RS256")) || (data14 === "PS256")) || (data14 === "ES256")) || (data14 === "ES256K"))){
const err35 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported/" + i3,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
var valid22 = _errs63 === errors;
if(!valid22){
break;
}
}
}
else {
const err36 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported",schemaPath:"#/anyOf/0/properties/idTokenSigningAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
}
var _valid6 = _errs61 === errors;
valid21 = valid21 || _valid6;
if(!valid21){
const _errs66 = errors;
if(typeof data13 !== "string"){
const err37 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
if(!(((((data13 === "EdDSA") || (data13 === "RS256")) || (data13 === "PS256")) || (data13 === "ES256")) || (data13 === "ES256K"))){
const err38 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
var _valid6 = _errs66 === errors;
valid21 = valid21 || _valid6;
}
if(!valid21){
const err39 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported",schemaPath:"#/anyOf/0/properties/idTokenSigningAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
else {
errors = _errs60;
if(vErrors !== null){
if(_errs60){
vErrors.length = _errs60;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs59 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.requestObjectSigningAlgValuesSupported !== undefined){
let data15 = data.requestObjectSigningAlgValuesSupported;
const _errs69 = errors;
const _errs70 = errors;
let valid25 = false;
const _errs71 = errors;
if(errors === _errs71){
if(Array.isArray(data15)){
var valid26 = true;
const len4 = data15.length;
for(let i4=0; i4<len4; i4++){
let data16 = data15[i4];
const _errs73 = errors;
if(typeof data16 !== "string"){
const err40 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported/" + i4,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
if(!(((((data16 === "EdDSA") || (data16 === "RS256")) || (data16 === "PS256")) || (data16 === "ES256")) || (data16 === "ES256K"))){
const err41 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported/" + i4,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
var valid26 = _errs73 === errors;
if(!valid26){
break;
}
}
}
else {
const err42 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported",schemaPath:"#/anyOf/0/properties/requestObjectSigningAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
}
var _valid7 = _errs71 === errors;
valid25 = valid25 || _valid7;
if(!valid25){
const _errs76 = errors;
if(typeof data15 !== "string"){
const err43 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
if(!(((((data15 === "EdDSA") || (data15 === "RS256")) || (data15 === "PS256")) || (data15 === "ES256")) || (data15 === "ES256K"))){
const err44 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
var _valid7 = _errs76 === errors;
valid25 = valid25 || _valid7;
}
if(!valid25){
const err45 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported",schemaPath:"#/anyOf/0/properties/requestObjectSigningAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
else {
errors = _errs70;
if(vErrors !== null){
if(_errs70){
vErrors.length = _errs70;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs69 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.subject_syntax_types_supported !== undefined){
let data17 = data.subject_syntax_types_supported;
const _errs79 = errors;
if(errors === _errs79){
if(Array.isArray(data17)){
var valid29 = true;
const len5 = data17.length;
for(let i5=0; i5<len5; i5++){
const _errs81 = errors;
if(typeof data17[i5] !== "string"){
const err46 = {instancePath:instancePath+"/subject_syntax_types_supported/" + i5,schemaPath:"#/anyOf/0/properties/subject_syntax_types_supported/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
var valid29 = _errs81 === errors;
if(!valid29){
break;
}
}
}
else {
const err47 = {instancePath:instancePath+"/subject_syntax_types_supported",schemaPath:"#/anyOf/0/properties/subject_syntax_types_supported/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
}
var valid1 = _errs79 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.tokenEndpoint !== undefined){
const _errs83 = errors;
if(typeof data.tokenEndpoint !== "string"){
const err48 = {instancePath:instancePath+"/tokenEndpoint",schemaPath:"#/anyOf/0/properties/tokenEndpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
var valid1 = _errs83 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.userinfoEndpoint !== undefined){
const _errs85 = errors;
if(typeof data.userinfoEndpoint !== "string"){
const err49 = {instancePath:instancePath+"/userinfoEndpoint",schemaPath:"#/anyOf/0/properties/userinfoEndpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err49];
}
else {
vErrors.push(err49);
}
errors++;
}
var valid1 = _errs85 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.jwksUri !== undefined){
const _errs87 = errors;
if(typeof data.jwksUri !== "string"){
const err50 = {instancePath:instancePath+"/jwksUri",schemaPath:"#/anyOf/0/properties/jwksUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err50];
}
else {
vErrors.push(err50);
}
errors++;
}
var valid1 = _errs87 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.registrationEndpoint !== undefined){
const _errs89 = errors;
if(typeof data.registrationEndpoint !== "string"){
const err51 = {instancePath:instancePath+"/registrationEndpoint",schemaPath:"#/anyOf/0/properties/registrationEndpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err51];
}
else {
vErrors.push(err51);
}
errors++;
}
var valid1 = _errs89 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.responseModesSupported !== undefined){
let data23 = data.responseModesSupported;
const _errs91 = errors;
const _errs92 = errors;
let valid30 = false;
const _errs93 = errors;
if(errors === _errs93){
if(Array.isArray(data23)){
var valid31 = true;
const len6 = data23.length;
for(let i6=0; i6<len6; i6++){
let data24 = data23[i6];
const _errs95 = errors;
if(typeof data24 !== "string"){
const err52 = {instancePath:instancePath+"/responseModesSupported/" + i6,schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err52];
}
else {
vErrors.push(err52);
}
errors++;
}
if(!((((((((data24 === "fragment") || (data24 === "form_post")) || (data24 === "post")) || (data24 === "direct_post")) || (data24 === "query")) || (data24 === "direct_post.jwt")) || (data24 === "query.jwt")) || (data24 === "fragment.jwt"))){
const err53 = {instancePath:instancePath+"/responseModesSupported/" + i6,schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema366.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err53];
}
else {
vErrors.push(err53);
}
errors++;
}
var valid31 = _errs95 === errors;
if(!valid31){
break;
}
}
}
else {
const err54 = {instancePath:instancePath+"/responseModesSupported",schemaPath:"#/anyOf/0/properties/responseModesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err54];
}
else {
vErrors.push(err54);
}
errors++;
}
}
var _valid8 = _errs93 === errors;
valid30 = valid30 || _valid8;
if(!valid30){
const _errs98 = errors;
if(typeof data23 !== "string"){
const err55 = {instancePath:instancePath+"/responseModesSupported",schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err55];
}
else {
vErrors.push(err55);
}
errors++;
}
if(!((((((((data23 === "fragment") || (data23 === "form_post")) || (data23 === "post")) || (data23 === "direct_post")) || (data23 === "query")) || (data23 === "direct_post.jwt")) || (data23 === "query.jwt")) || (data23 === "fragment.jwt"))){
const err56 = {instancePath:instancePath+"/responseModesSupported",schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema366.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err56];
}
else {
vErrors.push(err56);
}
errors++;
}
var _valid8 = _errs98 === errors;
valid30 = valid30 || _valid8;
}
if(!valid30){
const err57 = {instancePath:instancePath+"/responseModesSupported",schemaPath:"#/anyOf/0/properties/responseModesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err57];
}
else {
vErrors.push(err57);
}
errors++;
}
else {
errors = _errs92;
if(vErrors !== null){
if(_errs92){
vErrors.length = _errs92;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs91 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.grantTypesSupported !== undefined){
let data25 = data.grantTypesSupported;
const _errs101 = errors;
const _errs102 = errors;
let valid34 = false;
const _errs103 = errors;
if(errors === _errs103){
if(Array.isArray(data25)){
var valid35 = true;
const len7 = data25.length;
for(let i7=0; i7<len7; i7++){
let data26 = data25[i7];
const _errs105 = errors;
if(typeof data26 !== "string"){
const err58 = {instancePath:instancePath+"/grantTypesSupported/" + i7,schemaPath:"#/definitions/GrantType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err58];
}
else {
vErrors.push(err58);
}
errors++;
}
if(!((data26 === "authorization_code") || (data26 === "implicit"))){
const err59 = {instancePath:instancePath+"/grantTypesSupported/" + i7,schemaPath:"#/definitions/GrantType/enum",keyword:"enum",params:{allowedValues: schema368.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err59];
}
else {
vErrors.push(err59);
}
errors++;
}
var valid35 = _errs105 === errors;
if(!valid35){
break;
}
}
}
else {
const err60 = {instancePath:instancePath+"/grantTypesSupported",schemaPath:"#/anyOf/0/properties/grantTypesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err60];
}
else {
vErrors.push(err60);
}
errors++;
}
}
var _valid9 = _errs103 === errors;
valid34 = valid34 || _valid9;
if(!valid34){
const _errs108 = errors;
if(typeof data25 !== "string"){
const err61 = {instancePath:instancePath+"/grantTypesSupported",schemaPath:"#/definitions/GrantType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err61];
}
else {
vErrors.push(err61);
}
errors++;
}
if(!((data25 === "authorization_code") || (data25 === "implicit"))){
const err62 = {instancePath:instancePath+"/grantTypesSupported",schemaPath:"#/definitions/GrantType/enum",keyword:"enum",params:{allowedValues: schema368.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err62];
}
else {
vErrors.push(err62);
}
errors++;
}
var _valid9 = _errs108 === errors;
valid34 = valid34 || _valid9;
}
if(!valid34){
const err63 = {instancePath:instancePath+"/grantTypesSupported",schemaPath:"#/anyOf/0/properties/grantTypesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err63];
}
else {
vErrors.push(err63);
}
errors++;
}
else {
errors = _errs102;
if(vErrors !== null){
if(_errs102){
vErrors.length = _errs102;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs101 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.acrValuesSupported !== undefined){
let data27 = data.acrValuesSupported;
const _errs111 = errors;
const _errs112 = errors;
let valid38 = false;
const _errs113 = errors;
if(errors === _errs113){
if(Array.isArray(data27)){
var valid39 = true;
const len8 = data27.length;
for(let i8=0; i8<len8; i8++){
let data28 = data27[i8];
const _errs115 = errors;
if(typeof data28 !== "string"){
const err64 = {instancePath:instancePath+"/acrValuesSupported/" + i8,schemaPath:"#/definitions/AuthenticationContextReferences/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err64];
}
else {
vErrors.push(err64);
}
errors++;
}
if(!((data28 === "phr") || (data28 === "phrh"))){
const err65 = {instancePath:instancePath+"/acrValuesSupported/" + i8,schemaPath:"#/definitions/AuthenticationContextReferences/enum",keyword:"enum",params:{allowedValues: schema370.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err65];
}
else {
vErrors.push(err65);
}
errors++;
}
var valid39 = _errs115 === errors;
if(!valid39){
break;
}
}
}
else {
const err66 = {instancePath:instancePath+"/acrValuesSupported",schemaPath:"#/anyOf/0/properties/acrValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err66];
}
else {
vErrors.push(err66);
}
errors++;
}
}
var _valid10 = _errs113 === errors;
valid38 = valid38 || _valid10;
if(!valid38){
const _errs118 = errors;
if(typeof data27 !== "string"){
const err67 = {instancePath:instancePath+"/acrValuesSupported",schemaPath:"#/definitions/AuthenticationContextReferences/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err67];
}
else {
vErrors.push(err67);
}
errors++;
}
if(!((data27 === "phr") || (data27 === "phrh"))){
const err68 = {instancePath:instancePath+"/acrValuesSupported",schemaPath:"#/definitions/AuthenticationContextReferences/enum",keyword:"enum",params:{allowedValues: schema370.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err68];
}
else {
vErrors.push(err68);
}
errors++;
}
var _valid10 = _errs118 === errors;
valid38 = valid38 || _valid10;
}
if(!valid38){
const err69 = {instancePath:instancePath+"/acrValuesSupported",schemaPath:"#/anyOf/0/properties/acrValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err69];
}
else {
vErrors.push(err69);
}
errors++;
}
else {
errors = _errs112;
if(vErrors !== null){
if(_errs112){
vErrors.length = _errs112;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs111 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.idTokenEncryptionAlgValuesSupported !== undefined){
let data29 = data.idTokenEncryptionAlgValuesSupported;
const _errs121 = errors;
const _errs122 = errors;
let valid42 = false;
const _errs123 = errors;
if(errors === _errs123){
if(Array.isArray(data29)){
var valid43 = true;
const len9 = data29.length;
for(let i9=0; i9<len9; i9++){
let data30 = data29[i9];
const _errs125 = errors;
if(typeof data30 !== "string"){
const err70 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported/" + i9,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err70];
}
else {
vErrors.push(err70);
}
errors++;
}
if(!(((((data30 === "EdDSA") || (data30 === "RS256")) || (data30 === "PS256")) || (data30 === "ES256")) || (data30 === "ES256K"))){
const err71 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported/" + i9,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err71];
}
else {
vErrors.push(err71);
}
errors++;
}
var valid43 = _errs125 === errors;
if(!valid43){
break;
}
}
}
else {
const err72 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported",schemaPath:"#/anyOf/0/properties/idTokenEncryptionAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err72];
}
else {
vErrors.push(err72);
}
errors++;
}
}
var _valid11 = _errs123 === errors;
valid42 = valid42 || _valid11;
if(!valid42){
const _errs128 = errors;
if(typeof data29 !== "string"){
const err73 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err73];
}
else {
vErrors.push(err73);
}
errors++;
}
if(!(((((data29 === "EdDSA") || (data29 === "RS256")) || (data29 === "PS256")) || (data29 === "ES256")) || (data29 === "ES256K"))){
const err74 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err74];
}
else {
vErrors.push(err74);
}
errors++;
}
var _valid11 = _errs128 === errors;
valid42 = valid42 || _valid11;
}
if(!valid42){
const err75 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported",schemaPath:"#/anyOf/0/properties/idTokenEncryptionAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err75];
}
else {
vErrors.push(err75);
}
errors++;
}
else {
errors = _errs122;
if(vErrors !== null){
if(_errs122){
vErrors.length = _errs122;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs121 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.idTokenEncryptionEncValuesSupported !== undefined){
let data31 = data.idTokenEncryptionEncValuesSupported;
const _errs131 = errors;
const _errs132 = errors;
let valid46 = false;
const _errs133 = errors;
if(errors === _errs133){
if(Array.isArray(data31)){
var valid47 = true;
const len10 = data31.length;
for(let i10=0; i10<len10; i10++){
const _errs135 = errors;
if(typeof data31[i10] !== "string"){
const err76 = {instancePath:instancePath+"/idTokenEncryptionEncValuesSupported/" + i10,schemaPath:"#/anyOf/0/properties/idTokenEncryptionEncValuesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err76];
}
else {
vErrors.push(err76);
}
errors++;
}
var valid47 = _errs135 === errors;
if(!valid47){
break;
}
}
}
else {
const err77 = {instancePath:instancePath+"/idTokenEncryptionEncValuesSupported",schemaPath:"#/anyOf/0/properties/idTokenEncryptionEncValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err77];
}
else {
vErrors.push(err77);
}
errors++;
}
}
var _valid12 = _errs133 === errors;
valid46 = valid46 || _valid12;
if(!valid46){
const _errs137 = errors;
if(typeof data31 !== "string"){
const err78 = {instancePath:instancePath+"/idTokenEncryptionEncValuesSupported",schemaPath:"#/anyOf/0/properties/idTokenEncryptionEncValuesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err78];
}
else {
vErrors.push(err78);
}
errors++;
}
var _valid12 = _errs137 === errors;
valid46 = valid46 || _valid12;
}
if(!valid46){
const err79 = {instancePath:instancePath+"/idTokenEncryptionEncValuesSupported",schemaPath:"#/anyOf/0/properties/idTokenEncryptionEncValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err79];
}
else {
vErrors.push(err79);
}
errors++;
}
else {
errors = _errs132;
if(vErrors !== null){
if(_errs132){
vErrors.length = _errs132;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs131 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.userinfoSigningAlgValuesSupported !== undefined){
let data33 = data.userinfoSigningAlgValuesSupported;
const _errs139 = errors;
const _errs140 = errors;
let valid48 = false;
const _errs141 = errors;
if(errors === _errs141){
if(Array.isArray(data33)){
var valid49 = true;
const len11 = data33.length;
for(let i11=0; i11<len11; i11++){
let data34 = data33[i11];
const _errs143 = errors;
if(typeof data34 !== "string"){
const err80 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported/" + i11,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err80];
}
else {
vErrors.push(err80);
}
errors++;
}
if(!(((((data34 === "EdDSA") || (data34 === "RS256")) || (data34 === "PS256")) || (data34 === "ES256")) || (data34 === "ES256K"))){
const err81 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported/" + i11,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err81];
}
else {
vErrors.push(err81);
}
errors++;
}
var valid49 = _errs143 === errors;
if(!valid49){
break;
}
}
}
else {
const err82 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported",schemaPath:"#/anyOf/0/properties/userinfoSigningAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err82];
}
else {
vErrors.push(err82);
}
errors++;
}
}
var _valid13 = _errs141 === errors;
valid48 = valid48 || _valid13;
if(!valid48){
const _errs146 = errors;
if(typeof data33 !== "string"){
const err83 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err83];
}
else {
vErrors.push(err83);
}
errors++;
}
if(!(((((data33 === "EdDSA") || (data33 === "RS256")) || (data33 === "PS256")) || (data33 === "ES256")) || (data33 === "ES256K"))){
const err84 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err84];
}
else {
vErrors.push(err84);
}
errors++;
}
var _valid13 = _errs146 === errors;
valid48 = valid48 || _valid13;
}
if(!valid48){
const err85 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported",schemaPath:"#/anyOf/0/properties/userinfoSigningAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err85];
}
else {
vErrors.push(err85);
}
errors++;
}
else {
errors = _errs140;
if(vErrors !== null){
if(_errs140){
vErrors.length = _errs140;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs139 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.userinfoEncryptionAlgValuesSupported !== undefined){
let data35 = data.userinfoEncryptionAlgValuesSupported;
const _errs149 = errors;
const _errs150 = errors;
let valid52 = false;
const _errs151 = errors;
if(errors === _errs151){
if(Array.isArray(data35)){
var valid53 = true;
const len12 = data35.length;
for(let i12=0; i12<len12; i12++){
let data36 = data35[i12];
const _errs153 = errors;
if(typeof data36 !== "string"){
const err86 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported/" + i12,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err86];
}
else {
vErrors.push(err86);
}
errors++;
}
if(!(((((data36 === "EdDSA") || (data36 === "RS256")) || (data36 === "PS256")) || (data36 === "ES256")) || (data36 === "ES256K"))){
const err87 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported/" + i12,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err87];
}
else {
vErrors.push(err87);
}
errors++;
}
var valid53 = _errs153 === errors;
if(!valid53){
break;
}
}
}
else {
const err88 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported",schemaPath:"#/anyOf/0/properties/userinfoEncryptionAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err88];
}
else {
vErrors.push(err88);
}
errors++;
}
}
var _valid14 = _errs151 === errors;
valid52 = valid52 || _valid14;
if(!valid52){
const _errs156 = errors;
if(typeof data35 !== "string"){
const err89 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err89];
}
else {
vErrors.push(err89);
}
errors++;
}
if(!(((((data35 === "EdDSA") || (data35 === "RS256")) || (data35 === "PS256")) || (data35 === "ES256")) || (data35 === "ES256K"))){
const err90 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err90];
}
else {
vErrors.push(err90);
}
errors++;
}
var _valid14 = _errs156 === errors;
valid52 = valid52 || _valid14;
}
if(!valid52){
const err91 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported",schemaPath:"#/anyOf/0/properties/userinfoEncryptionAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err91];
}
else {
vErrors.push(err91);
}
errors++;
}
else {
errors = _errs150;
if(vErrors !== null){
if(_errs150){
vErrors.length = _errs150;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs149 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.userinfoEncryptionEncValuesSupported !== undefined){
let data37 = data.userinfoEncryptionEncValuesSupported;
const _errs159 = errors;
const _errs160 = errors;
let valid56 = false;
const _errs161 = errors;
if(errors === _errs161){
if(Array.isArray(data37)){
var valid57 = true;
const len13 = data37.length;
for(let i13=0; i13<len13; i13++){
const _errs163 = errors;
if(typeof data37[i13] !== "string"){
const err92 = {instancePath:instancePath+"/userinfoEncryptionEncValuesSupported/" + i13,schemaPath:"#/anyOf/0/properties/userinfoEncryptionEncValuesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err92];
}
else {
vErrors.push(err92);
}
errors++;
}
var valid57 = _errs163 === errors;
if(!valid57){
break;
}
}
}
else {
const err93 = {instancePath:instancePath+"/userinfoEncryptionEncValuesSupported",schemaPath:"#/anyOf/0/properties/userinfoEncryptionEncValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err93];
}
else {
vErrors.push(err93);
}
errors++;
}
}
var _valid15 = _errs161 === errors;
valid56 = valid56 || _valid15;
if(!valid56){
const _errs165 = errors;
if(typeof data37 !== "string"){
const err94 = {instancePath:instancePath+"/userinfoEncryptionEncValuesSupported",schemaPath:"#/anyOf/0/properties/userinfoEncryptionEncValuesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err94];
}
else {
vErrors.push(err94);
}
errors++;
}
var _valid15 = _errs165 === errors;
valid56 = valid56 || _valid15;
}
if(!valid56){
const err95 = {instancePath:instancePath+"/userinfoEncryptionEncValuesSupported",schemaPath:"#/anyOf/0/properties/userinfoEncryptionEncValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err95];
}
else {
vErrors.push(err95);
}
errors++;
}
else {
errors = _errs160;
if(vErrors !== null){
if(_errs160){
vErrors.length = _errs160;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs159 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.requestObjectEncryptionAlgValuesSupported !== undefined){
let data39 = data.requestObjectEncryptionAlgValuesSupported;
const _errs167 = errors;
const _errs168 = errors;
let valid58 = false;
const _errs169 = errors;
if(errors === _errs169){
if(Array.isArray(data39)){
var valid59 = true;
const len14 = data39.length;
for(let i14=0; i14<len14; i14++){
let data40 = data39[i14];
const _errs171 = errors;
if(typeof data40 !== "string"){
const err96 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported/" + i14,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err96];
}
else {
vErrors.push(err96);
}
errors++;
}
if(!(((((data40 === "EdDSA") || (data40 === "RS256")) || (data40 === "PS256")) || (data40 === "ES256")) || (data40 === "ES256K"))){
const err97 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported/" + i14,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err97];
}
else {
vErrors.push(err97);
}
errors++;
}
var valid59 = _errs171 === errors;
if(!valid59){
break;
}
}
}
else {
const err98 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported",schemaPath:"#/anyOf/0/properties/requestObjectEncryptionAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err98];
}
else {
vErrors.push(err98);
}
errors++;
}
}
var _valid16 = _errs169 === errors;
valid58 = valid58 || _valid16;
if(!valid58){
const _errs174 = errors;
if(typeof data39 !== "string"){
const err99 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err99];
}
else {
vErrors.push(err99);
}
errors++;
}
if(!(((((data39 === "EdDSA") || (data39 === "RS256")) || (data39 === "PS256")) || (data39 === "ES256")) || (data39 === "ES256K"))){
const err100 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err100];
}
else {
vErrors.push(err100);
}
errors++;
}
var _valid16 = _errs174 === errors;
valid58 = valid58 || _valid16;
}
if(!valid58){
const err101 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported",schemaPath:"#/anyOf/0/properties/requestObjectEncryptionAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err101];
}
else {
vErrors.push(err101);
}
errors++;
}
else {
errors = _errs168;
if(vErrors !== null){
if(_errs168){
vErrors.length = _errs168;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs167 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.requestObjectEncryptionEncValuesSupported !== undefined){
let data41 = data.requestObjectEncryptionEncValuesSupported;
const _errs177 = errors;
const _errs178 = errors;
let valid62 = false;
const _errs179 = errors;
if(errors === _errs179){
if(Array.isArray(data41)){
var valid63 = true;
const len15 = data41.length;
for(let i15=0; i15<len15; i15++){
const _errs181 = errors;
if(typeof data41[i15] !== "string"){
const err102 = {instancePath:instancePath+"/requestObjectEncryptionEncValuesSupported/" + i15,schemaPath:"#/anyOf/0/properties/requestObjectEncryptionEncValuesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err102];
}
else {
vErrors.push(err102);
}
errors++;
}
var valid63 = _errs181 === errors;
if(!valid63){
break;
}
}
}
else {
const err103 = {instancePath:instancePath+"/requestObjectEncryptionEncValuesSupported",schemaPath:"#/anyOf/0/properties/requestObjectEncryptionEncValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err103];
}
else {
vErrors.push(err103);
}
errors++;
}
}
var _valid17 = _errs179 === errors;
valid62 = valid62 || _valid17;
if(!valid62){
const _errs183 = errors;
if(typeof data41 !== "string"){
const err104 = {instancePath:instancePath+"/requestObjectEncryptionEncValuesSupported",schemaPath:"#/anyOf/0/properties/requestObjectEncryptionEncValuesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err104];
}
else {
vErrors.push(err104);
}
errors++;
}
var _valid17 = _errs183 === errors;
valid62 = valid62 || _valid17;
}
if(!valid62){
const err105 = {instancePath:instancePath+"/requestObjectEncryptionEncValuesSupported",schemaPath:"#/anyOf/0/properties/requestObjectEncryptionEncValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err105];
}
else {
vErrors.push(err105);
}
errors++;
}
else {
errors = _errs178;
if(vErrors !== null){
if(_errs178){
vErrors.length = _errs178;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs177 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.tokenEndpointAuthMethodsSupported !== undefined){
let data43 = data.tokenEndpointAuthMethodsSupported;
const _errs185 = errors;
const _errs186 = errors;
let valid64 = false;
const _errs187 = errors;
if(errors === _errs187){
if(Array.isArray(data43)){
var valid65 = true;
const len16 = data43.length;
for(let i16=0; i16<len16; i16++){
let data44 = data43[i16];
const _errs189 = errors;
if(typeof data44 !== "string"){
const err106 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported/" + i16,schemaPath:"#/definitions/TokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err106];
}
else {
vErrors.push(err106);
}
errors++;
}
if(!((((data44 === "client_secret_post") || (data44 === "client_secret_basic")) || (data44 === "client_secret_jwt")) || (data44 === "private_key_jwt"))){
const err107 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported/" + i16,schemaPath:"#/definitions/TokenEndpointAuthMethod/enum",keyword:"enum",params:{allowedValues: schema380.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err107];
}
else {
vErrors.push(err107);
}
errors++;
}
var valid65 = _errs189 === errors;
if(!valid65){
break;
}
}
}
else {
const err108 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported",schemaPath:"#/anyOf/0/properties/tokenEndpointAuthMethodsSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err108];
}
else {
vErrors.push(err108);
}
errors++;
}
}
var _valid18 = _errs187 === errors;
valid64 = valid64 || _valid18;
if(!valid64){
const _errs192 = errors;
if(typeof data43 !== "string"){
const err109 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported",schemaPath:"#/definitions/TokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err109];
}
else {
vErrors.push(err109);
}
errors++;
}
if(!((((data43 === "client_secret_post") || (data43 === "client_secret_basic")) || (data43 === "client_secret_jwt")) || (data43 === "private_key_jwt"))){
const err110 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported",schemaPath:"#/definitions/TokenEndpointAuthMethod/enum",keyword:"enum",params:{allowedValues: schema380.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err110];
}
else {
vErrors.push(err110);
}
errors++;
}
var _valid18 = _errs192 === errors;
valid64 = valid64 || _valid18;
}
if(!valid64){
const err111 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported",schemaPath:"#/anyOf/0/properties/tokenEndpointAuthMethodsSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err111];
}
else {
vErrors.push(err111);
}
errors++;
}
else {
errors = _errs186;
if(vErrors !== null){
if(_errs186){
vErrors.length = _errs186;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs185 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.tokenEndpointAuthSigningAlgValuesSupported !== undefined){
let data45 = data.tokenEndpointAuthSigningAlgValuesSupported;
const _errs195 = errors;
const _errs196 = errors;
let valid68 = false;
const _errs197 = errors;
if(errors === _errs197){
if(Array.isArray(data45)){
var valid69 = true;
const len17 = data45.length;
for(let i17=0; i17<len17; i17++){
let data46 = data45[i17];
const _errs199 = errors;
if(typeof data46 !== "string"){
const err112 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported/" + i17,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err112];
}
else {
vErrors.push(err112);
}
errors++;
}
if(!(((((data46 === "EdDSA") || (data46 === "RS256")) || (data46 === "PS256")) || (data46 === "ES256")) || (data46 === "ES256K"))){
const err113 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported/" + i17,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err113];
}
else {
vErrors.push(err113);
}
errors++;
}
var valid69 = _errs199 === errors;
if(!valid69){
break;
}
}
}
else {
const err114 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported",schemaPath:"#/anyOf/0/properties/tokenEndpointAuthSigningAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err114];
}
else {
vErrors.push(err114);
}
errors++;
}
}
var _valid19 = _errs197 === errors;
valid68 = valid68 || _valid19;
if(!valid68){
const _errs202 = errors;
if(typeof data45 !== "string"){
const err115 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err115];
}
else {
vErrors.push(err115);
}
errors++;
}
if(!(((((data45 === "EdDSA") || (data45 === "RS256")) || (data45 === "PS256")) || (data45 === "ES256")) || (data45 === "ES256K"))){
const err116 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err116];
}
else {
vErrors.push(err116);
}
errors++;
}
var _valid19 = _errs202 === errors;
valid68 = valid68 || _valid19;
}
if(!valid68){
const err117 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported",schemaPath:"#/anyOf/0/properties/tokenEndpointAuthSigningAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err117];
}
else {
vErrors.push(err117);
}
errors++;
}
else {
errors = _errs196;
if(vErrors !== null){
if(_errs196){
vErrors.length = _errs196;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs195 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.displayValuesSupported !== undefined){
let data47 = data.displayValuesSupported;
const _errs205 = errors;
const _errs206 = errors;
let valid72 = false;
const _errs207 = errors;
if(errors === _errs207){
if(Array.isArray(data47)){
var valid73 = true;
const len18 = data47.length;
for(let i18=0; i18<len18; i18++){
const _errs209 = errors;
if(typeof data47[i18] !== "string"){
const err118 = {instancePath:instancePath+"/displayValuesSupported/" + i18,schemaPath:"#/anyOf/0/properties/displayValuesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err118];
}
else {
vErrors.push(err118);
}
errors++;
}
var valid73 = _errs209 === errors;
if(!valid73){
break;
}
}
}
else {
const err119 = {instancePath:instancePath+"/displayValuesSupported",schemaPath:"#/anyOf/0/properties/displayValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err119];
}
else {
vErrors.push(err119);
}
errors++;
}
}
var _valid20 = _errs207 === errors;
valid72 = valid72 || _valid20;
if(!valid72){
const _errs211 = errors;
if(typeof data47 !== "string"){
const err120 = {instancePath:instancePath+"/displayValuesSupported",schemaPath:"#/anyOf/0/properties/displayValuesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err120];
}
else {
vErrors.push(err120);
}
errors++;
}
var _valid20 = _errs211 === errors;
valid72 = valid72 || _valid20;
}
if(!valid72){
const err121 = {instancePath:instancePath+"/displayValuesSupported",schemaPath:"#/anyOf/0/properties/displayValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err121];
}
else {
vErrors.push(err121);
}
errors++;
}
else {
errors = _errs206;
if(vErrors !== null){
if(_errs206){
vErrors.length = _errs206;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs205 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.claimTypesSupported !== undefined){
let data49 = data.claimTypesSupported;
const _errs213 = errors;
const _errs214 = errors;
let valid74 = false;
const _errs215 = errors;
if(errors === _errs215){
if(Array.isArray(data49)){
var valid75 = true;
const len19 = data49.length;
for(let i19=0; i19<len19; i19++){
let data50 = data49[i19];
const _errs217 = errors;
if(typeof data50 !== "string"){
const err122 = {instancePath:instancePath+"/claimTypesSupported/" + i19,schemaPath:"#/definitions/ClaimType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err122];
}
else {
vErrors.push(err122);
}
errors++;
}
if(!(((data50 === "normal") || (data50 === "aggregated")) || (data50 === "distributed"))){
const err123 = {instancePath:instancePath+"/claimTypesSupported/" + i19,schemaPath:"#/definitions/ClaimType/enum",keyword:"enum",params:{allowedValues: schema384.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err123];
}
else {
vErrors.push(err123);
}
errors++;
}
var valid75 = _errs217 === errors;
if(!valid75){
break;
}
}
}
else {
const err124 = {instancePath:instancePath+"/claimTypesSupported",schemaPath:"#/anyOf/0/properties/claimTypesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err124];
}
else {
vErrors.push(err124);
}
errors++;
}
}
var _valid21 = _errs215 === errors;
valid74 = valid74 || _valid21;
if(!valid74){
const _errs220 = errors;
if(typeof data49 !== "string"){
const err125 = {instancePath:instancePath+"/claimTypesSupported",schemaPath:"#/definitions/ClaimType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err125];
}
else {
vErrors.push(err125);
}
errors++;
}
if(!(((data49 === "normal") || (data49 === "aggregated")) || (data49 === "distributed"))){
const err126 = {instancePath:instancePath+"/claimTypesSupported",schemaPath:"#/definitions/ClaimType/enum",keyword:"enum",params:{allowedValues: schema384.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err126];
}
else {
vErrors.push(err126);
}
errors++;
}
var _valid21 = _errs220 === errors;
valid74 = valid74 || _valid21;
}
if(!valid74){
const err127 = {instancePath:instancePath+"/claimTypesSupported",schemaPath:"#/anyOf/0/properties/claimTypesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err127];
}
else {
vErrors.push(err127);
}
errors++;
}
else {
errors = _errs214;
if(vErrors !== null){
if(_errs214){
vErrors.length = _errs214;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs213 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.claimsSupported !== undefined){
let data51 = data.claimsSupported;
const _errs223 = errors;
const _errs224 = errors;
let valid78 = false;
const _errs225 = errors;
if(errors === _errs225){
if(Array.isArray(data51)){
var valid79 = true;
const len20 = data51.length;
for(let i20=0; i20<len20; i20++){
const _errs227 = errors;
if(typeof data51[i20] !== "string"){
const err128 = {instancePath:instancePath+"/claimsSupported/" + i20,schemaPath:"#/anyOf/0/properties/claimsSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err128];
}
else {
vErrors.push(err128);
}
errors++;
}
var valid79 = _errs227 === errors;
if(!valid79){
break;
}
}
}
else {
const err129 = {instancePath:instancePath+"/claimsSupported",schemaPath:"#/anyOf/0/properties/claimsSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err129];
}
else {
vErrors.push(err129);
}
errors++;
}
}
var _valid22 = _errs225 === errors;
valid78 = valid78 || _valid22;
if(!valid78){
const _errs229 = errors;
if(typeof data51 !== "string"){
const err130 = {instancePath:instancePath+"/claimsSupported",schemaPath:"#/anyOf/0/properties/claimsSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err130];
}
else {
vErrors.push(err130);
}
errors++;
}
var _valid22 = _errs229 === errors;
valid78 = valid78 || _valid22;
}
if(!valid78){
const err131 = {instancePath:instancePath+"/claimsSupported",schemaPath:"#/anyOf/0/properties/claimsSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err131];
}
else {
vErrors.push(err131);
}
errors++;
}
else {
errors = _errs224;
if(vErrors !== null){
if(_errs224){
vErrors.length = _errs224;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs223 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.serviceDocumentation !== undefined){
const _errs231 = errors;
if(typeof data.serviceDocumentation !== "string"){
const err132 = {instancePath:instancePath+"/serviceDocumentation",schemaPath:"#/anyOf/0/properties/serviceDocumentation/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err132];
}
else {
vErrors.push(err132);
}
errors++;
}
var valid1 = _errs231 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.claimsLocalesSupported !== undefined){
let data54 = data.claimsLocalesSupported;
const _errs233 = errors;
const _errs234 = errors;
let valid80 = false;
const _errs235 = errors;
if(errors === _errs235){
if(Array.isArray(data54)){
var valid81 = true;
const len21 = data54.length;
for(let i21=0; i21<len21; i21++){
const _errs237 = errors;
if(typeof data54[i21] !== "string"){
const err133 = {instancePath:instancePath+"/claimsLocalesSupported/" + i21,schemaPath:"#/anyOf/0/properties/claimsLocalesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err133];
}
else {
vErrors.push(err133);
}
errors++;
}
var valid81 = _errs237 === errors;
if(!valid81){
break;
}
}
}
else {
const err134 = {instancePath:instancePath+"/claimsLocalesSupported",schemaPath:"#/anyOf/0/properties/claimsLocalesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err134];
}
else {
vErrors.push(err134);
}
errors++;
}
}
var _valid23 = _errs235 === errors;
valid80 = valid80 || _valid23;
if(!valid80){
const _errs239 = errors;
if(typeof data54 !== "string"){
const err135 = {instancePath:instancePath+"/claimsLocalesSupported",schemaPath:"#/anyOf/0/properties/claimsLocalesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err135];
}
else {
vErrors.push(err135);
}
errors++;
}
var _valid23 = _errs239 === errors;
valid80 = valid80 || _valid23;
}
if(!valid80){
const err136 = {instancePath:instancePath+"/claimsLocalesSupported",schemaPath:"#/anyOf/0/properties/claimsLocalesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err136];
}
else {
vErrors.push(err136);
}
errors++;
}
else {
errors = _errs234;
if(vErrors !== null){
if(_errs234){
vErrors.length = _errs234;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs233 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.uiLocalesSupported !== undefined){
let data56 = data.uiLocalesSupported;
const _errs241 = errors;
const _errs242 = errors;
let valid82 = false;
const _errs243 = errors;
if(errors === _errs243){
if(Array.isArray(data56)){
var valid83 = true;
const len22 = data56.length;
for(let i22=0; i22<len22; i22++){
const _errs245 = errors;
if(typeof data56[i22] !== "string"){
const err137 = {instancePath:instancePath+"/uiLocalesSupported/" + i22,schemaPath:"#/anyOf/0/properties/uiLocalesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err137];
}
else {
vErrors.push(err137);
}
errors++;
}
var valid83 = _errs245 === errors;
if(!valid83){
break;
}
}
}
else {
const err138 = {instancePath:instancePath+"/uiLocalesSupported",schemaPath:"#/anyOf/0/properties/uiLocalesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err138];
}
else {
vErrors.push(err138);
}
errors++;
}
}
var _valid24 = _errs243 === errors;
valid82 = valid82 || _valid24;
if(!valid82){
const _errs247 = errors;
if(typeof data56 !== "string"){
const err139 = {instancePath:instancePath+"/uiLocalesSupported",schemaPath:"#/anyOf/0/properties/uiLocalesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err139];
}
else {
vErrors.push(err139);
}
errors++;
}
var _valid24 = _errs247 === errors;
valid82 = valid82 || _valid24;
}
if(!valid82){
const err140 = {instancePath:instancePath+"/uiLocalesSupported",schemaPath:"#/anyOf/0/properties/uiLocalesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err140];
}
else {
vErrors.push(err140);
}
errors++;
}
else {
errors = _errs242;
if(vErrors !== null){
if(_errs242){
vErrors.length = _errs242;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs241 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.claimsParameterSupported !== undefined){
const _errs249 = errors;
if(typeof data.claimsParameterSupported !== "boolean"){
const err141 = {instancePath:instancePath+"/claimsParameterSupported",schemaPath:"#/anyOf/0/properties/claimsParameterSupported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err141];
}
else {
vErrors.push(err141);
}
errors++;
}
var valid1 = _errs249 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.requestParameterSupported !== undefined){
const _errs251 = errors;
if(typeof data.requestParameterSupported !== "boolean"){
const err142 = {instancePath:instancePath+"/requestParameterSupported",schemaPath:"#/anyOf/0/properties/requestParameterSupported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err142];
}
else {
vErrors.push(err142);
}
errors++;
}
var valid1 = _errs251 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.requestUriParameterSupported !== undefined){
const _errs253 = errors;
if(typeof data.requestUriParameterSupported !== "boolean"){
const err143 = {instancePath:instancePath+"/requestUriParameterSupported",schemaPath:"#/anyOf/0/properties/requestUriParameterSupported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err143];
}
else {
vErrors.push(err143);
}
errors++;
}
var valid1 = _errs253 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.requireRequestUriRegistration !== undefined){
const _errs255 = errors;
if(typeof data.requireRequestUriRegistration !== "boolean"){
const err144 = {instancePath:instancePath+"/requireRequestUriRegistration",schemaPath:"#/anyOf/0/properties/requireRequestUriRegistration/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err144];
}
else {
vErrors.push(err144);
}
errors++;
}
var valid1 = _errs255 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.opPolicyUri !== undefined){
const _errs257 = errors;
if(typeof data.opPolicyUri !== "string"){
const err145 = {instancePath:instancePath+"/opPolicyUri",schemaPath:"#/anyOf/0/properties/opPolicyUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err145];
}
else {
vErrors.push(err145);
}
errors++;
}
var valid1 = _errs257 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.opTosUri !== undefined){
const _errs259 = errors;
if(typeof data.opTosUri !== "string"){
const err146 = {instancePath:instancePath+"/opTosUri",schemaPath:"#/anyOf/0/properties/opTosUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err146];
}
else {
vErrors.push(err146);
}
errors++;
}
var valid1 = _errs259 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.client_id !== undefined){
const _errs261 = errors;
if(typeof data.client_id !== "string"){
const err147 = {instancePath:instancePath+"/client_id",schemaPath:"#/anyOf/0/properties/client_id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err147];
}
else {
vErrors.push(err147);
}
errors++;
}
var valid1 = _errs261 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.redirectUris !== undefined){
let data65 = data.redirectUris;
const _errs263 = errors;
const _errs264 = errors;
let valid84 = false;
const _errs265 = errors;
if(errors === _errs265){
if(Array.isArray(data65)){
var valid85 = true;
const len23 = data65.length;
for(let i23=0; i23<len23; i23++){
const _errs267 = errors;
if(typeof data65[i23] !== "string"){
const err148 = {instancePath:instancePath+"/redirectUris/" + i23,schemaPath:"#/anyOf/0/properties/redirectUris/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err148];
}
else {
vErrors.push(err148);
}
errors++;
}
var valid85 = _errs267 === errors;
if(!valid85){
break;
}
}
}
else {
const err149 = {instancePath:instancePath+"/redirectUris",schemaPath:"#/anyOf/0/properties/redirectUris/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err149];
}
else {
vErrors.push(err149);
}
errors++;
}
}
var _valid25 = _errs265 === errors;
valid84 = valid84 || _valid25;
if(!valid84){
const _errs269 = errors;
if(typeof data65 !== "string"){
const err150 = {instancePath:instancePath+"/redirectUris",schemaPath:"#/anyOf/0/properties/redirectUris/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err150];
}
else {
vErrors.push(err150);
}
errors++;
}
var _valid25 = _errs269 === errors;
valid84 = valid84 || _valid25;
}
if(!valid84){
const err151 = {instancePath:instancePath+"/redirectUris",schemaPath:"#/anyOf/0/properties/redirectUris/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err151];
}
else {
vErrors.push(err151);
}
errors++;
}
else {
errors = _errs264;
if(vErrors !== null){
if(_errs264){
vErrors.length = _errs264;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs263 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.clientName !== undefined){
const _errs271 = errors;
if(typeof data.clientName !== "string"){
const err152 = {instancePath:instancePath+"/clientName",schemaPath:"#/anyOf/0/properties/clientName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err152];
}
else {
vErrors.push(err152);
}
errors++;
}
var valid1 = _errs271 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.clientUri !== undefined){
const _errs273 = errors;
if(typeof data.clientUri !== "string"){
const err153 = {instancePath:instancePath+"/clientUri",schemaPath:"#/anyOf/0/properties/clientUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err153];
}
else {
vErrors.push(err153);
}
errors++;
}
var valid1 = _errs273 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.scope !== undefined){
const _errs275 = errors;
if(typeof data.scope !== "string"){
const err154 = {instancePath:instancePath+"/scope",schemaPath:"#/anyOf/0/properties/scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err154];
}
else {
vErrors.push(err154);
}
errors++;
}
var valid1 = _errs275 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.contacts !== undefined){
let data70 = data.contacts;
const _errs277 = errors;
if(errors === _errs277){
if(Array.isArray(data70)){
var valid86 = true;
const len24 = data70.length;
for(let i24=0; i24<len24; i24++){
const _errs279 = errors;
if(typeof data70[i24] !== "string"){
const err155 = {instancePath:instancePath+"/contacts/" + i24,schemaPath:"#/anyOf/0/properties/contacts/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err155];
}
else {
vErrors.push(err155);
}
errors++;
}
var valid86 = _errs279 === errors;
if(!valid86){
break;
}
}
}
else {
const err156 = {instancePath:instancePath+"/contacts",schemaPath:"#/anyOf/0/properties/contacts/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err156];
}
else {
vErrors.push(err156);
}
errors++;
}
}
var valid1 = _errs277 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.tosUri !== undefined){
const _errs281 = errors;
if(typeof data.tosUri !== "string"){
const err157 = {instancePath:instancePath+"/tosUri",schemaPath:"#/anyOf/0/properties/tosUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err157];
}
else {
vErrors.push(err157);
}
errors++;
}
var valid1 = _errs281 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.policyUri !== undefined){
const _errs283 = errors;
if(typeof data.policyUri !== "string"){
const err158 = {instancePath:instancePath+"/policyUri",schemaPath:"#/anyOf/0/properties/policyUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err158];
}
else {
vErrors.push(err158);
}
errors++;
}
var valid1 = _errs283 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.jwks !== undefined){
const _errs285 = errors;
if(!(validate223(data.jwks, {instancePath:instancePath+"/jwks",parentData:data,parentDataProperty:"jwks",rootData}))){
vErrors = vErrors === null ? validate223.errors : vErrors.concat(validate223.errors);
errors = vErrors.length;
}
var valid1 = _errs285 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.softwareId !== undefined){
const _errs286 = errors;
if(typeof data.softwareId !== "string"){
const err159 = {instancePath:instancePath+"/softwareId",schemaPath:"#/anyOf/0/properties/softwareId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err159];
}
else {
vErrors.push(err159);
}
errors++;
}
var valid1 = _errs286 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.softwareVersion !== undefined){
const _errs288 = errors;
if(typeof data.softwareVersion !== "string"){
const err160 = {instancePath:instancePath+"/softwareVersion",schemaPath:"#/anyOf/0/properties/softwareVersion/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err160];
}
else {
vErrors.push(err160);
}
errors++;
}
var valid1 = _errs288 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.tokenEndpointAuthMethod !== undefined){
const _errs290 = errors;
if(typeof data.tokenEndpointAuthMethod !== "string"){
const err161 = {instancePath:instancePath+"/tokenEndpointAuthMethod",schemaPath:"#/anyOf/0/properties/tokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err161];
}
else {
vErrors.push(err161);
}
errors++;
}
var valid1 = _errs290 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.applicationType !== undefined){
const _errs292 = errors;
if(typeof data.applicationType !== "string"){
const err162 = {instancePath:instancePath+"/applicationType",schemaPath:"#/anyOf/0/properties/applicationType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err162];
}
else {
vErrors.push(err162);
}
errors++;
}
var valid1 = _errs292 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.responseTypes !== undefined){
const _errs294 = errors;
if(typeof data.responseTypes !== "string"){
const err163 = {instancePath:instancePath+"/responseTypes",schemaPath:"#/anyOf/0/properties/responseTypes/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err163];
}
else {
vErrors.push(err163);
}
errors++;
}
var valid1 = _errs294 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.grantTypes !== undefined){
const _errs296 = errors;
if(typeof data.grantTypes !== "string"){
const err164 = {instancePath:instancePath+"/grantTypes",schemaPath:"#/anyOf/0/properties/grantTypes/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err164];
}
else {
vErrors.push(err164);
}
errors++;
}
var valid1 = _errs296 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.vpFormats !== undefined){
const _errs298 = errors;
if(!(validate225(data.vpFormats, {instancePath:instancePath+"/vpFormats",parentData:data,parentDataProperty:"vpFormats",rootData}))){
vErrors = vErrors === null ? validate225.errors : vErrors.concat(validate225.errors);
errors = vErrors.length;
}
var valid1 = _errs298 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.logo_uri !== undefined){
const _errs299 = errors;
if(typeof data.logo_uri !== "string"){
const err165 = {instancePath:instancePath+"/logo_uri",schemaPath:"#/anyOf/0/properties/logo_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err165];
}
else {
vErrors.push(err165);
}
errors++;
}
var valid1 = _errs299 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.clientPurpose !== undefined){
const _errs301 = errors;
if(typeof data.clientPurpose !== "string"){
const err166 = {instancePath:instancePath+"/clientPurpose",schemaPath:"#/anyOf/0/properties/clientPurpose/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err166];
}
else {
vErrors.push(err166);
}
errors++;
}
var valid1 = _errs301 === errors;
}
else {
var valid1 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
const err167 = {instancePath,schemaPath:"#/anyOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err167];
}
else {
vErrors.push(err167);
}
errors++;
}
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs303 = errors;
if(errors === _errs303){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing1;
if((data.passBy === undefined) && (missing1 = "passBy")){
const err168 = {instancePath,schemaPath:"#/anyOf/1/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};
if(vErrors === null){
vErrors = [err168];
}
else {
vErrors.push(err168);
}
errors++;
}
else {
if(data.passBy !== undefined){
let data84 = data.passBy;
const _errs305 = errors;
if(typeof data84 !== "string"){
const err169 = {instancePath:instancePath+"/passBy",schemaPath:"#/definitions/PassBy/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err169];
}
else {
vErrors.push(err169);
}
errors++;
}
if(!(((data84 === "NONE") || (data84 === "REFERENCE")) || (data84 === "VALUE"))){
const err170 = {instancePath:instancePath+"/passBy",schemaPath:"#/definitions/PassBy/enum",keyword:"enum",params:{allowedValues: schema348.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err170];
}
else {
vErrors.push(err170);
}
errors++;
}
var valid87 = _errs305 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.reference_uri !== undefined){
const _errs308 = errors;
if(typeof data.reference_uri !== "string"){
const err171 = {instancePath:instancePath+"/reference_uri",schemaPath:"#/anyOf/1/properties/reference_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err171];
}
else {
vErrors.push(err171);
}
errors++;
}
var valid87 = _errs308 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.targets !== undefined){
const _errs310 = errors;
if(!(validate221(data.targets, {instancePath:instancePath+"/targets",parentData:data,parentDataProperty:"targets",rootData}))){
vErrors = vErrors === null ? validate221.errors : vErrors.concat(validate221.errors);
errors = vErrors.length;
}
var valid87 = _errs310 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.id_token_encrypted_response_alg !== undefined){
let data87 = data.id_token_encrypted_response_alg;
const _errs311 = errors;
if(typeof data87 !== "string"){
const err172 = {instancePath:instancePath+"/id_token_encrypted_response_alg",schemaPath:"#/definitions/EncKeyAlgorithm/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err172];
}
else {
vErrors.push(err172);
}
errors++;
}
if("ECDH-ES" !== data87){
const err173 = {instancePath:instancePath+"/id_token_encrypted_response_alg",schemaPath:"#/definitions/EncKeyAlgorithm/const",keyword:"const",params:{allowedValue: "ECDH-ES"},message:"must be equal to constant"};
if(vErrors === null){
vErrors = [err173];
}
else {
vErrors.push(err173);
}
errors++;
}
var valid87 = _errs311 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.id_token_encrypted_response_enc !== undefined){
let data88 = data.id_token_encrypted_response_enc;
const _errs314 = errors;
if(typeof data88 !== "string"){
const err174 = {instancePath:instancePath+"/id_token_encrypted_response_enc",schemaPath:"#/definitions/EncSymmetricAlgorithmCode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err174];
}
else {
vErrors.push(err174);
}
errors++;
}
if("XC20P" !== data88){
const err175 = {instancePath:instancePath+"/id_token_encrypted_response_enc",schemaPath:"#/definitions/EncSymmetricAlgorithmCode/const",keyword:"const",params:{allowedValue: "XC20P"},message:"must be equal to constant"};
if(vErrors === null){
vErrors = [err175];
}
else {
vErrors.push(err175);
}
errors++;
}
var valid87 = _errs314 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.authorizationEndpoint !== undefined){
let data89 = data.authorizationEndpoint;
const _errs317 = errors;
const _errs318 = errors;
let valid91 = false;
const _errs319 = errors;
if(typeof data89 !== "string"){
const err176 = {instancePath:instancePath+"/authorizationEndpoint",schemaPath:"#/definitions/Schema/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err176];
}
else {
vErrors.push(err176);
}
errors++;
}
if(!((data89 === "openid:") || (data89 === "openid-vc:"))){
const err177 = {instancePath:instancePath+"/authorizationEndpoint",schemaPath:"#/definitions/Schema/enum",keyword:"enum",params:{allowedValues: schema354.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err177];
}
else {
vErrors.push(err177);
}
errors++;
}
var _valid26 = _errs319 === errors;
valid91 = valid91 || _valid26;
if(!valid91){
const _errs322 = errors;
if(typeof data89 !== "string"){
const err178 = {instancePath:instancePath+"/authorizationEndpoint",schemaPath:"#/anyOf/1/properties/authorizationEndpoint/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err178];
}
else {
vErrors.push(err178);
}
errors++;
}
var _valid26 = _errs322 === errors;
valid91 = valid91 || _valid26;
}
if(!valid91){
const err179 = {instancePath:instancePath+"/authorizationEndpoint",schemaPath:"#/anyOf/1/properties/authorizationEndpoint/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err179];
}
else {
vErrors.push(err179);
}
errors++;
}
else {
errors = _errs318;
if(vErrors !== null){
if(_errs318){
vErrors.length = _errs318;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs317 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.issuer !== undefined){
let data90 = data.issuer;
const _errs324 = errors;
const _errs325 = errors;
let valid93 = false;
const _errs326 = errors;
if(typeof data90 !== "string"){
const err180 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/ResponseIss/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err180];
}
else {
vErrors.push(err180);
}
errors++;
}
if(!(((data90 === "https://self-issued.me") || (data90 === "https://self-issued.me/v2")) || (data90 === "https://self-issued.me/v2/openid-vc"))){
const err181 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/ResponseIss/enum",keyword:"enum",params:{allowedValues: schema355.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err181];
}
else {
vErrors.push(err181);
}
errors++;
}
var _valid27 = _errs326 === errors;
valid93 = valid93 || _valid27;
if(!valid93){
const _errs329 = errors;
if(typeof data90 !== "string"){
const err182 = {instancePath:instancePath+"/issuer",schemaPath:"#/anyOf/1/properties/issuer/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err182];
}
else {
vErrors.push(err182);
}
errors++;
}
var _valid27 = _errs329 === errors;
valid93 = valid93 || _valid27;
}
if(!valid93){
const err183 = {instancePath:instancePath+"/issuer",schemaPath:"#/anyOf/1/properties/issuer/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err183];
}
else {
vErrors.push(err183);
}
errors++;
}
else {
errors = _errs325;
if(vErrors !== null){
if(_errs325){
vErrors.length = _errs325;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs324 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.responseTypesSupported !== undefined){
let data91 = data.responseTypesSupported;
const _errs331 = errors;
const _errs332 = errors;
let valid95 = false;
const _errs333 = errors;
if(errors === _errs333){
if(Array.isArray(data91)){
var valid96 = true;
const len25 = data91.length;
for(let i25=0; i25<len25; i25++){
let data92 = data91[i25];
const _errs335 = errors;
if(typeof data92 !== "string"){
const err184 = {instancePath:instancePath+"/responseTypesSupported/" + i25,schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err184];
}
else {
vErrors.push(err184);
}
errors++;
}
if(!((data92 === "id_token") || (data92 === "vp_token"))){
const err185 = {instancePath:instancePath+"/responseTypesSupported/" + i25,schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema356.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err185];
}
else {
vErrors.push(err185);
}
errors++;
}
var valid96 = _errs335 === errors;
if(!valid96){
break;
}
}
}
else {
const err186 = {instancePath:instancePath+"/responseTypesSupported",schemaPath:"#/anyOf/1/properties/responseTypesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err186];
}
else {
vErrors.push(err186);
}
errors++;
}
}
var _valid28 = _errs333 === errors;
valid95 = valid95 || _valid28;
if(!valid95){
const _errs338 = errors;
if(typeof data91 !== "string"){
const err187 = {instancePath:instancePath+"/responseTypesSupported",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err187];
}
else {
vErrors.push(err187);
}
errors++;
}
if(!((data91 === "id_token") || (data91 === "vp_token"))){
const err188 = {instancePath:instancePath+"/responseTypesSupported",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema356.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err188];
}
else {
vErrors.push(err188);
}
errors++;
}
var _valid28 = _errs338 === errors;
valid95 = valid95 || _valid28;
}
if(!valid95){
const err189 = {instancePath:instancePath+"/responseTypesSupported",schemaPath:"#/anyOf/1/properties/responseTypesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err189];
}
else {
vErrors.push(err189);
}
errors++;
}
else {
errors = _errs332;
if(vErrors !== null){
if(_errs332){
vErrors.length = _errs332;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs331 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.scopesSupported !== undefined){
let data93 = data.scopesSupported;
const _errs341 = errors;
const _errs342 = errors;
let valid99 = false;
const _errs343 = errors;
if(errors === _errs343){
if(Array.isArray(data93)){
var valid100 = true;
const len26 = data93.length;
for(let i26=0; i26<len26; i26++){
let data94 = data93[i26];
const _errs345 = errors;
if(typeof data94 !== "string"){
const err190 = {instancePath:instancePath+"/scopesSupported/" + i26,schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err190];
}
else {
vErrors.push(err190);
}
errors++;
}
if(!((((((data94 === "openid") || (data94 === "openid did_authn")) || (data94 === "profile")) || (data94 === "email")) || (data94 === "address")) || (data94 === "phone"))){
const err191 = {instancePath:instancePath+"/scopesSupported/" + i26,schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema358.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err191];
}
else {
vErrors.push(err191);
}
errors++;
}
var valid100 = _errs345 === errors;
if(!valid100){
break;
}
}
}
else {
const err192 = {instancePath:instancePath+"/scopesSupported",schemaPath:"#/anyOf/1/properties/scopesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err192];
}
else {
vErrors.push(err192);
}
errors++;
}
}
var _valid29 = _errs343 === errors;
valid99 = valid99 || _valid29;
if(!valid99){
const _errs348 = errors;
if(typeof data93 !== "string"){
const err193 = {instancePath:instancePath+"/scopesSupported",schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err193];
}
else {
vErrors.push(err193);
}
errors++;
}
if(!((((((data93 === "openid") || (data93 === "openid did_authn")) || (data93 === "profile")) || (data93 === "email")) || (data93 === "address")) || (data93 === "phone"))){
const err194 = {instancePath:instancePath+"/scopesSupported",schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema358.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err194];
}
else {
vErrors.push(err194);
}
errors++;
}
var _valid29 = _errs348 === errors;
valid99 = valid99 || _valid29;
}
if(!valid99){
const err195 = {instancePath:instancePath+"/scopesSupported",schemaPath:"#/anyOf/1/properties/scopesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err195];
}
else {
vErrors.push(err195);
}
errors++;
}
else {
errors = _errs342;
if(vErrors !== null){
if(_errs342){
vErrors.length = _errs342;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs341 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.subjectTypesSupported !== undefined){
let data95 = data.subjectTypesSupported;
const _errs351 = errors;
const _errs352 = errors;
let valid103 = false;
const _errs353 = errors;
if(errors === _errs353){
if(Array.isArray(data95)){
var valid104 = true;
const len27 = data95.length;
for(let i27=0; i27<len27; i27++){
let data96 = data95[i27];
const _errs355 = errors;
if(typeof data96 !== "string"){
const err196 = {instancePath:instancePath+"/subjectTypesSupported/" + i27,schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err196];
}
else {
vErrors.push(err196);
}
errors++;
}
if(!((data96 === "public") || (data96 === "pairwise"))){
const err197 = {instancePath:instancePath+"/subjectTypesSupported/" + i27,schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema360.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err197];
}
else {
vErrors.push(err197);
}
errors++;
}
var valid104 = _errs355 === errors;
if(!valid104){
break;
}
}
}
else {
const err198 = {instancePath:instancePath+"/subjectTypesSupported",schemaPath:"#/anyOf/1/properties/subjectTypesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err198];
}
else {
vErrors.push(err198);
}
errors++;
}
}
var _valid30 = _errs353 === errors;
valid103 = valid103 || _valid30;
if(!valid103){
const _errs358 = errors;
if(typeof data95 !== "string"){
const err199 = {instancePath:instancePath+"/subjectTypesSupported",schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err199];
}
else {
vErrors.push(err199);
}
errors++;
}
if(!((data95 === "public") || (data95 === "pairwise"))){
const err200 = {instancePath:instancePath+"/subjectTypesSupported",schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema360.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err200];
}
else {
vErrors.push(err200);
}
errors++;
}
var _valid30 = _errs358 === errors;
valid103 = valid103 || _valid30;
}
if(!valid103){
const err201 = {instancePath:instancePath+"/subjectTypesSupported",schemaPath:"#/anyOf/1/properties/subjectTypesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err201];
}
else {
vErrors.push(err201);
}
errors++;
}
else {
errors = _errs352;
if(vErrors !== null){
if(_errs352){
vErrors.length = _errs352;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs351 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.idTokenSigningAlgValuesSupported !== undefined){
let data97 = data.idTokenSigningAlgValuesSupported;
const _errs361 = errors;
const _errs362 = errors;
let valid107 = false;
const _errs363 = errors;
if(errors === _errs363){
if(Array.isArray(data97)){
var valid108 = true;
const len28 = data97.length;
for(let i28=0; i28<len28; i28++){
let data98 = data97[i28];
const _errs365 = errors;
if(typeof data98 !== "string"){
const err202 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported/" + i28,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err202];
}
else {
vErrors.push(err202);
}
errors++;
}
if(!(((((data98 === "EdDSA") || (data98 === "RS256")) || (data98 === "PS256")) || (data98 === "ES256")) || (data98 === "ES256K"))){
const err203 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported/" + i28,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err203];
}
else {
vErrors.push(err203);
}
errors++;
}
var valid108 = _errs365 === errors;
if(!valid108){
break;
}
}
}
else {
const err204 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported",schemaPath:"#/anyOf/1/properties/idTokenSigningAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err204];
}
else {
vErrors.push(err204);
}
errors++;
}
}
var _valid31 = _errs363 === errors;
valid107 = valid107 || _valid31;
if(!valid107){
const _errs368 = errors;
if(typeof data97 !== "string"){
const err205 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err205];
}
else {
vErrors.push(err205);
}
errors++;
}
if(!(((((data97 === "EdDSA") || (data97 === "RS256")) || (data97 === "PS256")) || (data97 === "ES256")) || (data97 === "ES256K"))){
const err206 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err206];
}
else {
vErrors.push(err206);
}
errors++;
}
var _valid31 = _errs368 === errors;
valid107 = valid107 || _valid31;
}
if(!valid107){
const err207 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported",schemaPath:"#/anyOf/1/properties/idTokenSigningAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err207];
}
else {
vErrors.push(err207);
}
errors++;
}
else {
errors = _errs362;
if(vErrors !== null){
if(_errs362){
vErrors.length = _errs362;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs361 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.requestObjectSigningAlgValuesSupported !== undefined){
let data99 = data.requestObjectSigningAlgValuesSupported;
const _errs371 = errors;
const _errs372 = errors;
let valid111 = false;
const _errs373 = errors;
if(errors === _errs373){
if(Array.isArray(data99)){
var valid112 = true;
const len29 = data99.length;
for(let i29=0; i29<len29; i29++){
let data100 = data99[i29];
const _errs375 = errors;
if(typeof data100 !== "string"){
const err208 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported/" + i29,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err208];
}
else {
vErrors.push(err208);
}
errors++;
}
if(!(((((data100 === "EdDSA") || (data100 === "RS256")) || (data100 === "PS256")) || (data100 === "ES256")) || (data100 === "ES256K"))){
const err209 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported/" + i29,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err209];
}
else {
vErrors.push(err209);
}
errors++;
}
var valid112 = _errs375 === errors;
if(!valid112){
break;
}
}
}
else {
const err210 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported",schemaPath:"#/anyOf/1/properties/requestObjectSigningAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err210];
}
else {
vErrors.push(err210);
}
errors++;
}
}
var _valid32 = _errs373 === errors;
valid111 = valid111 || _valid32;
if(!valid111){
const _errs378 = errors;
if(typeof data99 !== "string"){
const err211 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err211];
}
else {
vErrors.push(err211);
}
errors++;
}
if(!(((((data99 === "EdDSA") || (data99 === "RS256")) || (data99 === "PS256")) || (data99 === "ES256")) || (data99 === "ES256K"))){
const err212 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err212];
}
else {
vErrors.push(err212);
}
errors++;
}
var _valid32 = _errs378 === errors;
valid111 = valid111 || _valid32;
}
if(!valid111){
const err213 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported",schemaPath:"#/anyOf/1/properties/requestObjectSigningAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err213];
}
else {
vErrors.push(err213);
}
errors++;
}
else {
errors = _errs372;
if(vErrors !== null){
if(_errs372){
vErrors.length = _errs372;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs371 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.subject_syntax_types_supported !== undefined){
let data101 = data.subject_syntax_types_supported;
const _errs381 = errors;
if(errors === _errs381){
if(Array.isArray(data101)){
var valid115 = true;
const len30 = data101.length;
for(let i30=0; i30<len30; i30++){
const _errs383 = errors;
if(typeof data101[i30] !== "string"){
const err214 = {instancePath:instancePath+"/subject_syntax_types_supported/" + i30,schemaPath:"#/anyOf/1/properties/subject_syntax_types_supported/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err214];
}
else {
vErrors.push(err214);
}
errors++;
}
var valid115 = _errs383 === errors;
if(!valid115){
break;
}
}
}
else {
const err215 = {instancePath:instancePath+"/subject_syntax_types_supported",schemaPath:"#/anyOf/1/properties/subject_syntax_types_supported/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err215];
}
else {
vErrors.push(err215);
}
errors++;
}
}
var valid87 = _errs381 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.tokenEndpoint !== undefined){
const _errs385 = errors;
if(typeof data.tokenEndpoint !== "string"){
const err216 = {instancePath:instancePath+"/tokenEndpoint",schemaPath:"#/anyOf/1/properties/tokenEndpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err216];
}
else {
vErrors.push(err216);
}
errors++;
}
var valid87 = _errs385 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.userinfoEndpoint !== undefined){
const _errs387 = errors;
if(typeof data.userinfoEndpoint !== "string"){
const err217 = {instancePath:instancePath+"/userinfoEndpoint",schemaPath:"#/anyOf/1/properties/userinfoEndpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err217];
}
else {
vErrors.push(err217);
}
errors++;
}
var valid87 = _errs387 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.jwksUri !== undefined){
const _errs389 = errors;
if(typeof data.jwksUri !== "string"){
const err218 = {instancePath:instancePath+"/jwksUri",schemaPath:"#/anyOf/1/properties/jwksUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err218];
}
else {
vErrors.push(err218);
}
errors++;
}
var valid87 = _errs389 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.registrationEndpoint !== undefined){
const _errs391 = errors;
if(typeof data.registrationEndpoint !== "string"){
const err219 = {instancePath:instancePath+"/registrationEndpoint",schemaPath:"#/anyOf/1/properties/registrationEndpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err219];
}
else {
vErrors.push(err219);
}
errors++;
}
var valid87 = _errs391 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.responseModesSupported !== undefined){
let data107 = data.responseModesSupported;
const _errs393 = errors;
const _errs394 = errors;
let valid116 = false;
const _errs395 = errors;
if(errors === _errs395){
if(Array.isArray(data107)){
var valid117 = true;
const len31 = data107.length;
for(let i31=0; i31<len31; i31++){
let data108 = data107[i31];
const _errs397 = errors;
if(typeof data108 !== "string"){
const err220 = {instancePath:instancePath+"/responseModesSupported/" + i31,schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err220];
}
else {
vErrors.push(err220);
}
errors++;
}
if(!((((((((data108 === "fragment") || (data108 === "form_post")) || (data108 === "post")) || (data108 === "direct_post")) || (data108 === "query")) || (data108 === "direct_post.jwt")) || (data108 === "query.jwt")) || (data108 === "fragment.jwt"))){
const err221 = {instancePath:instancePath+"/responseModesSupported/" + i31,schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema366.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err221];
}
else {
vErrors.push(err221);
}
errors++;
}
var valid117 = _errs397 === errors;
if(!valid117){
break;
}
}
}
else {
const err222 = {instancePath:instancePath+"/responseModesSupported",schemaPath:"#/anyOf/1/properties/responseModesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err222];
}
else {
vErrors.push(err222);
}
errors++;
}
}
var _valid33 = _errs395 === errors;
valid116 = valid116 || _valid33;
if(!valid116){
const _errs400 = errors;
if(typeof data107 !== "string"){
const err223 = {instancePath:instancePath+"/responseModesSupported",schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err223];
}
else {
vErrors.push(err223);
}
errors++;
}
if(!((((((((data107 === "fragment") || (data107 === "form_post")) || (data107 === "post")) || (data107 === "direct_post")) || (data107 === "query")) || (data107 === "direct_post.jwt")) || (data107 === "query.jwt")) || (data107 === "fragment.jwt"))){
const err224 = {instancePath:instancePath+"/responseModesSupported",schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema366.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err224];
}
else {
vErrors.push(err224);
}
errors++;
}
var _valid33 = _errs400 === errors;
valid116 = valid116 || _valid33;
}
if(!valid116){
const err225 = {instancePath:instancePath+"/responseModesSupported",schemaPath:"#/anyOf/1/properties/responseModesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err225];
}
else {
vErrors.push(err225);
}
errors++;
}
else {
errors = _errs394;
if(vErrors !== null){
if(_errs394){
vErrors.length = _errs394;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs393 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.grantTypesSupported !== undefined){
let data109 = data.grantTypesSupported;
const _errs403 = errors;
const _errs404 = errors;
let valid120 = false;
const _errs405 = errors;
if(errors === _errs405){
if(Array.isArray(data109)){
var valid121 = true;
const len32 = data109.length;
for(let i32=0; i32<len32; i32++){
let data110 = data109[i32];
const _errs407 = errors;
if(typeof data110 !== "string"){
const err226 = {instancePath:instancePath+"/grantTypesSupported/" + i32,schemaPath:"#/definitions/GrantType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err226];
}
else {
vErrors.push(err226);
}
errors++;
}
if(!((data110 === "authorization_code") || (data110 === "implicit"))){
const err227 = {instancePath:instancePath+"/grantTypesSupported/" + i32,schemaPath:"#/definitions/GrantType/enum",keyword:"enum",params:{allowedValues: schema368.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err227];
}
else {
vErrors.push(err227);
}
errors++;
}
var valid121 = _errs407 === errors;
if(!valid121){
break;
}
}
}
else {
const err228 = {instancePath:instancePath+"/grantTypesSupported",schemaPath:"#/anyOf/1/properties/grantTypesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err228];
}
else {
vErrors.push(err228);
}
errors++;
}
}
var _valid34 = _errs405 === errors;
valid120 = valid120 || _valid34;
if(!valid120){
const _errs410 = errors;
if(typeof data109 !== "string"){
const err229 = {instancePath:instancePath+"/grantTypesSupported",schemaPath:"#/definitions/GrantType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err229];
}
else {
vErrors.push(err229);
}
errors++;
}
if(!((data109 === "authorization_code") || (data109 === "implicit"))){
const err230 = {instancePath:instancePath+"/grantTypesSupported",schemaPath:"#/definitions/GrantType/enum",keyword:"enum",params:{allowedValues: schema368.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err230];
}
else {
vErrors.push(err230);
}
errors++;
}
var _valid34 = _errs410 === errors;
valid120 = valid120 || _valid34;
}
if(!valid120){
const err231 = {instancePath:instancePath+"/grantTypesSupported",schemaPath:"#/anyOf/1/properties/grantTypesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err231];
}
else {
vErrors.push(err231);
}
errors++;
}
else {
errors = _errs404;
if(vErrors !== null){
if(_errs404){
vErrors.length = _errs404;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs403 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.acrValuesSupported !== undefined){
let data111 = data.acrValuesSupported;
const _errs413 = errors;
const _errs414 = errors;
let valid124 = false;
const _errs415 = errors;
if(errors === _errs415){
if(Array.isArray(data111)){
var valid125 = true;
const len33 = data111.length;
for(let i33=0; i33<len33; i33++){
let data112 = data111[i33];
const _errs417 = errors;
if(typeof data112 !== "string"){
const err232 = {instancePath:instancePath+"/acrValuesSupported/" + i33,schemaPath:"#/definitions/AuthenticationContextReferences/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err232];
}
else {
vErrors.push(err232);
}
errors++;
}
if(!((data112 === "phr") || (data112 === "phrh"))){
const err233 = {instancePath:instancePath+"/acrValuesSupported/" + i33,schemaPath:"#/definitions/AuthenticationContextReferences/enum",keyword:"enum",params:{allowedValues: schema370.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err233];
}
else {
vErrors.push(err233);
}
errors++;
}
var valid125 = _errs417 === errors;
if(!valid125){
break;
}
}
}
else {
const err234 = {instancePath:instancePath+"/acrValuesSupported",schemaPath:"#/anyOf/1/properties/acrValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err234];
}
else {
vErrors.push(err234);
}
errors++;
}
}
var _valid35 = _errs415 === errors;
valid124 = valid124 || _valid35;
if(!valid124){
const _errs420 = errors;
if(typeof data111 !== "string"){
const err235 = {instancePath:instancePath+"/acrValuesSupported",schemaPath:"#/definitions/AuthenticationContextReferences/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err235];
}
else {
vErrors.push(err235);
}
errors++;
}
if(!((data111 === "phr") || (data111 === "phrh"))){
const err236 = {instancePath:instancePath+"/acrValuesSupported",schemaPath:"#/definitions/AuthenticationContextReferences/enum",keyword:"enum",params:{allowedValues: schema370.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err236];
}
else {
vErrors.push(err236);
}
errors++;
}
var _valid35 = _errs420 === errors;
valid124 = valid124 || _valid35;
}
if(!valid124){
const err237 = {instancePath:instancePath+"/acrValuesSupported",schemaPath:"#/anyOf/1/properties/acrValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err237];
}
else {
vErrors.push(err237);
}
errors++;
}
else {
errors = _errs414;
if(vErrors !== null){
if(_errs414){
vErrors.length = _errs414;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs413 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.idTokenEncryptionAlgValuesSupported !== undefined){
let data113 = data.idTokenEncryptionAlgValuesSupported;
const _errs423 = errors;
const _errs424 = errors;
let valid128 = false;
const _errs425 = errors;
if(errors === _errs425){
if(Array.isArray(data113)){
var valid129 = true;
const len34 = data113.length;
for(let i34=0; i34<len34; i34++){
let data114 = data113[i34];
const _errs427 = errors;
if(typeof data114 !== "string"){
const err238 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported/" + i34,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err238];
}
else {
vErrors.push(err238);
}
errors++;
}
if(!(((((data114 === "EdDSA") || (data114 === "RS256")) || (data114 === "PS256")) || (data114 === "ES256")) || (data114 === "ES256K"))){
const err239 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported/" + i34,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err239];
}
else {
vErrors.push(err239);
}
errors++;
}
var valid129 = _errs427 === errors;
if(!valid129){
break;
}
}
}
else {
const err240 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported",schemaPath:"#/anyOf/1/properties/idTokenEncryptionAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err240];
}
else {
vErrors.push(err240);
}
errors++;
}
}
var _valid36 = _errs425 === errors;
valid128 = valid128 || _valid36;
if(!valid128){
const _errs430 = errors;
if(typeof data113 !== "string"){
const err241 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err241];
}
else {
vErrors.push(err241);
}
errors++;
}
if(!(((((data113 === "EdDSA") || (data113 === "RS256")) || (data113 === "PS256")) || (data113 === "ES256")) || (data113 === "ES256K"))){
const err242 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err242];
}
else {
vErrors.push(err242);
}
errors++;
}
var _valid36 = _errs430 === errors;
valid128 = valid128 || _valid36;
}
if(!valid128){
const err243 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported",schemaPath:"#/anyOf/1/properties/idTokenEncryptionAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err243];
}
else {
vErrors.push(err243);
}
errors++;
}
else {
errors = _errs424;
if(vErrors !== null){
if(_errs424){
vErrors.length = _errs424;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs423 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.idTokenEncryptionEncValuesSupported !== undefined){
let data115 = data.idTokenEncryptionEncValuesSupported;
const _errs433 = errors;
const _errs434 = errors;
let valid132 = false;
const _errs435 = errors;
if(errors === _errs435){
if(Array.isArray(data115)){
var valid133 = true;
const len35 = data115.length;
for(let i35=0; i35<len35; i35++){
const _errs437 = errors;
if(typeof data115[i35] !== "string"){
const err244 = {instancePath:instancePath+"/idTokenEncryptionEncValuesSupported/" + i35,schemaPath:"#/anyOf/1/properties/idTokenEncryptionEncValuesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err244];
}
else {
vErrors.push(err244);
}
errors++;
}
var valid133 = _errs437 === errors;
if(!valid133){
break;
}
}
}
else {
const err245 = {instancePath:instancePath+"/idTokenEncryptionEncValuesSupported",schemaPath:"#/anyOf/1/properties/idTokenEncryptionEncValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err245];
}
else {
vErrors.push(err245);
}
errors++;
}
}
var _valid37 = _errs435 === errors;
valid132 = valid132 || _valid37;
if(!valid132){
const _errs439 = errors;
if(typeof data115 !== "string"){
const err246 = {instancePath:instancePath+"/idTokenEncryptionEncValuesSupported",schemaPath:"#/anyOf/1/properties/idTokenEncryptionEncValuesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err246];
}
else {
vErrors.push(err246);
}
errors++;
}
var _valid37 = _errs439 === errors;
valid132 = valid132 || _valid37;
}
if(!valid132){
const err247 = {instancePath:instancePath+"/idTokenEncryptionEncValuesSupported",schemaPath:"#/anyOf/1/properties/idTokenEncryptionEncValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err247];
}
else {
vErrors.push(err247);
}
errors++;
}
else {
errors = _errs434;
if(vErrors !== null){
if(_errs434){
vErrors.length = _errs434;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs433 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.userinfoSigningAlgValuesSupported !== undefined){
let data117 = data.userinfoSigningAlgValuesSupported;
const _errs441 = errors;
const _errs442 = errors;
let valid134 = false;
const _errs443 = errors;
if(errors === _errs443){
if(Array.isArray(data117)){
var valid135 = true;
const len36 = data117.length;
for(let i36=0; i36<len36; i36++){
let data118 = data117[i36];
const _errs445 = errors;
if(typeof data118 !== "string"){
const err248 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported/" + i36,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err248];
}
else {
vErrors.push(err248);
}
errors++;
}
if(!(((((data118 === "EdDSA") || (data118 === "RS256")) || (data118 === "PS256")) || (data118 === "ES256")) || (data118 === "ES256K"))){
const err249 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported/" + i36,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err249];
}
else {
vErrors.push(err249);
}
errors++;
}
var valid135 = _errs445 === errors;
if(!valid135){
break;
}
}
}
else {
const err250 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported",schemaPath:"#/anyOf/1/properties/userinfoSigningAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err250];
}
else {
vErrors.push(err250);
}
errors++;
}
}
var _valid38 = _errs443 === errors;
valid134 = valid134 || _valid38;
if(!valid134){
const _errs448 = errors;
if(typeof data117 !== "string"){
const err251 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err251];
}
else {
vErrors.push(err251);
}
errors++;
}
if(!(((((data117 === "EdDSA") || (data117 === "RS256")) || (data117 === "PS256")) || (data117 === "ES256")) || (data117 === "ES256K"))){
const err252 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err252];
}
else {
vErrors.push(err252);
}
errors++;
}
var _valid38 = _errs448 === errors;
valid134 = valid134 || _valid38;
}
if(!valid134){
const err253 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported",schemaPath:"#/anyOf/1/properties/userinfoSigningAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err253];
}
else {
vErrors.push(err253);
}
errors++;
}
else {
errors = _errs442;
if(vErrors !== null){
if(_errs442){
vErrors.length = _errs442;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs441 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.userinfoEncryptionAlgValuesSupported !== undefined){
let data119 = data.userinfoEncryptionAlgValuesSupported;
const _errs451 = errors;
const _errs452 = errors;
let valid138 = false;
const _errs453 = errors;
if(errors === _errs453){
if(Array.isArray(data119)){
var valid139 = true;
const len37 = data119.length;
for(let i37=0; i37<len37; i37++){
let data120 = data119[i37];
const _errs455 = errors;
if(typeof data120 !== "string"){
const err254 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported/" + i37,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err254];
}
else {
vErrors.push(err254);
}
errors++;
}
if(!(((((data120 === "EdDSA") || (data120 === "RS256")) || (data120 === "PS256")) || (data120 === "ES256")) || (data120 === "ES256K"))){
const err255 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported/" + i37,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err255];
}
else {
vErrors.push(err255);
}
errors++;
}
var valid139 = _errs455 === errors;
if(!valid139){
break;
}
}
}
else {
const err256 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported",schemaPath:"#/anyOf/1/properties/userinfoEncryptionAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err256];
}
else {
vErrors.push(err256);
}
errors++;
}
}
var _valid39 = _errs453 === errors;
valid138 = valid138 || _valid39;
if(!valid138){
const _errs458 = errors;
if(typeof data119 !== "string"){
const err257 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err257];
}
else {
vErrors.push(err257);
}
errors++;
}
if(!(((((data119 === "EdDSA") || (data119 === "RS256")) || (data119 === "PS256")) || (data119 === "ES256")) || (data119 === "ES256K"))){
const err258 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err258];
}
else {
vErrors.push(err258);
}
errors++;
}
var _valid39 = _errs458 === errors;
valid138 = valid138 || _valid39;
}
if(!valid138){
const err259 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported",schemaPath:"#/anyOf/1/properties/userinfoEncryptionAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err259];
}
else {
vErrors.push(err259);
}
errors++;
}
else {
errors = _errs452;
if(vErrors !== null){
if(_errs452){
vErrors.length = _errs452;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs451 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.userinfoEncryptionEncValuesSupported !== undefined){
let data121 = data.userinfoEncryptionEncValuesSupported;
const _errs461 = errors;
const _errs462 = errors;
let valid142 = false;
const _errs463 = errors;
if(errors === _errs463){
if(Array.isArray(data121)){
var valid143 = true;
const len38 = data121.length;
for(let i38=0; i38<len38; i38++){
const _errs465 = errors;
if(typeof data121[i38] !== "string"){
const err260 = {instancePath:instancePath+"/userinfoEncryptionEncValuesSupported/" + i38,schemaPath:"#/anyOf/1/properties/userinfoEncryptionEncValuesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err260];
}
else {
vErrors.push(err260);
}
errors++;
}
var valid143 = _errs465 === errors;
if(!valid143){
break;
}
}
}
else {
const err261 = {instancePath:instancePath+"/userinfoEncryptionEncValuesSupported",schemaPath:"#/anyOf/1/properties/userinfoEncryptionEncValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err261];
}
else {
vErrors.push(err261);
}
errors++;
}
}
var _valid40 = _errs463 === errors;
valid142 = valid142 || _valid40;
if(!valid142){
const _errs467 = errors;
if(typeof data121 !== "string"){
const err262 = {instancePath:instancePath+"/userinfoEncryptionEncValuesSupported",schemaPath:"#/anyOf/1/properties/userinfoEncryptionEncValuesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err262];
}
else {
vErrors.push(err262);
}
errors++;
}
var _valid40 = _errs467 === errors;
valid142 = valid142 || _valid40;
}
if(!valid142){
const err263 = {instancePath:instancePath+"/userinfoEncryptionEncValuesSupported",schemaPath:"#/anyOf/1/properties/userinfoEncryptionEncValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err263];
}
else {
vErrors.push(err263);
}
errors++;
}
else {
errors = _errs462;
if(vErrors !== null){
if(_errs462){
vErrors.length = _errs462;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs461 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.requestObjectEncryptionAlgValuesSupported !== undefined){
let data123 = data.requestObjectEncryptionAlgValuesSupported;
const _errs469 = errors;
const _errs470 = errors;
let valid144 = false;
const _errs471 = errors;
if(errors === _errs471){
if(Array.isArray(data123)){
var valid145 = true;
const len39 = data123.length;
for(let i39=0; i39<len39; i39++){
let data124 = data123[i39];
const _errs473 = errors;
if(typeof data124 !== "string"){
const err264 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported/" + i39,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err264];
}
else {
vErrors.push(err264);
}
errors++;
}
if(!(((((data124 === "EdDSA") || (data124 === "RS256")) || (data124 === "PS256")) || (data124 === "ES256")) || (data124 === "ES256K"))){
const err265 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported/" + i39,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err265];
}
else {
vErrors.push(err265);
}
errors++;
}
var valid145 = _errs473 === errors;
if(!valid145){
break;
}
}
}
else {
const err266 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported",schemaPath:"#/anyOf/1/properties/requestObjectEncryptionAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err266];
}
else {
vErrors.push(err266);
}
errors++;
}
}
var _valid41 = _errs471 === errors;
valid144 = valid144 || _valid41;
if(!valid144){
const _errs476 = errors;
if(typeof data123 !== "string"){
const err267 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err267];
}
else {
vErrors.push(err267);
}
errors++;
}
if(!(((((data123 === "EdDSA") || (data123 === "RS256")) || (data123 === "PS256")) || (data123 === "ES256")) || (data123 === "ES256K"))){
const err268 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err268];
}
else {
vErrors.push(err268);
}
errors++;
}
var _valid41 = _errs476 === errors;
valid144 = valid144 || _valid41;
}
if(!valid144){
const err269 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported",schemaPath:"#/anyOf/1/properties/requestObjectEncryptionAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err269];
}
else {
vErrors.push(err269);
}
errors++;
}
else {
errors = _errs470;
if(vErrors !== null){
if(_errs470){
vErrors.length = _errs470;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs469 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.requestObjectEncryptionEncValuesSupported !== undefined){
let data125 = data.requestObjectEncryptionEncValuesSupported;
const _errs479 = errors;
const _errs480 = errors;
let valid148 = false;
const _errs481 = errors;
if(errors === _errs481){
if(Array.isArray(data125)){
var valid149 = true;
const len40 = data125.length;
for(let i40=0; i40<len40; i40++){
const _errs483 = errors;
if(typeof data125[i40] !== "string"){
const err270 = {instancePath:instancePath+"/requestObjectEncryptionEncValuesSupported/" + i40,schemaPath:"#/anyOf/1/properties/requestObjectEncryptionEncValuesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err270];
}
else {
vErrors.push(err270);
}
errors++;
}
var valid149 = _errs483 === errors;
if(!valid149){
break;
}
}
}
else {
const err271 = {instancePath:instancePath+"/requestObjectEncryptionEncValuesSupported",schemaPath:"#/anyOf/1/properties/requestObjectEncryptionEncValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err271];
}
else {
vErrors.push(err271);
}
errors++;
}
}
var _valid42 = _errs481 === errors;
valid148 = valid148 || _valid42;
if(!valid148){
const _errs485 = errors;
if(typeof data125 !== "string"){
const err272 = {instancePath:instancePath+"/requestObjectEncryptionEncValuesSupported",schemaPath:"#/anyOf/1/properties/requestObjectEncryptionEncValuesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err272];
}
else {
vErrors.push(err272);
}
errors++;
}
var _valid42 = _errs485 === errors;
valid148 = valid148 || _valid42;
}
if(!valid148){
const err273 = {instancePath:instancePath+"/requestObjectEncryptionEncValuesSupported",schemaPath:"#/anyOf/1/properties/requestObjectEncryptionEncValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err273];
}
else {
vErrors.push(err273);
}
errors++;
}
else {
errors = _errs480;
if(vErrors !== null){
if(_errs480){
vErrors.length = _errs480;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs479 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.tokenEndpointAuthMethodsSupported !== undefined){
let data127 = data.tokenEndpointAuthMethodsSupported;
const _errs487 = errors;
const _errs488 = errors;
let valid150 = false;
const _errs489 = errors;
if(errors === _errs489){
if(Array.isArray(data127)){
var valid151 = true;
const len41 = data127.length;
for(let i41=0; i41<len41; i41++){
let data128 = data127[i41];
const _errs491 = errors;
if(typeof data128 !== "string"){
const err274 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported/" + i41,schemaPath:"#/definitions/TokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err274];
}
else {
vErrors.push(err274);
}
errors++;
}
if(!((((data128 === "client_secret_post") || (data128 === "client_secret_basic")) || (data128 === "client_secret_jwt")) || (data128 === "private_key_jwt"))){
const err275 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported/" + i41,schemaPath:"#/definitions/TokenEndpointAuthMethod/enum",keyword:"enum",params:{allowedValues: schema380.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err275];
}
else {
vErrors.push(err275);
}
errors++;
}
var valid151 = _errs491 === errors;
if(!valid151){
break;
}
}
}
else {
const err276 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported",schemaPath:"#/anyOf/1/properties/tokenEndpointAuthMethodsSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err276];
}
else {
vErrors.push(err276);
}
errors++;
}
}
var _valid43 = _errs489 === errors;
valid150 = valid150 || _valid43;
if(!valid150){
const _errs494 = errors;
if(typeof data127 !== "string"){
const err277 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported",schemaPath:"#/definitions/TokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err277];
}
else {
vErrors.push(err277);
}
errors++;
}
if(!((((data127 === "client_secret_post") || (data127 === "client_secret_basic")) || (data127 === "client_secret_jwt")) || (data127 === "private_key_jwt"))){
const err278 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported",schemaPath:"#/definitions/TokenEndpointAuthMethod/enum",keyword:"enum",params:{allowedValues: schema380.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err278];
}
else {
vErrors.push(err278);
}
errors++;
}
var _valid43 = _errs494 === errors;
valid150 = valid150 || _valid43;
}
if(!valid150){
const err279 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported",schemaPath:"#/anyOf/1/properties/tokenEndpointAuthMethodsSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err279];
}
else {
vErrors.push(err279);
}
errors++;
}
else {
errors = _errs488;
if(vErrors !== null){
if(_errs488){
vErrors.length = _errs488;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs487 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.tokenEndpointAuthSigningAlgValuesSupported !== undefined){
let data129 = data.tokenEndpointAuthSigningAlgValuesSupported;
const _errs497 = errors;
const _errs498 = errors;
let valid154 = false;
const _errs499 = errors;
if(errors === _errs499){
if(Array.isArray(data129)){
var valid155 = true;
const len42 = data129.length;
for(let i42=0; i42<len42; i42++){
let data130 = data129[i42];
const _errs501 = errors;
if(typeof data130 !== "string"){
const err280 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported/" + i42,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err280];
}
else {
vErrors.push(err280);
}
errors++;
}
if(!(((((data130 === "EdDSA") || (data130 === "RS256")) || (data130 === "PS256")) || (data130 === "ES256")) || (data130 === "ES256K"))){
const err281 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported/" + i42,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err281];
}
else {
vErrors.push(err281);
}
errors++;
}
var valid155 = _errs501 === errors;
if(!valid155){
break;
}
}
}
else {
const err282 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported",schemaPath:"#/anyOf/1/properties/tokenEndpointAuthSigningAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err282];
}
else {
vErrors.push(err282);
}
errors++;
}
}
var _valid44 = _errs499 === errors;
valid154 = valid154 || _valid44;
if(!valid154){
const _errs504 = errors;
if(typeof data129 !== "string"){
const err283 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err283];
}
else {
vErrors.push(err283);
}
errors++;
}
if(!(((((data129 === "EdDSA") || (data129 === "RS256")) || (data129 === "PS256")) || (data129 === "ES256")) || (data129 === "ES256K"))){
const err284 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err284];
}
else {
vErrors.push(err284);
}
errors++;
}
var _valid44 = _errs504 === errors;
valid154 = valid154 || _valid44;
}
if(!valid154){
const err285 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported",schemaPath:"#/anyOf/1/properties/tokenEndpointAuthSigningAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err285];
}
else {
vErrors.push(err285);
}
errors++;
}
else {
errors = _errs498;
if(vErrors !== null){
if(_errs498){
vErrors.length = _errs498;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs497 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.displayValuesSupported !== undefined){
let data131 = data.displayValuesSupported;
const _errs507 = errors;
const _errs508 = errors;
let valid158 = false;
const _errs509 = errors;
if(errors === _errs509){
if(Array.isArray(data131)){
var valid159 = true;
const len43 = data131.length;
for(let i43=0; i43<len43; i43++){
const _errs511 = errors;
if(typeof data131[i43] !== "string"){
const err286 = {instancePath:instancePath+"/displayValuesSupported/" + i43,schemaPath:"#/anyOf/1/properties/displayValuesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err286];
}
else {
vErrors.push(err286);
}
errors++;
}
var valid159 = _errs511 === errors;
if(!valid159){
break;
}
}
}
else {
const err287 = {instancePath:instancePath+"/displayValuesSupported",schemaPath:"#/anyOf/1/properties/displayValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err287];
}
else {
vErrors.push(err287);
}
errors++;
}
}
var _valid45 = _errs509 === errors;
valid158 = valid158 || _valid45;
if(!valid158){
const _errs513 = errors;
if(typeof data131 !== "string"){
const err288 = {instancePath:instancePath+"/displayValuesSupported",schemaPath:"#/anyOf/1/properties/displayValuesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err288];
}
else {
vErrors.push(err288);
}
errors++;
}
var _valid45 = _errs513 === errors;
valid158 = valid158 || _valid45;
}
if(!valid158){
const err289 = {instancePath:instancePath+"/displayValuesSupported",schemaPath:"#/anyOf/1/properties/displayValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err289];
}
else {
vErrors.push(err289);
}
errors++;
}
else {
errors = _errs508;
if(vErrors !== null){
if(_errs508){
vErrors.length = _errs508;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs507 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.claimTypesSupported !== undefined){
let data133 = data.claimTypesSupported;
const _errs515 = errors;
const _errs516 = errors;
let valid160 = false;
const _errs517 = errors;
if(errors === _errs517){
if(Array.isArray(data133)){
var valid161 = true;
const len44 = data133.length;
for(let i44=0; i44<len44; i44++){
let data134 = data133[i44];
const _errs519 = errors;
if(typeof data134 !== "string"){
const err290 = {instancePath:instancePath+"/claimTypesSupported/" + i44,schemaPath:"#/definitions/ClaimType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err290];
}
else {
vErrors.push(err290);
}
errors++;
}
if(!(((data134 === "normal") || (data134 === "aggregated")) || (data134 === "distributed"))){
const err291 = {instancePath:instancePath+"/claimTypesSupported/" + i44,schemaPath:"#/definitions/ClaimType/enum",keyword:"enum",params:{allowedValues: schema384.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err291];
}
else {
vErrors.push(err291);
}
errors++;
}
var valid161 = _errs519 === errors;
if(!valid161){
break;
}
}
}
else {
const err292 = {instancePath:instancePath+"/claimTypesSupported",schemaPath:"#/anyOf/1/properties/claimTypesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err292];
}
else {
vErrors.push(err292);
}
errors++;
}
}
var _valid46 = _errs517 === errors;
valid160 = valid160 || _valid46;
if(!valid160){
const _errs522 = errors;
if(typeof data133 !== "string"){
const err293 = {instancePath:instancePath+"/claimTypesSupported",schemaPath:"#/definitions/ClaimType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err293];
}
else {
vErrors.push(err293);
}
errors++;
}
if(!(((data133 === "normal") || (data133 === "aggregated")) || (data133 === "distributed"))){
const err294 = {instancePath:instancePath+"/claimTypesSupported",schemaPath:"#/definitions/ClaimType/enum",keyword:"enum",params:{allowedValues: schema384.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err294];
}
else {
vErrors.push(err294);
}
errors++;
}
var _valid46 = _errs522 === errors;
valid160 = valid160 || _valid46;
}
if(!valid160){
const err295 = {instancePath:instancePath+"/claimTypesSupported",schemaPath:"#/anyOf/1/properties/claimTypesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err295];
}
else {
vErrors.push(err295);
}
errors++;
}
else {
errors = _errs516;
if(vErrors !== null){
if(_errs516){
vErrors.length = _errs516;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs515 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.claimsSupported !== undefined){
let data135 = data.claimsSupported;
const _errs525 = errors;
const _errs526 = errors;
let valid164 = false;
const _errs527 = errors;
if(errors === _errs527){
if(Array.isArray(data135)){
var valid165 = true;
const len45 = data135.length;
for(let i45=0; i45<len45; i45++){
const _errs529 = errors;
if(typeof data135[i45] !== "string"){
const err296 = {instancePath:instancePath+"/claimsSupported/" + i45,schemaPath:"#/anyOf/1/properties/claimsSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err296];
}
else {
vErrors.push(err296);
}
errors++;
}
var valid165 = _errs529 === errors;
if(!valid165){
break;
}
}
}
else {
const err297 = {instancePath:instancePath+"/claimsSupported",schemaPath:"#/anyOf/1/properties/claimsSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err297];
}
else {
vErrors.push(err297);
}
errors++;
}
}
var _valid47 = _errs527 === errors;
valid164 = valid164 || _valid47;
if(!valid164){
const _errs531 = errors;
if(typeof data135 !== "string"){
const err298 = {instancePath:instancePath+"/claimsSupported",schemaPath:"#/anyOf/1/properties/claimsSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err298];
}
else {
vErrors.push(err298);
}
errors++;
}
var _valid47 = _errs531 === errors;
valid164 = valid164 || _valid47;
}
if(!valid164){
const err299 = {instancePath:instancePath+"/claimsSupported",schemaPath:"#/anyOf/1/properties/claimsSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err299];
}
else {
vErrors.push(err299);
}
errors++;
}
else {
errors = _errs526;
if(vErrors !== null){
if(_errs526){
vErrors.length = _errs526;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs525 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.serviceDocumentation !== undefined){
const _errs533 = errors;
if(typeof data.serviceDocumentation !== "string"){
const err300 = {instancePath:instancePath+"/serviceDocumentation",schemaPath:"#/anyOf/1/properties/serviceDocumentation/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err300];
}
else {
vErrors.push(err300);
}
errors++;
}
var valid87 = _errs533 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.claimsLocalesSupported !== undefined){
let data138 = data.claimsLocalesSupported;
const _errs535 = errors;
const _errs536 = errors;
let valid166 = false;
const _errs537 = errors;
if(errors === _errs537){
if(Array.isArray(data138)){
var valid167 = true;
const len46 = data138.length;
for(let i46=0; i46<len46; i46++){
const _errs539 = errors;
if(typeof data138[i46] !== "string"){
const err301 = {instancePath:instancePath+"/claimsLocalesSupported/" + i46,schemaPath:"#/anyOf/1/properties/claimsLocalesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err301];
}
else {
vErrors.push(err301);
}
errors++;
}
var valid167 = _errs539 === errors;
if(!valid167){
break;
}
}
}
else {
const err302 = {instancePath:instancePath+"/claimsLocalesSupported",schemaPath:"#/anyOf/1/properties/claimsLocalesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err302];
}
else {
vErrors.push(err302);
}
errors++;
}
}
var _valid48 = _errs537 === errors;
valid166 = valid166 || _valid48;
if(!valid166){
const _errs541 = errors;
if(typeof data138 !== "string"){
const err303 = {instancePath:instancePath+"/claimsLocalesSupported",schemaPath:"#/anyOf/1/properties/claimsLocalesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err303];
}
else {
vErrors.push(err303);
}
errors++;
}
var _valid48 = _errs541 === errors;
valid166 = valid166 || _valid48;
}
if(!valid166){
const err304 = {instancePath:instancePath+"/claimsLocalesSupported",schemaPath:"#/anyOf/1/properties/claimsLocalesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err304];
}
else {
vErrors.push(err304);
}
errors++;
}
else {
errors = _errs536;
if(vErrors !== null){
if(_errs536){
vErrors.length = _errs536;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs535 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.uiLocalesSupported !== undefined){
let data140 = data.uiLocalesSupported;
const _errs543 = errors;
const _errs544 = errors;
let valid168 = false;
const _errs545 = errors;
if(errors === _errs545){
if(Array.isArray(data140)){
var valid169 = true;
const len47 = data140.length;
for(let i47=0; i47<len47; i47++){
const _errs547 = errors;
if(typeof data140[i47] !== "string"){
const err305 = {instancePath:instancePath+"/uiLocalesSupported/" + i47,schemaPath:"#/anyOf/1/properties/uiLocalesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err305];
}
else {
vErrors.push(err305);
}
errors++;
}
var valid169 = _errs547 === errors;
if(!valid169){
break;
}
}
}
else {
const err306 = {instancePath:instancePath+"/uiLocalesSupported",schemaPath:"#/anyOf/1/properties/uiLocalesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err306];
}
else {
vErrors.push(err306);
}
errors++;
}
}
var _valid49 = _errs545 === errors;
valid168 = valid168 || _valid49;
if(!valid168){
const _errs549 = errors;
if(typeof data140 !== "string"){
const err307 = {instancePath:instancePath+"/uiLocalesSupported",schemaPath:"#/anyOf/1/properties/uiLocalesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err307];
}
else {
vErrors.push(err307);
}
errors++;
}
var _valid49 = _errs549 === errors;
valid168 = valid168 || _valid49;
}
if(!valid168){
const err308 = {instancePath:instancePath+"/uiLocalesSupported",schemaPath:"#/anyOf/1/properties/uiLocalesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err308];
}
else {
vErrors.push(err308);
}
errors++;
}
else {
errors = _errs544;
if(vErrors !== null){
if(_errs544){
vErrors.length = _errs544;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs543 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.claimsParameterSupported !== undefined){
const _errs551 = errors;
if(typeof data.claimsParameterSupported !== "boolean"){
const err309 = {instancePath:instancePath+"/claimsParameterSupported",schemaPath:"#/anyOf/1/properties/claimsParameterSupported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err309];
}
else {
vErrors.push(err309);
}
errors++;
}
var valid87 = _errs551 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.requestParameterSupported !== undefined){
const _errs553 = errors;
if(typeof data.requestParameterSupported !== "boolean"){
const err310 = {instancePath:instancePath+"/requestParameterSupported",schemaPath:"#/anyOf/1/properties/requestParameterSupported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err310];
}
else {
vErrors.push(err310);
}
errors++;
}
var valid87 = _errs553 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.requestUriParameterSupported !== undefined){
const _errs555 = errors;
if(typeof data.requestUriParameterSupported !== "boolean"){
const err311 = {instancePath:instancePath+"/requestUriParameterSupported",schemaPath:"#/anyOf/1/properties/requestUriParameterSupported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err311];
}
else {
vErrors.push(err311);
}
errors++;
}
var valid87 = _errs555 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.requireRequestUriRegistration !== undefined){
const _errs557 = errors;
if(typeof data.requireRequestUriRegistration !== "boolean"){
const err312 = {instancePath:instancePath+"/requireRequestUriRegistration",schemaPath:"#/anyOf/1/properties/requireRequestUriRegistration/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err312];
}
else {
vErrors.push(err312);
}
errors++;
}
var valid87 = _errs557 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.opPolicyUri !== undefined){
const _errs559 = errors;
if(typeof data.opPolicyUri !== "string"){
const err313 = {instancePath:instancePath+"/opPolicyUri",schemaPath:"#/anyOf/1/properties/opPolicyUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err313];
}
else {
vErrors.push(err313);
}
errors++;
}
var valid87 = _errs559 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.opTosUri !== undefined){
const _errs561 = errors;
if(typeof data.opTosUri !== "string"){
const err314 = {instancePath:instancePath+"/opTosUri",schemaPath:"#/anyOf/1/properties/opTosUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err314];
}
else {
vErrors.push(err314);
}
errors++;
}
var valid87 = _errs561 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.client_id !== undefined){
const _errs563 = errors;
if(typeof data.client_id !== "string"){
const err315 = {instancePath:instancePath+"/client_id",schemaPath:"#/anyOf/1/properties/client_id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err315];
}
else {
vErrors.push(err315);
}
errors++;
}
var valid87 = _errs563 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.redirectUris !== undefined){
let data149 = data.redirectUris;
const _errs565 = errors;
const _errs566 = errors;
let valid170 = false;
const _errs567 = errors;
if(errors === _errs567){
if(Array.isArray(data149)){
var valid171 = true;
const len48 = data149.length;
for(let i48=0; i48<len48; i48++){
const _errs569 = errors;
if(typeof data149[i48] !== "string"){
const err316 = {instancePath:instancePath+"/redirectUris/" + i48,schemaPath:"#/anyOf/1/properties/redirectUris/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err316];
}
else {
vErrors.push(err316);
}
errors++;
}
var valid171 = _errs569 === errors;
if(!valid171){
break;
}
}
}
else {
const err317 = {instancePath:instancePath+"/redirectUris",schemaPath:"#/anyOf/1/properties/redirectUris/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err317];
}
else {
vErrors.push(err317);
}
errors++;
}
}
var _valid50 = _errs567 === errors;
valid170 = valid170 || _valid50;
if(!valid170){
const _errs571 = errors;
if(typeof data149 !== "string"){
const err318 = {instancePath:instancePath+"/redirectUris",schemaPath:"#/anyOf/1/properties/redirectUris/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err318];
}
else {
vErrors.push(err318);
}
errors++;
}
var _valid50 = _errs571 === errors;
valid170 = valid170 || _valid50;
}
if(!valid170){
const err319 = {instancePath:instancePath+"/redirectUris",schemaPath:"#/anyOf/1/properties/redirectUris/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err319];
}
else {
vErrors.push(err319);
}
errors++;
}
else {
errors = _errs566;
if(vErrors !== null){
if(_errs566){
vErrors.length = _errs566;
}
else {
vErrors = null;
}
}
}
var valid87 = _errs565 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.clientName !== undefined){
const _errs573 = errors;
if(typeof data.clientName !== "string"){
const err320 = {instancePath:instancePath+"/clientName",schemaPath:"#/anyOf/1/properties/clientName/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err320];
}
else {
vErrors.push(err320);
}
errors++;
}
var valid87 = _errs573 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.clientUri !== undefined){
const _errs575 = errors;
if(typeof data.clientUri !== "string"){
const err321 = {instancePath:instancePath+"/clientUri",schemaPath:"#/anyOf/1/properties/clientUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err321];
}
else {
vErrors.push(err321);
}
errors++;
}
var valid87 = _errs575 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.scope !== undefined){
const _errs577 = errors;
if(typeof data.scope !== "string"){
const err322 = {instancePath:instancePath+"/scope",schemaPath:"#/anyOf/1/properties/scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err322];
}
else {
vErrors.push(err322);
}
errors++;
}
var valid87 = _errs577 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.contacts !== undefined){
let data154 = data.contacts;
const _errs579 = errors;
if(errors === _errs579){
if(Array.isArray(data154)){
var valid172 = true;
const len49 = data154.length;
for(let i49=0; i49<len49; i49++){
const _errs581 = errors;
if(typeof data154[i49] !== "string"){
const err323 = {instancePath:instancePath+"/contacts/" + i49,schemaPath:"#/anyOf/1/properties/contacts/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err323];
}
else {
vErrors.push(err323);
}
errors++;
}
var valid172 = _errs581 === errors;
if(!valid172){
break;
}
}
}
else {
const err324 = {instancePath:instancePath+"/contacts",schemaPath:"#/anyOf/1/properties/contacts/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err324];
}
else {
vErrors.push(err324);
}
errors++;
}
}
var valid87 = _errs579 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.tosUri !== undefined){
const _errs583 = errors;
if(typeof data.tosUri !== "string"){
const err325 = {instancePath:instancePath+"/tosUri",schemaPath:"#/anyOf/1/properties/tosUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err325];
}
else {
vErrors.push(err325);
}
errors++;
}
var valid87 = _errs583 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.policyUri !== undefined){
const _errs585 = errors;
if(typeof data.policyUri !== "string"){
const err326 = {instancePath:instancePath+"/policyUri",schemaPath:"#/anyOf/1/properties/policyUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err326];
}
else {
vErrors.push(err326);
}
errors++;
}
var valid87 = _errs585 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.jwks !== undefined){
const _errs587 = errors;
if(!(validate223(data.jwks, {instancePath:instancePath+"/jwks",parentData:data,parentDataProperty:"jwks",rootData}))){
vErrors = vErrors === null ? validate223.errors : vErrors.concat(validate223.errors);
errors = vErrors.length;
}
var valid87 = _errs587 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.softwareId !== undefined){
const _errs588 = errors;
if(typeof data.softwareId !== "string"){
const err327 = {instancePath:instancePath+"/softwareId",schemaPath:"#/anyOf/1/properties/softwareId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err327];
}
else {
vErrors.push(err327);
}
errors++;
}
var valid87 = _errs588 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.softwareVersion !== undefined){
const _errs590 = errors;
if(typeof data.softwareVersion !== "string"){
const err328 = {instancePath:instancePath+"/softwareVersion",schemaPath:"#/anyOf/1/properties/softwareVersion/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err328];
}
else {
vErrors.push(err328);
}
errors++;
}
var valid87 = _errs590 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.tokenEndpointAuthMethod !== undefined){
const _errs592 = errors;
if(typeof data.tokenEndpointAuthMethod !== "string"){
const err329 = {instancePath:instancePath+"/tokenEndpointAuthMethod",schemaPath:"#/anyOf/1/properties/tokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err329];
}
else {
vErrors.push(err329);
}
errors++;
}
var valid87 = _errs592 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.applicationType !== undefined){
const _errs594 = errors;
if(typeof data.applicationType !== "string"){
const err330 = {instancePath:instancePath+"/applicationType",schemaPath:"#/anyOf/1/properties/applicationType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err330];
}
else {
vErrors.push(err330);
}
errors++;
}
var valid87 = _errs594 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.responseTypes !== undefined){
const _errs596 = errors;
if(typeof data.responseTypes !== "string"){
const err331 = {instancePath:instancePath+"/responseTypes",schemaPath:"#/anyOf/1/properties/responseTypes/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err331];
}
else {
vErrors.push(err331);
}
errors++;
}
var valid87 = _errs596 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.grantTypes !== undefined){
const _errs598 = errors;
if(typeof data.grantTypes !== "string"){
const err332 = {instancePath:instancePath+"/grantTypes",schemaPath:"#/anyOf/1/properties/grantTypes/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err332];
}
else {
vErrors.push(err332);
}
errors++;
}
var valid87 = _errs598 === errors;
}
else {
var valid87 = true;
}
if(valid87){
if(data.vpFormats !== undefined){
const _errs600 = errors;
if(!(validate225(data.vpFormats, {instancePath:instancePath+"/vpFormats",parentData:data,parentDataProperty:"vpFormats",rootData}))){
vErrors = vErrors === null ? validate225.errors : vErrors.concat(validate225.errors);
errors = vErrors.length;
}
var valid87 = _errs600 === errors;
}
else {
var valid87 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
const err333 = {instancePath,schemaPath:"#/anyOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err333];
}
else {
vErrors.push(err333);
}
errors++;
}
}
var _valid0 = _errs303 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs601 = errors;
if(errors === _errs601){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing2;
if((data.passBy === undefined) && (missing2 = "passBy")){
const err334 = {instancePath,schemaPath:"#/anyOf/2/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"};
if(vErrors === null){
vErrors = [err334];
}
else {
vErrors.push(err334);
}
errors++;
}
else {
if(data.passBy !== undefined){
let data166 = data.passBy;
const _errs603 = errors;
if(typeof data166 !== "string"){
const err335 = {instancePath:instancePath+"/passBy",schemaPath:"#/definitions/PassBy/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err335];
}
else {
vErrors.push(err335);
}
errors++;
}
if(!(((data166 === "NONE") || (data166 === "REFERENCE")) || (data166 === "VALUE"))){
const err336 = {instancePath:instancePath+"/passBy",schemaPath:"#/definitions/PassBy/enum",keyword:"enum",params:{allowedValues: schema348.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err336];
}
else {
vErrors.push(err336);
}
errors++;
}
var valid173 = _errs603 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.reference_uri !== undefined){
const _errs606 = errors;
if(typeof data.reference_uri !== "string"){
const err337 = {instancePath:instancePath+"/reference_uri",schemaPath:"#/anyOf/2/properties/reference_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err337];
}
else {
vErrors.push(err337);
}
errors++;
}
var valid173 = _errs606 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.targets !== undefined){
const _errs608 = errors;
if(!(validate221(data.targets, {instancePath:instancePath+"/targets",parentData:data,parentDataProperty:"targets",rootData}))){
vErrors = vErrors === null ? validate221.errors : vErrors.concat(validate221.errors);
errors = vErrors.length;
}
var valid173 = _errs608 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.id_token_encrypted_response_alg !== undefined){
let data169 = data.id_token_encrypted_response_alg;
const _errs609 = errors;
if(typeof data169 !== "string"){
const err338 = {instancePath:instancePath+"/id_token_encrypted_response_alg",schemaPath:"#/definitions/EncKeyAlgorithm/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err338];
}
else {
vErrors.push(err338);
}
errors++;
}
if("ECDH-ES" !== data169){
const err339 = {instancePath:instancePath+"/id_token_encrypted_response_alg",schemaPath:"#/definitions/EncKeyAlgorithm/const",keyword:"const",params:{allowedValue: "ECDH-ES"},message:"must be equal to constant"};
if(vErrors === null){
vErrors = [err339];
}
else {
vErrors.push(err339);
}
errors++;
}
var valid173 = _errs609 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.id_token_encrypted_response_enc !== undefined){
let data170 = data.id_token_encrypted_response_enc;
const _errs612 = errors;
if(typeof data170 !== "string"){
const err340 = {instancePath:instancePath+"/id_token_encrypted_response_enc",schemaPath:"#/definitions/EncSymmetricAlgorithmCode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err340];
}
else {
vErrors.push(err340);
}
errors++;
}
if("XC20P" !== data170){
const err341 = {instancePath:instancePath+"/id_token_encrypted_response_enc",schemaPath:"#/definitions/EncSymmetricAlgorithmCode/const",keyword:"const",params:{allowedValue: "XC20P"},message:"must be equal to constant"};
if(vErrors === null){
vErrors = [err341];
}
else {
vErrors.push(err341);
}
errors++;
}
var valid173 = _errs612 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.authorizationEndpoint !== undefined){
let data171 = data.authorizationEndpoint;
const _errs615 = errors;
const _errs616 = errors;
let valid177 = false;
const _errs617 = errors;
if(typeof data171 !== "string"){
const err342 = {instancePath:instancePath+"/authorizationEndpoint",schemaPath:"#/definitions/Schema/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err342];
}
else {
vErrors.push(err342);
}
errors++;
}
if(!((data171 === "openid:") || (data171 === "openid-vc:"))){
const err343 = {instancePath:instancePath+"/authorizationEndpoint",schemaPath:"#/definitions/Schema/enum",keyword:"enum",params:{allowedValues: schema354.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err343];
}
else {
vErrors.push(err343);
}
errors++;
}
var _valid51 = _errs617 === errors;
valid177 = valid177 || _valid51;
if(!valid177){
const _errs620 = errors;
if(typeof data171 !== "string"){
const err344 = {instancePath:instancePath+"/authorizationEndpoint",schemaPath:"#/anyOf/2/properties/authorizationEndpoint/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err344];
}
else {
vErrors.push(err344);
}
errors++;
}
var _valid51 = _errs620 === errors;
valid177 = valid177 || _valid51;
}
if(!valid177){
const err345 = {instancePath:instancePath+"/authorizationEndpoint",schemaPath:"#/anyOf/2/properties/authorizationEndpoint/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err345];
}
else {
vErrors.push(err345);
}
errors++;
}
else {
errors = _errs616;
if(vErrors !== null){
if(_errs616){
vErrors.length = _errs616;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs615 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.issuer !== undefined){
let data172 = data.issuer;
const _errs622 = errors;
const _errs623 = errors;
let valid179 = false;
const _errs624 = errors;
if(typeof data172 !== "string"){
const err346 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/ResponseIss/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err346];
}
else {
vErrors.push(err346);
}
errors++;
}
if(!(((data172 === "https://self-issued.me") || (data172 === "https://self-issued.me/v2")) || (data172 === "https://self-issued.me/v2/openid-vc"))){
const err347 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/ResponseIss/enum",keyword:"enum",params:{allowedValues: schema355.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err347];
}
else {
vErrors.push(err347);
}
errors++;
}
var _valid52 = _errs624 === errors;
valid179 = valid179 || _valid52;
if(!valid179){
const _errs627 = errors;
if(typeof data172 !== "string"){
const err348 = {instancePath:instancePath+"/issuer",schemaPath:"#/anyOf/2/properties/issuer/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err348];
}
else {
vErrors.push(err348);
}
errors++;
}
var _valid52 = _errs627 === errors;
valid179 = valid179 || _valid52;
}
if(!valid179){
const err349 = {instancePath:instancePath+"/issuer",schemaPath:"#/anyOf/2/properties/issuer/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err349];
}
else {
vErrors.push(err349);
}
errors++;
}
else {
errors = _errs623;
if(vErrors !== null){
if(_errs623){
vErrors.length = _errs623;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs622 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.responseTypesSupported !== undefined){
let data173 = data.responseTypesSupported;
const _errs629 = errors;
const _errs630 = errors;
let valid181 = false;
const _errs631 = errors;
if(errors === _errs631){
if(Array.isArray(data173)){
var valid182 = true;
const len50 = data173.length;
for(let i50=0; i50<len50; i50++){
let data174 = data173[i50];
const _errs633 = errors;
if(typeof data174 !== "string"){
const err350 = {instancePath:instancePath+"/responseTypesSupported/" + i50,schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err350];
}
else {
vErrors.push(err350);
}
errors++;
}
if(!((data174 === "id_token") || (data174 === "vp_token"))){
const err351 = {instancePath:instancePath+"/responseTypesSupported/" + i50,schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema356.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err351];
}
else {
vErrors.push(err351);
}
errors++;
}
var valid182 = _errs633 === errors;
if(!valid182){
break;
}
}
}
else {
const err352 = {instancePath:instancePath+"/responseTypesSupported",schemaPath:"#/anyOf/2/properties/responseTypesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err352];
}
else {
vErrors.push(err352);
}
errors++;
}
}
var _valid53 = _errs631 === errors;
valid181 = valid181 || _valid53;
if(!valid181){
const _errs636 = errors;
if(typeof data173 !== "string"){
const err353 = {instancePath:instancePath+"/responseTypesSupported",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err353];
}
else {
vErrors.push(err353);
}
errors++;
}
if(!((data173 === "id_token") || (data173 === "vp_token"))){
const err354 = {instancePath:instancePath+"/responseTypesSupported",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema356.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err354];
}
else {
vErrors.push(err354);
}
errors++;
}
var _valid53 = _errs636 === errors;
valid181 = valid181 || _valid53;
}
if(!valid181){
const err355 = {instancePath:instancePath+"/responseTypesSupported",schemaPath:"#/anyOf/2/properties/responseTypesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err355];
}
else {
vErrors.push(err355);
}
errors++;
}
else {
errors = _errs630;
if(vErrors !== null){
if(_errs630){
vErrors.length = _errs630;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs629 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.scopesSupported !== undefined){
let data175 = data.scopesSupported;
const _errs639 = errors;
const _errs640 = errors;
let valid185 = false;
const _errs641 = errors;
if(errors === _errs641){
if(Array.isArray(data175)){
var valid186 = true;
const len51 = data175.length;
for(let i51=0; i51<len51; i51++){
let data176 = data175[i51];
const _errs643 = errors;
if(typeof data176 !== "string"){
const err356 = {instancePath:instancePath+"/scopesSupported/" + i51,schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err356];
}
else {
vErrors.push(err356);
}
errors++;
}
if(!((((((data176 === "openid") || (data176 === "openid did_authn")) || (data176 === "profile")) || (data176 === "email")) || (data176 === "address")) || (data176 === "phone"))){
const err357 = {instancePath:instancePath+"/scopesSupported/" + i51,schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema358.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err357];
}
else {
vErrors.push(err357);
}
errors++;
}
var valid186 = _errs643 === errors;
if(!valid186){
break;
}
}
}
else {
const err358 = {instancePath:instancePath+"/scopesSupported",schemaPath:"#/anyOf/2/properties/scopesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err358];
}
else {
vErrors.push(err358);
}
errors++;
}
}
var _valid54 = _errs641 === errors;
valid185 = valid185 || _valid54;
if(!valid185){
const _errs646 = errors;
if(typeof data175 !== "string"){
const err359 = {instancePath:instancePath+"/scopesSupported",schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err359];
}
else {
vErrors.push(err359);
}
errors++;
}
if(!((((((data175 === "openid") || (data175 === "openid did_authn")) || (data175 === "profile")) || (data175 === "email")) || (data175 === "address")) || (data175 === "phone"))){
const err360 = {instancePath:instancePath+"/scopesSupported",schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema358.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err360];
}
else {
vErrors.push(err360);
}
errors++;
}
var _valid54 = _errs646 === errors;
valid185 = valid185 || _valid54;
}
if(!valid185){
const err361 = {instancePath:instancePath+"/scopesSupported",schemaPath:"#/anyOf/2/properties/scopesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err361];
}
else {
vErrors.push(err361);
}
errors++;
}
else {
errors = _errs640;
if(vErrors !== null){
if(_errs640){
vErrors.length = _errs640;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs639 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.subjectTypesSupported !== undefined){
let data177 = data.subjectTypesSupported;
const _errs649 = errors;
const _errs650 = errors;
let valid189 = false;
const _errs651 = errors;
if(errors === _errs651){
if(Array.isArray(data177)){
var valid190 = true;
const len52 = data177.length;
for(let i52=0; i52<len52; i52++){
let data178 = data177[i52];
const _errs653 = errors;
if(typeof data178 !== "string"){
const err362 = {instancePath:instancePath+"/subjectTypesSupported/" + i52,schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err362];
}
else {
vErrors.push(err362);
}
errors++;
}
if(!((data178 === "public") || (data178 === "pairwise"))){
const err363 = {instancePath:instancePath+"/subjectTypesSupported/" + i52,schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema360.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err363];
}
else {
vErrors.push(err363);
}
errors++;
}
var valid190 = _errs653 === errors;
if(!valid190){
break;
}
}
}
else {
const err364 = {instancePath:instancePath+"/subjectTypesSupported",schemaPath:"#/anyOf/2/properties/subjectTypesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err364];
}
else {
vErrors.push(err364);
}
errors++;
}
}
var _valid55 = _errs651 === errors;
valid189 = valid189 || _valid55;
if(!valid189){
const _errs656 = errors;
if(typeof data177 !== "string"){
const err365 = {instancePath:instancePath+"/subjectTypesSupported",schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err365];
}
else {
vErrors.push(err365);
}
errors++;
}
if(!((data177 === "public") || (data177 === "pairwise"))){
const err366 = {instancePath:instancePath+"/subjectTypesSupported",schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema360.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err366];
}
else {
vErrors.push(err366);
}
errors++;
}
var _valid55 = _errs656 === errors;
valid189 = valid189 || _valid55;
}
if(!valid189){
const err367 = {instancePath:instancePath+"/subjectTypesSupported",schemaPath:"#/anyOf/2/properties/subjectTypesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err367];
}
else {
vErrors.push(err367);
}
errors++;
}
else {
errors = _errs650;
if(vErrors !== null){
if(_errs650){
vErrors.length = _errs650;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs649 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.idTokenSigningAlgValuesSupported !== undefined){
let data179 = data.idTokenSigningAlgValuesSupported;
const _errs659 = errors;
const _errs660 = errors;
let valid193 = false;
const _errs661 = errors;
if(errors === _errs661){
if(Array.isArray(data179)){
var valid194 = true;
const len53 = data179.length;
for(let i53=0; i53<len53; i53++){
let data180 = data179[i53];
const _errs663 = errors;
if(typeof data180 !== "string"){
const err368 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported/" + i53,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err368];
}
else {
vErrors.push(err368);
}
errors++;
}
if(!(((((data180 === "EdDSA") || (data180 === "RS256")) || (data180 === "PS256")) || (data180 === "ES256")) || (data180 === "ES256K"))){
const err369 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported/" + i53,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err369];
}
else {
vErrors.push(err369);
}
errors++;
}
var valid194 = _errs663 === errors;
if(!valid194){
break;
}
}
}
else {
const err370 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported",schemaPath:"#/anyOf/2/properties/idTokenSigningAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err370];
}
else {
vErrors.push(err370);
}
errors++;
}
}
var _valid56 = _errs661 === errors;
valid193 = valid193 || _valid56;
if(!valid193){
const _errs666 = errors;
if(typeof data179 !== "string"){
const err371 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err371];
}
else {
vErrors.push(err371);
}
errors++;
}
if(!(((((data179 === "EdDSA") || (data179 === "RS256")) || (data179 === "PS256")) || (data179 === "ES256")) || (data179 === "ES256K"))){
const err372 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err372];
}
else {
vErrors.push(err372);
}
errors++;
}
var _valid56 = _errs666 === errors;
valid193 = valid193 || _valid56;
}
if(!valid193){
const err373 = {instancePath:instancePath+"/idTokenSigningAlgValuesSupported",schemaPath:"#/anyOf/2/properties/idTokenSigningAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err373];
}
else {
vErrors.push(err373);
}
errors++;
}
else {
errors = _errs660;
if(vErrors !== null){
if(_errs660){
vErrors.length = _errs660;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs659 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.requestObjectSigningAlgValuesSupported !== undefined){
let data181 = data.requestObjectSigningAlgValuesSupported;
const _errs669 = errors;
const _errs670 = errors;
let valid197 = false;
const _errs671 = errors;
if(errors === _errs671){
if(Array.isArray(data181)){
var valid198 = true;
const len54 = data181.length;
for(let i54=0; i54<len54; i54++){
let data182 = data181[i54];
const _errs673 = errors;
if(typeof data182 !== "string"){
const err374 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported/" + i54,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err374];
}
else {
vErrors.push(err374);
}
errors++;
}
if(!(((((data182 === "EdDSA") || (data182 === "RS256")) || (data182 === "PS256")) || (data182 === "ES256")) || (data182 === "ES256K"))){
const err375 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported/" + i54,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err375];
}
else {
vErrors.push(err375);
}
errors++;
}
var valid198 = _errs673 === errors;
if(!valid198){
break;
}
}
}
else {
const err376 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported",schemaPath:"#/anyOf/2/properties/requestObjectSigningAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err376];
}
else {
vErrors.push(err376);
}
errors++;
}
}
var _valid57 = _errs671 === errors;
valid197 = valid197 || _valid57;
if(!valid197){
const _errs676 = errors;
if(typeof data181 !== "string"){
const err377 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err377];
}
else {
vErrors.push(err377);
}
errors++;
}
if(!(((((data181 === "EdDSA") || (data181 === "RS256")) || (data181 === "PS256")) || (data181 === "ES256")) || (data181 === "ES256K"))){
const err378 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err378];
}
else {
vErrors.push(err378);
}
errors++;
}
var _valid57 = _errs676 === errors;
valid197 = valid197 || _valid57;
}
if(!valid197){
const err379 = {instancePath:instancePath+"/requestObjectSigningAlgValuesSupported",schemaPath:"#/anyOf/2/properties/requestObjectSigningAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err379];
}
else {
vErrors.push(err379);
}
errors++;
}
else {
errors = _errs670;
if(vErrors !== null){
if(_errs670){
vErrors.length = _errs670;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs669 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.subject_syntax_types_supported !== undefined){
let data183 = data.subject_syntax_types_supported;
const _errs679 = errors;
if(errors === _errs679){
if(Array.isArray(data183)){
var valid201 = true;
const len55 = data183.length;
for(let i55=0; i55<len55; i55++){
const _errs681 = errors;
if(typeof data183[i55] !== "string"){
const err380 = {instancePath:instancePath+"/subject_syntax_types_supported/" + i55,schemaPath:"#/anyOf/2/properties/subject_syntax_types_supported/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err380];
}
else {
vErrors.push(err380);
}
errors++;
}
var valid201 = _errs681 === errors;
if(!valid201){
break;
}
}
}
else {
const err381 = {instancePath:instancePath+"/subject_syntax_types_supported",schemaPath:"#/anyOf/2/properties/subject_syntax_types_supported/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err381];
}
else {
vErrors.push(err381);
}
errors++;
}
}
var valid173 = _errs679 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.tokenEndpoint !== undefined){
const _errs683 = errors;
if(typeof data.tokenEndpoint !== "string"){
const err382 = {instancePath:instancePath+"/tokenEndpoint",schemaPath:"#/anyOf/2/properties/tokenEndpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err382];
}
else {
vErrors.push(err382);
}
errors++;
}
var valid173 = _errs683 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.userinfoEndpoint !== undefined){
const _errs685 = errors;
if(typeof data.userinfoEndpoint !== "string"){
const err383 = {instancePath:instancePath+"/userinfoEndpoint",schemaPath:"#/anyOf/2/properties/userinfoEndpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err383];
}
else {
vErrors.push(err383);
}
errors++;
}
var valid173 = _errs685 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.jwksUri !== undefined){
const _errs687 = errors;
if(typeof data.jwksUri !== "string"){
const err384 = {instancePath:instancePath+"/jwksUri",schemaPath:"#/anyOf/2/properties/jwksUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err384];
}
else {
vErrors.push(err384);
}
errors++;
}
var valid173 = _errs687 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.registrationEndpoint !== undefined){
const _errs689 = errors;
if(typeof data.registrationEndpoint !== "string"){
const err385 = {instancePath:instancePath+"/registrationEndpoint",schemaPath:"#/anyOf/2/properties/registrationEndpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err385];
}
else {
vErrors.push(err385);
}
errors++;
}
var valid173 = _errs689 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.responseModesSupported !== undefined){
let data189 = data.responseModesSupported;
const _errs691 = errors;
const _errs692 = errors;
let valid202 = false;
const _errs693 = errors;
if(errors === _errs693){
if(Array.isArray(data189)){
var valid203 = true;
const len56 = data189.length;
for(let i56=0; i56<len56; i56++){
let data190 = data189[i56];
const _errs695 = errors;
if(typeof data190 !== "string"){
const err386 = {instancePath:instancePath+"/responseModesSupported/" + i56,schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err386];
}
else {
vErrors.push(err386);
}
errors++;
}
if(!((((((((data190 === "fragment") || (data190 === "form_post")) || (data190 === "post")) || (data190 === "direct_post")) || (data190 === "query")) || (data190 === "direct_post.jwt")) || (data190 === "query.jwt")) || (data190 === "fragment.jwt"))){
const err387 = {instancePath:instancePath+"/responseModesSupported/" + i56,schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema366.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err387];
}
else {
vErrors.push(err387);
}
errors++;
}
var valid203 = _errs695 === errors;
if(!valid203){
break;
}
}
}
else {
const err388 = {instancePath:instancePath+"/responseModesSupported",schemaPath:"#/anyOf/2/properties/responseModesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err388];
}
else {
vErrors.push(err388);
}
errors++;
}
}
var _valid58 = _errs693 === errors;
valid202 = valid202 || _valid58;
if(!valid202){
const _errs698 = errors;
if(typeof data189 !== "string"){
const err389 = {instancePath:instancePath+"/responseModesSupported",schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err389];
}
else {
vErrors.push(err389);
}
errors++;
}
if(!((((((((data189 === "fragment") || (data189 === "form_post")) || (data189 === "post")) || (data189 === "direct_post")) || (data189 === "query")) || (data189 === "direct_post.jwt")) || (data189 === "query.jwt")) || (data189 === "fragment.jwt"))){
const err390 = {instancePath:instancePath+"/responseModesSupported",schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema366.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err390];
}
else {
vErrors.push(err390);
}
errors++;
}
var _valid58 = _errs698 === errors;
valid202 = valid202 || _valid58;
}
if(!valid202){
const err391 = {instancePath:instancePath+"/responseModesSupported",schemaPath:"#/anyOf/2/properties/responseModesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err391];
}
else {
vErrors.push(err391);
}
errors++;
}
else {
errors = _errs692;
if(vErrors !== null){
if(_errs692){
vErrors.length = _errs692;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs691 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.grantTypesSupported !== undefined){
let data191 = data.grantTypesSupported;
const _errs701 = errors;
const _errs702 = errors;
let valid206 = false;
const _errs703 = errors;
if(errors === _errs703){
if(Array.isArray(data191)){
var valid207 = true;
const len57 = data191.length;
for(let i57=0; i57<len57; i57++){
let data192 = data191[i57];
const _errs705 = errors;
if(typeof data192 !== "string"){
const err392 = {instancePath:instancePath+"/grantTypesSupported/" + i57,schemaPath:"#/definitions/GrantType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err392];
}
else {
vErrors.push(err392);
}
errors++;
}
if(!((data192 === "authorization_code") || (data192 === "implicit"))){
const err393 = {instancePath:instancePath+"/grantTypesSupported/" + i57,schemaPath:"#/definitions/GrantType/enum",keyword:"enum",params:{allowedValues: schema368.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err393];
}
else {
vErrors.push(err393);
}
errors++;
}
var valid207 = _errs705 === errors;
if(!valid207){
break;
}
}
}
else {
const err394 = {instancePath:instancePath+"/grantTypesSupported",schemaPath:"#/anyOf/2/properties/grantTypesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err394];
}
else {
vErrors.push(err394);
}
errors++;
}
}
var _valid59 = _errs703 === errors;
valid206 = valid206 || _valid59;
if(!valid206){
const _errs708 = errors;
if(typeof data191 !== "string"){
const err395 = {instancePath:instancePath+"/grantTypesSupported",schemaPath:"#/definitions/GrantType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err395];
}
else {
vErrors.push(err395);
}
errors++;
}
if(!((data191 === "authorization_code") || (data191 === "implicit"))){
const err396 = {instancePath:instancePath+"/grantTypesSupported",schemaPath:"#/definitions/GrantType/enum",keyword:"enum",params:{allowedValues: schema368.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err396];
}
else {
vErrors.push(err396);
}
errors++;
}
var _valid59 = _errs708 === errors;
valid206 = valid206 || _valid59;
}
if(!valid206){
const err397 = {instancePath:instancePath+"/grantTypesSupported",schemaPath:"#/anyOf/2/properties/grantTypesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err397];
}
else {
vErrors.push(err397);
}
errors++;
}
else {
errors = _errs702;
if(vErrors !== null){
if(_errs702){
vErrors.length = _errs702;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs701 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.acrValuesSupported !== undefined){
let data193 = data.acrValuesSupported;
const _errs711 = errors;
const _errs712 = errors;
let valid210 = false;
const _errs713 = errors;
if(errors === _errs713){
if(Array.isArray(data193)){
var valid211 = true;
const len58 = data193.length;
for(let i58=0; i58<len58; i58++){
let data194 = data193[i58];
const _errs715 = errors;
if(typeof data194 !== "string"){
const err398 = {instancePath:instancePath+"/acrValuesSupported/" + i58,schemaPath:"#/definitions/AuthenticationContextReferences/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err398];
}
else {
vErrors.push(err398);
}
errors++;
}
if(!((data194 === "phr") || (data194 === "phrh"))){
const err399 = {instancePath:instancePath+"/acrValuesSupported/" + i58,schemaPath:"#/definitions/AuthenticationContextReferences/enum",keyword:"enum",params:{allowedValues: schema370.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err399];
}
else {
vErrors.push(err399);
}
errors++;
}
var valid211 = _errs715 === errors;
if(!valid211){
break;
}
}
}
else {
const err400 = {instancePath:instancePath+"/acrValuesSupported",schemaPath:"#/anyOf/2/properties/acrValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err400];
}
else {
vErrors.push(err400);
}
errors++;
}
}
var _valid60 = _errs713 === errors;
valid210 = valid210 || _valid60;
if(!valid210){
const _errs718 = errors;
if(typeof data193 !== "string"){
const err401 = {instancePath:instancePath+"/acrValuesSupported",schemaPath:"#/definitions/AuthenticationContextReferences/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err401];
}
else {
vErrors.push(err401);
}
errors++;
}
if(!((data193 === "phr") || (data193 === "phrh"))){
const err402 = {instancePath:instancePath+"/acrValuesSupported",schemaPath:"#/definitions/AuthenticationContextReferences/enum",keyword:"enum",params:{allowedValues: schema370.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err402];
}
else {
vErrors.push(err402);
}
errors++;
}
var _valid60 = _errs718 === errors;
valid210 = valid210 || _valid60;
}
if(!valid210){
const err403 = {instancePath:instancePath+"/acrValuesSupported",schemaPath:"#/anyOf/2/properties/acrValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err403];
}
else {
vErrors.push(err403);
}
errors++;
}
else {
errors = _errs712;
if(vErrors !== null){
if(_errs712){
vErrors.length = _errs712;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs711 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.idTokenEncryptionAlgValuesSupported !== undefined){
let data195 = data.idTokenEncryptionAlgValuesSupported;
const _errs721 = errors;
const _errs722 = errors;
let valid214 = false;
const _errs723 = errors;
if(errors === _errs723){
if(Array.isArray(data195)){
var valid215 = true;
const len59 = data195.length;
for(let i59=0; i59<len59; i59++){
let data196 = data195[i59];
const _errs725 = errors;
if(typeof data196 !== "string"){
const err404 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported/" + i59,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err404];
}
else {
vErrors.push(err404);
}
errors++;
}
if(!(((((data196 === "EdDSA") || (data196 === "RS256")) || (data196 === "PS256")) || (data196 === "ES256")) || (data196 === "ES256K"))){
const err405 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported/" + i59,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err405];
}
else {
vErrors.push(err405);
}
errors++;
}
var valid215 = _errs725 === errors;
if(!valid215){
break;
}
}
}
else {
const err406 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported",schemaPath:"#/anyOf/2/properties/idTokenEncryptionAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err406];
}
else {
vErrors.push(err406);
}
errors++;
}
}
var _valid61 = _errs723 === errors;
valid214 = valid214 || _valid61;
if(!valid214){
const _errs728 = errors;
if(typeof data195 !== "string"){
const err407 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err407];
}
else {
vErrors.push(err407);
}
errors++;
}
if(!(((((data195 === "EdDSA") || (data195 === "RS256")) || (data195 === "PS256")) || (data195 === "ES256")) || (data195 === "ES256K"))){
const err408 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err408];
}
else {
vErrors.push(err408);
}
errors++;
}
var _valid61 = _errs728 === errors;
valid214 = valid214 || _valid61;
}
if(!valid214){
const err409 = {instancePath:instancePath+"/idTokenEncryptionAlgValuesSupported",schemaPath:"#/anyOf/2/properties/idTokenEncryptionAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err409];
}
else {
vErrors.push(err409);
}
errors++;
}
else {
errors = _errs722;
if(vErrors !== null){
if(_errs722){
vErrors.length = _errs722;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs721 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.idTokenEncryptionEncValuesSupported !== undefined){
let data197 = data.idTokenEncryptionEncValuesSupported;
const _errs731 = errors;
const _errs732 = errors;
let valid218 = false;
const _errs733 = errors;
if(errors === _errs733){
if(Array.isArray(data197)){
var valid219 = true;
const len60 = data197.length;
for(let i60=0; i60<len60; i60++){
const _errs735 = errors;
if(typeof data197[i60] !== "string"){
const err410 = {instancePath:instancePath+"/idTokenEncryptionEncValuesSupported/" + i60,schemaPath:"#/anyOf/2/properties/idTokenEncryptionEncValuesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err410];
}
else {
vErrors.push(err410);
}
errors++;
}
var valid219 = _errs735 === errors;
if(!valid219){
break;
}
}
}
else {
const err411 = {instancePath:instancePath+"/idTokenEncryptionEncValuesSupported",schemaPath:"#/anyOf/2/properties/idTokenEncryptionEncValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err411];
}
else {
vErrors.push(err411);
}
errors++;
}
}
var _valid62 = _errs733 === errors;
valid218 = valid218 || _valid62;
if(!valid218){
const _errs737 = errors;
if(typeof data197 !== "string"){
const err412 = {instancePath:instancePath+"/idTokenEncryptionEncValuesSupported",schemaPath:"#/anyOf/2/properties/idTokenEncryptionEncValuesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err412];
}
else {
vErrors.push(err412);
}
errors++;
}
var _valid62 = _errs737 === errors;
valid218 = valid218 || _valid62;
}
if(!valid218){
const err413 = {instancePath:instancePath+"/idTokenEncryptionEncValuesSupported",schemaPath:"#/anyOf/2/properties/idTokenEncryptionEncValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err413];
}
else {
vErrors.push(err413);
}
errors++;
}
else {
errors = _errs732;
if(vErrors !== null){
if(_errs732){
vErrors.length = _errs732;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs731 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.userinfoSigningAlgValuesSupported !== undefined){
let data199 = data.userinfoSigningAlgValuesSupported;
const _errs739 = errors;
const _errs740 = errors;
let valid220 = false;
const _errs741 = errors;
if(errors === _errs741){
if(Array.isArray(data199)){
var valid221 = true;
const len61 = data199.length;
for(let i61=0; i61<len61; i61++){
let data200 = data199[i61];
const _errs743 = errors;
if(typeof data200 !== "string"){
const err414 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported/" + i61,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err414];
}
else {
vErrors.push(err414);
}
errors++;
}
if(!(((((data200 === "EdDSA") || (data200 === "RS256")) || (data200 === "PS256")) || (data200 === "ES256")) || (data200 === "ES256K"))){
const err415 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported/" + i61,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err415];
}
else {
vErrors.push(err415);
}
errors++;
}
var valid221 = _errs743 === errors;
if(!valid221){
break;
}
}
}
else {
const err416 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported",schemaPath:"#/anyOf/2/properties/userinfoSigningAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err416];
}
else {
vErrors.push(err416);
}
errors++;
}
}
var _valid63 = _errs741 === errors;
valid220 = valid220 || _valid63;
if(!valid220){
const _errs746 = errors;
if(typeof data199 !== "string"){
const err417 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err417];
}
else {
vErrors.push(err417);
}
errors++;
}
if(!(((((data199 === "EdDSA") || (data199 === "RS256")) || (data199 === "PS256")) || (data199 === "ES256")) || (data199 === "ES256K"))){
const err418 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err418];
}
else {
vErrors.push(err418);
}
errors++;
}
var _valid63 = _errs746 === errors;
valid220 = valid220 || _valid63;
}
if(!valid220){
const err419 = {instancePath:instancePath+"/userinfoSigningAlgValuesSupported",schemaPath:"#/anyOf/2/properties/userinfoSigningAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err419];
}
else {
vErrors.push(err419);
}
errors++;
}
else {
errors = _errs740;
if(vErrors !== null){
if(_errs740){
vErrors.length = _errs740;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs739 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.userinfoEncryptionAlgValuesSupported !== undefined){
let data201 = data.userinfoEncryptionAlgValuesSupported;
const _errs749 = errors;
const _errs750 = errors;
let valid224 = false;
const _errs751 = errors;
if(errors === _errs751){
if(Array.isArray(data201)){
var valid225 = true;
const len62 = data201.length;
for(let i62=0; i62<len62; i62++){
let data202 = data201[i62];
const _errs753 = errors;
if(typeof data202 !== "string"){
const err420 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported/" + i62,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err420];
}
else {
vErrors.push(err420);
}
errors++;
}
if(!(((((data202 === "EdDSA") || (data202 === "RS256")) || (data202 === "PS256")) || (data202 === "ES256")) || (data202 === "ES256K"))){
const err421 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported/" + i62,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err421];
}
else {
vErrors.push(err421);
}
errors++;
}
var valid225 = _errs753 === errors;
if(!valid225){
break;
}
}
}
else {
const err422 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported",schemaPath:"#/anyOf/2/properties/userinfoEncryptionAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err422];
}
else {
vErrors.push(err422);
}
errors++;
}
}
var _valid64 = _errs751 === errors;
valid224 = valid224 || _valid64;
if(!valid224){
const _errs756 = errors;
if(typeof data201 !== "string"){
const err423 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err423];
}
else {
vErrors.push(err423);
}
errors++;
}
if(!(((((data201 === "EdDSA") || (data201 === "RS256")) || (data201 === "PS256")) || (data201 === "ES256")) || (data201 === "ES256K"))){
const err424 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err424];
}
else {
vErrors.push(err424);
}
errors++;
}
var _valid64 = _errs756 === errors;
valid224 = valid224 || _valid64;
}
if(!valid224){
const err425 = {instancePath:instancePath+"/userinfoEncryptionAlgValuesSupported",schemaPath:"#/anyOf/2/properties/userinfoEncryptionAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err425];
}
else {
vErrors.push(err425);
}
errors++;
}
else {
errors = _errs750;
if(vErrors !== null){
if(_errs750){
vErrors.length = _errs750;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs749 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.userinfoEncryptionEncValuesSupported !== undefined){
let data203 = data.userinfoEncryptionEncValuesSupported;
const _errs759 = errors;
const _errs760 = errors;
let valid228 = false;
const _errs761 = errors;
if(errors === _errs761){
if(Array.isArray(data203)){
var valid229 = true;
const len63 = data203.length;
for(let i63=0; i63<len63; i63++){
const _errs763 = errors;
if(typeof data203[i63] !== "string"){
const err426 = {instancePath:instancePath+"/userinfoEncryptionEncValuesSupported/" + i63,schemaPath:"#/anyOf/2/properties/userinfoEncryptionEncValuesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err426];
}
else {
vErrors.push(err426);
}
errors++;
}
var valid229 = _errs763 === errors;
if(!valid229){
break;
}
}
}
else {
const err427 = {instancePath:instancePath+"/userinfoEncryptionEncValuesSupported",schemaPath:"#/anyOf/2/properties/userinfoEncryptionEncValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err427];
}
else {
vErrors.push(err427);
}
errors++;
}
}
var _valid65 = _errs761 === errors;
valid228 = valid228 || _valid65;
if(!valid228){
const _errs765 = errors;
if(typeof data203 !== "string"){
const err428 = {instancePath:instancePath+"/userinfoEncryptionEncValuesSupported",schemaPath:"#/anyOf/2/properties/userinfoEncryptionEncValuesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err428];
}
else {
vErrors.push(err428);
}
errors++;
}
var _valid65 = _errs765 === errors;
valid228 = valid228 || _valid65;
}
if(!valid228){
const err429 = {instancePath:instancePath+"/userinfoEncryptionEncValuesSupported",schemaPath:"#/anyOf/2/properties/userinfoEncryptionEncValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err429];
}
else {
vErrors.push(err429);
}
errors++;
}
else {
errors = _errs760;
if(vErrors !== null){
if(_errs760){
vErrors.length = _errs760;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs759 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.requestObjectEncryptionAlgValuesSupported !== undefined){
let data205 = data.requestObjectEncryptionAlgValuesSupported;
const _errs767 = errors;
const _errs768 = errors;
let valid230 = false;
const _errs769 = errors;
if(errors === _errs769){
if(Array.isArray(data205)){
var valid231 = true;
const len64 = data205.length;
for(let i64=0; i64<len64; i64++){
let data206 = data205[i64];
const _errs771 = errors;
if(typeof data206 !== "string"){
const err430 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported/" + i64,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err430];
}
else {
vErrors.push(err430);
}
errors++;
}
if(!(((((data206 === "EdDSA") || (data206 === "RS256")) || (data206 === "PS256")) || (data206 === "ES256")) || (data206 === "ES256K"))){
const err431 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported/" + i64,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err431];
}
else {
vErrors.push(err431);
}
errors++;
}
var valid231 = _errs771 === errors;
if(!valid231){
break;
}
}
}
else {
const err432 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported",schemaPath:"#/anyOf/2/properties/requestObjectEncryptionAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err432];
}
else {
vErrors.push(err432);
}
errors++;
}
}
var _valid66 = _errs769 === errors;
valid230 = valid230 || _valid66;
if(!valid230){
const _errs774 = errors;
if(typeof data205 !== "string"){
const err433 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err433];
}
else {
vErrors.push(err433);
}
errors++;
}
if(!(((((data205 === "EdDSA") || (data205 === "RS256")) || (data205 === "PS256")) || (data205 === "ES256")) || (data205 === "ES256K"))){
const err434 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err434];
}
else {
vErrors.push(err434);
}
errors++;
}
var _valid66 = _errs774 === errors;
valid230 = valid230 || _valid66;
}
if(!valid230){
const err435 = {instancePath:instancePath+"/requestObjectEncryptionAlgValuesSupported",schemaPath:"#/anyOf/2/properties/requestObjectEncryptionAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err435];
}
else {
vErrors.push(err435);
}
errors++;
}
else {
errors = _errs768;
if(vErrors !== null){
if(_errs768){
vErrors.length = _errs768;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs767 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.requestObjectEncryptionEncValuesSupported !== undefined){
let data207 = data.requestObjectEncryptionEncValuesSupported;
const _errs777 = errors;
const _errs778 = errors;
let valid234 = false;
const _errs779 = errors;
if(errors === _errs779){
if(Array.isArray(data207)){
var valid235 = true;
const len65 = data207.length;
for(let i65=0; i65<len65; i65++){
const _errs781 = errors;
if(typeof data207[i65] !== "string"){
const err436 = {instancePath:instancePath+"/requestObjectEncryptionEncValuesSupported/" + i65,schemaPath:"#/anyOf/2/properties/requestObjectEncryptionEncValuesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err436];
}
else {
vErrors.push(err436);
}
errors++;
}
var valid235 = _errs781 === errors;
if(!valid235){
break;
}
}
}
else {
const err437 = {instancePath:instancePath+"/requestObjectEncryptionEncValuesSupported",schemaPath:"#/anyOf/2/properties/requestObjectEncryptionEncValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err437];
}
else {
vErrors.push(err437);
}
errors++;
}
}
var _valid67 = _errs779 === errors;
valid234 = valid234 || _valid67;
if(!valid234){
const _errs783 = errors;
if(typeof data207 !== "string"){
const err438 = {instancePath:instancePath+"/requestObjectEncryptionEncValuesSupported",schemaPath:"#/anyOf/2/properties/requestObjectEncryptionEncValuesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err438];
}
else {
vErrors.push(err438);
}
errors++;
}
var _valid67 = _errs783 === errors;
valid234 = valid234 || _valid67;
}
if(!valid234){
const err439 = {instancePath:instancePath+"/requestObjectEncryptionEncValuesSupported",schemaPath:"#/anyOf/2/properties/requestObjectEncryptionEncValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err439];
}
else {
vErrors.push(err439);
}
errors++;
}
else {
errors = _errs778;
if(vErrors !== null){
if(_errs778){
vErrors.length = _errs778;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs777 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.tokenEndpointAuthMethodsSupported !== undefined){
let data209 = data.tokenEndpointAuthMethodsSupported;
const _errs785 = errors;
const _errs786 = errors;
let valid236 = false;
const _errs787 = errors;
if(errors === _errs787){
if(Array.isArray(data209)){
var valid237 = true;
const len66 = data209.length;
for(let i66=0; i66<len66; i66++){
let data210 = data209[i66];
const _errs789 = errors;
if(typeof data210 !== "string"){
const err440 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported/" + i66,schemaPath:"#/definitions/TokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err440];
}
else {
vErrors.push(err440);
}
errors++;
}
if(!((((data210 === "client_secret_post") || (data210 === "client_secret_basic")) || (data210 === "client_secret_jwt")) || (data210 === "private_key_jwt"))){
const err441 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported/" + i66,schemaPath:"#/definitions/TokenEndpointAuthMethod/enum",keyword:"enum",params:{allowedValues: schema380.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err441];
}
else {
vErrors.push(err441);
}
errors++;
}
var valid237 = _errs789 === errors;
if(!valid237){
break;
}
}
}
else {
const err442 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported",schemaPath:"#/anyOf/2/properties/tokenEndpointAuthMethodsSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err442];
}
else {
vErrors.push(err442);
}
errors++;
}
}
var _valid68 = _errs787 === errors;
valid236 = valid236 || _valid68;
if(!valid236){
const _errs792 = errors;
if(typeof data209 !== "string"){
const err443 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported",schemaPath:"#/definitions/TokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err443];
}
else {
vErrors.push(err443);
}
errors++;
}
if(!((((data209 === "client_secret_post") || (data209 === "client_secret_basic")) || (data209 === "client_secret_jwt")) || (data209 === "private_key_jwt"))){
const err444 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported",schemaPath:"#/definitions/TokenEndpointAuthMethod/enum",keyword:"enum",params:{allowedValues: schema380.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err444];
}
else {
vErrors.push(err444);
}
errors++;
}
var _valid68 = _errs792 === errors;
valid236 = valid236 || _valid68;
}
if(!valid236){
const err445 = {instancePath:instancePath+"/tokenEndpointAuthMethodsSupported",schemaPath:"#/anyOf/2/properties/tokenEndpointAuthMethodsSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err445];
}
else {
vErrors.push(err445);
}
errors++;
}
else {
errors = _errs786;
if(vErrors !== null){
if(_errs786){
vErrors.length = _errs786;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs785 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.tokenEndpointAuthSigningAlgValuesSupported !== undefined){
let data211 = data.tokenEndpointAuthSigningAlgValuesSupported;
const _errs795 = errors;
const _errs796 = errors;
let valid240 = false;
const _errs797 = errors;
if(errors === _errs797){
if(Array.isArray(data211)){
var valid241 = true;
const len67 = data211.length;
for(let i67=0; i67<len67; i67++){
let data212 = data211[i67];
const _errs799 = errors;
if(typeof data212 !== "string"){
const err446 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported/" + i67,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err446];
}
else {
vErrors.push(err446);
}
errors++;
}
if(!(((((data212 === "EdDSA") || (data212 === "RS256")) || (data212 === "PS256")) || (data212 === "ES256")) || (data212 === "ES256K"))){
const err447 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported/" + i67,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err447];
}
else {
vErrors.push(err447);
}
errors++;
}
var valid241 = _errs799 === errors;
if(!valid241){
break;
}
}
}
else {
const err448 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported",schemaPath:"#/anyOf/2/properties/tokenEndpointAuthSigningAlgValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err448];
}
else {
vErrors.push(err448);
}
errors++;
}
}
var _valid69 = _errs797 === errors;
valid240 = valid240 || _valid69;
if(!valid240){
const _errs802 = errors;
if(typeof data211 !== "string"){
const err449 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err449];
}
else {
vErrors.push(err449);
}
errors++;
}
if(!(((((data211 === "EdDSA") || (data211 === "RS256")) || (data211 === "PS256")) || (data211 === "ES256")) || (data211 === "ES256K"))){
const err450 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err450];
}
else {
vErrors.push(err450);
}
errors++;
}
var _valid69 = _errs802 === errors;
valid240 = valid240 || _valid69;
}
if(!valid240){
const err451 = {instancePath:instancePath+"/tokenEndpointAuthSigningAlgValuesSupported",schemaPath:"#/anyOf/2/properties/tokenEndpointAuthSigningAlgValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err451];
}
else {
vErrors.push(err451);
}
errors++;
}
else {
errors = _errs796;
if(vErrors !== null){
if(_errs796){
vErrors.length = _errs796;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs795 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.displayValuesSupported !== undefined){
let data213 = data.displayValuesSupported;
const _errs805 = errors;
const _errs806 = errors;
let valid244 = false;
const _errs807 = errors;
if(errors === _errs807){
if(Array.isArray(data213)){
var valid245 = true;
const len68 = data213.length;
for(let i68=0; i68<len68; i68++){
const _errs809 = errors;
if(typeof data213[i68] !== "string"){
const err452 = {instancePath:instancePath+"/displayValuesSupported/" + i68,schemaPath:"#/anyOf/2/properties/displayValuesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err452];
}
else {
vErrors.push(err452);
}
errors++;
}
var valid245 = _errs809 === errors;
if(!valid245){
break;
}
}
}
else {
const err453 = {instancePath:instancePath+"/displayValuesSupported",schemaPath:"#/anyOf/2/properties/displayValuesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err453];
}
else {
vErrors.push(err453);
}
errors++;
}
}
var _valid70 = _errs807 === errors;
valid244 = valid244 || _valid70;
if(!valid244){
const _errs811 = errors;
if(typeof data213 !== "string"){
const err454 = {instancePath:instancePath+"/displayValuesSupported",schemaPath:"#/anyOf/2/properties/displayValuesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err454];
}
else {
vErrors.push(err454);
}
errors++;
}
var _valid70 = _errs811 === errors;
valid244 = valid244 || _valid70;
}
if(!valid244){
const err455 = {instancePath:instancePath+"/displayValuesSupported",schemaPath:"#/anyOf/2/properties/displayValuesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err455];
}
else {
vErrors.push(err455);
}
errors++;
}
else {
errors = _errs806;
if(vErrors !== null){
if(_errs806){
vErrors.length = _errs806;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs805 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.claimTypesSupported !== undefined){
let data215 = data.claimTypesSupported;
const _errs813 = errors;
const _errs814 = errors;
let valid246 = false;
const _errs815 = errors;
if(errors === _errs815){
if(Array.isArray(data215)){
var valid247 = true;
const len69 = data215.length;
for(let i69=0; i69<len69; i69++){
let data216 = data215[i69];
const _errs817 = errors;
if(typeof data216 !== "string"){
const err456 = {instancePath:instancePath+"/claimTypesSupported/" + i69,schemaPath:"#/definitions/ClaimType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err456];
}
else {
vErrors.push(err456);
}
errors++;
}
if(!(((data216 === "normal") || (data216 === "aggregated")) || (data216 === "distributed"))){
const err457 = {instancePath:instancePath+"/claimTypesSupported/" + i69,schemaPath:"#/definitions/ClaimType/enum",keyword:"enum",params:{allowedValues: schema384.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err457];
}
else {
vErrors.push(err457);
}
errors++;
}
var valid247 = _errs817 === errors;
if(!valid247){
break;
}
}
}
else {
const err458 = {instancePath:instancePath+"/claimTypesSupported",schemaPath:"#/anyOf/2/properties/claimTypesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err458];
}
else {
vErrors.push(err458);
}
errors++;
}
}
var _valid71 = _errs815 === errors;
valid246 = valid246 || _valid71;
if(!valid246){
const _errs820 = errors;
if(typeof data215 !== "string"){
const err459 = {instancePath:instancePath+"/claimTypesSupported",schemaPath:"#/definitions/ClaimType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err459];
}
else {
vErrors.push(err459);
}
errors++;
}
if(!(((data215 === "normal") || (data215 === "aggregated")) || (data215 === "distributed"))){
const err460 = {instancePath:instancePath+"/claimTypesSupported",schemaPath:"#/definitions/ClaimType/enum",keyword:"enum",params:{allowedValues: schema384.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err460];
}
else {
vErrors.push(err460);
}
errors++;
}
var _valid71 = _errs820 === errors;
valid246 = valid246 || _valid71;
}
if(!valid246){
const err461 = {instancePath:instancePath+"/claimTypesSupported",schemaPath:"#/anyOf/2/properties/claimTypesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err461];
}
else {
vErrors.push(err461);
}
errors++;
}
else {
errors = _errs814;
if(vErrors !== null){
if(_errs814){
vErrors.length = _errs814;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs813 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.claimsSupported !== undefined){
let data217 = data.claimsSupported;
const _errs823 = errors;
const _errs824 = errors;
let valid250 = false;
const _errs825 = errors;
if(errors === _errs825){
if(Array.isArray(data217)){
var valid251 = true;
const len70 = data217.length;
for(let i70=0; i70<len70; i70++){
const _errs827 = errors;
if(typeof data217[i70] !== "string"){
const err462 = {instancePath:instancePath+"/claimsSupported/" + i70,schemaPath:"#/anyOf/2/properties/claimsSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err462];
}
else {
vErrors.push(err462);
}
errors++;
}
var valid251 = _errs827 === errors;
if(!valid251){
break;
}
}
}
else {
const err463 = {instancePath:instancePath+"/claimsSupported",schemaPath:"#/anyOf/2/properties/claimsSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err463];
}
else {
vErrors.push(err463);
}
errors++;
}
}
var _valid72 = _errs825 === errors;
valid250 = valid250 || _valid72;
if(!valid250){
const _errs829 = errors;
if(typeof data217 !== "string"){
const err464 = {instancePath:instancePath+"/claimsSupported",schemaPath:"#/anyOf/2/properties/claimsSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err464];
}
else {
vErrors.push(err464);
}
errors++;
}
var _valid72 = _errs829 === errors;
valid250 = valid250 || _valid72;
}
if(!valid250){
const err465 = {instancePath:instancePath+"/claimsSupported",schemaPath:"#/anyOf/2/properties/claimsSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err465];
}
else {
vErrors.push(err465);
}
errors++;
}
else {
errors = _errs824;
if(vErrors !== null){
if(_errs824){
vErrors.length = _errs824;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs823 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.serviceDocumentation !== undefined){
const _errs831 = errors;
if(typeof data.serviceDocumentation !== "string"){
const err466 = {instancePath:instancePath+"/serviceDocumentation",schemaPath:"#/anyOf/2/properties/serviceDocumentation/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err466];
}
else {
vErrors.push(err466);
}
errors++;
}
var valid173 = _errs831 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.claimsLocalesSupported !== undefined){
let data220 = data.claimsLocalesSupported;
const _errs833 = errors;
const _errs834 = errors;
let valid252 = false;
const _errs835 = errors;
if(errors === _errs835){
if(Array.isArray(data220)){
var valid253 = true;
const len71 = data220.length;
for(let i71=0; i71<len71; i71++){
const _errs837 = errors;
if(typeof data220[i71] !== "string"){
const err467 = {instancePath:instancePath+"/claimsLocalesSupported/" + i71,schemaPath:"#/anyOf/2/properties/claimsLocalesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err467];
}
else {
vErrors.push(err467);
}
errors++;
}
var valid253 = _errs837 === errors;
if(!valid253){
break;
}
}
}
else {
const err468 = {instancePath:instancePath+"/claimsLocalesSupported",schemaPath:"#/anyOf/2/properties/claimsLocalesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err468];
}
else {
vErrors.push(err468);
}
errors++;
}
}
var _valid73 = _errs835 === errors;
valid252 = valid252 || _valid73;
if(!valid252){
const _errs839 = errors;
if(typeof data220 !== "string"){
const err469 = {instancePath:instancePath+"/claimsLocalesSupported",schemaPath:"#/anyOf/2/properties/claimsLocalesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err469];
}
else {
vErrors.push(err469);
}
errors++;
}
var _valid73 = _errs839 === errors;
valid252 = valid252 || _valid73;
}
if(!valid252){
const err470 = {instancePath:instancePath+"/claimsLocalesSupported",schemaPath:"#/anyOf/2/properties/claimsLocalesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err470];
}
else {
vErrors.push(err470);
}
errors++;
}
else {
errors = _errs834;
if(vErrors !== null){
if(_errs834){
vErrors.length = _errs834;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs833 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.uiLocalesSupported !== undefined){
let data222 = data.uiLocalesSupported;
const _errs841 = errors;
const _errs842 = errors;
let valid254 = false;
const _errs843 = errors;
if(errors === _errs843){
if(Array.isArray(data222)){
var valid255 = true;
const len72 = data222.length;
for(let i72=0; i72<len72; i72++){
const _errs845 = errors;
if(typeof data222[i72] !== "string"){
const err471 = {instancePath:instancePath+"/uiLocalesSupported/" + i72,schemaPath:"#/anyOf/2/properties/uiLocalesSupported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err471];
}
else {
vErrors.push(err471);
}
errors++;
}
var valid255 = _errs845 === errors;
if(!valid255){
break;
}
}
}
else {
const err472 = {instancePath:instancePath+"/uiLocalesSupported",schemaPath:"#/anyOf/2/properties/uiLocalesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err472];
}
else {
vErrors.push(err472);
}
errors++;
}
}
var _valid74 = _errs843 === errors;
valid254 = valid254 || _valid74;
if(!valid254){
const _errs847 = errors;
if(typeof data222 !== "string"){
const err473 = {instancePath:instancePath+"/uiLocalesSupported",schemaPath:"#/anyOf/2/properties/uiLocalesSupported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err473];
}
else {
vErrors.push(err473);
}
errors++;
}
var _valid74 = _errs847 === errors;
valid254 = valid254 || _valid74;
}
if(!valid254){
const err474 = {instancePath:instancePath+"/uiLocalesSupported",schemaPath:"#/anyOf/2/properties/uiLocalesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err474];
}
else {
vErrors.push(err474);
}
errors++;
}
else {
errors = _errs842;
if(vErrors !== null){
if(_errs842){
vErrors.length = _errs842;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs841 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.claimsParameterSupported !== undefined){
const _errs849 = errors;
if(typeof data.claimsParameterSupported !== "boolean"){
const err475 = {instancePath:instancePath+"/claimsParameterSupported",schemaPath:"#/anyOf/2/properties/claimsParameterSupported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err475];
}
else {
vErrors.push(err475);
}
errors++;
}
var valid173 = _errs849 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.requestParameterSupported !== undefined){
const _errs851 = errors;
if(typeof data.requestParameterSupported !== "boolean"){
const err476 = {instancePath:instancePath+"/requestParameterSupported",schemaPath:"#/anyOf/2/properties/requestParameterSupported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err476];
}
else {
vErrors.push(err476);
}
errors++;
}
var valid173 = _errs851 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.requestUriParameterSupported !== undefined){
const _errs853 = errors;
if(typeof data.requestUriParameterSupported !== "boolean"){
const err477 = {instancePath:instancePath+"/requestUriParameterSupported",schemaPath:"#/anyOf/2/properties/requestUriParameterSupported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err477];
}
else {
vErrors.push(err477);
}
errors++;
}
var valid173 = _errs853 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.requireRequestUriRegistration !== undefined){
const _errs855 = errors;
if(typeof data.requireRequestUriRegistration !== "boolean"){
const err478 = {instancePath:instancePath+"/requireRequestUriRegistration",schemaPath:"#/anyOf/2/properties/requireRequestUriRegistration/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err478];
}
else {
vErrors.push(err478);
}
errors++;
}
var valid173 = _errs855 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.opPolicyUri !== undefined){
const _errs857 = errors;
if(typeof data.opPolicyUri !== "string"){
const err479 = {instancePath:instancePath+"/opPolicyUri",schemaPath:"#/anyOf/2/properties/opPolicyUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err479];
}
else {
vErrors.push(err479);
}
errors++;
}
var valid173 = _errs857 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.opTosUri !== undefined){
const _errs859 = errors;
if(typeof data.opTosUri !== "string"){
const err480 = {instancePath:instancePath+"/opTosUri",schemaPath:"#/anyOf/2/properties/opTosUri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err480];
}
else {
vErrors.push(err480);
}
errors++;
}
var valid173 = _errs859 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.idTokenTypesSupported !== undefined){
let data230 = data.idTokenTypesSupported;
const _errs861 = errors;
const _errs862 = errors;
let valid256 = false;
const _errs863 = errors;
if(errors === _errs863){
if(Array.isArray(data230)){
var valid257 = true;
const len73 = data230.length;
for(let i73=0; i73<len73; i73++){
let data231 = data230[i73];
const _errs865 = errors;
if(typeof data231 !== "string"){
const err481 = {instancePath:instancePath+"/idTokenTypesSupported/" + i73,schemaPath:"#/definitions/IdTokenType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err481];
}
else {
vErrors.push(err481);
}
errors++;
}
if(!((data231 === "subject_signed") || (data231 === "attester_signed"))){
const err482 = {instancePath:instancePath+"/idTokenTypesSupported/" + i73,schemaPath:"#/definitions/IdTokenType/enum",keyword:"enum",params:{allowedValues: schema472.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err482];
}
else {
vErrors.push(err482);
}
errors++;
}
var valid257 = _errs865 === errors;
if(!valid257){
break;
}
}
}
else {
const err483 = {instancePath:instancePath+"/idTokenTypesSupported",schemaPath:"#/anyOf/2/properties/idTokenTypesSupported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err483];
}
else {
vErrors.push(err483);
}
errors++;
}
}
var _valid75 = _errs863 === errors;
valid256 = valid256 || _valid75;
if(!valid256){
const _errs868 = errors;
if(typeof data230 !== "string"){
const err484 = {instancePath:instancePath+"/idTokenTypesSupported",schemaPath:"#/definitions/IdTokenType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err484];
}
else {
vErrors.push(err484);
}
errors++;
}
if(!((data230 === "subject_signed") || (data230 === "attester_signed"))){
const err485 = {instancePath:instancePath+"/idTokenTypesSupported",schemaPath:"#/definitions/IdTokenType/enum",keyword:"enum",params:{allowedValues: schema472.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err485];
}
else {
vErrors.push(err485);
}
errors++;
}
var _valid75 = _errs868 === errors;
valid256 = valid256 || _valid75;
}
if(!valid256){
const err486 = {instancePath:instancePath+"/idTokenTypesSupported",schemaPath:"#/anyOf/2/properties/idTokenTypesSupported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err486];
}
else {
vErrors.push(err486);
}
errors++;
}
else {
errors = _errs862;
if(vErrors !== null){
if(_errs862){
vErrors.length = _errs862;
}
else {
vErrors = null;
}
}
}
var valid173 = _errs861 === errors;
}
else {
var valid173 = true;
}
if(valid173){
if(data.vpFormatsSupported !== undefined){
const _errs871 = errors;
if(!(validate225(data.vpFormatsSupported, {instancePath:instancePath+"/vpFormatsSupported",parentData:data,parentDataProperty:"vpFormatsSupported",rootData}))){
vErrors = vErrors === null ? validate225.errors : vErrors.concat(validate225.errors);
errors = vErrors.length;
}
var valid173 = _errs871 === errors;
}
else {
var valid173 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
const err487 = {instancePath,schemaPath:"#/anyOf/2/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err487];
}
else {
vErrors.push(err487);
}
errors++;
}
}
var _valid0 = _errs601 === errors;
valid0 = valid0 || _valid0;
}
}
if(!valid0){
const err488 = {instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err488];
}
else {
vErrors.push(err488);
}
errors++;
validate220.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate220.errors = vErrors;
return errors === 0;
}

const schema476 = {"anyOf":[{"$ref":"#/definitions/JwtIssuerDid"},{"$ref":"#/definitions/JwtIssuerX5c"},{"$ref":"#/definitions/JwtIssuerJwk"},{"$ref":"#/definitions/JwtIssuerCustom"}]};
const schema484 = {"type":"object","properties":{"method":{"type":"string","const":"custom"},"options":{"type":"object","additionalProperties":{},"description":"Additional options for the issuance context"}},"required":["method"],"additionalProperties":false};
const schema477 = {"type":"object","properties":{"method":{"type":"string","const":"did"},"options":{"type":"object","additionalProperties":{},"description":"Additional options for the issuance context"},"didUrl":{"type":"string"},"alg":{"anyOf":[{"$ref":"#/definitions/SigningAlgo"},{"type":"string"}]}},"required":["alg","didUrl","method"],"additionalProperties":false};

function validate234(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((((data.alg === undefined) && (missing0 = "alg")) || ((data.didUrl === undefined) && (missing0 = "didUrl"))) || ((data.method === undefined) && (missing0 = "method"))){
validate234.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((key0 === "method") || (key0 === "options")) || (key0 === "didUrl")) || (key0 === "alg"))){
validate234.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.method !== undefined){
let data0 = data.method;
const _errs2 = errors;
if(typeof data0 !== "string"){
validate234.errors = [{instancePath:instancePath+"/method",schemaPath:"#/properties/method/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("did" !== data0){
validate234.errors = [{instancePath:instancePath+"/method",schemaPath:"#/properties/method/const",keyword:"const",params:{allowedValue: "did"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.options !== undefined){
let data1 = data.options;
const _errs4 = errors;
if(errors === _errs4){
if(data1 && typeof data1 == "object" && !Array.isArray(data1)){
for(const key1 in data1){
const _errs7 = errors;
var valid1 = _errs7 === errors;
if(!valid1){
break;
}
}
}
else {
validate234.errors = [{instancePath:instancePath+"/options",schemaPath:"#/properties/options/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.didUrl !== undefined){
const _errs8 = errors;
if(typeof data.didUrl !== "string"){
validate234.errors = [{instancePath:instancePath+"/didUrl",schemaPath:"#/properties/didUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.alg !== undefined){
let data4 = data.alg;
const _errs10 = errors;
const _errs11 = errors;
let valid2 = false;
const _errs12 = errors;
if(typeof data4 !== "string"){
const err0 = {instancePath:instancePath+"/alg",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(!(((((data4 === "EdDSA") || (data4 === "RS256")) || (data4 === "PS256")) || (data4 === "ES256")) || (data4 === "ES256K"))){
const err1 = {instancePath:instancePath+"/alg",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs12 === errors;
valid2 = valid2 || _valid0;
if(!valid2){
const _errs15 = errors;
if(typeof data4 !== "string"){
const err2 = {instancePath:instancePath+"/alg",schemaPath:"#/properties/alg/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var _valid0 = _errs15 === errors;
valid2 = valid2 || _valid0;
}
if(!valid2){
const err3 = {instancePath:instancePath+"/alg",schemaPath:"#/properties/alg/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
validate234.errors = vErrors;
return false;
}
else {
errors = _errs11;
if(vErrors !== null){
if(_errs11){
vErrors.length = _errs11;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
else {
validate234.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate234.errors = vErrors;
return errors === 0;
}

const schema479 = {"type":"object","properties":{"method":{"type":"string","const":"x5c"},"options":{"type":"object","additionalProperties":{},"description":"Additional options for the issuance context"},"alg":{"anyOf":[{"$ref":"#/definitions/SigningAlgo"},{"type":"string"}]},"x5c":{"type":"array","items":{"type":"string"},"description":"Array of base64-encoded certificate strings in the DER-format.\n\nThe certificate containing the public key corresponding to the key used to digitally sign the JWS MUST be the first certificate."},"issuer":{"type":"string","description":"The issuer jwt\n\nThis value will be used as the iss value of the issue jwt. It is also used as the client_id. And will also be set as the redirect_uri\n\nIt must match an entry in the x5c certificate leaf entry dnsName / uriName"}},"required":["alg","issuer","method","x5c"],"additionalProperties":false};

function validate236(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((((data.alg === undefined) && (missing0 = "alg")) || ((data.issuer === undefined) && (missing0 = "issuer"))) || ((data.method === undefined) && (missing0 = "method"))) || ((data.x5c === undefined) && (missing0 = "x5c"))){
validate236.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((key0 === "method") || (key0 === "options")) || (key0 === "alg")) || (key0 === "x5c")) || (key0 === "issuer"))){
validate236.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.method !== undefined){
let data0 = data.method;
const _errs2 = errors;
if(typeof data0 !== "string"){
validate236.errors = [{instancePath:instancePath+"/method",schemaPath:"#/properties/method/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("x5c" !== data0){
validate236.errors = [{instancePath:instancePath+"/method",schemaPath:"#/properties/method/const",keyword:"const",params:{allowedValue: "x5c"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.options !== undefined){
let data1 = data.options;
const _errs4 = errors;
if(errors === _errs4){
if(data1 && typeof data1 == "object" && !Array.isArray(data1)){
for(const key1 in data1){
const _errs7 = errors;
var valid1 = _errs7 === errors;
if(!valid1){
break;
}
}
}
else {
validate236.errors = [{instancePath:instancePath+"/options",schemaPath:"#/properties/options/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.alg !== undefined){
let data3 = data.alg;
const _errs8 = errors;
const _errs9 = errors;
let valid2 = false;
const _errs10 = errors;
if(typeof data3 !== "string"){
const err0 = {instancePath:instancePath+"/alg",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(!(((((data3 === "EdDSA") || (data3 === "RS256")) || (data3 === "PS256")) || (data3 === "ES256")) || (data3 === "ES256K"))){
const err1 = {instancePath:instancePath+"/alg",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs10 === errors;
valid2 = valid2 || _valid0;
if(!valid2){
const _errs13 = errors;
if(typeof data3 !== "string"){
const err2 = {instancePath:instancePath+"/alg",schemaPath:"#/properties/alg/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var _valid0 = _errs13 === errors;
valid2 = valid2 || _valid0;
}
if(!valid2){
const err3 = {instancePath:instancePath+"/alg",schemaPath:"#/properties/alg/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
validate236.errors = vErrors;
return false;
}
else {
errors = _errs9;
if(vErrors !== null){
if(_errs9){
vErrors.length = _errs9;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.x5c !== undefined){
let data4 = data.x5c;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data4)){
var valid4 = true;
const len0 = data4.length;
for(let i0=0; i0<len0; i0++){
const _errs17 = errors;
if(typeof data4[i0] !== "string"){
validate236.errors = [{instancePath:instancePath+"/x5c/" + i0,schemaPath:"#/properties/x5c/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs17 === errors;
if(!valid4){
break;
}
}
}
else {
validate236.errors = [{instancePath:instancePath+"/x5c",schemaPath:"#/properties/x5c/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.issuer !== undefined){
const _errs19 = errors;
if(typeof data.issuer !== "string"){
validate236.errors = [{instancePath:instancePath+"/issuer",schemaPath:"#/properties/issuer/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate236.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate236.errors = vErrors;
return errors === 0;
}

const schema481 = {"type":"object","properties":{"method":{"type":"string","const":"jwk"},"options":{"type":"object","additionalProperties":{},"description":"Additional options for the issuance context"},"alg":{"anyOf":[{"$ref":"#/definitions/SigningAlgo"},{"type":"string"}]},"jwk":{"$ref":"#/definitions/JWK"}},"required":["alg","jwk","method"],"additionalProperties":false};

function validate238(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((((data.alg === undefined) && (missing0 = "alg")) || ((data.jwk === undefined) && (missing0 = "jwk"))) || ((data.method === undefined) && (missing0 = "method"))){
validate238.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((key0 === "method") || (key0 === "options")) || (key0 === "alg")) || (key0 === "jwk"))){
validate238.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.method !== undefined){
let data0 = data.method;
const _errs2 = errors;
if(typeof data0 !== "string"){
validate238.errors = [{instancePath:instancePath+"/method",schemaPath:"#/properties/method/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if("jwk" !== data0){
validate238.errors = [{instancePath:instancePath+"/method",schemaPath:"#/properties/method/const",keyword:"const",params:{allowedValue: "jwk"},message:"must be equal to constant"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.options !== undefined){
let data1 = data.options;
const _errs4 = errors;
if(errors === _errs4){
if(data1 && typeof data1 == "object" && !Array.isArray(data1)){
for(const key1 in data1){
const _errs7 = errors;
var valid1 = _errs7 === errors;
if(!valid1){
break;
}
}
}
else {
validate238.errors = [{instancePath:instancePath+"/options",schemaPath:"#/properties/options/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.alg !== undefined){
let data3 = data.alg;
const _errs8 = errors;
const _errs9 = errors;
let valid2 = false;
const _errs10 = errors;
if(typeof data3 !== "string"){
const err0 = {instancePath:instancePath+"/alg",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(!(((((data3 === "EdDSA") || (data3 === "RS256")) || (data3 === "PS256")) || (data3 === "ES256")) || (data3 === "ES256K"))){
const err1 = {instancePath:instancePath+"/alg",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema362.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs10 === errors;
valid2 = valid2 || _valid0;
if(!valid2){
const _errs13 = errors;
if(typeof data3 !== "string"){
const err2 = {instancePath:instancePath+"/alg",schemaPath:"#/properties/alg/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var _valid0 = _errs13 === errors;
valid2 = valid2 || _valid0;
}
if(!valid2){
const err3 = {instancePath:instancePath+"/alg",schemaPath:"#/properties/alg/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
validate238.errors = vErrors;
return false;
}
else {
errors = _errs9;
if(vErrors !== null){
if(_errs9){
vErrors.length = _errs9;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwk !== undefined){
let data4 = data.jwk;
const _errs15 = errors;
const _errs16 = errors;
if(errors === _errs16){
if(data4 && typeof data4 == "object" && !Array.isArray(data4)){
const _errs18 = errors;
for(const key2 in data4){
if(!(func2.call(schema387.properties, key2))){
const _errs19 = errors;
var valid5 = _errs19 === errors;
if(!valid5){
break;
}
}
}
if(_errs18 === errors){
if(data4.kty !== undefined){
const _errs20 = errors;
if(typeof data4.kty !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/kty",schemaPath:"#/definitions/JWK/properties/kty/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs20 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.crv !== undefined){
const _errs22 = errors;
if(typeof data4.crv !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/crv",schemaPath:"#/definitions/JWK/properties/crv/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs22 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.x !== undefined){
const _errs24 = errors;
if(typeof data4.x !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/x",schemaPath:"#/definitions/JWK/properties/x/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs24 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.y !== undefined){
const _errs26 = errors;
if(typeof data4.y !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/y",schemaPath:"#/definitions/JWK/properties/y/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs26 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.e !== undefined){
const _errs28 = errors;
if(typeof data4.e !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/e",schemaPath:"#/definitions/JWK/properties/e/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs28 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.n !== undefined){
const _errs30 = errors;
if(typeof data4.n !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/n",schemaPath:"#/definitions/JWK/properties/n/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs30 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.alg !== undefined){
const _errs32 = errors;
if(typeof data4.alg !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/alg",schemaPath:"#/definitions/JWK/properties/alg/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs32 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.d !== undefined){
const _errs34 = errors;
if(typeof data4.d !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/d",schemaPath:"#/definitions/JWK/properties/d/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs34 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.dp !== undefined){
const _errs36 = errors;
if(typeof data4.dp !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/dp",schemaPath:"#/definitions/JWK/properties/dp/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs36 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.dq !== undefined){
const _errs38 = errors;
if(typeof data4.dq !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/dq",schemaPath:"#/definitions/JWK/properties/dq/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs38 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.ext !== undefined){
const _errs40 = errors;
if(typeof data4.ext !== "boolean"){
validate238.errors = [{instancePath:instancePath+"/jwk/ext",schemaPath:"#/definitions/JWK/properties/ext/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid6 = _errs40 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.k !== undefined){
const _errs42 = errors;
if(typeof data4.k !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/k",schemaPath:"#/definitions/JWK/properties/k/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs42 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.key_ops !== undefined){
let data18 = data4.key_ops;
const _errs44 = errors;
if(errors === _errs44){
if(Array.isArray(data18)){
var valid7 = true;
const len0 = data18.length;
for(let i0=0; i0<len0; i0++){
const _errs46 = errors;
if(typeof data18[i0] !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/key_ops/" + i0,schemaPath:"#/definitions/JWK/properties/key_ops/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid7 = _errs46 === errors;
if(!valid7){
break;
}
}
}
else {
validate238.errors = [{instancePath:instancePath+"/jwk/key_ops",schemaPath:"#/definitions/JWK/properties/key_ops/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid6 = _errs44 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.kid !== undefined){
const _errs48 = errors;
if(typeof data4.kid !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/kid",schemaPath:"#/definitions/JWK/properties/kid/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs48 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.oth !== undefined){
let data21 = data4.oth;
const _errs50 = errors;
if(errors === _errs50){
if(Array.isArray(data21)){
var valid8 = true;
const len1 = data21.length;
for(let i1=0; i1<len1; i1++){
let data22 = data21[i1];
const _errs52 = errors;
if(errors === _errs52){
if(data22 && typeof data22 == "object" && !Array.isArray(data22)){
const _errs54 = errors;
for(const key3 in data22){
if(!(((key3 === "d") || (key3 === "r")) || (key3 === "t"))){
validate238.errors = [{instancePath:instancePath+"/jwk/oth/" + i1,schemaPath:"#/definitions/JWK/properties/oth/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs54 === errors){
if(data22.d !== undefined){
const _errs55 = errors;
if(typeof data22.d !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/oth/" + i1+"/d",schemaPath:"#/definitions/JWK/properties/oth/items/properties/d/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs55 === errors;
}
else {
var valid9 = true;
}
if(valid9){
if(data22.r !== undefined){
const _errs57 = errors;
if(typeof data22.r !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/oth/" + i1+"/r",schemaPath:"#/definitions/JWK/properties/oth/items/properties/r/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs57 === errors;
}
else {
var valid9 = true;
}
if(valid9){
if(data22.t !== undefined){
const _errs59 = errors;
if(typeof data22.t !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/oth/" + i1+"/t",schemaPath:"#/definitions/JWK/properties/oth/items/properties/t/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs59 === errors;
}
else {
var valid9 = true;
}
}
}
}
}
else {
validate238.errors = [{instancePath:instancePath+"/jwk/oth/" + i1,schemaPath:"#/definitions/JWK/properties/oth/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid8 = _errs52 === errors;
if(!valid8){
break;
}
}
}
else {
validate238.errors = [{instancePath:instancePath+"/jwk/oth",schemaPath:"#/definitions/JWK/properties/oth/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid6 = _errs50 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.p !== undefined){
const _errs61 = errors;
if(typeof data4.p !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/p",schemaPath:"#/definitions/JWK/properties/p/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs61 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.q !== undefined){
const _errs63 = errors;
if(typeof data4.q !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/q",schemaPath:"#/definitions/JWK/properties/q/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs63 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.qi !== undefined){
const _errs65 = errors;
if(typeof data4.qi !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/qi",schemaPath:"#/definitions/JWK/properties/qi/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs65 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.use !== undefined){
const _errs67 = errors;
if(typeof data4.use !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/use",schemaPath:"#/definitions/JWK/properties/use/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs67 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.x5c !== undefined){
let data30 = data4.x5c;
const _errs69 = errors;
if(errors === _errs69){
if(Array.isArray(data30)){
var valid10 = true;
const len2 = data30.length;
for(let i2=0; i2<len2; i2++){
const _errs71 = errors;
if(typeof data30[i2] !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/x5c/" + i2,schemaPath:"#/definitions/JWK/properties/x5c/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid10 = _errs71 === errors;
if(!valid10){
break;
}
}
}
else {
validate238.errors = [{instancePath:instancePath+"/jwk/x5c",schemaPath:"#/definitions/JWK/properties/x5c/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid6 = _errs69 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.x5t !== undefined){
const _errs73 = errors;
if(typeof data4.x5t !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/x5t",schemaPath:"#/definitions/JWK/properties/x5t/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs73 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4["x5t#S256"] !== undefined){
const _errs75 = errors;
if(typeof data4["x5t#S256"] !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/x5t#S256",schemaPath:"#/definitions/JWK/properties/x5t%23S256/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs75 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data4.x5u !== undefined){
const _errs77 = errors;
if(typeof data4.x5u !== "string"){
validate238.errors = [{instancePath:instancePath+"/jwk/x5u",schemaPath:"#/definitions/JWK/properties/x5u/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs77 === errors;
}
else {
var valid6 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate238.errors = [{instancePath:instancePath+"/jwk",schemaPath:"#/definitions/JWK/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs15 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
else {
validate238.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate238.errors = vErrors;
return errors === 0;
}


function validate233(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
const _errs0 = errors;
let valid0 = false;
const _errs1 = errors;
if(!(validate234(data, {instancePath,parentData,parentDataProperty,rootData}))){
vErrors = vErrors === null ? validate234.errors : vErrors.concat(validate234.errors);
errors = vErrors.length;
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs2 = errors;
if(!(validate236(data, {instancePath,parentData,parentDataProperty,rootData}))){
vErrors = vErrors === null ? validate236.errors : vErrors.concat(validate236.errors);
errors = vErrors.length;
}
var _valid0 = _errs2 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs3 = errors;
if(!(validate238(data, {instancePath,parentData,parentDataProperty,rootData}))){
vErrors = vErrors === null ? validate238.errors : vErrors.concat(validate238.errors);
errors = vErrors.length;
}
var _valid0 = _errs3 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs4 = errors;
const _errs5 = errors;
if(errors === _errs5){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.method === undefined) && (missing0 = "method")){
const err0 = {instancePath,schemaPath:"#/definitions/JwtIssuerCustom/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
else {
const _errs7 = errors;
for(const key0 in data){
if(!((key0 === "method") || (key0 === "options"))){
const err1 = {instancePath,schemaPath:"#/definitions/JwtIssuerCustom/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
break;
}
}
if(_errs7 === errors){
if(data.method !== undefined){
let data0 = data.method;
const _errs8 = errors;
if(typeof data0 !== "string"){
const err2 = {instancePath:instancePath+"/method",schemaPath:"#/definitions/JwtIssuerCustom/properties/method/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
if("custom" !== data0){
const err3 = {instancePath:instancePath+"/method",schemaPath:"#/definitions/JwtIssuerCustom/properties/method/const",keyword:"const",params:{allowedValue: "custom"},message:"must be equal to constant"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid2 = _errs8 === errors;
}
else {
var valid2 = true;
}
if(valid2){
if(data.options !== undefined){
let data1 = data.options;
const _errs10 = errors;
if(errors === _errs10){
if(data1 && typeof data1 == "object" && !Array.isArray(data1)){
for(const key1 in data1){
const _errs13 = errors;
var valid3 = _errs13 === errors;
if(!valid3){
break;
}
}
}
else {
const err4 = {instancePath:instancePath+"/options",schemaPath:"#/definitions/JwtIssuerCustom/properties/options/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
var valid2 = _errs10 === errors;
}
else {
var valid2 = true;
}
}
}
}
}
else {
const err5 = {instancePath,schemaPath:"#/definitions/JwtIssuerCustom/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
}
var _valid0 = _errs4 === errors;
valid0 = valid0 || _valid0;
}
}
}
if(!valid0){
const err6 = {instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
validate233.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate233.errors = vErrors;
return errors === 0;
}

const schema487 = {"type":"object","properties":{"verifiablePresentations":{"type":"array","items":{"anyOf":[{"$ref":"#/definitions/W3CVerifiablePresentation"},{"$ref":"#/definitions/CompactSdJwtVc"},{"$ref":"#/definitions/MdocOid4vpMdocVpToken"}]}},"vpTokenLocation":{"$ref":"#/definitions/VPTokenLocation"},"presentationSubmission":{"$ref":"#/definitions/PresentationSubmission"},"restrictToFormats":{"$ref":"#/definitions/Format"},"restrictToDIDMethods":{"type":"array","items":{"type":"string"}}},"required":["verifiablePresentations"],"additionalProperties":false};
const schema508 = {"type":"string","description":"Represents a selective disclosure JWT vc in compact form."};
const schema509 = {"type":"string"};
const schema510 = {"type":"string","enum":["authorization_response","id_token","token_response"]};
const schema488 = {"anyOf":[{"$ref":"#/definitions/IVerifiablePresentation"},{"$ref":"#/definitions/CompactJWT"}],"description":"Represents a signed Verifiable Presentation (includes proof), in either JSON or compact JWT format. See  {@link  https://www.w3.org/TR/vc-data-model/#presentations VC data model }  See  {@link  https://www.w3.org/TR/vc-data-model/#proof-formats proof formats }"};
const schema504 = {"type":"string","description":"Represents a Json Web Token in compact form."};
const schema489 = {"type":"object","properties":{"proof":{"anyOf":[{"$ref":"#/definitions/IProof"},{"type":"array","items":{"$ref":"#/definitions/IProof"}}]},"id":{"type":"string"},"@context":{"anyOf":[{"$ref":"#/definitions/ICredentialContextType"},{"type":"array","items":{"$ref":"#/definitions/ICredentialContextType"}}]},"type":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}]},"verifiableCredential":{"type":"array","items":{"$ref":"#/definitions/W3CVerifiableCredential"}},"presentation_submission":{"$ref":"#/definitions/PresentationSubmission"},"holder":{"type":"string"},"verifier":{"type":"string"}},"required":["@context","proof"]};
const schema493 = {"anyOf":[{"type":"object","properties":{"name":{"type":"string"},"did":{"type":"string"}}},{"type":"string"}]};
const schema490 = {"type":"object","properties":{"type":{"anyOf":[{"$ref":"#/definitions/IProofType"},{"type":"string"}]},"created":{"type":"string"},"proofPurpose":{"anyOf":[{"$ref":"#/definitions/IProofPurpose"},{"type":"string"}]},"verificationMethod":{"type":"string"},"challenge":{"type":"string"},"domain":{"type":"string"},"proofValue":{"type":"string"},"jws":{"type":"string"},"jwt":{"type":"string"},"mso_mdoc":{"type":"string"},"nonce":{"type":"string"},"requiredRevealStatements":{"type":"array","items":{"type":"string"}}},"required":["type","created","proofPurpose","verificationMethod"]};
const schema491 = {"type":"string","enum":["Ed25519Signature2018","Ed25519Signature2020","EcdsaSecp256k1Signature2019","EcdsaSecp256k1RecoverySignature2020","JsonWebSignature2020","RsaSignature2018","GpgSignature2020","JcsEd25519Signature2020","BbsBlsSignatureProof2020","BbsBlsBoundSignatureProof2020","JwtProof2020","SdJwtProof2024","MsoMdocProof2024"]};
const schema492 = {"type":"string","enum":["verificationMethod","assertionMethod","authentication","keyAgreement","contactAgreement","capabilityInvocation","capabilityDelegation"]};

function validate244(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((((data.type === undefined) && (missing0 = "type")) || ((data.created === undefined) && (missing0 = "created"))) || ((data.proofPurpose === undefined) && (missing0 = "proofPurpose"))) || ((data.verificationMethod === undefined) && (missing0 = "verificationMethod"))){
validate244.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.type !== undefined){
let data0 = data.type;
const _errs1 = errors;
const _errs2 = errors;
let valid1 = false;
const _errs3 = errors;
if(typeof data0 !== "string"){
const err0 = {instancePath:instancePath+"/type",schemaPath:"#/definitions/IProofType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(!(((((((((((((data0 === "Ed25519Signature2018") || (data0 === "Ed25519Signature2020")) || (data0 === "EcdsaSecp256k1Signature2019")) || (data0 === "EcdsaSecp256k1RecoverySignature2020")) || (data0 === "JsonWebSignature2020")) || (data0 === "RsaSignature2018")) || (data0 === "GpgSignature2020")) || (data0 === "JcsEd25519Signature2020")) || (data0 === "BbsBlsSignatureProof2020")) || (data0 === "BbsBlsBoundSignatureProof2020")) || (data0 === "JwtProof2020")) || (data0 === "SdJwtProof2024")) || (data0 === "MsoMdocProof2024"))){
const err1 = {instancePath:instancePath+"/type",schemaPath:"#/definitions/IProofType/enum",keyword:"enum",params:{allowedValues: schema491.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs3 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
const _errs6 = errors;
if(typeof data0 !== "string"){
const err2 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var _valid0 = _errs6 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
const err3 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
validate244.errors = vErrors;
return false;
}
else {
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.created !== undefined){
const _errs8 = errors;
if(typeof data.created !== "string"){
validate244.errors = [{instancePath:instancePath+"/created",schemaPath:"#/properties/created/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.proofPurpose !== undefined){
let data2 = data.proofPurpose;
const _errs10 = errors;
const _errs11 = errors;
let valid3 = false;
const _errs12 = errors;
if(typeof data2 !== "string"){
const err4 = {instancePath:instancePath+"/proofPurpose",schemaPath:"#/definitions/IProofPurpose/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(!(((((((data2 === "verificationMethod") || (data2 === "assertionMethod")) || (data2 === "authentication")) || (data2 === "keyAgreement")) || (data2 === "contactAgreement")) || (data2 === "capabilityInvocation")) || (data2 === "capabilityDelegation"))){
const err5 = {instancePath:instancePath+"/proofPurpose",schemaPath:"#/definitions/IProofPurpose/enum",keyword:"enum",params:{allowedValues: schema492.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var _valid1 = _errs12 === errors;
valid3 = valid3 || _valid1;
if(!valid3){
const _errs15 = errors;
if(typeof data2 !== "string"){
const err6 = {instancePath:instancePath+"/proofPurpose",schemaPath:"#/properties/proofPurpose/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
var _valid1 = _errs15 === errors;
valid3 = valid3 || _valid1;
}
if(!valid3){
const err7 = {instancePath:instancePath+"/proofPurpose",schemaPath:"#/properties/proofPurpose/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
validate244.errors = vErrors;
return false;
}
else {
errors = _errs11;
if(vErrors !== null){
if(_errs11){
vErrors.length = _errs11;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.verificationMethod !== undefined){
const _errs17 = errors;
if(typeof data.verificationMethod !== "string"){
validate244.errors = [{instancePath:instancePath+"/verificationMethod",schemaPath:"#/properties/verificationMethod/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.challenge !== undefined){
const _errs19 = errors;
if(typeof data.challenge !== "string"){
validate244.errors = [{instancePath:instancePath+"/challenge",schemaPath:"#/properties/challenge/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs19 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.domain !== undefined){
const _errs21 = errors;
if(typeof data.domain !== "string"){
validate244.errors = [{instancePath:instancePath+"/domain",schemaPath:"#/properties/domain/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.proofValue !== undefined){
const _errs23 = errors;
if(typeof data.proofValue !== "string"){
validate244.errors = [{instancePath:instancePath+"/proofValue",schemaPath:"#/properties/proofValue/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jws !== undefined){
const _errs25 = errors;
if(typeof data.jws !== "string"){
validate244.errors = [{instancePath:instancePath+"/jws",schemaPath:"#/properties/jws/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs25 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt !== undefined){
const _errs27 = errors;
if(typeof data.jwt !== "string"){
validate244.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/properties/jwt/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs27 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.mso_mdoc !== undefined){
const _errs29 = errors;
if(typeof data.mso_mdoc !== "string"){
validate244.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/properties/mso_mdoc/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs29 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.nonce !== undefined){
const _errs31 = errors;
if(typeof data.nonce !== "string"){
validate244.errors = [{instancePath:instancePath+"/nonce",schemaPath:"#/properties/nonce/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs31 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.requiredRevealStatements !== undefined){
let data11 = data.requiredRevealStatements;
const _errs33 = errors;
if(errors === _errs33){
if(Array.isArray(data11)){
var valid5 = true;
const len0 = data11.length;
for(let i0=0; i0<len0; i0++){
const _errs35 = errors;
if(typeof data11[i0] !== "string"){
validate244.errors = [{instancePath:instancePath+"/requiredRevealStatements/" + i0,schemaPath:"#/properties/requiredRevealStatements/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid5 = _errs35 === errors;
if(!valid5){
break;
}
}
}
else {
validate244.errors = [{instancePath:instancePath+"/requiredRevealStatements",schemaPath:"#/properties/requiredRevealStatements/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate244.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate244.errors = vErrors;
return errors === 0;
}

const schema495 = {"anyOf":[{"$ref":"#/definitions/IVerifiableCredential"},{"$ref":"#/definitions/CompactJWT"}],"description":"Represents a signed Verifiable Credential (includes proof), in either JSON, compact JWT or compact SD-JWT VC format. See  {@link  https://www.w3.org/TR/vc-data-model/#credentials VC data model }  See  {@link  https://www.w3.org/TR/vc-data-model/#proof-formats proof formats }"};
const schema496 = {"type":"object","properties":{"proof":{"anyOf":[{"$ref":"#/definitions/IProof"},{"type":"array","items":{"$ref":"#/definitions/IProof"}}]},"@context":{"anyOf":[{"$ref":"#/definitions/ICredentialContextType"},{"type":"array","items":{"$ref":"#/definitions/ICredentialContextType"}}]},"type":{"type":"array","items":{"type":"string"}},"credentialSchema":{"anyOf":[{"$ref":"#/definitions/ICredentialSchemaType"},{"type":"array","items":{"$ref":"#/definitions/ICredentialSchemaType"}}]},"issuer":{"anyOf":[{"$ref":"#/definitions/IIssuerId"},{"$ref":"#/definitions/IIssuer"}]},"issuanceDate":{"type":"string"},"credentialSubject":{"anyOf":[{"type":"object","properties":{"id":{"type":"string"}}},{"type":"array","items":{"type":"object","properties":{"id":{"type":"string"}}}}]},"expirationDate":{"type":"string"},"id":{"type":"string"},"credentialStatus":{"$ref":"#/definitions/ICredentialStatus"},"description":{"type":"string"},"name":{"type":"string"}},"required":["@context","credentialSubject","issuanceDate","issuer","proof","type"]};
const schema501 = {"type":"string"};
const schema502 = {"type":"object","properties":{"id":{"type":"string"}},"required":["id"]};
const schema503 = {"type":"object","properties":{"id":{"type":"string"},"type":{"type":"string"}},"required":["id","type"]};
const schema499 = {"anyOf":[{"$ref":"#/definitions/ICredentialSchema"},{"type":"string"}]};
const schema500 = {"type":"object","properties":{"id":{"type":"string"},"type":{"type":"string"}},"required":["id"],"additionalProperties":false};

function validate251(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
const _errs0 = errors;
let valid0 = false;
const _errs1 = errors;
const _errs2 = errors;
if(errors === _errs2){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.id === undefined) && (missing0 = "id")){
const err0 = {instancePath,schemaPath:"#/definitions/ICredentialSchema/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
else {
const _errs4 = errors;
for(const key0 in data){
if(!((key0 === "id") || (key0 === "type"))){
const err1 = {instancePath,schemaPath:"#/definitions/ICredentialSchema/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
break;
}
}
if(_errs4 === errors){
if(data.id !== undefined){
const _errs5 = errors;
if(typeof data.id !== "string"){
const err2 = {instancePath:instancePath+"/id",schemaPath:"#/definitions/ICredentialSchema/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var valid2 = _errs5 === errors;
}
else {
var valid2 = true;
}
if(valid2){
if(data.type !== undefined){
const _errs7 = errors;
if(typeof data.type !== "string"){
const err3 = {instancePath:instancePath+"/type",schemaPath:"#/definitions/ICredentialSchema/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid2 = _errs7 === errors;
}
else {
var valid2 = true;
}
}
}
}
}
else {
const err4 = {instancePath,schemaPath:"#/definitions/ICredentialSchema/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs9 = errors;
if(typeof data !== "string"){
const err5 = {instancePath,schemaPath:"#/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var _valid0 = _errs9 === errors;
valid0 = valid0 || _valid0;
}
if(!valid0){
const err6 = {instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
validate251.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate251.errors = vErrors;
return errors === 0;
}


function validate248(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((((((data["@context"] === undefined) && (missing0 = "@context")) || ((data.credentialSubject === undefined) && (missing0 = "credentialSubject"))) || ((data.issuanceDate === undefined) && (missing0 = "issuanceDate"))) || ((data.issuer === undefined) && (missing0 = "issuer"))) || ((data.proof === undefined) && (missing0 = "proof"))) || ((data.type === undefined) && (missing0 = "type"))){
validate248.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.proof !== undefined){
let data0 = data.proof;
const _errs1 = errors;
const _errs2 = errors;
let valid1 = false;
const _errs3 = errors;
if(!(validate244(data0, {instancePath:instancePath+"/proof",parentData:data,parentDataProperty:"proof",rootData}))){
vErrors = vErrors === null ? validate244.errors : vErrors.concat(validate244.errors);
errors = vErrors.length;
}
var _valid0 = _errs3 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
const _errs4 = errors;
if(errors === _errs4){
if(Array.isArray(data0)){
var valid2 = true;
const len0 = data0.length;
for(let i0=0; i0<len0; i0++){
const _errs6 = errors;
if(!(validate244(data0[i0], {instancePath:instancePath+"/proof/" + i0,parentData:data0,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate244.errors : vErrors.concat(validate244.errors);
errors = vErrors.length;
}
var valid2 = _errs6 === errors;
if(!valid2){
break;
}
}
}
else {
const err0 = {instancePath:instancePath+"/proof",schemaPath:"#/properties/proof/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
var _valid0 = _errs4 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
const err1 = {instancePath:instancePath+"/proof",schemaPath:"#/properties/proof/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
validate248.errors = vErrors;
return false;
}
else {
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data["@context"] !== undefined){
let data2 = data["@context"];
const _errs7 = errors;
const _errs8 = errors;
let valid3 = false;
const _errs9 = errors;
const _errs11 = errors;
let valid5 = false;
const _errs12 = errors;
if(errors === _errs12){
if(data2 && typeof data2 == "object" && !Array.isArray(data2)){
if(data2.name !== undefined){
const _errs14 = errors;
if(typeof data2.name !== "string"){
const err2 = {instancePath:instancePath+"/@context/name",schemaPath:"#/definitions/ICredentialContextType/anyOf/0/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var valid6 = _errs14 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data2.did !== undefined){
const _errs16 = errors;
if(typeof data2.did !== "string"){
const err3 = {instancePath:instancePath+"/@context/did",schemaPath:"#/definitions/ICredentialContextType/anyOf/0/properties/did/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid6 = _errs16 === errors;
}
else {
var valid6 = true;
}
}
}
else {
const err4 = {instancePath:instancePath+"/@context",schemaPath:"#/definitions/ICredentialContextType/anyOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
var _valid2 = _errs12 === errors;
valid5 = valid5 || _valid2;
if(!valid5){
const _errs18 = errors;
if(typeof data2 !== "string"){
const err5 = {instancePath:instancePath+"/@context",schemaPath:"#/definitions/ICredentialContextType/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var _valid2 = _errs18 === errors;
valid5 = valid5 || _valid2;
}
if(!valid5){
const err6 = {instancePath:instancePath+"/@context",schemaPath:"#/definitions/ICredentialContextType/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs11;
if(vErrors !== null){
if(_errs11){
vErrors.length = _errs11;
}
else {
vErrors = null;
}
}
}
var _valid1 = _errs9 === errors;
valid3 = valid3 || _valid1;
if(!valid3){
const _errs20 = errors;
if(errors === _errs20){
if(Array.isArray(data2)){
var valid7 = true;
const len1 = data2.length;
for(let i1=0; i1<len1; i1++){
let data5 = data2[i1];
const _errs22 = errors;
const _errs24 = errors;
let valid9 = false;
const _errs25 = errors;
if(errors === _errs25){
if(data5 && typeof data5 == "object" && !Array.isArray(data5)){
if(data5.name !== undefined){
const _errs27 = errors;
if(typeof data5.name !== "string"){
const err7 = {instancePath:instancePath+"/@context/" + i1+"/name",schemaPath:"#/definitions/ICredentialContextType/anyOf/0/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var valid10 = _errs27 === errors;
}
else {
var valid10 = true;
}
if(valid10){
if(data5.did !== undefined){
const _errs29 = errors;
if(typeof data5.did !== "string"){
const err8 = {instancePath:instancePath+"/@context/" + i1+"/did",schemaPath:"#/definitions/ICredentialContextType/anyOf/0/properties/did/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
var valid10 = _errs29 === errors;
}
else {
var valid10 = true;
}
}
}
else {
const err9 = {instancePath:instancePath+"/@context/" + i1,schemaPath:"#/definitions/ICredentialContextType/anyOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
var _valid3 = _errs25 === errors;
valid9 = valid9 || _valid3;
if(!valid9){
const _errs31 = errors;
if(typeof data5 !== "string"){
const err10 = {instancePath:instancePath+"/@context/" + i1,schemaPath:"#/definitions/ICredentialContextType/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
var _valid3 = _errs31 === errors;
valid9 = valid9 || _valid3;
}
if(!valid9){
const err11 = {instancePath:instancePath+"/@context/" + i1,schemaPath:"#/definitions/ICredentialContextType/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
else {
errors = _errs24;
if(vErrors !== null){
if(_errs24){
vErrors.length = _errs24;
}
else {
vErrors = null;
}
}
}
var valid7 = _errs22 === errors;
if(!valid7){
break;
}
}
}
else {
const err12 = {instancePath:instancePath+"/@context",schemaPath:"#/properties/%40context/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
var _valid1 = _errs20 === errors;
valid3 = valid3 || _valid1;
}
if(!valid3){
const err13 = {instancePath:instancePath+"/@context",schemaPath:"#/properties/%40context/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
validate248.errors = vErrors;
return false;
}
else {
errors = _errs8;
if(vErrors !== null){
if(_errs8){
vErrors.length = _errs8;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
let data8 = data.type;
const _errs33 = errors;
if(errors === _errs33){
if(Array.isArray(data8)){
var valid11 = true;
const len2 = data8.length;
for(let i2=0; i2<len2; i2++){
const _errs35 = errors;
if(typeof data8[i2] !== "string"){
validate248.errors = [{instancePath:instancePath+"/type/" + i2,schemaPath:"#/properties/type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid11 = _errs35 === errors;
if(!valid11){
break;
}
}
}
else {
validate248.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.credentialSchema !== undefined){
let data10 = data.credentialSchema;
const _errs37 = errors;
const _errs38 = errors;
let valid12 = false;
const _errs39 = errors;
if(!(validate251(data10, {instancePath:instancePath+"/credentialSchema",parentData:data,parentDataProperty:"credentialSchema",rootData}))){
vErrors = vErrors === null ? validate251.errors : vErrors.concat(validate251.errors);
errors = vErrors.length;
}
var _valid4 = _errs39 === errors;
valid12 = valid12 || _valid4;
if(!valid12){
const _errs40 = errors;
if(errors === _errs40){
if(Array.isArray(data10)){
var valid13 = true;
const len3 = data10.length;
for(let i3=0; i3<len3; i3++){
const _errs42 = errors;
if(!(validate251(data10[i3], {instancePath:instancePath+"/credentialSchema/" + i3,parentData:data10,parentDataProperty:i3,rootData}))){
vErrors = vErrors === null ? validate251.errors : vErrors.concat(validate251.errors);
errors = vErrors.length;
}
var valid13 = _errs42 === errors;
if(!valid13){
break;
}
}
}
else {
const err14 = {instancePath:instancePath+"/credentialSchema",schemaPath:"#/properties/credentialSchema/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
var _valid4 = _errs40 === errors;
valid12 = valid12 || _valid4;
}
if(!valid12){
const err15 = {instancePath:instancePath+"/credentialSchema",schemaPath:"#/properties/credentialSchema/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
validate248.errors = vErrors;
return false;
}
else {
errors = _errs38;
if(vErrors !== null){
if(_errs38){
vErrors.length = _errs38;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs37 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.issuer !== undefined){
let data12 = data.issuer;
const _errs43 = errors;
const _errs44 = errors;
let valid14 = false;
const _errs45 = errors;
if(typeof data12 !== "string"){
const err16 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/IIssuerId/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
var _valid5 = _errs45 === errors;
valid14 = valid14 || _valid5;
if(!valid14){
const _errs48 = errors;
const _errs49 = errors;
if(errors === _errs49){
if(data12 && typeof data12 == "object" && !Array.isArray(data12)){
let missing1;
if((data12.id === undefined) && (missing1 = "id")){
const err17 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/IIssuer/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
else {
if(data12.id !== undefined){
if(typeof data12.id !== "string"){
const err18 = {instancePath:instancePath+"/issuer/id",schemaPath:"#/definitions/IIssuer/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
}
}
}
else {
const err19 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/IIssuer/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
}
var _valid5 = _errs48 === errors;
valid14 = valid14 || _valid5;
}
if(!valid14){
const err20 = {instancePath:instancePath+"/issuer",schemaPath:"#/properties/issuer/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
validate248.errors = vErrors;
return false;
}
else {
errors = _errs44;
if(vErrors !== null){
if(_errs44){
vErrors.length = _errs44;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.issuanceDate !== undefined){
const _errs53 = errors;
if(typeof data.issuanceDate !== "string"){
validate248.errors = [{instancePath:instancePath+"/issuanceDate",schemaPath:"#/properties/issuanceDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs53 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.credentialSubject !== undefined){
let data15 = data.credentialSubject;
const _errs55 = errors;
const _errs56 = errors;
let valid18 = false;
const _errs57 = errors;
if(errors === _errs57){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
if(data15.id !== undefined){
if(typeof data15.id !== "string"){
const err21 = {instancePath:instancePath+"/credentialSubject/id",schemaPath:"#/properties/credentialSubject/anyOf/0/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
}
}
else {
const err22 = {instancePath:instancePath+"/credentialSubject",schemaPath:"#/properties/credentialSubject/anyOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
var _valid6 = _errs57 === errors;
valid18 = valid18 || _valid6;
if(!valid18){
const _errs61 = errors;
if(errors === _errs61){
if(Array.isArray(data15)){
var valid20 = true;
const len4 = data15.length;
for(let i4=0; i4<len4; i4++){
let data17 = data15[i4];
const _errs63 = errors;
if(errors === _errs63){
if(data17 && typeof data17 == "object" && !Array.isArray(data17)){
if(data17.id !== undefined){
if(typeof data17.id !== "string"){
const err23 = {instancePath:instancePath+"/credentialSubject/" + i4+"/id",schemaPath:"#/properties/credentialSubject/anyOf/1/items/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
}
}
else {
const err24 = {instancePath:instancePath+"/credentialSubject/" + i4,schemaPath:"#/properties/credentialSubject/anyOf/1/items/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
}
var valid20 = _errs63 === errors;
if(!valid20){
break;
}
}
}
else {
const err25 = {instancePath:instancePath+"/credentialSubject",schemaPath:"#/properties/credentialSubject/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
}
var _valid6 = _errs61 === errors;
valid18 = valid18 || _valid6;
}
if(!valid18){
const err26 = {instancePath:instancePath+"/credentialSubject",schemaPath:"#/properties/credentialSubject/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
validate248.errors = vErrors;
return false;
}
else {
errors = _errs56;
if(vErrors !== null){
if(_errs56){
vErrors.length = _errs56;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs55 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.expirationDate !== undefined){
const _errs67 = errors;
if(typeof data.expirationDate !== "string"){
validate248.errors = [{instancePath:instancePath+"/expirationDate",schemaPath:"#/properties/expirationDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs67 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.id !== undefined){
const _errs69 = errors;
if(typeof data.id !== "string"){
validate248.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs69 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.credentialStatus !== undefined){
let data21 = data.credentialStatus;
const _errs71 = errors;
const _errs72 = errors;
if(errors === _errs72){
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
let missing2;
if(((data21.id === undefined) && (missing2 = "id")) || ((data21.type === undefined) && (missing2 = "type"))){
validate248.errors = [{instancePath:instancePath+"/credentialStatus",schemaPath:"#/definitions/ICredentialStatus/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
if(data21.id !== undefined){
const _errs74 = errors;
if(typeof data21.id !== "string"){
validate248.errors = [{instancePath:instancePath+"/credentialStatus/id",schemaPath:"#/definitions/ICredentialStatus/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid23 = _errs74 === errors;
}
else {
var valid23 = true;
}
if(valid23){
if(data21.type !== undefined){
const _errs76 = errors;
if(typeof data21.type !== "string"){
validate248.errors = [{instancePath:instancePath+"/credentialStatus/type",schemaPath:"#/definitions/ICredentialStatus/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid23 = _errs76 === errors;
}
else {
var valid23 = true;
}
}
}
}
else {
validate248.errors = [{instancePath:instancePath+"/credentialStatus",schemaPath:"#/definitions/ICredentialStatus/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs71 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.description !== undefined){
const _errs78 = errors;
if(typeof data.description !== "string"){
validate248.errors = [{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs78 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.name !== undefined){
const _errs80 = errors;
if(typeof data.name !== "string"){
validate248.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs80 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate248.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate248.errors = vErrors;
return errors === 0;
}


function validate247(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
const _errs0 = errors;
let valid0 = false;
const _errs1 = errors;
if(!(validate248(data, {instancePath,parentData,parentDataProperty,rootData}))){
vErrors = vErrors === null ? validate248.errors : vErrors.concat(validate248.errors);
errors = vErrors.length;
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs2 = errors;
if(typeof data !== "string"){
const err0 = {instancePath,schemaPath:"#/definitions/CompactJWT/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs2 === errors;
valid0 = valid0 || _valid0;
}
if(!valid0){
const err1 = {instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
validate247.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate247.errors = vErrors;
return errors === 0;
}

const schema505 = {"type":"object","properties":{"id":{"type":"string","description":"A UUID or some other unique ID to identify this Presentation Submission"},"definition_id":{"type":"string","description":"A UUID or some other unique ID to identify this Presentation Definition"},"descriptor_map":{"type":"array","items":{"$ref":"#/definitions/Descriptor"},"description":"List of descriptors of how the claims are being mapped to presentation definition"}},"required":["id","definition_id","descriptor_map"],"additionalProperties":false,"description":"It expresses how the inputs are presented as proofs to a Verifier."};
const schema506 = {"type":"object","properties":{"id":{"type":"string","description":"ID to identify the descriptor from Presentation Definition Input Descriptor it coresponds to."},"path":{"type":"string","description":"The path where the verifiable credential is located in the presentation submission json"},"path_nested":{"$ref":"#/definitions/Descriptor"},"format":{"type":"string","description":"The Proof or JWT algorith that the proof is in"}},"required":["id","path","format"],"additionalProperties":false,"description":"descriptor map laying out the structure of the presentation submission."};
const wrapper16 = {validate: validate257};

function validate257(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((((data.id === undefined) && (missing0 = "id")) || ((data.path === undefined) && (missing0 = "path"))) || ((data.format === undefined) && (missing0 = "format"))){
validate257.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!((((key0 === "id") || (key0 === "path")) || (key0 === "path_nested")) || (key0 === "format"))){
validate257.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate257.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.path !== undefined){
const _errs4 = errors;
if(typeof data.path !== "string"){
validate257.errors = [{instancePath:instancePath+"/path",schemaPath:"#/properties/path/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.path_nested !== undefined){
const _errs6 = errors;
if(!(wrapper16.validate(data.path_nested, {instancePath:instancePath+"/path_nested",parentData:data,parentDataProperty:"path_nested",rootData}))){
vErrors = vErrors === null ? wrapper16.validate.errors : vErrors.concat(wrapper16.validate.errors);
errors = vErrors.length;
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.format !== undefined){
const _errs7 = errors;
if(typeof data.format !== "string"){
validate257.errors = [{instancePath:instancePath+"/format",schemaPath:"#/properties/format/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
else {
validate257.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate257.errors = vErrors;
return errors === 0;
}


function validate256(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((((data.id === undefined) && (missing0 = "id")) || ((data.definition_id === undefined) && (missing0 = "definition_id"))) || ((data.descriptor_map === undefined) && (missing0 = "descriptor_map"))){
validate256.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((key0 === "id") || (key0 === "definition_id")) || (key0 === "descriptor_map"))){
validate256.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.id !== undefined){
const _errs2 = errors;
if(typeof data.id !== "string"){
validate256.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.definition_id !== undefined){
const _errs4 = errors;
if(typeof data.definition_id !== "string"){
validate256.errors = [{instancePath:instancePath+"/definition_id",schemaPath:"#/properties/definition_id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.descriptor_map !== undefined){
let data2 = data.descriptor_map;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data2)){
var valid1 = true;
const len0 = data2.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(!(validate257(data2[i0], {instancePath:instancePath+"/descriptor_map/" + i0,parentData:data2,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate257.errors : vErrors.concat(validate257.errors);
errors = vErrors.length;
}
var valid1 = _errs8 === errors;
if(!valid1){
break;
}
}
}
else {
validate256.errors = [{instancePath:instancePath+"/descriptor_map",schemaPath:"#/properties/descriptor_map/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs6 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
else {
validate256.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate256.errors = vErrors;
return errors === 0;
}


function validate243(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if(((data["@context"] === undefined) && (missing0 = "@context")) || ((data.proof === undefined) && (missing0 = "proof"))){
validate243.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
if(data.proof !== undefined){
let data0 = data.proof;
const _errs1 = errors;
const _errs2 = errors;
let valid1 = false;
const _errs3 = errors;
if(!(validate244(data0, {instancePath:instancePath+"/proof",parentData:data,parentDataProperty:"proof",rootData}))){
vErrors = vErrors === null ? validate244.errors : vErrors.concat(validate244.errors);
errors = vErrors.length;
}
var _valid0 = _errs3 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
const _errs4 = errors;
if(errors === _errs4){
if(Array.isArray(data0)){
var valid2 = true;
const len0 = data0.length;
for(let i0=0; i0<len0; i0++){
const _errs6 = errors;
if(!(validate244(data0[i0], {instancePath:instancePath+"/proof/" + i0,parentData:data0,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate244.errors : vErrors.concat(validate244.errors);
errors = vErrors.length;
}
var valid2 = _errs6 === errors;
if(!valid2){
break;
}
}
}
else {
const err0 = {instancePath:instancePath+"/proof",schemaPath:"#/properties/proof/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
}
var _valid0 = _errs4 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
const err1 = {instancePath:instancePath+"/proof",schemaPath:"#/properties/proof/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
validate243.errors = vErrors;
return false;
}
else {
errors = _errs2;
if(vErrors !== null){
if(_errs2){
vErrors.length = _errs2;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.id !== undefined){
const _errs7 = errors;
if(typeof data.id !== "string"){
validate243.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data["@context"] !== undefined){
let data3 = data["@context"];
const _errs9 = errors;
const _errs10 = errors;
let valid3 = false;
const _errs11 = errors;
const _errs13 = errors;
let valid5 = false;
const _errs14 = errors;
if(errors === _errs14){
if(data3 && typeof data3 == "object" && !Array.isArray(data3)){
if(data3.name !== undefined){
const _errs16 = errors;
if(typeof data3.name !== "string"){
const err2 = {instancePath:instancePath+"/@context/name",schemaPath:"#/definitions/ICredentialContextType/anyOf/0/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var valid6 = _errs16 === errors;
}
else {
var valid6 = true;
}
if(valid6){
if(data3.did !== undefined){
const _errs18 = errors;
if(typeof data3.did !== "string"){
const err3 = {instancePath:instancePath+"/@context/did",schemaPath:"#/definitions/ICredentialContextType/anyOf/0/properties/did/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
var valid6 = _errs18 === errors;
}
else {
var valid6 = true;
}
}
}
else {
const err4 = {instancePath:instancePath+"/@context",schemaPath:"#/definitions/ICredentialContextType/anyOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
}
var _valid2 = _errs14 === errors;
valid5 = valid5 || _valid2;
if(!valid5){
const _errs20 = errors;
if(typeof data3 !== "string"){
const err5 = {instancePath:instancePath+"/@context",schemaPath:"#/definitions/ICredentialContextType/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var _valid2 = _errs20 === errors;
valid5 = valid5 || _valid2;
}
if(!valid5){
const err6 = {instancePath:instancePath+"/@context",schemaPath:"#/definitions/ICredentialContextType/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
else {
errors = _errs13;
if(vErrors !== null){
if(_errs13){
vErrors.length = _errs13;
}
else {
vErrors = null;
}
}
}
var _valid1 = _errs11 === errors;
valid3 = valid3 || _valid1;
if(!valid3){
const _errs22 = errors;
if(errors === _errs22){
if(Array.isArray(data3)){
var valid7 = true;
const len1 = data3.length;
for(let i1=0; i1<len1; i1++){
let data6 = data3[i1];
const _errs24 = errors;
const _errs26 = errors;
let valid9 = false;
const _errs27 = errors;
if(errors === _errs27){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
if(data6.name !== undefined){
const _errs29 = errors;
if(typeof data6.name !== "string"){
const err7 = {instancePath:instancePath+"/@context/" + i1+"/name",schemaPath:"#/definitions/ICredentialContextType/anyOf/0/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var valid10 = _errs29 === errors;
}
else {
var valid10 = true;
}
if(valid10){
if(data6.did !== undefined){
const _errs31 = errors;
if(typeof data6.did !== "string"){
const err8 = {instancePath:instancePath+"/@context/" + i1+"/did",schemaPath:"#/definitions/ICredentialContextType/anyOf/0/properties/did/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
var valid10 = _errs31 === errors;
}
else {
var valid10 = true;
}
}
}
else {
const err9 = {instancePath:instancePath+"/@context/" + i1,schemaPath:"#/definitions/ICredentialContextType/anyOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
}
var _valid3 = _errs27 === errors;
valid9 = valid9 || _valid3;
if(!valid9){
const _errs33 = errors;
if(typeof data6 !== "string"){
const err10 = {instancePath:instancePath+"/@context/" + i1,schemaPath:"#/definitions/ICredentialContextType/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
var _valid3 = _errs33 === errors;
valid9 = valid9 || _valid3;
}
if(!valid9){
const err11 = {instancePath:instancePath+"/@context/" + i1,schemaPath:"#/definitions/ICredentialContextType/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
else {
errors = _errs26;
if(vErrors !== null){
if(_errs26){
vErrors.length = _errs26;
}
else {
vErrors = null;
}
}
}
var valid7 = _errs24 === errors;
if(!valid7){
break;
}
}
}
else {
const err12 = {instancePath:instancePath+"/@context",schemaPath:"#/properties/%40context/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
}
var _valid1 = _errs22 === errors;
valid3 = valid3 || _valid1;
}
if(!valid3){
const err13 = {instancePath:instancePath+"/@context",schemaPath:"#/properties/%40context/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
validate243.errors = vErrors;
return false;
}
else {
errors = _errs10;
if(vErrors !== null){
if(_errs10){
vErrors.length = _errs10;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs9 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.type !== undefined){
let data9 = data.type;
const _errs35 = errors;
const _errs36 = errors;
let valid11 = false;
const _errs37 = errors;
if(typeof data9 !== "string"){
const err14 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/anyOf/0/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
var _valid4 = _errs37 === errors;
valid11 = valid11 || _valid4;
if(!valid11){
const _errs39 = errors;
if(errors === _errs39){
if(Array.isArray(data9)){
var valid12 = true;
const len2 = data9.length;
for(let i2=0; i2<len2; i2++){
const _errs41 = errors;
if(typeof data9[i2] !== "string"){
const err15 = {instancePath:instancePath+"/type/" + i2,schemaPath:"#/properties/type/anyOf/1/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
var valid12 = _errs41 === errors;
if(!valid12){
break;
}
}
}
else {
const err16 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/anyOf/1/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
var _valid4 = _errs39 === errors;
valid11 = valid11 || _valid4;
}
if(!valid11){
const err17 = {instancePath:instancePath+"/type",schemaPath:"#/properties/type/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
validate243.errors = vErrors;
return false;
}
else {
errors = _errs36;
if(vErrors !== null){
if(_errs36){
vErrors.length = _errs36;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs35 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.verifiableCredential !== undefined){
let data11 = data.verifiableCredential;
const _errs43 = errors;
if(errors === _errs43){
if(Array.isArray(data11)){
var valid13 = true;
const len3 = data11.length;
for(let i3=0; i3<len3; i3++){
const _errs45 = errors;
if(!(validate247(data11[i3], {instancePath:instancePath+"/verifiableCredential/" + i3,parentData:data11,parentDataProperty:i3,rootData}))){
vErrors = vErrors === null ? validate247.errors : vErrors.concat(validate247.errors);
errors = vErrors.length;
}
var valid13 = _errs45 === errors;
if(!valid13){
break;
}
}
}
else {
validate243.errors = [{instancePath:instancePath+"/verifiableCredential",schemaPath:"#/properties/verifiableCredential/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.presentation_submission !== undefined){
const _errs46 = errors;
if(!(validate256(data.presentation_submission, {instancePath:instancePath+"/presentation_submission",parentData:data,parentDataProperty:"presentation_submission",rootData}))){
vErrors = vErrors === null ? validate256.errors : vErrors.concat(validate256.errors);
errors = vErrors.length;
}
var valid0 = _errs46 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.holder !== undefined){
const _errs47 = errors;
if(typeof data.holder !== "string"){
validate243.errors = [{instancePath:instancePath+"/holder",schemaPath:"#/properties/holder/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs47 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.verifier !== undefined){
const _errs49 = errors;
if(typeof data.verifier !== "string"){
validate243.errors = [{instancePath:instancePath+"/verifier",schemaPath:"#/properties/verifier/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs49 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
else {
validate243.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate243.errors = vErrors;
return errors === 0;
}


function validate242(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
const _errs0 = errors;
let valid0 = false;
const _errs1 = errors;
if(!(validate243(data, {instancePath,parentData,parentDataProperty,rootData}))){
vErrors = vErrors === null ? validate243.errors : vErrors.concat(validate243.errors);
errors = vErrors.length;
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs2 = errors;
if(typeof data !== "string"){
const err0 = {instancePath,schemaPath:"#/definitions/CompactJWT/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs2 === errors;
valid0 = valid0 || _valid0;
}
if(!valid0){
const err1 = {instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
validate242.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate242.errors = vErrors;
return errors === 0;
}


function validate241(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.verifiablePresentations === undefined) && (missing0 = "verifiablePresentations")){
validate241.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(((((key0 === "verifiablePresentations") || (key0 === "vpTokenLocation")) || (key0 === "presentationSubmission")) || (key0 === "restrictToFormats")) || (key0 === "restrictToDIDMethods"))){
validate241.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.verifiablePresentations !== undefined){
let data0 = data.verifiablePresentations;
const _errs2 = errors;
if(errors === _errs2){
if(Array.isArray(data0)){
var valid1 = true;
const len0 = data0.length;
for(let i0=0; i0<len0; i0++){
let data1 = data0[i0];
const _errs4 = errors;
const _errs5 = errors;
let valid2 = false;
const _errs6 = errors;
if(!(validate242(data1, {instancePath:instancePath+"/verifiablePresentations/" + i0,parentData:data0,parentDataProperty:i0,rootData}))){
vErrors = vErrors === null ? validate242.errors : vErrors.concat(validate242.errors);
errors = vErrors.length;
}
var _valid0 = _errs6 === errors;
valid2 = valid2 || _valid0;
if(!valid2){
const _errs7 = errors;
if(typeof data1 !== "string"){
const err0 = {instancePath:instancePath+"/verifiablePresentations/" + i0,schemaPath:"#/definitions/CompactSdJwtVc/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
var _valid0 = _errs7 === errors;
valid2 = valid2 || _valid0;
if(!valid2){
const _errs10 = errors;
if(typeof data1 !== "string"){
const err1 = {instancePath:instancePath+"/verifiablePresentations/" + i0,schemaPath:"#/definitions/MdocOid4vpMdocVpToken/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid0 = _errs10 === errors;
valid2 = valid2 || _valid0;
}
}
if(!valid2){
const err2 = {instancePath:instancePath+"/verifiablePresentations/" + i0,schemaPath:"#/properties/verifiablePresentations/items/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
validate241.errors = vErrors;
return false;
}
else {
errors = _errs5;
if(vErrors !== null){
if(_errs5){
vErrors.length = _errs5;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs4 === errors;
if(!valid1){
break;
}
}
}
else {
validate241.errors = [{instancePath:instancePath+"/verifiablePresentations",schemaPath:"#/properties/verifiablePresentations/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.vpTokenLocation !== undefined){
let data2 = data.vpTokenLocation;
const _errs13 = errors;
if(typeof data2 !== "string"){
validate241.errors = [{instancePath:instancePath+"/vpTokenLocation",schemaPath:"#/definitions/VPTokenLocation/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!(((data2 === "authorization_response") || (data2 === "id_token")) || (data2 === "token_response"))){
validate241.errors = [{instancePath:instancePath+"/vpTokenLocation",schemaPath:"#/definitions/VPTokenLocation/enum",keyword:"enum",params:{allowedValues: schema510.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.presentationSubmission !== undefined){
const _errs16 = errors;
if(!(validate256(data.presentationSubmission, {instancePath:instancePath+"/presentationSubmission",parentData:data,parentDataProperty:"presentationSubmission",rootData}))){
vErrors = vErrors === null ? validate256.errors : vErrors.concat(validate256.errors);
errors = vErrors.length;
}
var valid0 = _errs16 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.restrictToFormats !== undefined){
const _errs17 = errors;
if(!(validate225(data.restrictToFormats, {instancePath:instancePath+"/restrictToFormats",parentData:data,parentDataProperty:"restrictToFormats",rootData}))){
vErrors = vErrors === null ? validate225.errors : vErrors.concat(validate225.errors);
errors = vErrors.length;
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.restrictToDIDMethods !== undefined){
let data5 = data.restrictToDIDMethods;
const _errs18 = errors;
if(errors === _errs18){
if(Array.isArray(data5)){
var valid6 = true;
const len1 = data5.length;
for(let i1=0; i1<len1; i1++){
const _errs20 = errors;
if(typeof data5[i1] !== "string"){
validate241.errors = [{instancePath:instancePath+"/restrictToDIDMethods/" + i1,schemaPath:"#/properties/restrictToDIDMethods/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs20 === errors;
if(!valid6){
break;
}
}
}
else {
validate241.errors = [{instancePath:instancePath+"/restrictToDIDMethods",schemaPath:"#/properties/restrictToDIDMethods/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
else {
validate241.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate241.errors = vErrors;
return errors === 0;
}


function validate219(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.createJwtCallback === undefined) && (missing0 = "createJwtCallback")){
validate219.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema345.properties, key0))){
validate219.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.responseURI !== undefined){
const _errs2 = errors;
if(typeof data.responseURI !== "string"){
validate219.errors = [{instancePath:instancePath+"/responseURI",schemaPath:"#/properties/responseURI/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.responseURIType !== undefined){
let data1 = data.responseURIType;
const _errs4 = errors;
if(typeof data1 !== "string"){
validate219.errors = [{instancePath:instancePath+"/responseURIType",schemaPath:"#/definitions/ResponseURIType/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data1 === "response_uri") || (data1 === "redirect_uri"))){
validate219.errors = [{instancePath:instancePath+"/responseURIType",schemaPath:"#/definitions/ResponseURIType/enum",keyword:"enum",params:{allowedValues: schema346.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs4 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.registration !== undefined){
const _errs7 = errors;
if(!(validate220(data.registration, {instancePath:instancePath+"/registration",parentData:data,parentDataProperty:"registration",rootData}))){
vErrors = vErrors === null ? validate220.errors : vErrors.concat(validate220.errors);
errors = vErrors.length;
}
var valid0 = _errs7 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.version !== undefined){
let data3 = data.version;
const _errs8 = errors;
if(!(typeof data3 == "number")){
validate219.errors = [{instancePath:instancePath+"/version",schemaPath:"#/definitions/SupportedVersion/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
if(!(((((data3 === 70) || (data3 === 110)) || (data3 === 180)) || (data3 === 200)) || (data3 === 71))){
validate219.errors = [{instancePath:instancePath+"/version",schemaPath:"#/definitions/SupportedVersion/enum",keyword:"enum",params:{allowedValues: schema474.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs8 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.audience !== undefined){
const _errs11 = errors;
if(typeof data.audience !== "string"){
validate219.errors = [{instancePath:instancePath+"/audience",schemaPath:"#/properties/audience/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs11 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.createJwtCallback !== undefined){
let data5 = data.createJwtCallback;
const _errs13 = errors;
if(data5 && typeof data5 == "object" && !Array.isArray(data5)){
if(data5.isFunction !== undefined){
let data6 = data5.isFunction;
if(typeof data6 !== "boolean"){
validate219.errors = [{instancePath:instancePath+"/createJwtCallback/isFunction",schemaPath:"#/definitions/CreateJwtCallback/properties/isFunction/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
if(true !== data6){
validate219.errors = [{instancePath:instancePath+"/createJwtCallback/isFunction",schemaPath:"#/definitions/CreateJwtCallback/properties/isFunction/const",keyword:"const",params:{allowedValue: true},message:"must be equal to constant"}];
return false;
}
}
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwtIssuer !== undefined){
const _errs17 = errors;
if(!(validate233(data.jwtIssuer, {instancePath:instancePath+"/jwtIssuer",parentData:data,parentDataProperty:"jwtIssuer",rootData}))){
vErrors = vErrors === null ? validate233.errors : vErrors.concat(validate233.errors);
errors = vErrors.length;
}
var valid0 = _errs17 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.responseMode !== undefined){
let data8 = data.responseMode;
const _errs18 = errors;
if(typeof data8 !== "string"){
validate219.errors = [{instancePath:instancePath+"/responseMode",schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((((((((data8 === "fragment") || (data8 === "form_post")) || (data8 === "post")) || (data8 === "direct_post")) || (data8 === "query")) || (data8 === "direct_post.jwt")) || (data8 === "query.jwt")) || (data8 === "fragment.jwt"))){
validate219.errors = [{instancePath:instancePath+"/responseMode",schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema366.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.responseType !== undefined){
let data9 = data.responseType;
const _errs21 = errors;
if(errors === _errs21){
if(Array.isArray(data9)){
if(data9.length > 1){
validate219.errors = [{instancePath:instancePath+"/responseType",schemaPath:"#/properties/responseType/maxItems",keyword:"maxItems",params:{limit: 1},message:"must NOT have more than 1 items"}];
return false;
}
else {
if(data9.length < 1){
validate219.errors = [{instancePath:instancePath+"/responseType",schemaPath:"#/properties/responseType/minItems",keyword:"minItems",params:{limit: 1},message:"must NOT have fewer than 1 items"}];
return false;
}
else {
var valid6 = true;
const len0 = data9.length;
for(let i0=0; i0<len0; i0++){
let data10 = data9[i0];
const _errs23 = errors;
if(typeof data10 !== "string"){
validate219.errors = [{instancePath:instancePath+"/responseType/" + i0,schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
if(!((data10 === "id_token") || (data10 === "vp_token"))){
validate219.errors = [{instancePath:instancePath+"/responseType/" + i0,schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema356.enum},message:"must be equal to one of the allowed values"}];
return false;
}
var valid6 = _errs23 === errors;
if(!valid6){
break;
}
}
}
}
}
else {
validate219.errors = [{instancePath:instancePath+"/responseType",schemaPath:"#/properties/responseType/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs21 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.expiresIn !== undefined){
const _errs26 = errors;
if(!(typeof data.expiresIn == "number")){
validate219.errors = [{instancePath:instancePath+"/expiresIn",schemaPath:"#/properties/expiresIn/type",keyword:"type",params:{type: "number"},message:"must be number"}];
return false;
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.accessToken !== undefined){
const _errs28 = errors;
if(typeof data.accessToken !== "string"){
validate219.errors = [{instancePath:instancePath+"/accessToken",schemaPath:"#/properties/accessToken/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs28 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.tokenType !== undefined){
const _errs30 = errors;
if(typeof data.tokenType !== "string"){
validate219.errors = [{instancePath:instancePath+"/tokenType",schemaPath:"#/properties/tokenType/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs30 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.refreshToken !== undefined){
const _errs32 = errors;
if(typeof data.refreshToken !== "string"){
validate219.errors = [{instancePath:instancePath+"/refreshToken",schemaPath:"#/properties/refreshToken/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid0 = _errs32 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.presentationExchange !== undefined){
const _errs34 = errors;
if(!(validate241(data.presentationExchange, {instancePath:instancePath+"/presentationExchange",parentData:data,parentDataProperty:"presentationExchange",rootData}))){
vErrors = vErrors === null ? validate241.errors : vErrors.concat(validate241.errors);
errors = vErrors.length;
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate219.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate219.errors = vErrors;
return errors === 0;
}


function validate218(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="AuthorizationResponseOptsSchema" */;
let vErrors = null;
let errors = 0;
if(!(validate219(data, {instancePath,parentData,parentDataProperty,rootData}))){
vErrors = vErrors === null ? validate219.errors : vErrors.concat(validate219.errors);
errors = vErrors.length;
}
validate218.errors = vErrors;
return errors === 0;
}

exports.RPRegistrationMetadataPayloadSchema = validate266;
const schema511 = {"$id":"RPRegistrationMetadataPayloadSchema","$schema":"http://json-schema.org/draft-07/schema#","$ref":"#/definitions/RPRegistrationMetadataPayload","definitions":{"RPRegistrationMetadataPayload":{"type":"object","properties":{"client_id":{"anyOf":[{"type":"string"},{}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"vp_formats":{"anyOf":[{"$ref":"#/definitions/Format"},{}]},"client_name":{"anyOf":[{"type":"string"},{}]},"logo_uri":{"anyOf":[{"type":"string"},{}]},"client_purpose":{"anyOf":[{},{"type":"string"}]}}},"SigningAlgo":{"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]},"ResponseType":{"type":"string","enum":["id_token","vp_token"]},"Scope":{"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]},"SubjectType":{"type":"string","enum":["public","pairwise"]},"Format":{"type":"object","properties":{"jwt":{"$ref":"#/definitions/JwtObject"},"jwt_vc":{"$ref":"#/definitions/JwtObject"},"jwt_vc_json":{"$ref":"#/definitions/JwtObject"},"jwt_vp":{"$ref":"#/definitions/JwtObject"},"jwt_vp_json":{"$ref":"#/definitions/JwtObject"},"ldp":{"$ref":"#/definitions/LdpObject"},"ldp_vc":{"$ref":"#/definitions/LdpObject"},"ldp_vp":{"$ref":"#/definitions/LdpObject"},"di":{"$ref":"#/definitions/DiObject"},"di_vc":{"$ref":"#/definitions/DiObject"},"di_vp":{"$ref":"#/definitions/DiObject"},"vc+sd-jwt":{"$ref":"#/definitions/SdJwtObject"},"mso_mdoc":{"$ref":"#/definitions/MsoMdocObject"}},"additionalProperties":false},"JwtObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false},"LdpObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}}},"required":["proof_type"],"additionalProperties":false},"DiObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}},"cryptosuite":{"type":"array","items":{"type":"string"}}},"required":["proof_type","cryptosuite"],"additionalProperties":false},"SdJwtObject":{"type":"object","properties":{"sd-jwt_alg_values":{"type":"array","items":{"type":"string"}},"kb-jwt_alg_values":{"type":"array","items":{"type":"string"}}},"additionalProperties":false},"MsoMdocObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false}}};
const schema512 = {"type":"object","properties":{"client_id":{"anyOf":[{"type":"string"},{}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"vp_formats":{"anyOf":[{"$ref":"#/definitions/Format"},{}]},"client_name":{"anyOf":[{"type":"string"},{}]},"logo_uri":{"anyOf":[{"type":"string"},{}]},"client_purpose":{"anyOf":[{},{"type":"string"}]}}};
const schema513 = {"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]};
const schema517 = {"type":"string","enum":["id_token","vp_token"]};
const schema519 = {"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]};
const schema521 = {"type":"string","enum":["public","pairwise"]};

function validate267(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.client_id !== undefined){
const _errs1 = errors;
var valid0 = _errs1 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.id_token_signing_alg_values_supported !== undefined){
let data1 = data.id_token_signing_alg_values_supported;
const _errs3 = errors;
const _errs4 = errors;
let valid1 = false;
const _errs5 = errors;
if(errors === _errs5){
if(Array.isArray(data1)){
var valid2 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
let data2 = data1[i0];
const _errs7 = errors;
if(typeof data2 !== "string"){
const err0 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i0,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(!(((((data2 === "EdDSA") || (data2 === "RS256")) || (data2 === "PS256")) || (data2 === "ES256")) || (data2 === "ES256K"))){
const err1 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i0,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema513.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var valid2 = _errs7 === errors;
if(!valid2){
break;
}
}
}
else {
const err2 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/properties/id_token_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
}
var _valid0 = _errs5 === errors;
valid1 = valid1 || _valid0;
if(!valid1){
const _errs10 = errors;
if(typeof data1 !== "string"){
const err3 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
if(!(((((data1 === "EdDSA") || (data1 === "RS256")) || (data1 === "PS256")) || (data1 === "ES256")) || (data1 === "ES256K"))){
const err4 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema513.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
var _valid0 = _errs10 === errors;
valid1 = valid1 || _valid0;
}
if(!valid1){
const err5 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/properties/id_token_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
validate267.errors = vErrors;
return false;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs3 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.request_object_signing_alg_values_supported !== undefined){
let data3 = data.request_object_signing_alg_values_supported;
const _errs13 = errors;
const _errs14 = errors;
let valid5 = false;
const _errs15 = errors;
if(errors === _errs15){
if(Array.isArray(data3)){
var valid6 = true;
const len1 = data3.length;
for(let i1=0; i1<len1; i1++){
let data4 = data3[i1];
const _errs17 = errors;
if(typeof data4 !== "string"){
const err6 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i1,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
if(!(((((data4 === "EdDSA") || (data4 === "RS256")) || (data4 === "PS256")) || (data4 === "ES256")) || (data4 === "ES256K"))){
const err7 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i1,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema513.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
var valid6 = _errs17 === errors;
if(!valid6){
break;
}
}
}
else {
const err8 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/properties/request_object_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
}
var _valid1 = _errs15 === errors;
valid5 = valid5 || _valid1;
if(!valid5){
const _errs20 = errors;
if(typeof data3 !== "string"){
const err9 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
if(!(((((data3 === "EdDSA") || (data3 === "RS256")) || (data3 === "PS256")) || (data3 === "ES256")) || (data3 === "ES256K"))){
const err10 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema513.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
var _valid1 = _errs20 === errors;
valid5 = valid5 || _valid1;
}
if(!valid5){
const err11 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/properties/request_object_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
validate267.errors = vErrors;
return false;
}
else {
errors = _errs14;
if(vErrors !== null){
if(_errs14){
vErrors.length = _errs14;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs13 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.response_types_supported !== undefined){
let data5 = data.response_types_supported;
const _errs23 = errors;
const _errs24 = errors;
let valid9 = false;
const _errs25 = errors;
if(errors === _errs25){
if(Array.isArray(data5)){
var valid10 = true;
const len2 = data5.length;
for(let i2=0; i2<len2; i2++){
let data6 = data5[i2];
const _errs27 = errors;
if(typeof data6 !== "string"){
const err12 = {instancePath:instancePath+"/response_types_supported/" + i2,schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
if(!((data6 === "id_token") || (data6 === "vp_token"))){
const err13 = {instancePath:instancePath+"/response_types_supported/" + i2,schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema517.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
var valid10 = _errs27 === errors;
if(!valid10){
break;
}
}
}
else {
const err14 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/properties/response_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
}
var _valid2 = _errs25 === errors;
valid9 = valid9 || _valid2;
if(!valid9){
const _errs30 = errors;
if(typeof data5 !== "string"){
const err15 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
if(!((data5 === "id_token") || (data5 === "vp_token"))){
const err16 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema517.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
var _valid2 = _errs30 === errors;
valid9 = valid9 || _valid2;
}
if(!valid9){
const err17 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/properties/response_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
validate267.errors = vErrors;
return false;
}
else {
errors = _errs24;
if(vErrors !== null){
if(_errs24){
vErrors.length = _errs24;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs23 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.scopes_supported !== undefined){
let data7 = data.scopes_supported;
const _errs33 = errors;
const _errs34 = errors;
let valid13 = false;
const _errs35 = errors;
if(errors === _errs35){
if(Array.isArray(data7)){
var valid14 = true;
const len3 = data7.length;
for(let i3=0; i3<len3; i3++){
let data8 = data7[i3];
const _errs37 = errors;
if(typeof data8 !== "string"){
const err18 = {instancePath:instancePath+"/scopes_supported/" + i3,schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
if(!((((((data8 === "openid") || (data8 === "openid did_authn")) || (data8 === "profile")) || (data8 === "email")) || (data8 === "address")) || (data8 === "phone"))){
const err19 = {instancePath:instancePath+"/scopes_supported/" + i3,schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema519.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
var valid14 = _errs37 === errors;
if(!valid14){
break;
}
}
}
else {
const err20 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/properties/scopes_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
}
var _valid3 = _errs35 === errors;
valid13 = valid13 || _valid3;
if(!valid13){
const _errs40 = errors;
if(typeof data7 !== "string"){
const err21 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
if(!((((((data7 === "openid") || (data7 === "openid did_authn")) || (data7 === "profile")) || (data7 === "email")) || (data7 === "address")) || (data7 === "phone"))){
const err22 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema519.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
var _valid3 = _errs40 === errors;
valid13 = valid13 || _valid3;
}
if(!valid13){
const err23 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/properties/scopes_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
validate267.errors = vErrors;
return false;
}
else {
errors = _errs34;
if(vErrors !== null){
if(_errs34){
vErrors.length = _errs34;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs33 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_types_supported !== undefined){
let data9 = data.subject_types_supported;
const _errs43 = errors;
const _errs44 = errors;
let valid17 = false;
const _errs45 = errors;
if(errors === _errs45){
if(Array.isArray(data9)){
var valid18 = true;
const len4 = data9.length;
for(let i4=0; i4<len4; i4++){
let data10 = data9[i4];
const _errs47 = errors;
if(typeof data10 !== "string"){
const err24 = {instancePath:instancePath+"/subject_types_supported/" + i4,schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
if(!((data10 === "public") || (data10 === "pairwise"))){
const err25 = {instancePath:instancePath+"/subject_types_supported/" + i4,schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema521.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
var valid18 = _errs47 === errors;
if(!valid18){
break;
}
}
}
else {
const err26 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/properties/subject_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
}
var _valid4 = _errs45 === errors;
valid17 = valid17 || _valid4;
if(!valid17){
const _errs50 = errors;
if(typeof data9 !== "string"){
const err27 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
if(!((data9 === "public") || (data9 === "pairwise"))){
const err28 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema521.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
var _valid4 = _errs50 === errors;
valid17 = valid17 || _valid4;
}
if(!valid17){
const err29 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/properties/subject_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
validate267.errors = vErrors;
return false;
}
else {
errors = _errs44;
if(vErrors !== null){
if(_errs44){
vErrors.length = _errs44;
}
else {
vErrors = null;
}
}
}
var valid0 = _errs43 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.subject_syntax_types_supported !== undefined){
let data11 = data.subject_syntax_types_supported;
const _errs53 = errors;
if(errors === _errs53){
if(Array.isArray(data11)){
var valid21 = true;
const len5 = data11.length;
for(let i5=0; i5<len5; i5++){
const _errs55 = errors;
if(typeof data11[i5] !== "string"){
validate267.errors = [{instancePath:instancePath+"/subject_syntax_types_supported/" + i5,schemaPath:"#/properties/subject_syntax_types_supported/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid21 = _errs55 === errors;
if(!valid21){
break;
}
}
}
else {
validate267.errors = [{instancePath:instancePath+"/subject_syntax_types_supported",schemaPath:"#/properties/subject_syntax_types_supported/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid0 = _errs53 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.vp_formats !== undefined){
const _errs57 = errors;
var valid0 = _errs57 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_name !== undefined){
const _errs59 = errors;
var valid0 = _errs59 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.logo_uri !== undefined){
const _errs61 = errors;
var valid0 = _errs61 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.client_purpose !== undefined){
const _errs63 = errors;
var valid0 = _errs63 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate267.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate267.errors = vErrors;
return errors === 0;
}


function validate266(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="RPRegistrationMetadataPayloadSchema" */;
let vErrors = null;
let errors = 0;
if(!(validate267(data, {instancePath,parentData,parentDataProperty,rootData}))){
vErrors = vErrors === null ? validate267.errors : vErrors.concat(validate267.errors);
errors = vErrors.length;
}
validate266.errors = vErrors;
return errors === 0;
}

exports.DiscoveryMetadataPayloadSchema = validate269;
const schema523 = {"$id":"DiscoveryMetadataPayloadSchema","$schema":"http://json-schema.org/draft-07/schema#","$ref":"#/definitions/DiscoveryMetadataPayload","definitions":{"DiscoveryMetadataPayload":{"anyOf":[{"type":"object","properties":{"authorization_endpoint":{"anyOf":[{"$ref":"#/definitions/Schema"},{"type":"string"}]},"issuer":{"anyOf":[{"$ref":"#/definitions/ResponseIss"},{"type":"string"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"token_endpoint":{"type":"string"},"userinfo_endpoint":{"type":"string"},"jwks_uri":{"type":"string"},"registration_endpoint":{"type":"string"},"response_modes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseMode"}},{"$ref":"#/definitions/ResponseMode"}]},"grant_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/GrantType"}},{"$ref":"#/definitions/GrantType"}]},"acr_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AuthenticationContextReferences"}},{"$ref":"#/definitions/AuthenticationContextReferences"}]},"id_token_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"id_token_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for the ID Token to encode the Claims in a JWT [JWT]."},"userinfo_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfo_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfo_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT]."},"request_object_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for Request Objects. These algorithms are used both when the Request Object is passed by value and when it is passed by reference."},"token_endpoint_auth_methods_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TokenEndpointAuthMethod"}},{"$ref":"#/definitions/TokenEndpointAuthMethod"}]},"token_endpoint_auth_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"display_values_supported":{"anyOf":[{"type":"array","items":{}},{}],"description":"OPTIONAL. JSON array containing a list of the display parameter values that the OpenID Provider supports. These values are described in Section 3.1.2.1 of OpenID Connect Core 1.0 [OpenID.Core]."},"claim_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ClaimType"}},{"$ref":"#/definitions/ClaimType"}],"description":"OPTIONAL. JSON array containing a list of the Claim Types that the OpenID Provider supports. These Claim Types are described in Section 5.6 of OpenID Connect Core 1.0 [OpenID.Core]. Values defined by this specification are normal, aggregated, and distributed. If omitted, the implementation supports only normal Claims."},"claims_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"RECOMMENDED. JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list."},"service_documentation":{"type":"string"},"claims_locales_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"ui_locales_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claims_parameter_supported":{"type":"boolean"},"request_parameter_supported":{"type":"boolean"},"request_uri_parameter_supported":{"type":"boolean"},"require_request_uri_registration":{"type":"boolean"},"op_policy_uri":{"type":"string"},"op_tos_uri":{"type":"string"},"redirect_uris":{"type":"array","items":{"type":"string"}},"token_endpoint_auth_method":{"type":"string"},"grant_types":{"type":"string"},"response_types":{"type":"string"},"client_name":{"type":"string"},"client_uri":{"type":"string"},"logo_uri":{"type":"string"},"scope":{"type":"string"},"contacts":{"type":"array","items":{"type":"string"}},"tos_uri":{"type":"string"},"policy_uri":{"type":"string"},"jwks":{"$ref":"#/definitions/JWKS"},"software_id":{"type":"string"},"software_version":{"type":"string"},"client_id":{"type":"string"},"application_type":{"type":"string"},"vp_formats":{"$ref":"#/definitions/Format"}}},{"type":"object","properties":{"authorization_endpoint":{"anyOf":[{"$ref":"#/definitions/Schema"},{"type":"string"}]},"issuer":{"anyOf":[{"$ref":"#/definitions/ResponseIss"},{"type":"string"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"token_endpoint":{"type":"string"},"userinfo_endpoint":{"type":"string"},"jwks_uri":{"type":"string"},"registration_endpoint":{"type":"string"},"response_modes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseMode"}},{"$ref":"#/definitions/ResponseMode"}]},"grant_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/GrantType"}},{"$ref":"#/definitions/GrantType"}]},"acr_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AuthenticationContextReferences"}},{"$ref":"#/definitions/AuthenticationContextReferences"}]},"id_token_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"id_token_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for the ID Token to encode the Claims in a JWT [JWT]."},"userinfo_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfo_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfo_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT]."},"request_object_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for Request Objects. These algorithms are used both when the Request Object is passed by value and when it is passed by reference."},"token_endpoint_auth_methods_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TokenEndpointAuthMethod"}},{"$ref":"#/definitions/TokenEndpointAuthMethod"}]},"token_endpoint_auth_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"display_values_supported":{"anyOf":[{"type":"array","items":{}},{}],"description":"OPTIONAL. JSON array containing a list of the display parameter values that the OpenID Provider supports. These values are described in Section 3.1.2.1 of OpenID Connect Core 1.0 [OpenID.Core]."},"claim_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ClaimType"}},{"$ref":"#/definitions/ClaimType"}],"description":"OPTIONAL. JSON array containing a list of the Claim Types that the OpenID Provider supports. These Claim Types are described in Section 5.6 of OpenID Connect Core 1.0 [OpenID.Core]. Values defined by this specification are normal, aggregated, and distributed. If omitted, the implementation supports only normal Claims."},"claims_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"RECOMMENDED. JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list."},"service_documentation":{"type":"string"},"claims_locales_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"ui_locales_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claims_parameter_supported":{"type":"boolean"},"request_parameter_supported":{"type":"boolean"},"request_uri_parameter_supported":{"type":"boolean"},"require_request_uri_registration":{"type":"boolean"},"op_policy_uri":{"type":"string"},"op_tos_uri":{"type":"string"},"redirect_uris":{"type":"array","items":{"type":"string"}},"token_endpoint_auth_method":{"type":"string"},"grant_types":{"type":"string"},"response_types":{"type":"string"},"client_name":{"type":"string"},"client_uri":{"type":"string"},"logo_uri":{"type":"string"},"scope":{"type":"string"},"contacts":{"type":"array","items":{"type":"string"}},"tos_uri":{"type":"string"},"policy_uri":{"type":"string"},"jwks":{"$ref":"#/definitions/JWKS"},"software_id":{"type":"string"},"software_version":{"type":"string"},"client_id":{"type":"string"},"application_type":{"type":"string"},"vp_formats":{"$ref":"#/definitions/Format"},"client_purpose":{"type":"string"}}},{"type":"object","properties":{"authorization_endpoint":{"anyOf":[{"$ref":"#/definitions/Schema"},{"type":"string"}]},"issuer":{"anyOf":[{"$ref":"#/definitions/ResponseIss"},{"type":"string"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"token_endpoint":{"type":"string"},"userinfo_endpoint":{"type":"string"},"jwks_uri":{"type":"string"},"registration_endpoint":{"type":"string"},"response_modes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseMode"}},{"$ref":"#/definitions/ResponseMode"}]},"grant_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/GrantType"}},{"$ref":"#/definitions/GrantType"}]},"acr_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AuthenticationContextReferences"}},{"$ref":"#/definitions/AuthenticationContextReferences"}]},"id_token_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"id_token_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for the ID Token to encode the Claims in a JWT [JWT]."},"userinfo_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfo_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfo_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT]."},"request_object_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for Request Objects. These algorithms are used both when the Request Object is passed by value and when it is passed by reference."},"token_endpoint_auth_methods_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TokenEndpointAuthMethod"}},{"$ref":"#/definitions/TokenEndpointAuthMethod"}]},"token_endpoint_auth_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"display_values_supported":{"anyOf":[{"type":"array","items":{}},{}],"description":"OPTIONAL. JSON array containing a list of the display parameter values that the OpenID Provider supports. These values are described in Section 3.1.2.1 of OpenID Connect Core 1.0 [OpenID.Core]."},"claim_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ClaimType"}},{"$ref":"#/definitions/ClaimType"}],"description":"OPTIONAL. JSON array containing a list of the Claim Types that the OpenID Provider supports. These Claim Types are described in Section 5.6 of OpenID Connect Core 1.0 [OpenID.Core]. Values defined by this specification are normal, aggregated, and distributed. If omitted, the implementation supports only normal Claims."},"claims_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"RECOMMENDED. JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list."},"service_documentation":{"type":"string"},"claims_locales_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"ui_locales_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claims_parameter_supported":{"type":"boolean"},"request_parameter_supported":{"type":"boolean"},"request_uri_parameter_supported":{"type":"boolean"},"require_request_uri_registration":{"type":"boolean"},"op_policy_uri":{"type":"string"},"op_tos_uri":{"type":"string"},"id_token_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/IdTokenType"}},{"$ref":"#/definitions/IdTokenType"}]},"vp_formats_supported":{"$ref":"#/definitions/Format"}}}]},"Schema":{"type":"string","enum":["openid:","openid-vc:"]},"ResponseIss":{"type":"string","enum":["https://self-issued.me","https://self-issued.me/v2","https://self-issued.me/v2/openid-vc"]},"ResponseType":{"type":"string","enum":["id_token","vp_token"]},"Scope":{"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]},"SubjectType":{"type":"string","enum":["public","pairwise"]},"SigningAlgo":{"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]},"ResponseMode":{"type":"string","enum":["fragment","form_post","post","direct_post","query","direct_post.jwt","query.jwt","fragment.jwt"]},"GrantType":{"type":"string","enum":["authorization_code","implicit"]},"AuthenticationContextReferences":{"type":"string","enum":["phr","phrh"]},"TokenEndpointAuthMethod":{"type":"string","enum":["client_secret_post","client_secret_basic","client_secret_jwt","private_key_jwt"]},"ClaimType":{"type":"string","enum":["normal","aggregated","distributed"]},"JWKS":{"type":"object","properties":{"keys":{"type":"array","items":{"$ref":"#/definitions/JWK"}}},"required":["keys"],"additionalProperties":false},"JWK":{"type":"object","properties":{"kty":{"type":"string"},"crv":{"type":"string"},"x":{"type":"string"},"y":{"type":"string"},"e":{"type":"string"},"n":{"type":"string"},"alg":{"type":"string"},"d":{"type":"string"},"dp":{"type":"string"},"dq":{"type":"string"},"ext":{"type":"boolean"},"k":{"type":"string"},"key_ops":{"type":"array","items":{"type":"string"}},"kid":{"type":"string"},"oth":{"type":"array","items":{"type":"object","properties":{"d":{"type":"string"},"r":{"type":"string"},"t":{"type":"string"}},"additionalProperties":false}},"p":{"type":"string"},"q":{"type":"string"},"qi":{"type":"string"},"use":{"type":"string"},"x5c":{"type":"array","items":{"type":"string"}},"x5t":{"type":"string"},"x5t#S256":{"type":"string"},"x5u":{"type":"string"}},"additionalProperties":{}},"Format":{"type":"object","properties":{"jwt":{"$ref":"#/definitions/JwtObject"},"jwt_vc":{"$ref":"#/definitions/JwtObject"},"jwt_vc_json":{"$ref":"#/definitions/JwtObject"},"jwt_vp":{"$ref":"#/definitions/JwtObject"},"jwt_vp_json":{"$ref":"#/definitions/JwtObject"},"ldp":{"$ref":"#/definitions/LdpObject"},"ldp_vc":{"$ref":"#/definitions/LdpObject"},"ldp_vp":{"$ref":"#/definitions/LdpObject"},"di":{"$ref":"#/definitions/DiObject"},"di_vc":{"$ref":"#/definitions/DiObject"},"di_vp":{"$ref":"#/definitions/DiObject"},"vc+sd-jwt":{"$ref":"#/definitions/SdJwtObject"},"mso_mdoc":{"$ref":"#/definitions/MsoMdocObject"}},"additionalProperties":false},"JwtObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false},"LdpObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}}},"required":["proof_type"],"additionalProperties":false},"DiObject":{"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}},"cryptosuite":{"type":"array","items":{"type":"string"}}},"required":["proof_type","cryptosuite"],"additionalProperties":false},"SdJwtObject":{"type":"object","properties":{"sd-jwt_alg_values":{"type":"array","items":{"type":"string"}},"kb-jwt_alg_values":{"type":"array","items":{"type":"string"}}},"additionalProperties":false},"MsoMdocObject":{"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false},"IdTokenType":{"type":"string","enum":["subject_signed","attester_signed"]}}};
const schema524 = {"anyOf":[{"type":"object","properties":{"authorization_endpoint":{"anyOf":[{"$ref":"#/definitions/Schema"},{"type":"string"}]},"issuer":{"anyOf":[{"$ref":"#/definitions/ResponseIss"},{"type":"string"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"token_endpoint":{"type":"string"},"userinfo_endpoint":{"type":"string"},"jwks_uri":{"type":"string"},"registration_endpoint":{"type":"string"},"response_modes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseMode"}},{"$ref":"#/definitions/ResponseMode"}]},"grant_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/GrantType"}},{"$ref":"#/definitions/GrantType"}]},"acr_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AuthenticationContextReferences"}},{"$ref":"#/definitions/AuthenticationContextReferences"}]},"id_token_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"id_token_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for the ID Token to encode the Claims in a JWT [JWT]."},"userinfo_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfo_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfo_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT]."},"request_object_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for Request Objects. These algorithms are used both when the Request Object is passed by value and when it is passed by reference."},"token_endpoint_auth_methods_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TokenEndpointAuthMethod"}},{"$ref":"#/definitions/TokenEndpointAuthMethod"}]},"token_endpoint_auth_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"display_values_supported":{"anyOf":[{"type":"array","items":{}},{}],"description":"OPTIONAL. JSON array containing a list of the display parameter values that the OpenID Provider supports. These values are described in Section 3.1.2.1 of OpenID Connect Core 1.0 [OpenID.Core]."},"claim_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ClaimType"}},{"$ref":"#/definitions/ClaimType"}],"description":"OPTIONAL. JSON array containing a list of the Claim Types that the OpenID Provider supports. These Claim Types are described in Section 5.6 of OpenID Connect Core 1.0 [OpenID.Core]. Values defined by this specification are normal, aggregated, and distributed. If omitted, the implementation supports only normal Claims."},"claims_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"RECOMMENDED. JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list."},"service_documentation":{"type":"string"},"claims_locales_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"ui_locales_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claims_parameter_supported":{"type":"boolean"},"request_parameter_supported":{"type":"boolean"},"request_uri_parameter_supported":{"type":"boolean"},"require_request_uri_registration":{"type":"boolean"},"op_policy_uri":{"type":"string"},"op_tos_uri":{"type":"string"},"redirect_uris":{"type":"array","items":{"type":"string"}},"token_endpoint_auth_method":{"type":"string"},"grant_types":{"type":"string"},"response_types":{"type":"string"},"client_name":{"type":"string"},"client_uri":{"type":"string"},"logo_uri":{"type":"string"},"scope":{"type":"string"},"contacts":{"type":"array","items":{"type":"string"}},"tos_uri":{"type":"string"},"policy_uri":{"type":"string"},"jwks":{"$ref":"#/definitions/JWKS"},"software_id":{"type":"string"},"software_version":{"type":"string"},"client_id":{"type":"string"},"application_type":{"type":"string"},"vp_formats":{"$ref":"#/definitions/Format"}}},{"type":"object","properties":{"authorization_endpoint":{"anyOf":[{"$ref":"#/definitions/Schema"},{"type":"string"}]},"issuer":{"anyOf":[{"$ref":"#/definitions/ResponseIss"},{"type":"string"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"token_endpoint":{"type":"string"},"userinfo_endpoint":{"type":"string"},"jwks_uri":{"type":"string"},"registration_endpoint":{"type":"string"},"response_modes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseMode"}},{"$ref":"#/definitions/ResponseMode"}]},"grant_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/GrantType"}},{"$ref":"#/definitions/GrantType"}]},"acr_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AuthenticationContextReferences"}},{"$ref":"#/definitions/AuthenticationContextReferences"}]},"id_token_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"id_token_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for the ID Token to encode the Claims in a JWT [JWT]."},"userinfo_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfo_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfo_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT]."},"request_object_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for Request Objects. These algorithms are used both when the Request Object is passed by value and when it is passed by reference."},"token_endpoint_auth_methods_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TokenEndpointAuthMethod"}},{"$ref":"#/definitions/TokenEndpointAuthMethod"}]},"token_endpoint_auth_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"display_values_supported":{"anyOf":[{"type":"array","items":{}},{}],"description":"OPTIONAL. JSON array containing a list of the display parameter values that the OpenID Provider supports. These values are described in Section 3.1.2.1 of OpenID Connect Core 1.0 [OpenID.Core]."},"claim_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ClaimType"}},{"$ref":"#/definitions/ClaimType"}],"description":"OPTIONAL. JSON array containing a list of the Claim Types that the OpenID Provider supports. These Claim Types are described in Section 5.6 of OpenID Connect Core 1.0 [OpenID.Core]. Values defined by this specification are normal, aggregated, and distributed. If omitted, the implementation supports only normal Claims."},"claims_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"RECOMMENDED. JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list."},"service_documentation":{"type":"string"},"claims_locales_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"ui_locales_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claims_parameter_supported":{"type":"boolean"},"request_parameter_supported":{"type":"boolean"},"request_uri_parameter_supported":{"type":"boolean"},"require_request_uri_registration":{"type":"boolean"},"op_policy_uri":{"type":"string"},"op_tos_uri":{"type":"string"},"redirect_uris":{"type":"array","items":{"type":"string"}},"token_endpoint_auth_method":{"type":"string"},"grant_types":{"type":"string"},"response_types":{"type":"string"},"client_name":{"type":"string"},"client_uri":{"type":"string"},"logo_uri":{"type":"string"},"scope":{"type":"string"},"contacts":{"type":"array","items":{"type":"string"}},"tos_uri":{"type":"string"},"policy_uri":{"type":"string"},"jwks":{"$ref":"#/definitions/JWKS"},"software_id":{"type":"string"},"software_version":{"type":"string"},"client_id":{"type":"string"},"application_type":{"type":"string"},"vp_formats":{"$ref":"#/definitions/Format"},"client_purpose":{"type":"string"}}},{"type":"object","properties":{"authorization_endpoint":{"anyOf":[{"$ref":"#/definitions/Schema"},{"type":"string"}]},"issuer":{"anyOf":[{"$ref":"#/definitions/ResponseIss"},{"type":"string"}]},"response_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseType"}},{"$ref":"#/definitions/ResponseType"}]},"scopes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/Scope"}},{"$ref":"#/definitions/Scope"}]},"subject_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SubjectType"}},{"$ref":"#/definitions/SubjectType"}]},"id_token_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"subject_syntax_types_supported":{"type":"array","items":{"type":"string"}},"token_endpoint":{"type":"string"},"userinfo_endpoint":{"type":"string"},"jwks_uri":{"type":"string"},"registration_endpoint":{"type":"string"},"response_modes_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ResponseMode"}},{"$ref":"#/definitions/ResponseMode"}]},"grant_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/GrantType"}},{"$ref":"#/definitions/GrantType"}]},"acr_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/AuthenticationContextReferences"}},{"$ref":"#/definitions/AuthenticationContextReferences"}]},"id_token_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"id_token_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for the ID Token to encode the Claims in a JWT [JWT]."},"userinfo_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfo_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"userinfo_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) [JWA] supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT]."},"request_object_encryption_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"request_object_encryption_enc_values_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"OPTIONAL. JSON array containing a list of the JWE encryption algorithms (enc values) supported by the OP for Request Objects. These algorithms are used both when the Request Object is passed by value and when it is passed by reference."},"token_endpoint_auth_methods_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/TokenEndpointAuthMethod"}},{"$ref":"#/definitions/TokenEndpointAuthMethod"}]},"token_endpoint_auth_signing_alg_values_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/SigningAlgo"}},{"$ref":"#/definitions/SigningAlgo"}]},"display_values_supported":{"anyOf":[{"type":"array","items":{}},{}],"description":"OPTIONAL. JSON array containing a list of the display parameter values that the OpenID Provider supports. These values are described in Section 3.1.2.1 of OpenID Connect Core 1.0 [OpenID.Core]."},"claim_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/ClaimType"}},{"$ref":"#/definitions/ClaimType"}],"description":"OPTIONAL. JSON array containing a list of the Claim Types that the OpenID Provider supports. These Claim Types are described in Section 5.6 of OpenID Connect Core 1.0 [OpenID.Core]. Values defined by this specification are normal, aggregated, and distributed. If omitted, the implementation supports only normal Claims."},"claims_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}],"description":"RECOMMENDED. JSON array containing a list of the Claim Names of the Claims that the OpenID Provider MAY be able to supply values for. Note that for privacy or other reasons, this might not be an exhaustive list."},"service_documentation":{"type":"string"},"claims_locales_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"ui_locales_supported":{"anyOf":[{"type":"array","items":{"type":"string"}},{"type":"string"}]},"claims_parameter_supported":{"type":"boolean"},"request_parameter_supported":{"type":"boolean"},"request_uri_parameter_supported":{"type":"boolean"},"require_request_uri_registration":{"type":"boolean"},"op_policy_uri":{"type":"string"},"op_tos_uri":{"type":"string"},"id_token_types_supported":{"anyOf":[{"type":"array","items":{"$ref":"#/definitions/IdTokenType"}},{"$ref":"#/definitions/IdTokenType"}]},"vp_formats_supported":{"$ref":"#/definitions/Format"}}}]};
const schema525 = {"type":"string","enum":["openid:","openid-vc:"]};
const schema526 = {"type":"string","enum":["https://self-issued.me","https://self-issued.me/v2","https://self-issued.me/v2/openid-vc"]};
const schema527 = {"type":"string","enum":["id_token","vp_token"]};
const schema529 = {"type":"string","enum":["openid","openid did_authn","profile","email","address","phone"]};
const schema531 = {"type":"string","enum":["public","pairwise"]};
const schema533 = {"type":"string","enum":["EdDSA","RS256","PS256","ES256","ES256K"]};
const schema537 = {"type":"string","enum":["fragment","form_post","post","direct_post","query","direct_post.jwt","query.jwt","fragment.jwt"]};
const schema539 = {"type":"string","enum":["authorization_code","implicit"]};
const schema541 = {"type":"string","enum":["phr","phrh"]};
const schema551 = {"type":"string","enum":["client_secret_post","client_secret_basic","client_secret_jwt","private_key_jwt"]};
const schema555 = {"type":"string","enum":["normal","aggregated","distributed"]};
const schema637 = {"type":"string","enum":["subject_signed","attester_signed"]};
const schema557 = {"type":"object","properties":{"keys":{"type":"array","items":{"$ref":"#/definitions/JWK"}}},"required":["keys"],"additionalProperties":false};
const schema558 = {"type":"object","properties":{"kty":{"type":"string"},"crv":{"type":"string"},"x":{"type":"string"},"y":{"type":"string"},"e":{"type":"string"},"n":{"type":"string"},"alg":{"type":"string"},"d":{"type":"string"},"dp":{"type":"string"},"dq":{"type":"string"},"ext":{"type":"boolean"},"k":{"type":"string"},"key_ops":{"type":"array","items":{"type":"string"}},"kid":{"type":"string"},"oth":{"type":"array","items":{"type":"object","properties":{"d":{"type":"string"},"r":{"type":"string"},"t":{"type":"string"}},"additionalProperties":false}},"p":{"type":"string"},"q":{"type":"string"},"qi":{"type":"string"},"use":{"type":"string"},"x5c":{"type":"array","items":{"type":"string"}},"x5t":{"type":"string"},"x5t#S256":{"type":"string"},"x5u":{"type":"string"}},"additionalProperties":{}};

function validate271(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
let missing0;
if((data.keys === undefined) && (missing0 = "keys")){
validate271.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs1 = errors;
for(const key0 in data){
if(!(key0 === "keys")){
validate271.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.keys !== undefined){
let data0 = data.keys;
const _errs2 = errors;
if(errors === _errs2){
if(Array.isArray(data0)){
var valid1 = true;
const len0 = data0.length;
for(let i0=0; i0<len0; i0++){
let data1 = data0[i0];
const _errs4 = errors;
const _errs5 = errors;
if(errors === _errs5){
if(data1 && typeof data1 == "object" && !Array.isArray(data1)){
const _errs7 = errors;
for(const key1 in data1){
if(!(func2.call(schema558.properties, key1))){
const _errs8 = errors;
var valid3 = _errs8 === errors;
if(!valid3){
break;
}
}
}
if(_errs7 === errors){
if(data1.kty !== undefined){
const _errs9 = errors;
if(typeof data1.kty !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/kty",schemaPath:"#/definitions/JWK/properties/kty/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs9 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.crv !== undefined){
const _errs11 = errors;
if(typeof data1.crv !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/crv",schemaPath:"#/definitions/JWK/properties/crv/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs11 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.x !== undefined){
const _errs13 = errors;
if(typeof data1.x !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/x",schemaPath:"#/definitions/JWK/properties/x/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs13 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.y !== undefined){
const _errs15 = errors;
if(typeof data1.y !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/y",schemaPath:"#/definitions/JWK/properties/y/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs15 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.e !== undefined){
const _errs17 = errors;
if(typeof data1.e !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/e",schemaPath:"#/definitions/JWK/properties/e/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs17 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.n !== undefined){
const _errs19 = errors;
if(typeof data1.n !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/n",schemaPath:"#/definitions/JWK/properties/n/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs19 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.alg !== undefined){
const _errs21 = errors;
if(typeof data1.alg !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/alg",schemaPath:"#/definitions/JWK/properties/alg/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs21 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.d !== undefined){
const _errs23 = errors;
if(typeof data1.d !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/d",schemaPath:"#/definitions/JWK/properties/d/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs23 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.dp !== undefined){
const _errs25 = errors;
if(typeof data1.dp !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/dp",schemaPath:"#/definitions/JWK/properties/dp/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs25 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.dq !== undefined){
const _errs27 = errors;
if(typeof data1.dq !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/dq",schemaPath:"#/definitions/JWK/properties/dq/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs27 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.ext !== undefined){
const _errs29 = errors;
if(typeof data1.ext !== "boolean"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/ext",schemaPath:"#/definitions/JWK/properties/ext/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];
return false;
}
var valid4 = _errs29 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.k !== undefined){
const _errs31 = errors;
if(typeof data1.k !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/k",schemaPath:"#/definitions/JWK/properties/k/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs31 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.key_ops !== undefined){
let data15 = data1.key_ops;
const _errs33 = errors;
if(errors === _errs33){
if(Array.isArray(data15)){
var valid5 = true;
const len1 = data15.length;
for(let i1=0; i1<len1; i1++){
const _errs35 = errors;
if(typeof data15[i1] !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/key_ops/" + i1,schemaPath:"#/definitions/JWK/properties/key_ops/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid5 = _errs35 === errors;
if(!valid5){
break;
}
}
}
else {
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/key_ops",schemaPath:"#/definitions/JWK/properties/key_ops/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid4 = _errs33 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.kid !== undefined){
const _errs37 = errors;
if(typeof data1.kid !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/kid",schemaPath:"#/definitions/JWK/properties/kid/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs37 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.oth !== undefined){
let data18 = data1.oth;
const _errs39 = errors;
if(errors === _errs39){
if(Array.isArray(data18)){
var valid6 = true;
const len2 = data18.length;
for(let i2=0; i2<len2; i2++){
let data19 = data18[i2];
const _errs41 = errors;
if(errors === _errs41){
if(data19 && typeof data19 == "object" && !Array.isArray(data19)){
const _errs43 = errors;
for(const key2 in data19){
if(!(((key2 === "d") || (key2 === "r")) || (key2 === "t"))){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/oth/" + i2,schemaPath:"#/definitions/JWK/properties/oth/items/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs43 === errors){
if(data19.d !== undefined){
const _errs44 = errors;
if(typeof data19.d !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/oth/" + i2+"/d",schemaPath:"#/definitions/JWK/properties/oth/items/properties/d/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid7 = _errs44 === errors;
}
else {
var valid7 = true;
}
if(valid7){
if(data19.r !== undefined){
const _errs46 = errors;
if(typeof data19.r !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/oth/" + i2+"/r",schemaPath:"#/definitions/JWK/properties/oth/items/properties/r/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid7 = _errs46 === errors;
}
else {
var valid7 = true;
}
if(valid7){
if(data19.t !== undefined){
const _errs48 = errors;
if(typeof data19.t !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/oth/" + i2+"/t",schemaPath:"#/definitions/JWK/properties/oth/items/properties/t/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid7 = _errs48 === errors;
}
else {
var valid7 = true;
}
}
}
}
}
else {
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/oth/" + i2,schemaPath:"#/definitions/JWK/properties/oth/items/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid6 = _errs41 === errors;
if(!valid6){
break;
}
}
}
else {
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/oth",schemaPath:"#/definitions/JWK/properties/oth/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid4 = _errs39 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.p !== undefined){
const _errs50 = errors;
if(typeof data1.p !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/p",schemaPath:"#/definitions/JWK/properties/p/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs50 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.q !== undefined){
const _errs52 = errors;
if(typeof data1.q !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/q",schemaPath:"#/definitions/JWK/properties/q/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs52 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.qi !== undefined){
const _errs54 = errors;
if(typeof data1.qi !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/qi",schemaPath:"#/definitions/JWK/properties/qi/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs54 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.use !== undefined){
const _errs56 = errors;
if(typeof data1.use !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/use",schemaPath:"#/definitions/JWK/properties/use/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs56 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.x5c !== undefined){
let data27 = data1.x5c;
const _errs58 = errors;
if(errors === _errs58){
if(Array.isArray(data27)){
var valid8 = true;
const len3 = data27.length;
for(let i3=0; i3<len3; i3++){
const _errs60 = errors;
if(typeof data27[i3] !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/x5c/" + i3,schemaPath:"#/definitions/JWK/properties/x5c/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid8 = _errs60 === errors;
if(!valid8){
break;
}
}
}
else {
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/x5c",schemaPath:"#/definitions/JWK/properties/x5c/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid4 = _errs58 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.x5t !== undefined){
const _errs62 = errors;
if(typeof data1.x5t !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/x5t",schemaPath:"#/definitions/JWK/properties/x5t/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs62 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1["x5t#S256"] !== undefined){
const _errs64 = errors;
if(typeof data1["x5t#S256"] !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/x5t#S256",schemaPath:"#/definitions/JWK/properties/x5t%23S256/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs64 === errors;
}
else {
var valid4 = true;
}
if(valid4){
if(data1.x5u !== undefined){
const _errs66 = errors;
if(typeof data1.x5u !== "string"){
validate271.errors = [{instancePath:instancePath+"/keys/" + i0+"/x5u",schemaPath:"#/definitions/JWK/properties/x5u/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid4 = _errs66 === errors;
}
else {
var valid4 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate271.errors = [{instancePath:instancePath+"/keys/" + i0,schemaPath:"#/definitions/JWK/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid1 = _errs4 === errors;
if(!valid1){
break;
}
}
}
else {
validate271.errors = [{instancePath:instancePath+"/keys",schemaPath:"#/properties/keys/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate271.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate271.errors = vErrors;
return errors === 0;
}

const schema559 = {"type":"object","properties":{"jwt":{"$ref":"#/definitions/JwtObject"},"jwt_vc":{"$ref":"#/definitions/JwtObject"},"jwt_vc_json":{"$ref":"#/definitions/JwtObject"},"jwt_vp":{"$ref":"#/definitions/JwtObject"},"jwt_vp_json":{"$ref":"#/definitions/JwtObject"},"ldp":{"$ref":"#/definitions/LdpObject"},"ldp_vc":{"$ref":"#/definitions/LdpObject"},"ldp_vp":{"$ref":"#/definitions/LdpObject"},"di":{"$ref":"#/definitions/DiObject"},"di_vc":{"$ref":"#/definitions/DiObject"},"di_vp":{"$ref":"#/definitions/DiObject"},"vc+sd-jwt":{"$ref":"#/definitions/SdJwtObject"},"mso_mdoc":{"$ref":"#/definitions/MsoMdocObject"}},"additionalProperties":false};
const schema560 = {"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false};
const schema565 = {"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}}},"required":["proof_type"],"additionalProperties":false};
const schema568 = {"type":"object","properties":{"proof_type":{"type":"array","items":{"type":"string"}},"cryptosuite":{"type":"array","items":{"type":"string"}}},"required":["proof_type","cryptosuite"],"additionalProperties":false};
const schema571 = {"type":"object","properties":{"sd-jwt_alg_values":{"type":"array","items":{"type":"string"}},"kb-jwt_alg_values":{"type":"array","items":{"type":"string"}}},"additionalProperties":false};
const schema572 = {"type":"object","properties":{"alg":{"type":"array","items":{"type":"string"}}},"required":["alg"],"additionalProperties":false};

function validate273(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
if(errors === 0){
if(data && typeof data == "object" && !Array.isArray(data)){
const _errs1 = errors;
for(const key0 in data){
if(!(func2.call(schema559.properties, key0))){
validate273.errors = [{instancePath,schemaPath:"#/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key0},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs1 === errors){
if(data.jwt !== undefined){
let data0 = data.jwt;
const _errs2 = errors;
const _errs3 = errors;
if(errors === _errs3){
if(data0 && typeof data0 == "object" && !Array.isArray(data0)){
let missing0;
if((data0.alg === undefined) && (missing0 = "alg")){
validate273.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];
return false;
}
else {
const _errs5 = errors;
for(const key1 in data0){
if(!(key1 === "alg")){
validate273.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key1},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs5 === errors){
if(data0.alg !== undefined){
let data1 = data0.alg;
const _errs6 = errors;
if(errors === _errs6){
if(Array.isArray(data1)){
var valid3 = true;
const len0 = data1.length;
for(let i0=0; i0<len0; i0++){
const _errs8 = errors;
if(typeof data1[i0] !== "string"){
validate273.errors = [{instancePath:instancePath+"/jwt/alg/" + i0,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid3 = _errs8 === errors;
if(!valid3){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/jwt/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/jwt",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs2 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vc !== undefined){
let data3 = data.jwt_vc;
const _errs10 = errors;
const _errs11 = errors;
if(errors === _errs11){
if(data3 && typeof data3 == "object" && !Array.isArray(data3)){
let missing1;
if((data3.alg === undefined) && (missing1 = "alg")){
validate273.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];
return false;
}
else {
const _errs13 = errors;
for(const key2 in data3){
if(!(key2 === "alg")){
validate273.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key2},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs13 === errors){
if(data3.alg !== undefined){
let data4 = data3.alg;
const _errs14 = errors;
if(errors === _errs14){
if(Array.isArray(data4)){
var valid6 = true;
const len1 = data4.length;
for(let i1=0; i1<len1; i1++){
const _errs16 = errors;
if(typeof data4[i1] !== "string"){
validate273.errors = [{instancePath:instancePath+"/jwt_vc/alg/" + i1,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid6 = _errs16 === errors;
if(!valid6){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/jwt_vc/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/jwt_vc",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs10 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vc_json !== undefined){
let data6 = data.jwt_vc_json;
const _errs18 = errors;
const _errs19 = errors;
if(errors === _errs19){
if(data6 && typeof data6 == "object" && !Array.isArray(data6)){
let missing2;
if((data6.alg === undefined) && (missing2 = "alg")){
validate273.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];
return false;
}
else {
const _errs21 = errors;
for(const key3 in data6){
if(!(key3 === "alg")){
validate273.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key3},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs21 === errors){
if(data6.alg !== undefined){
let data7 = data6.alg;
const _errs22 = errors;
if(errors === _errs22){
if(Array.isArray(data7)){
var valid9 = true;
const len2 = data7.length;
for(let i2=0; i2<len2; i2++){
const _errs24 = errors;
if(typeof data7[i2] !== "string"){
validate273.errors = [{instancePath:instancePath+"/jwt_vc_json/alg/" + i2,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid9 = _errs24 === errors;
if(!valid9){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/jwt_vc_json/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/jwt_vc_json",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs18 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vp !== undefined){
let data9 = data.jwt_vp;
const _errs26 = errors;
const _errs27 = errors;
if(errors === _errs27){
if(data9 && typeof data9 == "object" && !Array.isArray(data9)){
let missing3;
if((data9.alg === undefined) && (missing3 = "alg")){
validate273.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];
return false;
}
else {
const _errs29 = errors;
for(const key4 in data9){
if(!(key4 === "alg")){
validate273.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key4},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs29 === errors){
if(data9.alg !== undefined){
let data10 = data9.alg;
const _errs30 = errors;
if(errors === _errs30){
if(Array.isArray(data10)){
var valid12 = true;
const len3 = data10.length;
for(let i3=0; i3<len3; i3++){
const _errs32 = errors;
if(typeof data10[i3] !== "string"){
validate273.errors = [{instancePath:instancePath+"/jwt_vp/alg/" + i3,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid12 = _errs32 === errors;
if(!valid12){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/jwt_vp/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/jwt_vp",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs26 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.jwt_vp_json !== undefined){
let data12 = data.jwt_vp_json;
const _errs34 = errors;
const _errs35 = errors;
if(errors === _errs35){
if(data12 && typeof data12 == "object" && !Array.isArray(data12)){
let missing4;
if((data12.alg === undefined) && (missing4 = "alg")){
validate273.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/required",keyword:"required",params:{missingProperty: missing4},message:"must have required property '"+missing4+"'"}];
return false;
}
else {
const _errs37 = errors;
for(const key5 in data12){
if(!(key5 === "alg")){
validate273.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key5},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs37 === errors){
if(data12.alg !== undefined){
let data13 = data12.alg;
const _errs38 = errors;
if(errors === _errs38){
if(Array.isArray(data13)){
var valid15 = true;
const len4 = data13.length;
for(let i4=0; i4<len4; i4++){
const _errs40 = errors;
if(typeof data13[i4] !== "string"){
validate273.errors = [{instancePath:instancePath+"/jwt_vp_json/alg/" + i4,schemaPath:"#/definitions/JwtObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid15 = _errs40 === errors;
if(!valid15){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/jwt_vp_json/alg",schemaPath:"#/definitions/JwtObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/jwt_vp_json",schemaPath:"#/definitions/JwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs34 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp !== undefined){
let data15 = data.ldp;
const _errs42 = errors;
const _errs43 = errors;
if(errors === _errs43){
if(data15 && typeof data15 == "object" && !Array.isArray(data15)){
let missing5;
if((data15.proof_type === undefined) && (missing5 = "proof_type")){
validate273.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing5},message:"must have required property '"+missing5+"'"}];
return false;
}
else {
const _errs45 = errors;
for(const key6 in data15){
if(!(key6 === "proof_type")){
validate273.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key6},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs45 === errors){
if(data15.proof_type !== undefined){
let data16 = data15.proof_type;
const _errs46 = errors;
if(errors === _errs46){
if(Array.isArray(data16)){
var valid18 = true;
const len5 = data16.length;
for(let i5=0; i5<len5; i5++){
const _errs48 = errors;
if(typeof data16[i5] !== "string"){
validate273.errors = [{instancePath:instancePath+"/ldp/proof_type/" + i5,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid18 = _errs48 === errors;
if(!valid18){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/ldp/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/ldp",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs42 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp_vc !== undefined){
let data18 = data.ldp_vc;
const _errs50 = errors;
const _errs51 = errors;
if(errors === _errs51){
if(data18 && typeof data18 == "object" && !Array.isArray(data18)){
let missing6;
if((data18.proof_type === undefined) && (missing6 = "proof_type")){
validate273.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing6},message:"must have required property '"+missing6+"'"}];
return false;
}
else {
const _errs53 = errors;
for(const key7 in data18){
if(!(key7 === "proof_type")){
validate273.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key7},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs53 === errors){
if(data18.proof_type !== undefined){
let data19 = data18.proof_type;
const _errs54 = errors;
if(errors === _errs54){
if(Array.isArray(data19)){
var valid21 = true;
const len6 = data19.length;
for(let i6=0; i6<len6; i6++){
const _errs56 = errors;
if(typeof data19[i6] !== "string"){
validate273.errors = [{instancePath:instancePath+"/ldp_vc/proof_type/" + i6,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid21 = _errs56 === errors;
if(!valid21){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/ldp_vc/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/ldp_vc",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs50 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.ldp_vp !== undefined){
let data21 = data.ldp_vp;
const _errs58 = errors;
const _errs59 = errors;
if(errors === _errs59){
if(data21 && typeof data21 == "object" && !Array.isArray(data21)){
let missing7;
if((data21.proof_type === undefined) && (missing7 = "proof_type")){
validate273.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/required",keyword:"required",params:{missingProperty: missing7},message:"must have required property '"+missing7+"'"}];
return false;
}
else {
const _errs61 = errors;
for(const key8 in data21){
if(!(key8 === "proof_type")){
validate273.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key8},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs61 === errors){
if(data21.proof_type !== undefined){
let data22 = data21.proof_type;
const _errs62 = errors;
if(errors === _errs62){
if(Array.isArray(data22)){
var valid24 = true;
const len7 = data22.length;
for(let i7=0; i7<len7; i7++){
const _errs64 = errors;
if(typeof data22[i7] !== "string"){
validate273.errors = [{instancePath:instancePath+"/ldp_vp/proof_type/" + i7,schemaPath:"#/definitions/LdpObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid24 = _errs64 === errors;
if(!valid24){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/ldp_vp/proof_type",schemaPath:"#/definitions/LdpObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/ldp_vp",schemaPath:"#/definitions/LdpObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs58 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di !== undefined){
let data24 = data.di;
const _errs66 = errors;
const _errs67 = errors;
if(errors === _errs67){
if(data24 && typeof data24 == "object" && !Array.isArray(data24)){
let missing8;
if(((data24.proof_type === undefined) && (missing8 = "proof_type")) || ((data24.cryptosuite === undefined) && (missing8 = "cryptosuite"))){
validate273.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing8},message:"must have required property '"+missing8+"'"}];
return false;
}
else {
const _errs69 = errors;
for(const key9 in data24){
if(!((key9 === "proof_type") || (key9 === "cryptosuite"))){
validate273.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key9},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs69 === errors){
if(data24.proof_type !== undefined){
let data25 = data24.proof_type;
const _errs70 = errors;
if(errors === _errs70){
if(Array.isArray(data25)){
var valid27 = true;
const len8 = data25.length;
for(let i8=0; i8<len8; i8++){
const _errs72 = errors;
if(typeof data25[i8] !== "string"){
validate273.errors = [{instancePath:instancePath+"/di/proof_type/" + i8,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid27 = _errs72 === errors;
if(!valid27){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/di/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid26 = _errs70 === errors;
}
else {
var valid26 = true;
}
if(valid26){
if(data24.cryptosuite !== undefined){
let data27 = data24.cryptosuite;
const _errs74 = errors;
if(errors === _errs74){
if(Array.isArray(data27)){
var valid28 = true;
const len9 = data27.length;
for(let i9=0; i9<len9; i9++){
const _errs76 = errors;
if(typeof data27[i9] !== "string"){
validate273.errors = [{instancePath:instancePath+"/di/cryptosuite/" + i9,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid28 = _errs76 === errors;
if(!valid28){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/di/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid26 = _errs74 === errors;
}
else {
var valid26 = true;
}
}
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/di",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs66 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di_vc !== undefined){
let data29 = data.di_vc;
const _errs78 = errors;
const _errs79 = errors;
if(errors === _errs79){
if(data29 && typeof data29 == "object" && !Array.isArray(data29)){
let missing9;
if(((data29.proof_type === undefined) && (missing9 = "proof_type")) || ((data29.cryptosuite === undefined) && (missing9 = "cryptosuite"))){
validate273.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing9},message:"must have required property '"+missing9+"'"}];
return false;
}
else {
const _errs81 = errors;
for(const key10 in data29){
if(!((key10 === "proof_type") || (key10 === "cryptosuite"))){
validate273.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key10},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs81 === errors){
if(data29.proof_type !== undefined){
let data30 = data29.proof_type;
const _errs82 = errors;
if(errors === _errs82){
if(Array.isArray(data30)){
var valid31 = true;
const len10 = data30.length;
for(let i10=0; i10<len10; i10++){
const _errs84 = errors;
if(typeof data30[i10] !== "string"){
validate273.errors = [{instancePath:instancePath+"/di_vc/proof_type/" + i10,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid31 = _errs84 === errors;
if(!valid31){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/di_vc/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid30 = _errs82 === errors;
}
else {
var valid30 = true;
}
if(valid30){
if(data29.cryptosuite !== undefined){
let data32 = data29.cryptosuite;
const _errs86 = errors;
if(errors === _errs86){
if(Array.isArray(data32)){
var valid32 = true;
const len11 = data32.length;
for(let i11=0; i11<len11; i11++){
const _errs88 = errors;
if(typeof data32[i11] !== "string"){
validate273.errors = [{instancePath:instancePath+"/di_vc/cryptosuite/" + i11,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid32 = _errs88 === errors;
if(!valid32){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/di_vc/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid30 = _errs86 === errors;
}
else {
var valid30 = true;
}
}
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/di_vc",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs78 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.di_vp !== undefined){
let data34 = data.di_vp;
const _errs90 = errors;
const _errs91 = errors;
if(errors === _errs91){
if(data34 && typeof data34 == "object" && !Array.isArray(data34)){
let missing10;
if(((data34.proof_type === undefined) && (missing10 = "proof_type")) || ((data34.cryptosuite === undefined) && (missing10 = "cryptosuite"))){
validate273.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/required",keyword:"required",params:{missingProperty: missing10},message:"must have required property '"+missing10+"'"}];
return false;
}
else {
const _errs93 = errors;
for(const key11 in data34){
if(!((key11 === "proof_type") || (key11 === "cryptosuite"))){
validate273.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key11},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs93 === errors){
if(data34.proof_type !== undefined){
let data35 = data34.proof_type;
const _errs94 = errors;
if(errors === _errs94){
if(Array.isArray(data35)){
var valid35 = true;
const len12 = data35.length;
for(let i12=0; i12<len12; i12++){
const _errs96 = errors;
if(typeof data35[i12] !== "string"){
validate273.errors = [{instancePath:instancePath+"/di_vp/proof_type/" + i12,schemaPath:"#/definitions/DiObject/properties/proof_type/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid35 = _errs96 === errors;
if(!valid35){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/di_vp/proof_type",schemaPath:"#/definitions/DiObject/properties/proof_type/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid34 = _errs94 === errors;
}
else {
var valid34 = true;
}
if(valid34){
if(data34.cryptosuite !== undefined){
let data37 = data34.cryptosuite;
const _errs98 = errors;
if(errors === _errs98){
if(Array.isArray(data37)){
var valid36 = true;
const len13 = data37.length;
for(let i13=0; i13<len13; i13++){
const _errs100 = errors;
if(typeof data37[i13] !== "string"){
validate273.errors = [{instancePath:instancePath+"/di_vp/cryptosuite/" + i13,schemaPath:"#/definitions/DiObject/properties/cryptosuite/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid36 = _errs100 === errors;
if(!valid36){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/di_vp/cryptosuite",schemaPath:"#/definitions/DiObject/properties/cryptosuite/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid34 = _errs98 === errors;
}
else {
var valid34 = true;
}
}
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/di_vp",schemaPath:"#/definitions/DiObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs90 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data["vc+sd-jwt"] !== undefined){
let data39 = data["vc+sd-jwt"];
const _errs102 = errors;
const _errs103 = errors;
if(errors === _errs103){
if(data39 && typeof data39 == "object" && !Array.isArray(data39)){
const _errs105 = errors;
for(const key12 in data39){
if(!((key12 === "sd-jwt_alg_values") || (key12 === "kb-jwt_alg_values"))){
validate273.errors = [{instancePath:instancePath+"/vc+sd-jwt",schemaPath:"#/definitions/SdJwtObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key12},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs105 === errors){
if(data39["sd-jwt_alg_values"] !== undefined){
let data40 = data39["sd-jwt_alg_values"];
const _errs106 = errors;
if(errors === _errs106){
if(Array.isArray(data40)){
var valid39 = true;
const len14 = data40.length;
for(let i14=0; i14<len14; i14++){
const _errs108 = errors;
if(typeof data40[i14] !== "string"){
validate273.errors = [{instancePath:instancePath+"/vc+sd-jwt/sd-jwt_alg_values/" + i14,schemaPath:"#/definitions/SdJwtObject/properties/sd-jwt_alg_values/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid39 = _errs108 === errors;
if(!valid39){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/vc+sd-jwt/sd-jwt_alg_values",schemaPath:"#/definitions/SdJwtObject/properties/sd-jwt_alg_values/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs106 === errors;
}
else {
var valid38 = true;
}
if(valid38){
if(data39["kb-jwt_alg_values"] !== undefined){
let data42 = data39["kb-jwt_alg_values"];
const _errs110 = errors;
if(errors === _errs110){
if(Array.isArray(data42)){
var valid40 = true;
const len15 = data42.length;
for(let i15=0; i15<len15; i15++){
const _errs112 = errors;
if(typeof data42[i15] !== "string"){
validate273.errors = [{instancePath:instancePath+"/vc+sd-jwt/kb-jwt_alg_values/" + i15,schemaPath:"#/definitions/SdJwtObject/properties/kb-jwt_alg_values/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid40 = _errs112 === errors;
if(!valid40){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/vc+sd-jwt/kb-jwt_alg_values",schemaPath:"#/definitions/SdJwtObject/properties/kb-jwt_alg_values/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
var valid38 = _errs110 === errors;
}
else {
var valid38 = true;
}
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/vc+sd-jwt",schemaPath:"#/definitions/SdJwtObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs102 === errors;
}
else {
var valid0 = true;
}
if(valid0){
if(data.mso_mdoc !== undefined){
let data44 = data.mso_mdoc;
const _errs114 = errors;
const _errs115 = errors;
if(errors === _errs115){
if(data44 && typeof data44 == "object" && !Array.isArray(data44)){
let missing11;
if((data44.alg === undefined) && (missing11 = "alg")){
validate273.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/required",keyword:"required",params:{missingProperty: missing11},message:"must have required property '"+missing11+"'"}];
return false;
}
else {
const _errs117 = errors;
for(const key13 in data44){
if(!(key13 === "alg")){
validate273.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/additionalProperties",keyword:"additionalProperties",params:{additionalProperty: key13},message:"must NOT have additional properties"}];
return false;
break;
}
}
if(_errs117 === errors){
if(data44.alg !== undefined){
let data45 = data44.alg;
const _errs118 = errors;
if(errors === _errs118){
if(Array.isArray(data45)){
var valid43 = true;
const len16 = data45.length;
for(let i16=0; i16<len16; i16++){
const _errs120 = errors;
if(typeof data45[i16] !== "string"){
validate273.errors = [{instancePath:instancePath+"/mso_mdoc/alg/" + i16,schemaPath:"#/definitions/MsoMdocObject/properties/alg/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];
return false;
}
var valid43 = _errs120 === errors;
if(!valid43){
break;
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/mso_mdoc/alg",schemaPath:"#/definitions/MsoMdocObject/properties/alg/type",keyword:"type",params:{type: "array"},message:"must be array"}];
return false;
}
}
}
}
}
}
else {
validate273.errors = [{instancePath:instancePath+"/mso_mdoc",schemaPath:"#/definitions/MsoMdocObject/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
var valid0 = _errs114 === errors;
}
else {
var valid0 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
validate273.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];
return false;
}
}
validate273.errors = vErrors;
return errors === 0;
}


function validate270(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
let vErrors = null;
let errors = 0;
const _errs0 = errors;
let valid0 = false;
const _errs1 = errors;
if(errors === _errs1){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.authorization_endpoint !== undefined){
let data0 = data.authorization_endpoint;
const _errs3 = errors;
const _errs4 = errors;
let valid2 = false;
const _errs5 = errors;
if(typeof data0 !== "string"){
const err0 = {instancePath:instancePath+"/authorization_endpoint",schemaPath:"#/definitions/Schema/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err0];
}
else {
vErrors.push(err0);
}
errors++;
}
if(!((data0 === "openid:") || (data0 === "openid-vc:"))){
const err1 = {instancePath:instancePath+"/authorization_endpoint",schemaPath:"#/definitions/Schema/enum",keyword:"enum",params:{allowedValues: schema525.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err1];
}
else {
vErrors.push(err1);
}
errors++;
}
var _valid1 = _errs5 === errors;
valid2 = valid2 || _valid1;
if(!valid2){
const _errs8 = errors;
if(typeof data0 !== "string"){
const err2 = {instancePath:instancePath+"/authorization_endpoint",schemaPath:"#/anyOf/0/properties/authorization_endpoint/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err2];
}
else {
vErrors.push(err2);
}
errors++;
}
var _valid1 = _errs8 === errors;
valid2 = valid2 || _valid1;
}
if(!valid2){
const err3 = {instancePath:instancePath+"/authorization_endpoint",schemaPath:"#/anyOf/0/properties/authorization_endpoint/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err3];
}
else {
vErrors.push(err3);
}
errors++;
}
else {
errors = _errs4;
if(vErrors !== null){
if(_errs4){
vErrors.length = _errs4;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs3 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.issuer !== undefined){
let data1 = data.issuer;
const _errs10 = errors;
const _errs11 = errors;
let valid4 = false;
const _errs12 = errors;
if(typeof data1 !== "string"){
const err4 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/ResponseIss/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err4];
}
else {
vErrors.push(err4);
}
errors++;
}
if(!(((data1 === "https://self-issued.me") || (data1 === "https://self-issued.me/v2")) || (data1 === "https://self-issued.me/v2/openid-vc"))){
const err5 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/ResponseIss/enum",keyword:"enum",params:{allowedValues: schema526.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err5];
}
else {
vErrors.push(err5);
}
errors++;
}
var _valid2 = _errs12 === errors;
valid4 = valid4 || _valid2;
if(!valid4){
const _errs15 = errors;
if(typeof data1 !== "string"){
const err6 = {instancePath:instancePath+"/issuer",schemaPath:"#/anyOf/0/properties/issuer/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err6];
}
else {
vErrors.push(err6);
}
errors++;
}
var _valid2 = _errs15 === errors;
valid4 = valid4 || _valid2;
}
if(!valid4){
const err7 = {instancePath:instancePath+"/issuer",schemaPath:"#/anyOf/0/properties/issuer/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err7];
}
else {
vErrors.push(err7);
}
errors++;
}
else {
errors = _errs11;
if(vErrors !== null){
if(_errs11){
vErrors.length = _errs11;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs10 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.response_types_supported !== undefined){
let data2 = data.response_types_supported;
const _errs17 = errors;
const _errs18 = errors;
let valid6 = false;
const _errs19 = errors;
if(errors === _errs19){
if(Array.isArray(data2)){
var valid7 = true;
const len0 = data2.length;
for(let i0=0; i0<len0; i0++){
let data3 = data2[i0];
const _errs21 = errors;
if(typeof data3 !== "string"){
const err8 = {instancePath:instancePath+"/response_types_supported/" + i0,schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err8];
}
else {
vErrors.push(err8);
}
errors++;
}
if(!((data3 === "id_token") || (data3 === "vp_token"))){
const err9 = {instancePath:instancePath+"/response_types_supported/" + i0,schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema527.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err9];
}
else {
vErrors.push(err9);
}
errors++;
}
var valid7 = _errs21 === errors;
if(!valid7){
break;
}
}
}
else {
const err10 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/anyOf/0/properties/response_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err10];
}
else {
vErrors.push(err10);
}
errors++;
}
}
var _valid3 = _errs19 === errors;
valid6 = valid6 || _valid3;
if(!valid6){
const _errs24 = errors;
if(typeof data2 !== "string"){
const err11 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err11];
}
else {
vErrors.push(err11);
}
errors++;
}
if(!((data2 === "id_token") || (data2 === "vp_token"))){
const err12 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema527.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err12];
}
else {
vErrors.push(err12);
}
errors++;
}
var _valid3 = _errs24 === errors;
valid6 = valid6 || _valid3;
}
if(!valid6){
const err13 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/anyOf/0/properties/response_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err13];
}
else {
vErrors.push(err13);
}
errors++;
}
else {
errors = _errs18;
if(vErrors !== null){
if(_errs18){
vErrors.length = _errs18;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs17 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.scopes_supported !== undefined){
let data4 = data.scopes_supported;
const _errs27 = errors;
const _errs28 = errors;
let valid10 = false;
const _errs29 = errors;
if(errors === _errs29){
if(Array.isArray(data4)){
var valid11 = true;
const len1 = data4.length;
for(let i1=0; i1<len1; i1++){
let data5 = data4[i1];
const _errs31 = errors;
if(typeof data5 !== "string"){
const err14 = {instancePath:instancePath+"/scopes_supported/" + i1,schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err14];
}
else {
vErrors.push(err14);
}
errors++;
}
if(!((((((data5 === "openid") || (data5 === "openid did_authn")) || (data5 === "profile")) || (data5 === "email")) || (data5 === "address")) || (data5 === "phone"))){
const err15 = {instancePath:instancePath+"/scopes_supported/" + i1,schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema529.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err15];
}
else {
vErrors.push(err15);
}
errors++;
}
var valid11 = _errs31 === errors;
if(!valid11){
break;
}
}
}
else {
const err16 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/anyOf/0/properties/scopes_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err16];
}
else {
vErrors.push(err16);
}
errors++;
}
}
var _valid4 = _errs29 === errors;
valid10 = valid10 || _valid4;
if(!valid10){
const _errs34 = errors;
if(typeof data4 !== "string"){
const err17 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err17];
}
else {
vErrors.push(err17);
}
errors++;
}
if(!((((((data4 === "openid") || (data4 === "openid did_authn")) || (data4 === "profile")) || (data4 === "email")) || (data4 === "address")) || (data4 === "phone"))){
const err18 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema529.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err18];
}
else {
vErrors.push(err18);
}
errors++;
}
var _valid4 = _errs34 === errors;
valid10 = valid10 || _valid4;
}
if(!valid10){
const err19 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/anyOf/0/properties/scopes_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err19];
}
else {
vErrors.push(err19);
}
errors++;
}
else {
errors = _errs28;
if(vErrors !== null){
if(_errs28){
vErrors.length = _errs28;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs27 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.subject_types_supported !== undefined){
let data6 = data.subject_types_supported;
const _errs37 = errors;
const _errs38 = errors;
let valid14 = false;
const _errs39 = errors;
if(errors === _errs39){
if(Array.isArray(data6)){
var valid15 = true;
const len2 = data6.length;
for(let i2=0; i2<len2; i2++){
let data7 = data6[i2];
const _errs41 = errors;
if(typeof data7 !== "string"){
const err20 = {instancePath:instancePath+"/subject_types_supported/" + i2,schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err20];
}
else {
vErrors.push(err20);
}
errors++;
}
if(!((data7 === "public") || (data7 === "pairwise"))){
const err21 = {instancePath:instancePath+"/subject_types_supported/" + i2,schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema531.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err21];
}
else {
vErrors.push(err21);
}
errors++;
}
var valid15 = _errs41 === errors;
if(!valid15){
break;
}
}
}
else {
const err22 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/anyOf/0/properties/subject_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err22];
}
else {
vErrors.push(err22);
}
errors++;
}
}
var _valid5 = _errs39 === errors;
valid14 = valid14 || _valid5;
if(!valid14){
const _errs44 = errors;
if(typeof data6 !== "string"){
const err23 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err23];
}
else {
vErrors.push(err23);
}
errors++;
}
if(!((data6 === "public") || (data6 === "pairwise"))){
const err24 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema531.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err24];
}
else {
vErrors.push(err24);
}
errors++;
}
var _valid5 = _errs44 === errors;
valid14 = valid14 || _valid5;
}
if(!valid14){
const err25 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/anyOf/0/properties/subject_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err25];
}
else {
vErrors.push(err25);
}
errors++;
}
else {
errors = _errs38;
if(vErrors !== null){
if(_errs38){
vErrors.length = _errs38;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs37 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.id_token_signing_alg_values_supported !== undefined){
let data8 = data.id_token_signing_alg_values_supported;
const _errs47 = errors;
const _errs48 = errors;
let valid18 = false;
const _errs49 = errors;
if(errors === _errs49){
if(Array.isArray(data8)){
var valid19 = true;
const len3 = data8.length;
for(let i3=0; i3<len3; i3++){
let data9 = data8[i3];
const _errs51 = errors;
if(typeof data9 !== "string"){
const err26 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i3,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err26];
}
else {
vErrors.push(err26);
}
errors++;
}
if(!(((((data9 === "EdDSA") || (data9 === "RS256")) || (data9 === "PS256")) || (data9 === "ES256")) || (data9 === "ES256K"))){
const err27 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i3,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err27];
}
else {
vErrors.push(err27);
}
errors++;
}
var valid19 = _errs51 === errors;
if(!valid19){
break;
}
}
}
else {
const err28 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/anyOf/0/properties/id_token_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err28];
}
else {
vErrors.push(err28);
}
errors++;
}
}
var _valid6 = _errs49 === errors;
valid18 = valid18 || _valid6;
if(!valid18){
const _errs54 = errors;
if(typeof data8 !== "string"){
const err29 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err29];
}
else {
vErrors.push(err29);
}
errors++;
}
if(!(((((data8 === "EdDSA") || (data8 === "RS256")) || (data8 === "PS256")) || (data8 === "ES256")) || (data8 === "ES256K"))){
const err30 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err30];
}
else {
vErrors.push(err30);
}
errors++;
}
var _valid6 = _errs54 === errors;
valid18 = valid18 || _valid6;
}
if(!valid18){
const err31 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/anyOf/0/properties/id_token_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err31];
}
else {
vErrors.push(err31);
}
errors++;
}
else {
errors = _errs48;
if(vErrors !== null){
if(_errs48){
vErrors.length = _errs48;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs47 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.request_object_signing_alg_values_supported !== undefined){
let data10 = data.request_object_signing_alg_values_supported;
const _errs57 = errors;
const _errs58 = errors;
let valid22 = false;
const _errs59 = errors;
if(errors === _errs59){
if(Array.isArray(data10)){
var valid23 = true;
const len4 = data10.length;
for(let i4=0; i4<len4; i4++){
let data11 = data10[i4];
const _errs61 = errors;
if(typeof data11 !== "string"){
const err32 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i4,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err32];
}
else {
vErrors.push(err32);
}
errors++;
}
if(!(((((data11 === "EdDSA") || (data11 === "RS256")) || (data11 === "PS256")) || (data11 === "ES256")) || (data11 === "ES256K"))){
const err33 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i4,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err33];
}
else {
vErrors.push(err33);
}
errors++;
}
var valid23 = _errs61 === errors;
if(!valid23){
break;
}
}
}
else {
const err34 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/anyOf/0/properties/request_object_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err34];
}
else {
vErrors.push(err34);
}
errors++;
}
}
var _valid7 = _errs59 === errors;
valid22 = valid22 || _valid7;
if(!valid22){
const _errs64 = errors;
if(typeof data10 !== "string"){
const err35 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err35];
}
else {
vErrors.push(err35);
}
errors++;
}
if(!(((((data10 === "EdDSA") || (data10 === "RS256")) || (data10 === "PS256")) || (data10 === "ES256")) || (data10 === "ES256K"))){
const err36 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err36];
}
else {
vErrors.push(err36);
}
errors++;
}
var _valid7 = _errs64 === errors;
valid22 = valid22 || _valid7;
}
if(!valid22){
const err37 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/anyOf/0/properties/request_object_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err37];
}
else {
vErrors.push(err37);
}
errors++;
}
else {
errors = _errs58;
if(vErrors !== null){
if(_errs58){
vErrors.length = _errs58;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs57 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.subject_syntax_types_supported !== undefined){
let data12 = data.subject_syntax_types_supported;
const _errs67 = errors;
if(errors === _errs67){
if(Array.isArray(data12)){
var valid26 = true;
const len5 = data12.length;
for(let i5=0; i5<len5; i5++){
const _errs69 = errors;
if(typeof data12[i5] !== "string"){
const err38 = {instancePath:instancePath+"/subject_syntax_types_supported/" + i5,schemaPath:"#/anyOf/0/properties/subject_syntax_types_supported/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err38];
}
else {
vErrors.push(err38);
}
errors++;
}
var valid26 = _errs69 === errors;
if(!valid26){
break;
}
}
}
else {
const err39 = {instancePath:instancePath+"/subject_syntax_types_supported",schemaPath:"#/anyOf/0/properties/subject_syntax_types_supported/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err39];
}
else {
vErrors.push(err39);
}
errors++;
}
}
var valid1 = _errs67 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.token_endpoint !== undefined){
const _errs71 = errors;
if(typeof data.token_endpoint !== "string"){
const err40 = {instancePath:instancePath+"/token_endpoint",schemaPath:"#/anyOf/0/properties/token_endpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err40];
}
else {
vErrors.push(err40);
}
errors++;
}
var valid1 = _errs71 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.userinfo_endpoint !== undefined){
const _errs73 = errors;
if(typeof data.userinfo_endpoint !== "string"){
const err41 = {instancePath:instancePath+"/userinfo_endpoint",schemaPath:"#/anyOf/0/properties/userinfo_endpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err41];
}
else {
vErrors.push(err41);
}
errors++;
}
var valid1 = _errs73 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.jwks_uri !== undefined){
const _errs75 = errors;
if(typeof data.jwks_uri !== "string"){
const err42 = {instancePath:instancePath+"/jwks_uri",schemaPath:"#/anyOf/0/properties/jwks_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err42];
}
else {
vErrors.push(err42);
}
errors++;
}
var valid1 = _errs75 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.registration_endpoint !== undefined){
const _errs77 = errors;
if(typeof data.registration_endpoint !== "string"){
const err43 = {instancePath:instancePath+"/registration_endpoint",schemaPath:"#/anyOf/0/properties/registration_endpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err43];
}
else {
vErrors.push(err43);
}
errors++;
}
var valid1 = _errs77 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.response_modes_supported !== undefined){
let data18 = data.response_modes_supported;
const _errs79 = errors;
const _errs80 = errors;
let valid27 = false;
const _errs81 = errors;
if(errors === _errs81){
if(Array.isArray(data18)){
var valid28 = true;
const len6 = data18.length;
for(let i6=0; i6<len6; i6++){
let data19 = data18[i6];
const _errs83 = errors;
if(typeof data19 !== "string"){
const err44 = {instancePath:instancePath+"/response_modes_supported/" + i6,schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err44];
}
else {
vErrors.push(err44);
}
errors++;
}
if(!((((((((data19 === "fragment") || (data19 === "form_post")) || (data19 === "post")) || (data19 === "direct_post")) || (data19 === "query")) || (data19 === "direct_post.jwt")) || (data19 === "query.jwt")) || (data19 === "fragment.jwt"))){
const err45 = {instancePath:instancePath+"/response_modes_supported/" + i6,schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema537.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err45];
}
else {
vErrors.push(err45);
}
errors++;
}
var valid28 = _errs83 === errors;
if(!valid28){
break;
}
}
}
else {
const err46 = {instancePath:instancePath+"/response_modes_supported",schemaPath:"#/anyOf/0/properties/response_modes_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err46];
}
else {
vErrors.push(err46);
}
errors++;
}
}
var _valid8 = _errs81 === errors;
valid27 = valid27 || _valid8;
if(!valid27){
const _errs86 = errors;
if(typeof data18 !== "string"){
const err47 = {instancePath:instancePath+"/response_modes_supported",schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err47];
}
else {
vErrors.push(err47);
}
errors++;
}
if(!((((((((data18 === "fragment") || (data18 === "form_post")) || (data18 === "post")) || (data18 === "direct_post")) || (data18 === "query")) || (data18 === "direct_post.jwt")) || (data18 === "query.jwt")) || (data18 === "fragment.jwt"))){
const err48 = {instancePath:instancePath+"/response_modes_supported",schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema537.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err48];
}
else {
vErrors.push(err48);
}
errors++;
}
var _valid8 = _errs86 === errors;
valid27 = valid27 || _valid8;
}
if(!valid27){
const err49 = {instancePath:instancePath+"/response_modes_supported",schemaPath:"#/anyOf/0/properties/response_modes_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err49];
}
else {
vErrors.push(err49);
}
errors++;
}
else {
errors = _errs80;
if(vErrors !== null){
if(_errs80){
vErrors.length = _errs80;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs79 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.grant_types_supported !== undefined){
let data20 = data.grant_types_supported;
const _errs89 = errors;
const _errs90 = errors;
let valid31 = false;
const _errs91 = errors;
if(errors === _errs91){
if(Array.isArray(data20)){
var valid32 = true;
const len7 = data20.length;
for(let i7=0; i7<len7; i7++){
let data21 = data20[i7];
const _errs93 = errors;
if(typeof data21 !== "string"){
const err50 = {instancePath:instancePath+"/grant_types_supported/" + i7,schemaPath:"#/definitions/GrantType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err50];
}
else {
vErrors.push(err50);
}
errors++;
}
if(!((data21 === "authorization_code") || (data21 === "implicit"))){
const err51 = {instancePath:instancePath+"/grant_types_supported/" + i7,schemaPath:"#/definitions/GrantType/enum",keyword:"enum",params:{allowedValues: schema539.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err51];
}
else {
vErrors.push(err51);
}
errors++;
}
var valid32 = _errs93 === errors;
if(!valid32){
break;
}
}
}
else {
const err52 = {instancePath:instancePath+"/grant_types_supported",schemaPath:"#/anyOf/0/properties/grant_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err52];
}
else {
vErrors.push(err52);
}
errors++;
}
}
var _valid9 = _errs91 === errors;
valid31 = valid31 || _valid9;
if(!valid31){
const _errs96 = errors;
if(typeof data20 !== "string"){
const err53 = {instancePath:instancePath+"/grant_types_supported",schemaPath:"#/definitions/GrantType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err53];
}
else {
vErrors.push(err53);
}
errors++;
}
if(!((data20 === "authorization_code") || (data20 === "implicit"))){
const err54 = {instancePath:instancePath+"/grant_types_supported",schemaPath:"#/definitions/GrantType/enum",keyword:"enum",params:{allowedValues: schema539.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err54];
}
else {
vErrors.push(err54);
}
errors++;
}
var _valid9 = _errs96 === errors;
valid31 = valid31 || _valid9;
}
if(!valid31){
const err55 = {instancePath:instancePath+"/grant_types_supported",schemaPath:"#/anyOf/0/properties/grant_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err55];
}
else {
vErrors.push(err55);
}
errors++;
}
else {
errors = _errs90;
if(vErrors !== null){
if(_errs90){
vErrors.length = _errs90;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs89 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.acr_values_supported !== undefined){
let data22 = data.acr_values_supported;
const _errs99 = errors;
const _errs100 = errors;
let valid35 = false;
const _errs101 = errors;
if(errors === _errs101){
if(Array.isArray(data22)){
var valid36 = true;
const len8 = data22.length;
for(let i8=0; i8<len8; i8++){
let data23 = data22[i8];
const _errs103 = errors;
if(typeof data23 !== "string"){
const err56 = {instancePath:instancePath+"/acr_values_supported/" + i8,schemaPath:"#/definitions/AuthenticationContextReferences/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err56];
}
else {
vErrors.push(err56);
}
errors++;
}
if(!((data23 === "phr") || (data23 === "phrh"))){
const err57 = {instancePath:instancePath+"/acr_values_supported/" + i8,schemaPath:"#/definitions/AuthenticationContextReferences/enum",keyword:"enum",params:{allowedValues: schema541.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err57];
}
else {
vErrors.push(err57);
}
errors++;
}
var valid36 = _errs103 === errors;
if(!valid36){
break;
}
}
}
else {
const err58 = {instancePath:instancePath+"/acr_values_supported",schemaPath:"#/anyOf/0/properties/acr_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err58];
}
else {
vErrors.push(err58);
}
errors++;
}
}
var _valid10 = _errs101 === errors;
valid35 = valid35 || _valid10;
if(!valid35){
const _errs106 = errors;
if(typeof data22 !== "string"){
const err59 = {instancePath:instancePath+"/acr_values_supported",schemaPath:"#/definitions/AuthenticationContextReferences/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err59];
}
else {
vErrors.push(err59);
}
errors++;
}
if(!((data22 === "phr") || (data22 === "phrh"))){
const err60 = {instancePath:instancePath+"/acr_values_supported",schemaPath:"#/definitions/AuthenticationContextReferences/enum",keyword:"enum",params:{allowedValues: schema541.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err60];
}
else {
vErrors.push(err60);
}
errors++;
}
var _valid10 = _errs106 === errors;
valid35 = valid35 || _valid10;
}
if(!valid35){
const err61 = {instancePath:instancePath+"/acr_values_supported",schemaPath:"#/anyOf/0/properties/acr_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err61];
}
else {
vErrors.push(err61);
}
errors++;
}
else {
errors = _errs100;
if(vErrors !== null){
if(_errs100){
vErrors.length = _errs100;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs99 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.id_token_encryption_alg_values_supported !== undefined){
let data24 = data.id_token_encryption_alg_values_supported;
const _errs109 = errors;
const _errs110 = errors;
let valid39 = false;
const _errs111 = errors;
if(errors === _errs111){
if(Array.isArray(data24)){
var valid40 = true;
const len9 = data24.length;
for(let i9=0; i9<len9; i9++){
let data25 = data24[i9];
const _errs113 = errors;
if(typeof data25 !== "string"){
const err62 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported/" + i9,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err62];
}
else {
vErrors.push(err62);
}
errors++;
}
if(!(((((data25 === "EdDSA") || (data25 === "RS256")) || (data25 === "PS256")) || (data25 === "ES256")) || (data25 === "ES256K"))){
const err63 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported/" + i9,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err63];
}
else {
vErrors.push(err63);
}
errors++;
}
var valid40 = _errs113 === errors;
if(!valid40){
break;
}
}
}
else {
const err64 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported",schemaPath:"#/anyOf/0/properties/id_token_encryption_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err64];
}
else {
vErrors.push(err64);
}
errors++;
}
}
var _valid11 = _errs111 === errors;
valid39 = valid39 || _valid11;
if(!valid39){
const _errs116 = errors;
if(typeof data24 !== "string"){
const err65 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err65];
}
else {
vErrors.push(err65);
}
errors++;
}
if(!(((((data24 === "EdDSA") || (data24 === "RS256")) || (data24 === "PS256")) || (data24 === "ES256")) || (data24 === "ES256K"))){
const err66 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err66];
}
else {
vErrors.push(err66);
}
errors++;
}
var _valid11 = _errs116 === errors;
valid39 = valid39 || _valid11;
}
if(!valid39){
const err67 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported",schemaPath:"#/anyOf/0/properties/id_token_encryption_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err67];
}
else {
vErrors.push(err67);
}
errors++;
}
else {
errors = _errs110;
if(vErrors !== null){
if(_errs110){
vErrors.length = _errs110;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs109 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.id_token_encryption_enc_values_supported !== undefined){
let data26 = data.id_token_encryption_enc_values_supported;
const _errs119 = errors;
const _errs120 = errors;
let valid43 = false;
const _errs121 = errors;
if(errors === _errs121){
if(Array.isArray(data26)){
var valid44 = true;
const len10 = data26.length;
for(let i10=0; i10<len10; i10++){
const _errs123 = errors;
if(typeof data26[i10] !== "string"){
const err68 = {instancePath:instancePath+"/id_token_encryption_enc_values_supported/" + i10,schemaPath:"#/anyOf/0/properties/id_token_encryption_enc_values_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err68];
}
else {
vErrors.push(err68);
}
errors++;
}
var valid44 = _errs123 === errors;
if(!valid44){
break;
}
}
}
else {
const err69 = {instancePath:instancePath+"/id_token_encryption_enc_values_supported",schemaPath:"#/anyOf/0/properties/id_token_encryption_enc_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err69];
}
else {
vErrors.push(err69);
}
errors++;
}
}
var _valid12 = _errs121 === errors;
valid43 = valid43 || _valid12;
if(!valid43){
const _errs125 = errors;
if(typeof data26 !== "string"){
const err70 = {instancePath:instancePath+"/id_token_encryption_enc_values_supported",schemaPath:"#/anyOf/0/properties/id_token_encryption_enc_values_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err70];
}
else {
vErrors.push(err70);
}
errors++;
}
var _valid12 = _errs125 === errors;
valid43 = valid43 || _valid12;
}
if(!valid43){
const err71 = {instancePath:instancePath+"/id_token_encryption_enc_values_supported",schemaPath:"#/anyOf/0/properties/id_token_encryption_enc_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err71];
}
else {
vErrors.push(err71);
}
errors++;
}
else {
errors = _errs120;
if(vErrors !== null){
if(_errs120){
vErrors.length = _errs120;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs119 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.userinfo_signing_alg_values_supported !== undefined){
let data28 = data.userinfo_signing_alg_values_supported;
const _errs127 = errors;
const _errs128 = errors;
let valid45 = false;
const _errs129 = errors;
if(errors === _errs129){
if(Array.isArray(data28)){
var valid46 = true;
const len11 = data28.length;
for(let i11=0; i11<len11; i11++){
let data29 = data28[i11];
const _errs131 = errors;
if(typeof data29 !== "string"){
const err72 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported/" + i11,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err72];
}
else {
vErrors.push(err72);
}
errors++;
}
if(!(((((data29 === "EdDSA") || (data29 === "RS256")) || (data29 === "PS256")) || (data29 === "ES256")) || (data29 === "ES256K"))){
const err73 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported/" + i11,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err73];
}
else {
vErrors.push(err73);
}
errors++;
}
var valid46 = _errs131 === errors;
if(!valid46){
break;
}
}
}
else {
const err74 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported",schemaPath:"#/anyOf/0/properties/userinfo_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err74];
}
else {
vErrors.push(err74);
}
errors++;
}
}
var _valid13 = _errs129 === errors;
valid45 = valid45 || _valid13;
if(!valid45){
const _errs134 = errors;
if(typeof data28 !== "string"){
const err75 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err75];
}
else {
vErrors.push(err75);
}
errors++;
}
if(!(((((data28 === "EdDSA") || (data28 === "RS256")) || (data28 === "PS256")) || (data28 === "ES256")) || (data28 === "ES256K"))){
const err76 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err76];
}
else {
vErrors.push(err76);
}
errors++;
}
var _valid13 = _errs134 === errors;
valid45 = valid45 || _valid13;
}
if(!valid45){
const err77 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported",schemaPath:"#/anyOf/0/properties/userinfo_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err77];
}
else {
vErrors.push(err77);
}
errors++;
}
else {
errors = _errs128;
if(vErrors !== null){
if(_errs128){
vErrors.length = _errs128;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs127 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.userinfo_encryption_alg_values_supported !== undefined){
let data30 = data.userinfo_encryption_alg_values_supported;
const _errs137 = errors;
const _errs138 = errors;
let valid49 = false;
const _errs139 = errors;
if(errors === _errs139){
if(Array.isArray(data30)){
var valid50 = true;
const len12 = data30.length;
for(let i12=0; i12<len12; i12++){
let data31 = data30[i12];
const _errs141 = errors;
if(typeof data31 !== "string"){
const err78 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported/" + i12,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err78];
}
else {
vErrors.push(err78);
}
errors++;
}
if(!(((((data31 === "EdDSA") || (data31 === "RS256")) || (data31 === "PS256")) || (data31 === "ES256")) || (data31 === "ES256K"))){
const err79 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported/" + i12,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err79];
}
else {
vErrors.push(err79);
}
errors++;
}
var valid50 = _errs141 === errors;
if(!valid50){
break;
}
}
}
else {
const err80 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported",schemaPath:"#/anyOf/0/properties/userinfo_encryption_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err80];
}
else {
vErrors.push(err80);
}
errors++;
}
}
var _valid14 = _errs139 === errors;
valid49 = valid49 || _valid14;
if(!valid49){
const _errs144 = errors;
if(typeof data30 !== "string"){
const err81 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err81];
}
else {
vErrors.push(err81);
}
errors++;
}
if(!(((((data30 === "EdDSA") || (data30 === "RS256")) || (data30 === "PS256")) || (data30 === "ES256")) || (data30 === "ES256K"))){
const err82 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err82];
}
else {
vErrors.push(err82);
}
errors++;
}
var _valid14 = _errs144 === errors;
valid49 = valid49 || _valid14;
}
if(!valid49){
const err83 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported",schemaPath:"#/anyOf/0/properties/userinfo_encryption_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err83];
}
else {
vErrors.push(err83);
}
errors++;
}
else {
errors = _errs138;
if(vErrors !== null){
if(_errs138){
vErrors.length = _errs138;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs137 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.userinfo_encryption_enc_values_supported !== undefined){
let data32 = data.userinfo_encryption_enc_values_supported;
const _errs147 = errors;
const _errs148 = errors;
let valid53 = false;
const _errs149 = errors;
if(errors === _errs149){
if(Array.isArray(data32)){
var valid54 = true;
const len13 = data32.length;
for(let i13=0; i13<len13; i13++){
const _errs151 = errors;
if(typeof data32[i13] !== "string"){
const err84 = {instancePath:instancePath+"/userinfo_encryption_enc_values_supported/" + i13,schemaPath:"#/anyOf/0/properties/userinfo_encryption_enc_values_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err84];
}
else {
vErrors.push(err84);
}
errors++;
}
var valid54 = _errs151 === errors;
if(!valid54){
break;
}
}
}
else {
const err85 = {instancePath:instancePath+"/userinfo_encryption_enc_values_supported",schemaPath:"#/anyOf/0/properties/userinfo_encryption_enc_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err85];
}
else {
vErrors.push(err85);
}
errors++;
}
}
var _valid15 = _errs149 === errors;
valid53 = valid53 || _valid15;
if(!valid53){
const _errs153 = errors;
if(typeof data32 !== "string"){
const err86 = {instancePath:instancePath+"/userinfo_encryption_enc_values_supported",schemaPath:"#/anyOf/0/properties/userinfo_encryption_enc_values_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err86];
}
else {
vErrors.push(err86);
}
errors++;
}
var _valid15 = _errs153 === errors;
valid53 = valid53 || _valid15;
}
if(!valid53){
const err87 = {instancePath:instancePath+"/userinfo_encryption_enc_values_supported",schemaPath:"#/anyOf/0/properties/userinfo_encryption_enc_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err87];
}
else {
vErrors.push(err87);
}
errors++;
}
else {
errors = _errs148;
if(vErrors !== null){
if(_errs148){
vErrors.length = _errs148;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs147 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.request_object_encryption_alg_values_supported !== undefined){
let data34 = data.request_object_encryption_alg_values_supported;
const _errs155 = errors;
const _errs156 = errors;
let valid55 = false;
const _errs157 = errors;
if(errors === _errs157){
if(Array.isArray(data34)){
var valid56 = true;
const len14 = data34.length;
for(let i14=0; i14<len14; i14++){
let data35 = data34[i14];
const _errs159 = errors;
if(typeof data35 !== "string"){
const err88 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported/" + i14,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err88];
}
else {
vErrors.push(err88);
}
errors++;
}
if(!(((((data35 === "EdDSA") || (data35 === "RS256")) || (data35 === "PS256")) || (data35 === "ES256")) || (data35 === "ES256K"))){
const err89 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported/" + i14,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err89];
}
else {
vErrors.push(err89);
}
errors++;
}
var valid56 = _errs159 === errors;
if(!valid56){
break;
}
}
}
else {
const err90 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported",schemaPath:"#/anyOf/0/properties/request_object_encryption_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err90];
}
else {
vErrors.push(err90);
}
errors++;
}
}
var _valid16 = _errs157 === errors;
valid55 = valid55 || _valid16;
if(!valid55){
const _errs162 = errors;
if(typeof data34 !== "string"){
const err91 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err91];
}
else {
vErrors.push(err91);
}
errors++;
}
if(!(((((data34 === "EdDSA") || (data34 === "RS256")) || (data34 === "PS256")) || (data34 === "ES256")) || (data34 === "ES256K"))){
const err92 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err92];
}
else {
vErrors.push(err92);
}
errors++;
}
var _valid16 = _errs162 === errors;
valid55 = valid55 || _valid16;
}
if(!valid55){
const err93 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported",schemaPath:"#/anyOf/0/properties/request_object_encryption_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err93];
}
else {
vErrors.push(err93);
}
errors++;
}
else {
errors = _errs156;
if(vErrors !== null){
if(_errs156){
vErrors.length = _errs156;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs155 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.request_object_encryption_enc_values_supported !== undefined){
let data36 = data.request_object_encryption_enc_values_supported;
const _errs165 = errors;
const _errs166 = errors;
let valid59 = false;
const _errs167 = errors;
if(errors === _errs167){
if(Array.isArray(data36)){
var valid60 = true;
const len15 = data36.length;
for(let i15=0; i15<len15; i15++){
const _errs169 = errors;
if(typeof data36[i15] !== "string"){
const err94 = {instancePath:instancePath+"/request_object_encryption_enc_values_supported/" + i15,schemaPath:"#/anyOf/0/properties/request_object_encryption_enc_values_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err94];
}
else {
vErrors.push(err94);
}
errors++;
}
var valid60 = _errs169 === errors;
if(!valid60){
break;
}
}
}
else {
const err95 = {instancePath:instancePath+"/request_object_encryption_enc_values_supported",schemaPath:"#/anyOf/0/properties/request_object_encryption_enc_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err95];
}
else {
vErrors.push(err95);
}
errors++;
}
}
var _valid17 = _errs167 === errors;
valid59 = valid59 || _valid17;
if(!valid59){
const _errs171 = errors;
if(typeof data36 !== "string"){
const err96 = {instancePath:instancePath+"/request_object_encryption_enc_values_supported",schemaPath:"#/anyOf/0/properties/request_object_encryption_enc_values_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err96];
}
else {
vErrors.push(err96);
}
errors++;
}
var _valid17 = _errs171 === errors;
valid59 = valid59 || _valid17;
}
if(!valid59){
const err97 = {instancePath:instancePath+"/request_object_encryption_enc_values_supported",schemaPath:"#/anyOf/0/properties/request_object_encryption_enc_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err97];
}
else {
vErrors.push(err97);
}
errors++;
}
else {
errors = _errs166;
if(vErrors !== null){
if(_errs166){
vErrors.length = _errs166;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs165 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.token_endpoint_auth_methods_supported !== undefined){
let data38 = data.token_endpoint_auth_methods_supported;
const _errs173 = errors;
const _errs174 = errors;
let valid61 = false;
const _errs175 = errors;
if(errors === _errs175){
if(Array.isArray(data38)){
var valid62 = true;
const len16 = data38.length;
for(let i16=0; i16<len16; i16++){
let data39 = data38[i16];
const _errs177 = errors;
if(typeof data39 !== "string"){
const err98 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported/" + i16,schemaPath:"#/definitions/TokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err98];
}
else {
vErrors.push(err98);
}
errors++;
}
if(!((((data39 === "client_secret_post") || (data39 === "client_secret_basic")) || (data39 === "client_secret_jwt")) || (data39 === "private_key_jwt"))){
const err99 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported/" + i16,schemaPath:"#/definitions/TokenEndpointAuthMethod/enum",keyword:"enum",params:{allowedValues: schema551.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err99];
}
else {
vErrors.push(err99);
}
errors++;
}
var valid62 = _errs177 === errors;
if(!valid62){
break;
}
}
}
else {
const err100 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported",schemaPath:"#/anyOf/0/properties/token_endpoint_auth_methods_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err100];
}
else {
vErrors.push(err100);
}
errors++;
}
}
var _valid18 = _errs175 === errors;
valid61 = valid61 || _valid18;
if(!valid61){
const _errs180 = errors;
if(typeof data38 !== "string"){
const err101 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported",schemaPath:"#/definitions/TokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err101];
}
else {
vErrors.push(err101);
}
errors++;
}
if(!((((data38 === "client_secret_post") || (data38 === "client_secret_basic")) || (data38 === "client_secret_jwt")) || (data38 === "private_key_jwt"))){
const err102 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported",schemaPath:"#/definitions/TokenEndpointAuthMethod/enum",keyword:"enum",params:{allowedValues: schema551.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err102];
}
else {
vErrors.push(err102);
}
errors++;
}
var _valid18 = _errs180 === errors;
valid61 = valid61 || _valid18;
}
if(!valid61){
const err103 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported",schemaPath:"#/anyOf/0/properties/token_endpoint_auth_methods_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err103];
}
else {
vErrors.push(err103);
}
errors++;
}
else {
errors = _errs174;
if(vErrors !== null){
if(_errs174){
vErrors.length = _errs174;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs173 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.token_endpoint_auth_signing_alg_values_supported !== undefined){
let data40 = data.token_endpoint_auth_signing_alg_values_supported;
const _errs183 = errors;
const _errs184 = errors;
let valid65 = false;
const _errs185 = errors;
if(errors === _errs185){
if(Array.isArray(data40)){
var valid66 = true;
const len17 = data40.length;
for(let i17=0; i17<len17; i17++){
let data41 = data40[i17];
const _errs187 = errors;
if(typeof data41 !== "string"){
const err104 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported/" + i17,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err104];
}
else {
vErrors.push(err104);
}
errors++;
}
if(!(((((data41 === "EdDSA") || (data41 === "RS256")) || (data41 === "PS256")) || (data41 === "ES256")) || (data41 === "ES256K"))){
const err105 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported/" + i17,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err105];
}
else {
vErrors.push(err105);
}
errors++;
}
var valid66 = _errs187 === errors;
if(!valid66){
break;
}
}
}
else {
const err106 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported",schemaPath:"#/anyOf/0/properties/token_endpoint_auth_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err106];
}
else {
vErrors.push(err106);
}
errors++;
}
}
var _valid19 = _errs185 === errors;
valid65 = valid65 || _valid19;
if(!valid65){
const _errs190 = errors;
if(typeof data40 !== "string"){
const err107 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err107];
}
else {
vErrors.push(err107);
}
errors++;
}
if(!(((((data40 === "EdDSA") || (data40 === "RS256")) || (data40 === "PS256")) || (data40 === "ES256")) || (data40 === "ES256K"))){
const err108 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err108];
}
else {
vErrors.push(err108);
}
errors++;
}
var _valid19 = _errs190 === errors;
valid65 = valid65 || _valid19;
}
if(!valid65){
const err109 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported",schemaPath:"#/anyOf/0/properties/token_endpoint_auth_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err109];
}
else {
vErrors.push(err109);
}
errors++;
}
else {
errors = _errs184;
if(vErrors !== null){
if(_errs184){
vErrors.length = _errs184;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs183 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.display_values_supported !== undefined){
let data42 = data.display_values_supported;
const _errs193 = errors;
const _errs194 = errors;
let valid69 = false;
const _errs195 = errors;
if(errors === _errs195){
if(Array.isArray(data42)){
var valid70 = true;
const len18 = data42.length;
for(let i18=0; i18<len18; i18++){
const _errs197 = errors;
var valid70 = _errs197 === errors;
if(!valid70){
break;
}
}
}
else {
const err110 = {instancePath:instancePath+"/display_values_supported",schemaPath:"#/anyOf/0/properties/display_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err110];
}
else {
vErrors.push(err110);
}
errors++;
}
}
var _valid20 = _errs195 === errors;
valid69 = valid69 || _valid20;
if(!valid69){
const _errs198 = errors;
var _valid20 = _errs198 === errors;
valid69 = valid69 || _valid20;
}
if(!valid69){
const err111 = {instancePath:instancePath+"/display_values_supported",schemaPath:"#/anyOf/0/properties/display_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err111];
}
else {
vErrors.push(err111);
}
errors++;
}
else {
errors = _errs194;
if(vErrors !== null){
if(_errs194){
vErrors.length = _errs194;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs193 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.claim_types_supported !== undefined){
let data44 = data.claim_types_supported;
const _errs199 = errors;
const _errs200 = errors;
let valid71 = false;
const _errs201 = errors;
if(errors === _errs201){
if(Array.isArray(data44)){
var valid72 = true;
const len19 = data44.length;
for(let i19=0; i19<len19; i19++){
let data45 = data44[i19];
const _errs203 = errors;
if(typeof data45 !== "string"){
const err112 = {instancePath:instancePath+"/claim_types_supported/" + i19,schemaPath:"#/definitions/ClaimType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err112];
}
else {
vErrors.push(err112);
}
errors++;
}
if(!(((data45 === "normal") || (data45 === "aggregated")) || (data45 === "distributed"))){
const err113 = {instancePath:instancePath+"/claim_types_supported/" + i19,schemaPath:"#/definitions/ClaimType/enum",keyword:"enum",params:{allowedValues: schema555.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err113];
}
else {
vErrors.push(err113);
}
errors++;
}
var valid72 = _errs203 === errors;
if(!valid72){
break;
}
}
}
else {
const err114 = {instancePath:instancePath+"/claim_types_supported",schemaPath:"#/anyOf/0/properties/claim_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err114];
}
else {
vErrors.push(err114);
}
errors++;
}
}
var _valid21 = _errs201 === errors;
valid71 = valid71 || _valid21;
if(!valid71){
const _errs206 = errors;
if(typeof data44 !== "string"){
const err115 = {instancePath:instancePath+"/claim_types_supported",schemaPath:"#/definitions/ClaimType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err115];
}
else {
vErrors.push(err115);
}
errors++;
}
if(!(((data44 === "normal") || (data44 === "aggregated")) || (data44 === "distributed"))){
const err116 = {instancePath:instancePath+"/claim_types_supported",schemaPath:"#/definitions/ClaimType/enum",keyword:"enum",params:{allowedValues: schema555.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err116];
}
else {
vErrors.push(err116);
}
errors++;
}
var _valid21 = _errs206 === errors;
valid71 = valid71 || _valid21;
}
if(!valid71){
const err117 = {instancePath:instancePath+"/claim_types_supported",schemaPath:"#/anyOf/0/properties/claim_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err117];
}
else {
vErrors.push(err117);
}
errors++;
}
else {
errors = _errs200;
if(vErrors !== null){
if(_errs200){
vErrors.length = _errs200;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs199 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.claims_supported !== undefined){
let data46 = data.claims_supported;
const _errs209 = errors;
const _errs210 = errors;
let valid75 = false;
const _errs211 = errors;
if(errors === _errs211){
if(Array.isArray(data46)){
var valid76 = true;
const len20 = data46.length;
for(let i20=0; i20<len20; i20++){
const _errs213 = errors;
if(typeof data46[i20] !== "string"){
const err118 = {instancePath:instancePath+"/claims_supported/" + i20,schemaPath:"#/anyOf/0/properties/claims_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err118];
}
else {
vErrors.push(err118);
}
errors++;
}
var valid76 = _errs213 === errors;
if(!valid76){
break;
}
}
}
else {
const err119 = {instancePath:instancePath+"/claims_supported",schemaPath:"#/anyOf/0/properties/claims_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err119];
}
else {
vErrors.push(err119);
}
errors++;
}
}
var _valid22 = _errs211 === errors;
valid75 = valid75 || _valid22;
if(!valid75){
const _errs215 = errors;
if(typeof data46 !== "string"){
const err120 = {instancePath:instancePath+"/claims_supported",schemaPath:"#/anyOf/0/properties/claims_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err120];
}
else {
vErrors.push(err120);
}
errors++;
}
var _valid22 = _errs215 === errors;
valid75 = valid75 || _valid22;
}
if(!valid75){
const err121 = {instancePath:instancePath+"/claims_supported",schemaPath:"#/anyOf/0/properties/claims_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err121];
}
else {
vErrors.push(err121);
}
errors++;
}
else {
errors = _errs210;
if(vErrors !== null){
if(_errs210){
vErrors.length = _errs210;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs209 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.service_documentation !== undefined){
const _errs217 = errors;
if(typeof data.service_documentation !== "string"){
const err122 = {instancePath:instancePath+"/service_documentation",schemaPath:"#/anyOf/0/properties/service_documentation/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err122];
}
else {
vErrors.push(err122);
}
errors++;
}
var valid1 = _errs217 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.claims_locales_supported !== undefined){
let data49 = data.claims_locales_supported;
const _errs219 = errors;
const _errs220 = errors;
let valid77 = false;
const _errs221 = errors;
if(errors === _errs221){
if(Array.isArray(data49)){
var valid78 = true;
const len21 = data49.length;
for(let i21=0; i21<len21; i21++){
const _errs223 = errors;
if(typeof data49[i21] !== "string"){
const err123 = {instancePath:instancePath+"/claims_locales_supported/" + i21,schemaPath:"#/anyOf/0/properties/claims_locales_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err123];
}
else {
vErrors.push(err123);
}
errors++;
}
var valid78 = _errs223 === errors;
if(!valid78){
break;
}
}
}
else {
const err124 = {instancePath:instancePath+"/claims_locales_supported",schemaPath:"#/anyOf/0/properties/claims_locales_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err124];
}
else {
vErrors.push(err124);
}
errors++;
}
}
var _valid23 = _errs221 === errors;
valid77 = valid77 || _valid23;
if(!valid77){
const _errs225 = errors;
if(typeof data49 !== "string"){
const err125 = {instancePath:instancePath+"/claims_locales_supported",schemaPath:"#/anyOf/0/properties/claims_locales_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err125];
}
else {
vErrors.push(err125);
}
errors++;
}
var _valid23 = _errs225 === errors;
valid77 = valid77 || _valid23;
}
if(!valid77){
const err126 = {instancePath:instancePath+"/claims_locales_supported",schemaPath:"#/anyOf/0/properties/claims_locales_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err126];
}
else {
vErrors.push(err126);
}
errors++;
}
else {
errors = _errs220;
if(vErrors !== null){
if(_errs220){
vErrors.length = _errs220;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs219 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.ui_locales_supported !== undefined){
let data51 = data.ui_locales_supported;
const _errs227 = errors;
const _errs228 = errors;
let valid79 = false;
const _errs229 = errors;
if(errors === _errs229){
if(Array.isArray(data51)){
var valid80 = true;
const len22 = data51.length;
for(let i22=0; i22<len22; i22++){
const _errs231 = errors;
if(typeof data51[i22] !== "string"){
const err127 = {instancePath:instancePath+"/ui_locales_supported/" + i22,schemaPath:"#/anyOf/0/properties/ui_locales_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err127];
}
else {
vErrors.push(err127);
}
errors++;
}
var valid80 = _errs231 === errors;
if(!valid80){
break;
}
}
}
else {
const err128 = {instancePath:instancePath+"/ui_locales_supported",schemaPath:"#/anyOf/0/properties/ui_locales_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err128];
}
else {
vErrors.push(err128);
}
errors++;
}
}
var _valid24 = _errs229 === errors;
valid79 = valid79 || _valid24;
if(!valid79){
const _errs233 = errors;
if(typeof data51 !== "string"){
const err129 = {instancePath:instancePath+"/ui_locales_supported",schemaPath:"#/anyOf/0/properties/ui_locales_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err129];
}
else {
vErrors.push(err129);
}
errors++;
}
var _valid24 = _errs233 === errors;
valid79 = valid79 || _valid24;
}
if(!valid79){
const err130 = {instancePath:instancePath+"/ui_locales_supported",schemaPath:"#/anyOf/0/properties/ui_locales_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err130];
}
else {
vErrors.push(err130);
}
errors++;
}
else {
errors = _errs228;
if(vErrors !== null){
if(_errs228){
vErrors.length = _errs228;
}
else {
vErrors = null;
}
}
}
var valid1 = _errs227 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.claims_parameter_supported !== undefined){
const _errs235 = errors;
if(typeof data.claims_parameter_supported !== "boolean"){
const err131 = {instancePath:instancePath+"/claims_parameter_supported",schemaPath:"#/anyOf/0/properties/claims_parameter_supported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err131];
}
else {
vErrors.push(err131);
}
errors++;
}
var valid1 = _errs235 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.request_parameter_supported !== undefined){
const _errs237 = errors;
if(typeof data.request_parameter_supported !== "boolean"){
const err132 = {instancePath:instancePath+"/request_parameter_supported",schemaPath:"#/anyOf/0/properties/request_parameter_supported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err132];
}
else {
vErrors.push(err132);
}
errors++;
}
var valid1 = _errs237 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.request_uri_parameter_supported !== undefined){
const _errs239 = errors;
if(typeof data.request_uri_parameter_supported !== "boolean"){
const err133 = {instancePath:instancePath+"/request_uri_parameter_supported",schemaPath:"#/anyOf/0/properties/request_uri_parameter_supported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err133];
}
else {
vErrors.push(err133);
}
errors++;
}
var valid1 = _errs239 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.require_request_uri_registration !== undefined){
const _errs241 = errors;
if(typeof data.require_request_uri_registration !== "boolean"){
const err134 = {instancePath:instancePath+"/require_request_uri_registration",schemaPath:"#/anyOf/0/properties/require_request_uri_registration/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err134];
}
else {
vErrors.push(err134);
}
errors++;
}
var valid1 = _errs241 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.op_policy_uri !== undefined){
const _errs243 = errors;
if(typeof data.op_policy_uri !== "string"){
const err135 = {instancePath:instancePath+"/op_policy_uri",schemaPath:"#/anyOf/0/properties/op_policy_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err135];
}
else {
vErrors.push(err135);
}
errors++;
}
var valid1 = _errs243 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.op_tos_uri !== undefined){
const _errs245 = errors;
if(typeof data.op_tos_uri !== "string"){
const err136 = {instancePath:instancePath+"/op_tos_uri",schemaPath:"#/anyOf/0/properties/op_tos_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err136];
}
else {
vErrors.push(err136);
}
errors++;
}
var valid1 = _errs245 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.redirect_uris !== undefined){
let data59 = data.redirect_uris;
const _errs247 = errors;
if(errors === _errs247){
if(Array.isArray(data59)){
var valid81 = true;
const len23 = data59.length;
for(let i23=0; i23<len23; i23++){
const _errs249 = errors;
if(typeof data59[i23] !== "string"){
const err137 = {instancePath:instancePath+"/redirect_uris/" + i23,schemaPath:"#/anyOf/0/properties/redirect_uris/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err137];
}
else {
vErrors.push(err137);
}
errors++;
}
var valid81 = _errs249 === errors;
if(!valid81){
break;
}
}
}
else {
const err138 = {instancePath:instancePath+"/redirect_uris",schemaPath:"#/anyOf/0/properties/redirect_uris/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err138];
}
else {
vErrors.push(err138);
}
errors++;
}
}
var valid1 = _errs247 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.token_endpoint_auth_method !== undefined){
const _errs251 = errors;
if(typeof data.token_endpoint_auth_method !== "string"){
const err139 = {instancePath:instancePath+"/token_endpoint_auth_method",schemaPath:"#/anyOf/0/properties/token_endpoint_auth_method/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err139];
}
else {
vErrors.push(err139);
}
errors++;
}
var valid1 = _errs251 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.grant_types !== undefined){
const _errs253 = errors;
if(typeof data.grant_types !== "string"){
const err140 = {instancePath:instancePath+"/grant_types",schemaPath:"#/anyOf/0/properties/grant_types/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err140];
}
else {
vErrors.push(err140);
}
errors++;
}
var valid1 = _errs253 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.response_types !== undefined){
const _errs255 = errors;
if(typeof data.response_types !== "string"){
const err141 = {instancePath:instancePath+"/response_types",schemaPath:"#/anyOf/0/properties/response_types/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err141];
}
else {
vErrors.push(err141);
}
errors++;
}
var valid1 = _errs255 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.client_name !== undefined){
const _errs257 = errors;
if(typeof data.client_name !== "string"){
const err142 = {instancePath:instancePath+"/client_name",schemaPath:"#/anyOf/0/properties/client_name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err142];
}
else {
vErrors.push(err142);
}
errors++;
}
var valid1 = _errs257 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.client_uri !== undefined){
const _errs259 = errors;
if(typeof data.client_uri !== "string"){
const err143 = {instancePath:instancePath+"/client_uri",schemaPath:"#/anyOf/0/properties/client_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err143];
}
else {
vErrors.push(err143);
}
errors++;
}
var valid1 = _errs259 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.logo_uri !== undefined){
const _errs261 = errors;
if(typeof data.logo_uri !== "string"){
const err144 = {instancePath:instancePath+"/logo_uri",schemaPath:"#/anyOf/0/properties/logo_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err144];
}
else {
vErrors.push(err144);
}
errors++;
}
var valid1 = _errs261 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.scope !== undefined){
const _errs263 = errors;
if(typeof data.scope !== "string"){
const err145 = {instancePath:instancePath+"/scope",schemaPath:"#/anyOf/0/properties/scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err145];
}
else {
vErrors.push(err145);
}
errors++;
}
var valid1 = _errs263 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.contacts !== undefined){
let data68 = data.contacts;
const _errs265 = errors;
if(errors === _errs265){
if(Array.isArray(data68)){
var valid82 = true;
const len24 = data68.length;
for(let i24=0; i24<len24; i24++){
const _errs267 = errors;
if(typeof data68[i24] !== "string"){
const err146 = {instancePath:instancePath+"/contacts/" + i24,schemaPath:"#/anyOf/0/properties/contacts/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err146];
}
else {
vErrors.push(err146);
}
errors++;
}
var valid82 = _errs267 === errors;
if(!valid82){
break;
}
}
}
else {
const err147 = {instancePath:instancePath+"/contacts",schemaPath:"#/anyOf/0/properties/contacts/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err147];
}
else {
vErrors.push(err147);
}
errors++;
}
}
var valid1 = _errs265 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.tos_uri !== undefined){
const _errs269 = errors;
if(typeof data.tos_uri !== "string"){
const err148 = {instancePath:instancePath+"/tos_uri",schemaPath:"#/anyOf/0/properties/tos_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err148];
}
else {
vErrors.push(err148);
}
errors++;
}
var valid1 = _errs269 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.policy_uri !== undefined){
const _errs271 = errors;
if(typeof data.policy_uri !== "string"){
const err149 = {instancePath:instancePath+"/policy_uri",schemaPath:"#/anyOf/0/properties/policy_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err149];
}
else {
vErrors.push(err149);
}
errors++;
}
var valid1 = _errs271 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.jwks !== undefined){
const _errs273 = errors;
if(!(validate271(data.jwks, {instancePath:instancePath+"/jwks",parentData:data,parentDataProperty:"jwks",rootData}))){
vErrors = vErrors === null ? validate271.errors : vErrors.concat(validate271.errors);
errors = vErrors.length;
}
var valid1 = _errs273 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.software_id !== undefined){
const _errs274 = errors;
if(typeof data.software_id !== "string"){
const err150 = {instancePath:instancePath+"/software_id",schemaPath:"#/anyOf/0/properties/software_id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err150];
}
else {
vErrors.push(err150);
}
errors++;
}
var valid1 = _errs274 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.software_version !== undefined){
const _errs276 = errors;
if(typeof data.software_version !== "string"){
const err151 = {instancePath:instancePath+"/software_version",schemaPath:"#/anyOf/0/properties/software_version/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err151];
}
else {
vErrors.push(err151);
}
errors++;
}
var valid1 = _errs276 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.client_id !== undefined){
const _errs278 = errors;
if(typeof data.client_id !== "string"){
const err152 = {instancePath:instancePath+"/client_id",schemaPath:"#/anyOf/0/properties/client_id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err152];
}
else {
vErrors.push(err152);
}
errors++;
}
var valid1 = _errs278 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.application_type !== undefined){
const _errs280 = errors;
if(typeof data.application_type !== "string"){
const err153 = {instancePath:instancePath+"/application_type",schemaPath:"#/anyOf/0/properties/application_type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err153];
}
else {
vErrors.push(err153);
}
errors++;
}
var valid1 = _errs280 === errors;
}
else {
var valid1 = true;
}
if(valid1){
if(data.vp_formats !== undefined){
const _errs282 = errors;
if(!(validate273(data.vp_formats, {instancePath:instancePath+"/vp_formats",parentData:data,parentDataProperty:"vp_formats",rootData}))){
vErrors = vErrors === null ? validate273.errors : vErrors.concat(validate273.errors);
errors = vErrors.length;
}
var valid1 = _errs282 === errors;
}
else {
var valid1 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
const err154 = {instancePath,schemaPath:"#/anyOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err154];
}
else {
vErrors.push(err154);
}
errors++;
}
}
var _valid0 = _errs1 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs283 = errors;
if(errors === _errs283){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.authorization_endpoint !== undefined){
let data78 = data.authorization_endpoint;
const _errs285 = errors;
const _errs286 = errors;
let valid84 = false;
const _errs287 = errors;
if(typeof data78 !== "string"){
const err155 = {instancePath:instancePath+"/authorization_endpoint",schemaPath:"#/definitions/Schema/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err155];
}
else {
vErrors.push(err155);
}
errors++;
}
if(!((data78 === "openid:") || (data78 === "openid-vc:"))){
const err156 = {instancePath:instancePath+"/authorization_endpoint",schemaPath:"#/definitions/Schema/enum",keyword:"enum",params:{allowedValues: schema525.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err156];
}
else {
vErrors.push(err156);
}
errors++;
}
var _valid25 = _errs287 === errors;
valid84 = valid84 || _valid25;
if(!valid84){
const _errs290 = errors;
if(typeof data78 !== "string"){
const err157 = {instancePath:instancePath+"/authorization_endpoint",schemaPath:"#/anyOf/1/properties/authorization_endpoint/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err157];
}
else {
vErrors.push(err157);
}
errors++;
}
var _valid25 = _errs290 === errors;
valid84 = valid84 || _valid25;
}
if(!valid84){
const err158 = {instancePath:instancePath+"/authorization_endpoint",schemaPath:"#/anyOf/1/properties/authorization_endpoint/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err158];
}
else {
vErrors.push(err158);
}
errors++;
}
else {
errors = _errs286;
if(vErrors !== null){
if(_errs286){
vErrors.length = _errs286;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs285 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.issuer !== undefined){
let data79 = data.issuer;
const _errs292 = errors;
const _errs293 = errors;
let valid86 = false;
const _errs294 = errors;
if(typeof data79 !== "string"){
const err159 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/ResponseIss/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err159];
}
else {
vErrors.push(err159);
}
errors++;
}
if(!(((data79 === "https://self-issued.me") || (data79 === "https://self-issued.me/v2")) || (data79 === "https://self-issued.me/v2/openid-vc"))){
const err160 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/ResponseIss/enum",keyword:"enum",params:{allowedValues: schema526.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err160];
}
else {
vErrors.push(err160);
}
errors++;
}
var _valid26 = _errs294 === errors;
valid86 = valid86 || _valid26;
if(!valid86){
const _errs297 = errors;
if(typeof data79 !== "string"){
const err161 = {instancePath:instancePath+"/issuer",schemaPath:"#/anyOf/1/properties/issuer/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err161];
}
else {
vErrors.push(err161);
}
errors++;
}
var _valid26 = _errs297 === errors;
valid86 = valid86 || _valid26;
}
if(!valid86){
const err162 = {instancePath:instancePath+"/issuer",schemaPath:"#/anyOf/1/properties/issuer/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err162];
}
else {
vErrors.push(err162);
}
errors++;
}
else {
errors = _errs293;
if(vErrors !== null){
if(_errs293){
vErrors.length = _errs293;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs292 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.response_types_supported !== undefined){
let data80 = data.response_types_supported;
const _errs299 = errors;
const _errs300 = errors;
let valid88 = false;
const _errs301 = errors;
if(errors === _errs301){
if(Array.isArray(data80)){
var valid89 = true;
const len25 = data80.length;
for(let i25=0; i25<len25; i25++){
let data81 = data80[i25];
const _errs303 = errors;
if(typeof data81 !== "string"){
const err163 = {instancePath:instancePath+"/response_types_supported/" + i25,schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err163];
}
else {
vErrors.push(err163);
}
errors++;
}
if(!((data81 === "id_token") || (data81 === "vp_token"))){
const err164 = {instancePath:instancePath+"/response_types_supported/" + i25,schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema527.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err164];
}
else {
vErrors.push(err164);
}
errors++;
}
var valid89 = _errs303 === errors;
if(!valid89){
break;
}
}
}
else {
const err165 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/anyOf/1/properties/response_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err165];
}
else {
vErrors.push(err165);
}
errors++;
}
}
var _valid27 = _errs301 === errors;
valid88 = valid88 || _valid27;
if(!valid88){
const _errs306 = errors;
if(typeof data80 !== "string"){
const err166 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err166];
}
else {
vErrors.push(err166);
}
errors++;
}
if(!((data80 === "id_token") || (data80 === "vp_token"))){
const err167 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema527.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err167];
}
else {
vErrors.push(err167);
}
errors++;
}
var _valid27 = _errs306 === errors;
valid88 = valid88 || _valid27;
}
if(!valid88){
const err168 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/anyOf/1/properties/response_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err168];
}
else {
vErrors.push(err168);
}
errors++;
}
else {
errors = _errs300;
if(vErrors !== null){
if(_errs300){
vErrors.length = _errs300;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs299 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.scopes_supported !== undefined){
let data82 = data.scopes_supported;
const _errs309 = errors;
const _errs310 = errors;
let valid92 = false;
const _errs311 = errors;
if(errors === _errs311){
if(Array.isArray(data82)){
var valid93 = true;
const len26 = data82.length;
for(let i26=0; i26<len26; i26++){
let data83 = data82[i26];
const _errs313 = errors;
if(typeof data83 !== "string"){
const err169 = {instancePath:instancePath+"/scopes_supported/" + i26,schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err169];
}
else {
vErrors.push(err169);
}
errors++;
}
if(!((((((data83 === "openid") || (data83 === "openid did_authn")) || (data83 === "profile")) || (data83 === "email")) || (data83 === "address")) || (data83 === "phone"))){
const err170 = {instancePath:instancePath+"/scopes_supported/" + i26,schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema529.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err170];
}
else {
vErrors.push(err170);
}
errors++;
}
var valid93 = _errs313 === errors;
if(!valid93){
break;
}
}
}
else {
const err171 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/anyOf/1/properties/scopes_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err171];
}
else {
vErrors.push(err171);
}
errors++;
}
}
var _valid28 = _errs311 === errors;
valid92 = valid92 || _valid28;
if(!valid92){
const _errs316 = errors;
if(typeof data82 !== "string"){
const err172 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err172];
}
else {
vErrors.push(err172);
}
errors++;
}
if(!((((((data82 === "openid") || (data82 === "openid did_authn")) || (data82 === "profile")) || (data82 === "email")) || (data82 === "address")) || (data82 === "phone"))){
const err173 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema529.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err173];
}
else {
vErrors.push(err173);
}
errors++;
}
var _valid28 = _errs316 === errors;
valid92 = valid92 || _valid28;
}
if(!valid92){
const err174 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/anyOf/1/properties/scopes_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err174];
}
else {
vErrors.push(err174);
}
errors++;
}
else {
errors = _errs310;
if(vErrors !== null){
if(_errs310){
vErrors.length = _errs310;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs309 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.subject_types_supported !== undefined){
let data84 = data.subject_types_supported;
const _errs319 = errors;
const _errs320 = errors;
let valid96 = false;
const _errs321 = errors;
if(errors === _errs321){
if(Array.isArray(data84)){
var valid97 = true;
const len27 = data84.length;
for(let i27=0; i27<len27; i27++){
let data85 = data84[i27];
const _errs323 = errors;
if(typeof data85 !== "string"){
const err175 = {instancePath:instancePath+"/subject_types_supported/" + i27,schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err175];
}
else {
vErrors.push(err175);
}
errors++;
}
if(!((data85 === "public") || (data85 === "pairwise"))){
const err176 = {instancePath:instancePath+"/subject_types_supported/" + i27,schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema531.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err176];
}
else {
vErrors.push(err176);
}
errors++;
}
var valid97 = _errs323 === errors;
if(!valid97){
break;
}
}
}
else {
const err177 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/anyOf/1/properties/subject_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err177];
}
else {
vErrors.push(err177);
}
errors++;
}
}
var _valid29 = _errs321 === errors;
valid96 = valid96 || _valid29;
if(!valid96){
const _errs326 = errors;
if(typeof data84 !== "string"){
const err178 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err178];
}
else {
vErrors.push(err178);
}
errors++;
}
if(!((data84 === "public") || (data84 === "pairwise"))){
const err179 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema531.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err179];
}
else {
vErrors.push(err179);
}
errors++;
}
var _valid29 = _errs326 === errors;
valid96 = valid96 || _valid29;
}
if(!valid96){
const err180 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/anyOf/1/properties/subject_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err180];
}
else {
vErrors.push(err180);
}
errors++;
}
else {
errors = _errs320;
if(vErrors !== null){
if(_errs320){
vErrors.length = _errs320;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs319 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.id_token_signing_alg_values_supported !== undefined){
let data86 = data.id_token_signing_alg_values_supported;
const _errs329 = errors;
const _errs330 = errors;
let valid100 = false;
const _errs331 = errors;
if(errors === _errs331){
if(Array.isArray(data86)){
var valid101 = true;
const len28 = data86.length;
for(let i28=0; i28<len28; i28++){
let data87 = data86[i28];
const _errs333 = errors;
if(typeof data87 !== "string"){
const err181 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i28,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err181];
}
else {
vErrors.push(err181);
}
errors++;
}
if(!(((((data87 === "EdDSA") || (data87 === "RS256")) || (data87 === "PS256")) || (data87 === "ES256")) || (data87 === "ES256K"))){
const err182 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i28,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err182];
}
else {
vErrors.push(err182);
}
errors++;
}
var valid101 = _errs333 === errors;
if(!valid101){
break;
}
}
}
else {
const err183 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/anyOf/1/properties/id_token_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err183];
}
else {
vErrors.push(err183);
}
errors++;
}
}
var _valid30 = _errs331 === errors;
valid100 = valid100 || _valid30;
if(!valid100){
const _errs336 = errors;
if(typeof data86 !== "string"){
const err184 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err184];
}
else {
vErrors.push(err184);
}
errors++;
}
if(!(((((data86 === "EdDSA") || (data86 === "RS256")) || (data86 === "PS256")) || (data86 === "ES256")) || (data86 === "ES256K"))){
const err185 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err185];
}
else {
vErrors.push(err185);
}
errors++;
}
var _valid30 = _errs336 === errors;
valid100 = valid100 || _valid30;
}
if(!valid100){
const err186 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/anyOf/1/properties/id_token_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err186];
}
else {
vErrors.push(err186);
}
errors++;
}
else {
errors = _errs330;
if(vErrors !== null){
if(_errs330){
vErrors.length = _errs330;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs329 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.request_object_signing_alg_values_supported !== undefined){
let data88 = data.request_object_signing_alg_values_supported;
const _errs339 = errors;
const _errs340 = errors;
let valid104 = false;
const _errs341 = errors;
if(errors === _errs341){
if(Array.isArray(data88)){
var valid105 = true;
const len29 = data88.length;
for(let i29=0; i29<len29; i29++){
let data89 = data88[i29];
const _errs343 = errors;
if(typeof data89 !== "string"){
const err187 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i29,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err187];
}
else {
vErrors.push(err187);
}
errors++;
}
if(!(((((data89 === "EdDSA") || (data89 === "RS256")) || (data89 === "PS256")) || (data89 === "ES256")) || (data89 === "ES256K"))){
const err188 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i29,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err188];
}
else {
vErrors.push(err188);
}
errors++;
}
var valid105 = _errs343 === errors;
if(!valid105){
break;
}
}
}
else {
const err189 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/anyOf/1/properties/request_object_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err189];
}
else {
vErrors.push(err189);
}
errors++;
}
}
var _valid31 = _errs341 === errors;
valid104 = valid104 || _valid31;
if(!valid104){
const _errs346 = errors;
if(typeof data88 !== "string"){
const err190 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err190];
}
else {
vErrors.push(err190);
}
errors++;
}
if(!(((((data88 === "EdDSA") || (data88 === "RS256")) || (data88 === "PS256")) || (data88 === "ES256")) || (data88 === "ES256K"))){
const err191 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err191];
}
else {
vErrors.push(err191);
}
errors++;
}
var _valid31 = _errs346 === errors;
valid104 = valid104 || _valid31;
}
if(!valid104){
const err192 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/anyOf/1/properties/request_object_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err192];
}
else {
vErrors.push(err192);
}
errors++;
}
else {
errors = _errs340;
if(vErrors !== null){
if(_errs340){
vErrors.length = _errs340;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs339 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.subject_syntax_types_supported !== undefined){
let data90 = data.subject_syntax_types_supported;
const _errs349 = errors;
if(errors === _errs349){
if(Array.isArray(data90)){
var valid108 = true;
const len30 = data90.length;
for(let i30=0; i30<len30; i30++){
const _errs351 = errors;
if(typeof data90[i30] !== "string"){
const err193 = {instancePath:instancePath+"/subject_syntax_types_supported/" + i30,schemaPath:"#/anyOf/1/properties/subject_syntax_types_supported/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err193];
}
else {
vErrors.push(err193);
}
errors++;
}
var valid108 = _errs351 === errors;
if(!valid108){
break;
}
}
}
else {
const err194 = {instancePath:instancePath+"/subject_syntax_types_supported",schemaPath:"#/anyOf/1/properties/subject_syntax_types_supported/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err194];
}
else {
vErrors.push(err194);
}
errors++;
}
}
var valid83 = _errs349 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.token_endpoint !== undefined){
const _errs353 = errors;
if(typeof data.token_endpoint !== "string"){
const err195 = {instancePath:instancePath+"/token_endpoint",schemaPath:"#/anyOf/1/properties/token_endpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err195];
}
else {
vErrors.push(err195);
}
errors++;
}
var valid83 = _errs353 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.userinfo_endpoint !== undefined){
const _errs355 = errors;
if(typeof data.userinfo_endpoint !== "string"){
const err196 = {instancePath:instancePath+"/userinfo_endpoint",schemaPath:"#/anyOf/1/properties/userinfo_endpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err196];
}
else {
vErrors.push(err196);
}
errors++;
}
var valid83 = _errs355 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.jwks_uri !== undefined){
const _errs357 = errors;
if(typeof data.jwks_uri !== "string"){
const err197 = {instancePath:instancePath+"/jwks_uri",schemaPath:"#/anyOf/1/properties/jwks_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err197];
}
else {
vErrors.push(err197);
}
errors++;
}
var valid83 = _errs357 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.registration_endpoint !== undefined){
const _errs359 = errors;
if(typeof data.registration_endpoint !== "string"){
const err198 = {instancePath:instancePath+"/registration_endpoint",schemaPath:"#/anyOf/1/properties/registration_endpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err198];
}
else {
vErrors.push(err198);
}
errors++;
}
var valid83 = _errs359 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.response_modes_supported !== undefined){
let data96 = data.response_modes_supported;
const _errs361 = errors;
const _errs362 = errors;
let valid109 = false;
const _errs363 = errors;
if(errors === _errs363){
if(Array.isArray(data96)){
var valid110 = true;
const len31 = data96.length;
for(let i31=0; i31<len31; i31++){
let data97 = data96[i31];
const _errs365 = errors;
if(typeof data97 !== "string"){
const err199 = {instancePath:instancePath+"/response_modes_supported/" + i31,schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err199];
}
else {
vErrors.push(err199);
}
errors++;
}
if(!((((((((data97 === "fragment") || (data97 === "form_post")) || (data97 === "post")) || (data97 === "direct_post")) || (data97 === "query")) || (data97 === "direct_post.jwt")) || (data97 === "query.jwt")) || (data97 === "fragment.jwt"))){
const err200 = {instancePath:instancePath+"/response_modes_supported/" + i31,schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema537.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err200];
}
else {
vErrors.push(err200);
}
errors++;
}
var valid110 = _errs365 === errors;
if(!valid110){
break;
}
}
}
else {
const err201 = {instancePath:instancePath+"/response_modes_supported",schemaPath:"#/anyOf/1/properties/response_modes_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err201];
}
else {
vErrors.push(err201);
}
errors++;
}
}
var _valid32 = _errs363 === errors;
valid109 = valid109 || _valid32;
if(!valid109){
const _errs368 = errors;
if(typeof data96 !== "string"){
const err202 = {instancePath:instancePath+"/response_modes_supported",schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err202];
}
else {
vErrors.push(err202);
}
errors++;
}
if(!((((((((data96 === "fragment") || (data96 === "form_post")) || (data96 === "post")) || (data96 === "direct_post")) || (data96 === "query")) || (data96 === "direct_post.jwt")) || (data96 === "query.jwt")) || (data96 === "fragment.jwt"))){
const err203 = {instancePath:instancePath+"/response_modes_supported",schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema537.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err203];
}
else {
vErrors.push(err203);
}
errors++;
}
var _valid32 = _errs368 === errors;
valid109 = valid109 || _valid32;
}
if(!valid109){
const err204 = {instancePath:instancePath+"/response_modes_supported",schemaPath:"#/anyOf/1/properties/response_modes_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err204];
}
else {
vErrors.push(err204);
}
errors++;
}
else {
errors = _errs362;
if(vErrors !== null){
if(_errs362){
vErrors.length = _errs362;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs361 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.grant_types_supported !== undefined){
let data98 = data.grant_types_supported;
const _errs371 = errors;
const _errs372 = errors;
let valid113 = false;
const _errs373 = errors;
if(errors === _errs373){
if(Array.isArray(data98)){
var valid114 = true;
const len32 = data98.length;
for(let i32=0; i32<len32; i32++){
let data99 = data98[i32];
const _errs375 = errors;
if(typeof data99 !== "string"){
const err205 = {instancePath:instancePath+"/grant_types_supported/" + i32,schemaPath:"#/definitions/GrantType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err205];
}
else {
vErrors.push(err205);
}
errors++;
}
if(!((data99 === "authorization_code") || (data99 === "implicit"))){
const err206 = {instancePath:instancePath+"/grant_types_supported/" + i32,schemaPath:"#/definitions/GrantType/enum",keyword:"enum",params:{allowedValues: schema539.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err206];
}
else {
vErrors.push(err206);
}
errors++;
}
var valid114 = _errs375 === errors;
if(!valid114){
break;
}
}
}
else {
const err207 = {instancePath:instancePath+"/grant_types_supported",schemaPath:"#/anyOf/1/properties/grant_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err207];
}
else {
vErrors.push(err207);
}
errors++;
}
}
var _valid33 = _errs373 === errors;
valid113 = valid113 || _valid33;
if(!valid113){
const _errs378 = errors;
if(typeof data98 !== "string"){
const err208 = {instancePath:instancePath+"/grant_types_supported",schemaPath:"#/definitions/GrantType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err208];
}
else {
vErrors.push(err208);
}
errors++;
}
if(!((data98 === "authorization_code") || (data98 === "implicit"))){
const err209 = {instancePath:instancePath+"/grant_types_supported",schemaPath:"#/definitions/GrantType/enum",keyword:"enum",params:{allowedValues: schema539.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err209];
}
else {
vErrors.push(err209);
}
errors++;
}
var _valid33 = _errs378 === errors;
valid113 = valid113 || _valid33;
}
if(!valid113){
const err210 = {instancePath:instancePath+"/grant_types_supported",schemaPath:"#/anyOf/1/properties/grant_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err210];
}
else {
vErrors.push(err210);
}
errors++;
}
else {
errors = _errs372;
if(vErrors !== null){
if(_errs372){
vErrors.length = _errs372;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs371 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.acr_values_supported !== undefined){
let data100 = data.acr_values_supported;
const _errs381 = errors;
const _errs382 = errors;
let valid117 = false;
const _errs383 = errors;
if(errors === _errs383){
if(Array.isArray(data100)){
var valid118 = true;
const len33 = data100.length;
for(let i33=0; i33<len33; i33++){
let data101 = data100[i33];
const _errs385 = errors;
if(typeof data101 !== "string"){
const err211 = {instancePath:instancePath+"/acr_values_supported/" + i33,schemaPath:"#/definitions/AuthenticationContextReferences/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err211];
}
else {
vErrors.push(err211);
}
errors++;
}
if(!((data101 === "phr") || (data101 === "phrh"))){
const err212 = {instancePath:instancePath+"/acr_values_supported/" + i33,schemaPath:"#/definitions/AuthenticationContextReferences/enum",keyword:"enum",params:{allowedValues: schema541.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err212];
}
else {
vErrors.push(err212);
}
errors++;
}
var valid118 = _errs385 === errors;
if(!valid118){
break;
}
}
}
else {
const err213 = {instancePath:instancePath+"/acr_values_supported",schemaPath:"#/anyOf/1/properties/acr_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err213];
}
else {
vErrors.push(err213);
}
errors++;
}
}
var _valid34 = _errs383 === errors;
valid117 = valid117 || _valid34;
if(!valid117){
const _errs388 = errors;
if(typeof data100 !== "string"){
const err214 = {instancePath:instancePath+"/acr_values_supported",schemaPath:"#/definitions/AuthenticationContextReferences/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err214];
}
else {
vErrors.push(err214);
}
errors++;
}
if(!((data100 === "phr") || (data100 === "phrh"))){
const err215 = {instancePath:instancePath+"/acr_values_supported",schemaPath:"#/definitions/AuthenticationContextReferences/enum",keyword:"enum",params:{allowedValues: schema541.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err215];
}
else {
vErrors.push(err215);
}
errors++;
}
var _valid34 = _errs388 === errors;
valid117 = valid117 || _valid34;
}
if(!valid117){
const err216 = {instancePath:instancePath+"/acr_values_supported",schemaPath:"#/anyOf/1/properties/acr_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err216];
}
else {
vErrors.push(err216);
}
errors++;
}
else {
errors = _errs382;
if(vErrors !== null){
if(_errs382){
vErrors.length = _errs382;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs381 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.id_token_encryption_alg_values_supported !== undefined){
let data102 = data.id_token_encryption_alg_values_supported;
const _errs391 = errors;
const _errs392 = errors;
let valid121 = false;
const _errs393 = errors;
if(errors === _errs393){
if(Array.isArray(data102)){
var valid122 = true;
const len34 = data102.length;
for(let i34=0; i34<len34; i34++){
let data103 = data102[i34];
const _errs395 = errors;
if(typeof data103 !== "string"){
const err217 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported/" + i34,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err217];
}
else {
vErrors.push(err217);
}
errors++;
}
if(!(((((data103 === "EdDSA") || (data103 === "RS256")) || (data103 === "PS256")) || (data103 === "ES256")) || (data103 === "ES256K"))){
const err218 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported/" + i34,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err218];
}
else {
vErrors.push(err218);
}
errors++;
}
var valid122 = _errs395 === errors;
if(!valid122){
break;
}
}
}
else {
const err219 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported",schemaPath:"#/anyOf/1/properties/id_token_encryption_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err219];
}
else {
vErrors.push(err219);
}
errors++;
}
}
var _valid35 = _errs393 === errors;
valid121 = valid121 || _valid35;
if(!valid121){
const _errs398 = errors;
if(typeof data102 !== "string"){
const err220 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err220];
}
else {
vErrors.push(err220);
}
errors++;
}
if(!(((((data102 === "EdDSA") || (data102 === "RS256")) || (data102 === "PS256")) || (data102 === "ES256")) || (data102 === "ES256K"))){
const err221 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err221];
}
else {
vErrors.push(err221);
}
errors++;
}
var _valid35 = _errs398 === errors;
valid121 = valid121 || _valid35;
}
if(!valid121){
const err222 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported",schemaPath:"#/anyOf/1/properties/id_token_encryption_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err222];
}
else {
vErrors.push(err222);
}
errors++;
}
else {
errors = _errs392;
if(vErrors !== null){
if(_errs392){
vErrors.length = _errs392;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs391 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.id_token_encryption_enc_values_supported !== undefined){
let data104 = data.id_token_encryption_enc_values_supported;
const _errs401 = errors;
const _errs402 = errors;
let valid125 = false;
const _errs403 = errors;
if(errors === _errs403){
if(Array.isArray(data104)){
var valid126 = true;
const len35 = data104.length;
for(let i35=0; i35<len35; i35++){
const _errs405 = errors;
if(typeof data104[i35] !== "string"){
const err223 = {instancePath:instancePath+"/id_token_encryption_enc_values_supported/" + i35,schemaPath:"#/anyOf/1/properties/id_token_encryption_enc_values_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err223];
}
else {
vErrors.push(err223);
}
errors++;
}
var valid126 = _errs405 === errors;
if(!valid126){
break;
}
}
}
else {
const err224 = {instancePath:instancePath+"/id_token_encryption_enc_values_supported",schemaPath:"#/anyOf/1/properties/id_token_encryption_enc_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err224];
}
else {
vErrors.push(err224);
}
errors++;
}
}
var _valid36 = _errs403 === errors;
valid125 = valid125 || _valid36;
if(!valid125){
const _errs407 = errors;
if(typeof data104 !== "string"){
const err225 = {instancePath:instancePath+"/id_token_encryption_enc_values_supported",schemaPath:"#/anyOf/1/properties/id_token_encryption_enc_values_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err225];
}
else {
vErrors.push(err225);
}
errors++;
}
var _valid36 = _errs407 === errors;
valid125 = valid125 || _valid36;
}
if(!valid125){
const err226 = {instancePath:instancePath+"/id_token_encryption_enc_values_supported",schemaPath:"#/anyOf/1/properties/id_token_encryption_enc_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err226];
}
else {
vErrors.push(err226);
}
errors++;
}
else {
errors = _errs402;
if(vErrors !== null){
if(_errs402){
vErrors.length = _errs402;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs401 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.userinfo_signing_alg_values_supported !== undefined){
let data106 = data.userinfo_signing_alg_values_supported;
const _errs409 = errors;
const _errs410 = errors;
let valid127 = false;
const _errs411 = errors;
if(errors === _errs411){
if(Array.isArray(data106)){
var valid128 = true;
const len36 = data106.length;
for(let i36=0; i36<len36; i36++){
let data107 = data106[i36];
const _errs413 = errors;
if(typeof data107 !== "string"){
const err227 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported/" + i36,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err227];
}
else {
vErrors.push(err227);
}
errors++;
}
if(!(((((data107 === "EdDSA") || (data107 === "RS256")) || (data107 === "PS256")) || (data107 === "ES256")) || (data107 === "ES256K"))){
const err228 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported/" + i36,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err228];
}
else {
vErrors.push(err228);
}
errors++;
}
var valid128 = _errs413 === errors;
if(!valid128){
break;
}
}
}
else {
const err229 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported",schemaPath:"#/anyOf/1/properties/userinfo_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err229];
}
else {
vErrors.push(err229);
}
errors++;
}
}
var _valid37 = _errs411 === errors;
valid127 = valid127 || _valid37;
if(!valid127){
const _errs416 = errors;
if(typeof data106 !== "string"){
const err230 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err230];
}
else {
vErrors.push(err230);
}
errors++;
}
if(!(((((data106 === "EdDSA") || (data106 === "RS256")) || (data106 === "PS256")) || (data106 === "ES256")) || (data106 === "ES256K"))){
const err231 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err231];
}
else {
vErrors.push(err231);
}
errors++;
}
var _valid37 = _errs416 === errors;
valid127 = valid127 || _valid37;
}
if(!valid127){
const err232 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported",schemaPath:"#/anyOf/1/properties/userinfo_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err232];
}
else {
vErrors.push(err232);
}
errors++;
}
else {
errors = _errs410;
if(vErrors !== null){
if(_errs410){
vErrors.length = _errs410;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs409 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.userinfo_encryption_alg_values_supported !== undefined){
let data108 = data.userinfo_encryption_alg_values_supported;
const _errs419 = errors;
const _errs420 = errors;
let valid131 = false;
const _errs421 = errors;
if(errors === _errs421){
if(Array.isArray(data108)){
var valid132 = true;
const len37 = data108.length;
for(let i37=0; i37<len37; i37++){
let data109 = data108[i37];
const _errs423 = errors;
if(typeof data109 !== "string"){
const err233 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported/" + i37,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err233];
}
else {
vErrors.push(err233);
}
errors++;
}
if(!(((((data109 === "EdDSA") || (data109 === "RS256")) || (data109 === "PS256")) || (data109 === "ES256")) || (data109 === "ES256K"))){
const err234 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported/" + i37,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err234];
}
else {
vErrors.push(err234);
}
errors++;
}
var valid132 = _errs423 === errors;
if(!valid132){
break;
}
}
}
else {
const err235 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported",schemaPath:"#/anyOf/1/properties/userinfo_encryption_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err235];
}
else {
vErrors.push(err235);
}
errors++;
}
}
var _valid38 = _errs421 === errors;
valid131 = valid131 || _valid38;
if(!valid131){
const _errs426 = errors;
if(typeof data108 !== "string"){
const err236 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err236];
}
else {
vErrors.push(err236);
}
errors++;
}
if(!(((((data108 === "EdDSA") || (data108 === "RS256")) || (data108 === "PS256")) || (data108 === "ES256")) || (data108 === "ES256K"))){
const err237 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err237];
}
else {
vErrors.push(err237);
}
errors++;
}
var _valid38 = _errs426 === errors;
valid131 = valid131 || _valid38;
}
if(!valid131){
const err238 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported",schemaPath:"#/anyOf/1/properties/userinfo_encryption_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err238];
}
else {
vErrors.push(err238);
}
errors++;
}
else {
errors = _errs420;
if(vErrors !== null){
if(_errs420){
vErrors.length = _errs420;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs419 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.userinfo_encryption_enc_values_supported !== undefined){
let data110 = data.userinfo_encryption_enc_values_supported;
const _errs429 = errors;
const _errs430 = errors;
let valid135 = false;
const _errs431 = errors;
if(errors === _errs431){
if(Array.isArray(data110)){
var valid136 = true;
const len38 = data110.length;
for(let i38=0; i38<len38; i38++){
const _errs433 = errors;
if(typeof data110[i38] !== "string"){
const err239 = {instancePath:instancePath+"/userinfo_encryption_enc_values_supported/" + i38,schemaPath:"#/anyOf/1/properties/userinfo_encryption_enc_values_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err239];
}
else {
vErrors.push(err239);
}
errors++;
}
var valid136 = _errs433 === errors;
if(!valid136){
break;
}
}
}
else {
const err240 = {instancePath:instancePath+"/userinfo_encryption_enc_values_supported",schemaPath:"#/anyOf/1/properties/userinfo_encryption_enc_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err240];
}
else {
vErrors.push(err240);
}
errors++;
}
}
var _valid39 = _errs431 === errors;
valid135 = valid135 || _valid39;
if(!valid135){
const _errs435 = errors;
if(typeof data110 !== "string"){
const err241 = {instancePath:instancePath+"/userinfo_encryption_enc_values_supported",schemaPath:"#/anyOf/1/properties/userinfo_encryption_enc_values_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err241];
}
else {
vErrors.push(err241);
}
errors++;
}
var _valid39 = _errs435 === errors;
valid135 = valid135 || _valid39;
}
if(!valid135){
const err242 = {instancePath:instancePath+"/userinfo_encryption_enc_values_supported",schemaPath:"#/anyOf/1/properties/userinfo_encryption_enc_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err242];
}
else {
vErrors.push(err242);
}
errors++;
}
else {
errors = _errs430;
if(vErrors !== null){
if(_errs430){
vErrors.length = _errs430;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs429 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.request_object_encryption_alg_values_supported !== undefined){
let data112 = data.request_object_encryption_alg_values_supported;
const _errs437 = errors;
const _errs438 = errors;
let valid137 = false;
const _errs439 = errors;
if(errors === _errs439){
if(Array.isArray(data112)){
var valid138 = true;
const len39 = data112.length;
for(let i39=0; i39<len39; i39++){
let data113 = data112[i39];
const _errs441 = errors;
if(typeof data113 !== "string"){
const err243 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported/" + i39,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err243];
}
else {
vErrors.push(err243);
}
errors++;
}
if(!(((((data113 === "EdDSA") || (data113 === "RS256")) || (data113 === "PS256")) || (data113 === "ES256")) || (data113 === "ES256K"))){
const err244 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported/" + i39,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err244];
}
else {
vErrors.push(err244);
}
errors++;
}
var valid138 = _errs441 === errors;
if(!valid138){
break;
}
}
}
else {
const err245 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported",schemaPath:"#/anyOf/1/properties/request_object_encryption_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err245];
}
else {
vErrors.push(err245);
}
errors++;
}
}
var _valid40 = _errs439 === errors;
valid137 = valid137 || _valid40;
if(!valid137){
const _errs444 = errors;
if(typeof data112 !== "string"){
const err246 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err246];
}
else {
vErrors.push(err246);
}
errors++;
}
if(!(((((data112 === "EdDSA") || (data112 === "RS256")) || (data112 === "PS256")) || (data112 === "ES256")) || (data112 === "ES256K"))){
const err247 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err247];
}
else {
vErrors.push(err247);
}
errors++;
}
var _valid40 = _errs444 === errors;
valid137 = valid137 || _valid40;
}
if(!valid137){
const err248 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported",schemaPath:"#/anyOf/1/properties/request_object_encryption_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err248];
}
else {
vErrors.push(err248);
}
errors++;
}
else {
errors = _errs438;
if(vErrors !== null){
if(_errs438){
vErrors.length = _errs438;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs437 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.request_object_encryption_enc_values_supported !== undefined){
let data114 = data.request_object_encryption_enc_values_supported;
const _errs447 = errors;
const _errs448 = errors;
let valid141 = false;
const _errs449 = errors;
if(errors === _errs449){
if(Array.isArray(data114)){
var valid142 = true;
const len40 = data114.length;
for(let i40=0; i40<len40; i40++){
const _errs451 = errors;
if(typeof data114[i40] !== "string"){
const err249 = {instancePath:instancePath+"/request_object_encryption_enc_values_supported/" + i40,schemaPath:"#/anyOf/1/properties/request_object_encryption_enc_values_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err249];
}
else {
vErrors.push(err249);
}
errors++;
}
var valid142 = _errs451 === errors;
if(!valid142){
break;
}
}
}
else {
const err250 = {instancePath:instancePath+"/request_object_encryption_enc_values_supported",schemaPath:"#/anyOf/1/properties/request_object_encryption_enc_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err250];
}
else {
vErrors.push(err250);
}
errors++;
}
}
var _valid41 = _errs449 === errors;
valid141 = valid141 || _valid41;
if(!valid141){
const _errs453 = errors;
if(typeof data114 !== "string"){
const err251 = {instancePath:instancePath+"/request_object_encryption_enc_values_supported",schemaPath:"#/anyOf/1/properties/request_object_encryption_enc_values_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err251];
}
else {
vErrors.push(err251);
}
errors++;
}
var _valid41 = _errs453 === errors;
valid141 = valid141 || _valid41;
}
if(!valid141){
const err252 = {instancePath:instancePath+"/request_object_encryption_enc_values_supported",schemaPath:"#/anyOf/1/properties/request_object_encryption_enc_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err252];
}
else {
vErrors.push(err252);
}
errors++;
}
else {
errors = _errs448;
if(vErrors !== null){
if(_errs448){
vErrors.length = _errs448;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs447 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.token_endpoint_auth_methods_supported !== undefined){
let data116 = data.token_endpoint_auth_methods_supported;
const _errs455 = errors;
const _errs456 = errors;
let valid143 = false;
const _errs457 = errors;
if(errors === _errs457){
if(Array.isArray(data116)){
var valid144 = true;
const len41 = data116.length;
for(let i41=0; i41<len41; i41++){
let data117 = data116[i41];
const _errs459 = errors;
if(typeof data117 !== "string"){
const err253 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported/" + i41,schemaPath:"#/definitions/TokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err253];
}
else {
vErrors.push(err253);
}
errors++;
}
if(!((((data117 === "client_secret_post") || (data117 === "client_secret_basic")) || (data117 === "client_secret_jwt")) || (data117 === "private_key_jwt"))){
const err254 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported/" + i41,schemaPath:"#/definitions/TokenEndpointAuthMethod/enum",keyword:"enum",params:{allowedValues: schema551.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err254];
}
else {
vErrors.push(err254);
}
errors++;
}
var valid144 = _errs459 === errors;
if(!valid144){
break;
}
}
}
else {
const err255 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported",schemaPath:"#/anyOf/1/properties/token_endpoint_auth_methods_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err255];
}
else {
vErrors.push(err255);
}
errors++;
}
}
var _valid42 = _errs457 === errors;
valid143 = valid143 || _valid42;
if(!valid143){
const _errs462 = errors;
if(typeof data116 !== "string"){
const err256 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported",schemaPath:"#/definitions/TokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err256];
}
else {
vErrors.push(err256);
}
errors++;
}
if(!((((data116 === "client_secret_post") || (data116 === "client_secret_basic")) || (data116 === "client_secret_jwt")) || (data116 === "private_key_jwt"))){
const err257 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported",schemaPath:"#/definitions/TokenEndpointAuthMethod/enum",keyword:"enum",params:{allowedValues: schema551.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err257];
}
else {
vErrors.push(err257);
}
errors++;
}
var _valid42 = _errs462 === errors;
valid143 = valid143 || _valid42;
}
if(!valid143){
const err258 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported",schemaPath:"#/anyOf/1/properties/token_endpoint_auth_methods_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err258];
}
else {
vErrors.push(err258);
}
errors++;
}
else {
errors = _errs456;
if(vErrors !== null){
if(_errs456){
vErrors.length = _errs456;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs455 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.token_endpoint_auth_signing_alg_values_supported !== undefined){
let data118 = data.token_endpoint_auth_signing_alg_values_supported;
const _errs465 = errors;
const _errs466 = errors;
let valid147 = false;
const _errs467 = errors;
if(errors === _errs467){
if(Array.isArray(data118)){
var valid148 = true;
const len42 = data118.length;
for(let i42=0; i42<len42; i42++){
let data119 = data118[i42];
const _errs469 = errors;
if(typeof data119 !== "string"){
const err259 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported/" + i42,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err259];
}
else {
vErrors.push(err259);
}
errors++;
}
if(!(((((data119 === "EdDSA") || (data119 === "RS256")) || (data119 === "PS256")) || (data119 === "ES256")) || (data119 === "ES256K"))){
const err260 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported/" + i42,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err260];
}
else {
vErrors.push(err260);
}
errors++;
}
var valid148 = _errs469 === errors;
if(!valid148){
break;
}
}
}
else {
const err261 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported",schemaPath:"#/anyOf/1/properties/token_endpoint_auth_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err261];
}
else {
vErrors.push(err261);
}
errors++;
}
}
var _valid43 = _errs467 === errors;
valid147 = valid147 || _valid43;
if(!valid147){
const _errs472 = errors;
if(typeof data118 !== "string"){
const err262 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err262];
}
else {
vErrors.push(err262);
}
errors++;
}
if(!(((((data118 === "EdDSA") || (data118 === "RS256")) || (data118 === "PS256")) || (data118 === "ES256")) || (data118 === "ES256K"))){
const err263 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err263];
}
else {
vErrors.push(err263);
}
errors++;
}
var _valid43 = _errs472 === errors;
valid147 = valid147 || _valid43;
}
if(!valid147){
const err264 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported",schemaPath:"#/anyOf/1/properties/token_endpoint_auth_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err264];
}
else {
vErrors.push(err264);
}
errors++;
}
else {
errors = _errs466;
if(vErrors !== null){
if(_errs466){
vErrors.length = _errs466;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs465 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.display_values_supported !== undefined){
let data120 = data.display_values_supported;
const _errs475 = errors;
const _errs476 = errors;
let valid151 = false;
const _errs477 = errors;
if(errors === _errs477){
if(Array.isArray(data120)){
var valid152 = true;
const len43 = data120.length;
for(let i43=0; i43<len43; i43++){
const _errs479 = errors;
var valid152 = _errs479 === errors;
if(!valid152){
break;
}
}
}
else {
const err265 = {instancePath:instancePath+"/display_values_supported",schemaPath:"#/anyOf/1/properties/display_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err265];
}
else {
vErrors.push(err265);
}
errors++;
}
}
var _valid44 = _errs477 === errors;
valid151 = valid151 || _valid44;
if(!valid151){
const _errs480 = errors;
var _valid44 = _errs480 === errors;
valid151 = valid151 || _valid44;
}
if(!valid151){
const err266 = {instancePath:instancePath+"/display_values_supported",schemaPath:"#/anyOf/1/properties/display_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err266];
}
else {
vErrors.push(err266);
}
errors++;
}
else {
errors = _errs476;
if(vErrors !== null){
if(_errs476){
vErrors.length = _errs476;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs475 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.claim_types_supported !== undefined){
let data122 = data.claim_types_supported;
const _errs481 = errors;
const _errs482 = errors;
let valid153 = false;
const _errs483 = errors;
if(errors === _errs483){
if(Array.isArray(data122)){
var valid154 = true;
const len44 = data122.length;
for(let i44=0; i44<len44; i44++){
let data123 = data122[i44];
const _errs485 = errors;
if(typeof data123 !== "string"){
const err267 = {instancePath:instancePath+"/claim_types_supported/" + i44,schemaPath:"#/definitions/ClaimType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err267];
}
else {
vErrors.push(err267);
}
errors++;
}
if(!(((data123 === "normal") || (data123 === "aggregated")) || (data123 === "distributed"))){
const err268 = {instancePath:instancePath+"/claim_types_supported/" + i44,schemaPath:"#/definitions/ClaimType/enum",keyword:"enum",params:{allowedValues: schema555.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err268];
}
else {
vErrors.push(err268);
}
errors++;
}
var valid154 = _errs485 === errors;
if(!valid154){
break;
}
}
}
else {
const err269 = {instancePath:instancePath+"/claim_types_supported",schemaPath:"#/anyOf/1/properties/claim_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err269];
}
else {
vErrors.push(err269);
}
errors++;
}
}
var _valid45 = _errs483 === errors;
valid153 = valid153 || _valid45;
if(!valid153){
const _errs488 = errors;
if(typeof data122 !== "string"){
const err270 = {instancePath:instancePath+"/claim_types_supported",schemaPath:"#/definitions/ClaimType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err270];
}
else {
vErrors.push(err270);
}
errors++;
}
if(!(((data122 === "normal") || (data122 === "aggregated")) || (data122 === "distributed"))){
const err271 = {instancePath:instancePath+"/claim_types_supported",schemaPath:"#/definitions/ClaimType/enum",keyword:"enum",params:{allowedValues: schema555.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err271];
}
else {
vErrors.push(err271);
}
errors++;
}
var _valid45 = _errs488 === errors;
valid153 = valid153 || _valid45;
}
if(!valid153){
const err272 = {instancePath:instancePath+"/claim_types_supported",schemaPath:"#/anyOf/1/properties/claim_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err272];
}
else {
vErrors.push(err272);
}
errors++;
}
else {
errors = _errs482;
if(vErrors !== null){
if(_errs482){
vErrors.length = _errs482;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs481 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.claims_supported !== undefined){
let data124 = data.claims_supported;
const _errs491 = errors;
const _errs492 = errors;
let valid157 = false;
const _errs493 = errors;
if(errors === _errs493){
if(Array.isArray(data124)){
var valid158 = true;
const len45 = data124.length;
for(let i45=0; i45<len45; i45++){
const _errs495 = errors;
if(typeof data124[i45] !== "string"){
const err273 = {instancePath:instancePath+"/claims_supported/" + i45,schemaPath:"#/anyOf/1/properties/claims_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err273];
}
else {
vErrors.push(err273);
}
errors++;
}
var valid158 = _errs495 === errors;
if(!valid158){
break;
}
}
}
else {
const err274 = {instancePath:instancePath+"/claims_supported",schemaPath:"#/anyOf/1/properties/claims_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err274];
}
else {
vErrors.push(err274);
}
errors++;
}
}
var _valid46 = _errs493 === errors;
valid157 = valid157 || _valid46;
if(!valid157){
const _errs497 = errors;
if(typeof data124 !== "string"){
const err275 = {instancePath:instancePath+"/claims_supported",schemaPath:"#/anyOf/1/properties/claims_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err275];
}
else {
vErrors.push(err275);
}
errors++;
}
var _valid46 = _errs497 === errors;
valid157 = valid157 || _valid46;
}
if(!valid157){
const err276 = {instancePath:instancePath+"/claims_supported",schemaPath:"#/anyOf/1/properties/claims_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err276];
}
else {
vErrors.push(err276);
}
errors++;
}
else {
errors = _errs492;
if(vErrors !== null){
if(_errs492){
vErrors.length = _errs492;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs491 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.service_documentation !== undefined){
const _errs499 = errors;
if(typeof data.service_documentation !== "string"){
const err277 = {instancePath:instancePath+"/service_documentation",schemaPath:"#/anyOf/1/properties/service_documentation/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err277];
}
else {
vErrors.push(err277);
}
errors++;
}
var valid83 = _errs499 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.claims_locales_supported !== undefined){
let data127 = data.claims_locales_supported;
const _errs501 = errors;
const _errs502 = errors;
let valid159 = false;
const _errs503 = errors;
if(errors === _errs503){
if(Array.isArray(data127)){
var valid160 = true;
const len46 = data127.length;
for(let i46=0; i46<len46; i46++){
const _errs505 = errors;
if(typeof data127[i46] !== "string"){
const err278 = {instancePath:instancePath+"/claims_locales_supported/" + i46,schemaPath:"#/anyOf/1/properties/claims_locales_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err278];
}
else {
vErrors.push(err278);
}
errors++;
}
var valid160 = _errs505 === errors;
if(!valid160){
break;
}
}
}
else {
const err279 = {instancePath:instancePath+"/claims_locales_supported",schemaPath:"#/anyOf/1/properties/claims_locales_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err279];
}
else {
vErrors.push(err279);
}
errors++;
}
}
var _valid47 = _errs503 === errors;
valid159 = valid159 || _valid47;
if(!valid159){
const _errs507 = errors;
if(typeof data127 !== "string"){
const err280 = {instancePath:instancePath+"/claims_locales_supported",schemaPath:"#/anyOf/1/properties/claims_locales_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err280];
}
else {
vErrors.push(err280);
}
errors++;
}
var _valid47 = _errs507 === errors;
valid159 = valid159 || _valid47;
}
if(!valid159){
const err281 = {instancePath:instancePath+"/claims_locales_supported",schemaPath:"#/anyOf/1/properties/claims_locales_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err281];
}
else {
vErrors.push(err281);
}
errors++;
}
else {
errors = _errs502;
if(vErrors !== null){
if(_errs502){
vErrors.length = _errs502;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs501 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.ui_locales_supported !== undefined){
let data129 = data.ui_locales_supported;
const _errs509 = errors;
const _errs510 = errors;
let valid161 = false;
const _errs511 = errors;
if(errors === _errs511){
if(Array.isArray(data129)){
var valid162 = true;
const len47 = data129.length;
for(let i47=0; i47<len47; i47++){
const _errs513 = errors;
if(typeof data129[i47] !== "string"){
const err282 = {instancePath:instancePath+"/ui_locales_supported/" + i47,schemaPath:"#/anyOf/1/properties/ui_locales_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err282];
}
else {
vErrors.push(err282);
}
errors++;
}
var valid162 = _errs513 === errors;
if(!valid162){
break;
}
}
}
else {
const err283 = {instancePath:instancePath+"/ui_locales_supported",schemaPath:"#/anyOf/1/properties/ui_locales_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err283];
}
else {
vErrors.push(err283);
}
errors++;
}
}
var _valid48 = _errs511 === errors;
valid161 = valid161 || _valid48;
if(!valid161){
const _errs515 = errors;
if(typeof data129 !== "string"){
const err284 = {instancePath:instancePath+"/ui_locales_supported",schemaPath:"#/anyOf/1/properties/ui_locales_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err284];
}
else {
vErrors.push(err284);
}
errors++;
}
var _valid48 = _errs515 === errors;
valid161 = valid161 || _valid48;
}
if(!valid161){
const err285 = {instancePath:instancePath+"/ui_locales_supported",schemaPath:"#/anyOf/1/properties/ui_locales_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err285];
}
else {
vErrors.push(err285);
}
errors++;
}
else {
errors = _errs510;
if(vErrors !== null){
if(_errs510){
vErrors.length = _errs510;
}
else {
vErrors = null;
}
}
}
var valid83 = _errs509 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.claims_parameter_supported !== undefined){
const _errs517 = errors;
if(typeof data.claims_parameter_supported !== "boolean"){
const err286 = {instancePath:instancePath+"/claims_parameter_supported",schemaPath:"#/anyOf/1/properties/claims_parameter_supported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err286];
}
else {
vErrors.push(err286);
}
errors++;
}
var valid83 = _errs517 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.request_parameter_supported !== undefined){
const _errs519 = errors;
if(typeof data.request_parameter_supported !== "boolean"){
const err287 = {instancePath:instancePath+"/request_parameter_supported",schemaPath:"#/anyOf/1/properties/request_parameter_supported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err287];
}
else {
vErrors.push(err287);
}
errors++;
}
var valid83 = _errs519 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.request_uri_parameter_supported !== undefined){
const _errs521 = errors;
if(typeof data.request_uri_parameter_supported !== "boolean"){
const err288 = {instancePath:instancePath+"/request_uri_parameter_supported",schemaPath:"#/anyOf/1/properties/request_uri_parameter_supported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err288];
}
else {
vErrors.push(err288);
}
errors++;
}
var valid83 = _errs521 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.require_request_uri_registration !== undefined){
const _errs523 = errors;
if(typeof data.require_request_uri_registration !== "boolean"){
const err289 = {instancePath:instancePath+"/require_request_uri_registration",schemaPath:"#/anyOf/1/properties/require_request_uri_registration/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err289];
}
else {
vErrors.push(err289);
}
errors++;
}
var valid83 = _errs523 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.op_policy_uri !== undefined){
const _errs525 = errors;
if(typeof data.op_policy_uri !== "string"){
const err290 = {instancePath:instancePath+"/op_policy_uri",schemaPath:"#/anyOf/1/properties/op_policy_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err290];
}
else {
vErrors.push(err290);
}
errors++;
}
var valid83 = _errs525 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.op_tos_uri !== undefined){
const _errs527 = errors;
if(typeof data.op_tos_uri !== "string"){
const err291 = {instancePath:instancePath+"/op_tos_uri",schemaPath:"#/anyOf/1/properties/op_tos_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err291];
}
else {
vErrors.push(err291);
}
errors++;
}
var valid83 = _errs527 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.redirect_uris !== undefined){
let data137 = data.redirect_uris;
const _errs529 = errors;
if(errors === _errs529){
if(Array.isArray(data137)){
var valid163 = true;
const len48 = data137.length;
for(let i48=0; i48<len48; i48++){
const _errs531 = errors;
if(typeof data137[i48] !== "string"){
const err292 = {instancePath:instancePath+"/redirect_uris/" + i48,schemaPath:"#/anyOf/1/properties/redirect_uris/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err292];
}
else {
vErrors.push(err292);
}
errors++;
}
var valid163 = _errs531 === errors;
if(!valid163){
break;
}
}
}
else {
const err293 = {instancePath:instancePath+"/redirect_uris",schemaPath:"#/anyOf/1/properties/redirect_uris/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err293];
}
else {
vErrors.push(err293);
}
errors++;
}
}
var valid83 = _errs529 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.token_endpoint_auth_method !== undefined){
const _errs533 = errors;
if(typeof data.token_endpoint_auth_method !== "string"){
const err294 = {instancePath:instancePath+"/token_endpoint_auth_method",schemaPath:"#/anyOf/1/properties/token_endpoint_auth_method/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err294];
}
else {
vErrors.push(err294);
}
errors++;
}
var valid83 = _errs533 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.grant_types !== undefined){
const _errs535 = errors;
if(typeof data.grant_types !== "string"){
const err295 = {instancePath:instancePath+"/grant_types",schemaPath:"#/anyOf/1/properties/grant_types/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err295];
}
else {
vErrors.push(err295);
}
errors++;
}
var valid83 = _errs535 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.response_types !== undefined){
const _errs537 = errors;
if(typeof data.response_types !== "string"){
const err296 = {instancePath:instancePath+"/response_types",schemaPath:"#/anyOf/1/properties/response_types/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err296];
}
else {
vErrors.push(err296);
}
errors++;
}
var valid83 = _errs537 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.client_name !== undefined){
const _errs539 = errors;
if(typeof data.client_name !== "string"){
const err297 = {instancePath:instancePath+"/client_name",schemaPath:"#/anyOf/1/properties/client_name/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err297];
}
else {
vErrors.push(err297);
}
errors++;
}
var valid83 = _errs539 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.client_uri !== undefined){
const _errs541 = errors;
if(typeof data.client_uri !== "string"){
const err298 = {instancePath:instancePath+"/client_uri",schemaPath:"#/anyOf/1/properties/client_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err298];
}
else {
vErrors.push(err298);
}
errors++;
}
var valid83 = _errs541 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.logo_uri !== undefined){
const _errs543 = errors;
if(typeof data.logo_uri !== "string"){
const err299 = {instancePath:instancePath+"/logo_uri",schemaPath:"#/anyOf/1/properties/logo_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err299];
}
else {
vErrors.push(err299);
}
errors++;
}
var valid83 = _errs543 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.scope !== undefined){
const _errs545 = errors;
if(typeof data.scope !== "string"){
const err300 = {instancePath:instancePath+"/scope",schemaPath:"#/anyOf/1/properties/scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err300];
}
else {
vErrors.push(err300);
}
errors++;
}
var valid83 = _errs545 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.contacts !== undefined){
let data146 = data.contacts;
const _errs547 = errors;
if(errors === _errs547){
if(Array.isArray(data146)){
var valid164 = true;
const len49 = data146.length;
for(let i49=0; i49<len49; i49++){
const _errs549 = errors;
if(typeof data146[i49] !== "string"){
const err301 = {instancePath:instancePath+"/contacts/" + i49,schemaPath:"#/anyOf/1/properties/contacts/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err301];
}
else {
vErrors.push(err301);
}
errors++;
}
var valid164 = _errs549 === errors;
if(!valid164){
break;
}
}
}
else {
const err302 = {instancePath:instancePath+"/contacts",schemaPath:"#/anyOf/1/properties/contacts/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err302];
}
else {
vErrors.push(err302);
}
errors++;
}
}
var valid83 = _errs547 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.tos_uri !== undefined){
const _errs551 = errors;
if(typeof data.tos_uri !== "string"){
const err303 = {instancePath:instancePath+"/tos_uri",schemaPath:"#/anyOf/1/properties/tos_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err303];
}
else {
vErrors.push(err303);
}
errors++;
}
var valid83 = _errs551 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.policy_uri !== undefined){
const _errs553 = errors;
if(typeof data.policy_uri !== "string"){
const err304 = {instancePath:instancePath+"/policy_uri",schemaPath:"#/anyOf/1/properties/policy_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err304];
}
else {
vErrors.push(err304);
}
errors++;
}
var valid83 = _errs553 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.jwks !== undefined){
const _errs555 = errors;
if(!(validate271(data.jwks, {instancePath:instancePath+"/jwks",parentData:data,parentDataProperty:"jwks",rootData}))){
vErrors = vErrors === null ? validate271.errors : vErrors.concat(validate271.errors);
errors = vErrors.length;
}
var valid83 = _errs555 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.software_id !== undefined){
const _errs556 = errors;
if(typeof data.software_id !== "string"){
const err305 = {instancePath:instancePath+"/software_id",schemaPath:"#/anyOf/1/properties/software_id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err305];
}
else {
vErrors.push(err305);
}
errors++;
}
var valid83 = _errs556 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.software_version !== undefined){
const _errs558 = errors;
if(typeof data.software_version !== "string"){
const err306 = {instancePath:instancePath+"/software_version",schemaPath:"#/anyOf/1/properties/software_version/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err306];
}
else {
vErrors.push(err306);
}
errors++;
}
var valid83 = _errs558 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.client_id !== undefined){
const _errs560 = errors;
if(typeof data.client_id !== "string"){
const err307 = {instancePath:instancePath+"/client_id",schemaPath:"#/anyOf/1/properties/client_id/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err307];
}
else {
vErrors.push(err307);
}
errors++;
}
var valid83 = _errs560 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.application_type !== undefined){
const _errs562 = errors;
if(typeof data.application_type !== "string"){
const err308 = {instancePath:instancePath+"/application_type",schemaPath:"#/anyOf/1/properties/application_type/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err308];
}
else {
vErrors.push(err308);
}
errors++;
}
var valid83 = _errs562 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.vp_formats !== undefined){
const _errs564 = errors;
if(!(validate273(data.vp_formats, {instancePath:instancePath+"/vp_formats",parentData:data,parentDataProperty:"vp_formats",rootData}))){
vErrors = vErrors === null ? validate273.errors : vErrors.concat(validate273.errors);
errors = vErrors.length;
}
var valid83 = _errs564 === errors;
}
else {
var valid83 = true;
}
if(valid83){
if(data.client_purpose !== undefined){
const _errs565 = errors;
if(typeof data.client_purpose !== "string"){
const err309 = {instancePath:instancePath+"/client_purpose",schemaPath:"#/anyOf/1/properties/client_purpose/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err309];
}
else {
vErrors.push(err309);
}
errors++;
}
var valid83 = _errs565 === errors;
}
else {
var valid83 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
const err310 = {instancePath,schemaPath:"#/anyOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err310];
}
else {
vErrors.push(err310);
}
errors++;
}
}
var _valid0 = _errs283 === errors;
valid0 = valid0 || _valid0;
if(!valid0){
const _errs567 = errors;
if(errors === _errs567){
if(data && typeof data == "object" && !Array.isArray(data)){
if(data.authorization_endpoint !== undefined){
let data157 = data.authorization_endpoint;
const _errs569 = errors;
const _errs570 = errors;
let valid166 = false;
const _errs571 = errors;
if(typeof data157 !== "string"){
const err311 = {instancePath:instancePath+"/authorization_endpoint",schemaPath:"#/definitions/Schema/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err311];
}
else {
vErrors.push(err311);
}
errors++;
}
if(!((data157 === "openid:") || (data157 === "openid-vc:"))){
const err312 = {instancePath:instancePath+"/authorization_endpoint",schemaPath:"#/definitions/Schema/enum",keyword:"enum",params:{allowedValues: schema525.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err312];
}
else {
vErrors.push(err312);
}
errors++;
}
var _valid49 = _errs571 === errors;
valid166 = valid166 || _valid49;
if(!valid166){
const _errs574 = errors;
if(typeof data157 !== "string"){
const err313 = {instancePath:instancePath+"/authorization_endpoint",schemaPath:"#/anyOf/2/properties/authorization_endpoint/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err313];
}
else {
vErrors.push(err313);
}
errors++;
}
var _valid49 = _errs574 === errors;
valid166 = valid166 || _valid49;
}
if(!valid166){
const err314 = {instancePath:instancePath+"/authorization_endpoint",schemaPath:"#/anyOf/2/properties/authorization_endpoint/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err314];
}
else {
vErrors.push(err314);
}
errors++;
}
else {
errors = _errs570;
if(vErrors !== null){
if(_errs570){
vErrors.length = _errs570;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs569 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.issuer !== undefined){
let data158 = data.issuer;
const _errs576 = errors;
const _errs577 = errors;
let valid168 = false;
const _errs578 = errors;
if(typeof data158 !== "string"){
const err315 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/ResponseIss/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err315];
}
else {
vErrors.push(err315);
}
errors++;
}
if(!(((data158 === "https://self-issued.me") || (data158 === "https://self-issued.me/v2")) || (data158 === "https://self-issued.me/v2/openid-vc"))){
const err316 = {instancePath:instancePath+"/issuer",schemaPath:"#/definitions/ResponseIss/enum",keyword:"enum",params:{allowedValues: schema526.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err316];
}
else {
vErrors.push(err316);
}
errors++;
}
var _valid50 = _errs578 === errors;
valid168 = valid168 || _valid50;
if(!valid168){
const _errs581 = errors;
if(typeof data158 !== "string"){
const err317 = {instancePath:instancePath+"/issuer",schemaPath:"#/anyOf/2/properties/issuer/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err317];
}
else {
vErrors.push(err317);
}
errors++;
}
var _valid50 = _errs581 === errors;
valid168 = valid168 || _valid50;
}
if(!valid168){
const err318 = {instancePath:instancePath+"/issuer",schemaPath:"#/anyOf/2/properties/issuer/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err318];
}
else {
vErrors.push(err318);
}
errors++;
}
else {
errors = _errs577;
if(vErrors !== null){
if(_errs577){
vErrors.length = _errs577;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs576 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.response_types_supported !== undefined){
let data159 = data.response_types_supported;
const _errs583 = errors;
const _errs584 = errors;
let valid170 = false;
const _errs585 = errors;
if(errors === _errs585){
if(Array.isArray(data159)){
var valid171 = true;
const len50 = data159.length;
for(let i50=0; i50<len50; i50++){
let data160 = data159[i50];
const _errs587 = errors;
if(typeof data160 !== "string"){
const err319 = {instancePath:instancePath+"/response_types_supported/" + i50,schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err319];
}
else {
vErrors.push(err319);
}
errors++;
}
if(!((data160 === "id_token") || (data160 === "vp_token"))){
const err320 = {instancePath:instancePath+"/response_types_supported/" + i50,schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema527.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err320];
}
else {
vErrors.push(err320);
}
errors++;
}
var valid171 = _errs587 === errors;
if(!valid171){
break;
}
}
}
else {
const err321 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/anyOf/2/properties/response_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err321];
}
else {
vErrors.push(err321);
}
errors++;
}
}
var _valid51 = _errs585 === errors;
valid170 = valid170 || _valid51;
if(!valid170){
const _errs590 = errors;
if(typeof data159 !== "string"){
const err322 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err322];
}
else {
vErrors.push(err322);
}
errors++;
}
if(!((data159 === "id_token") || (data159 === "vp_token"))){
const err323 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/definitions/ResponseType/enum",keyword:"enum",params:{allowedValues: schema527.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err323];
}
else {
vErrors.push(err323);
}
errors++;
}
var _valid51 = _errs590 === errors;
valid170 = valid170 || _valid51;
}
if(!valid170){
const err324 = {instancePath:instancePath+"/response_types_supported",schemaPath:"#/anyOf/2/properties/response_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err324];
}
else {
vErrors.push(err324);
}
errors++;
}
else {
errors = _errs584;
if(vErrors !== null){
if(_errs584){
vErrors.length = _errs584;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs583 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.scopes_supported !== undefined){
let data161 = data.scopes_supported;
const _errs593 = errors;
const _errs594 = errors;
let valid174 = false;
const _errs595 = errors;
if(errors === _errs595){
if(Array.isArray(data161)){
var valid175 = true;
const len51 = data161.length;
for(let i51=0; i51<len51; i51++){
let data162 = data161[i51];
const _errs597 = errors;
if(typeof data162 !== "string"){
const err325 = {instancePath:instancePath+"/scopes_supported/" + i51,schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err325];
}
else {
vErrors.push(err325);
}
errors++;
}
if(!((((((data162 === "openid") || (data162 === "openid did_authn")) || (data162 === "profile")) || (data162 === "email")) || (data162 === "address")) || (data162 === "phone"))){
const err326 = {instancePath:instancePath+"/scopes_supported/" + i51,schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema529.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err326];
}
else {
vErrors.push(err326);
}
errors++;
}
var valid175 = _errs597 === errors;
if(!valid175){
break;
}
}
}
else {
const err327 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/anyOf/2/properties/scopes_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err327];
}
else {
vErrors.push(err327);
}
errors++;
}
}
var _valid52 = _errs595 === errors;
valid174 = valid174 || _valid52;
if(!valid174){
const _errs600 = errors;
if(typeof data161 !== "string"){
const err328 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err328];
}
else {
vErrors.push(err328);
}
errors++;
}
if(!((((((data161 === "openid") || (data161 === "openid did_authn")) || (data161 === "profile")) || (data161 === "email")) || (data161 === "address")) || (data161 === "phone"))){
const err329 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/definitions/Scope/enum",keyword:"enum",params:{allowedValues: schema529.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err329];
}
else {
vErrors.push(err329);
}
errors++;
}
var _valid52 = _errs600 === errors;
valid174 = valid174 || _valid52;
}
if(!valid174){
const err330 = {instancePath:instancePath+"/scopes_supported",schemaPath:"#/anyOf/2/properties/scopes_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err330];
}
else {
vErrors.push(err330);
}
errors++;
}
else {
errors = _errs594;
if(vErrors !== null){
if(_errs594){
vErrors.length = _errs594;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs593 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.subject_types_supported !== undefined){
let data163 = data.subject_types_supported;
const _errs603 = errors;
const _errs604 = errors;
let valid178 = false;
const _errs605 = errors;
if(errors === _errs605){
if(Array.isArray(data163)){
var valid179 = true;
const len52 = data163.length;
for(let i52=0; i52<len52; i52++){
let data164 = data163[i52];
const _errs607 = errors;
if(typeof data164 !== "string"){
const err331 = {instancePath:instancePath+"/subject_types_supported/" + i52,schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err331];
}
else {
vErrors.push(err331);
}
errors++;
}
if(!((data164 === "public") || (data164 === "pairwise"))){
const err332 = {instancePath:instancePath+"/subject_types_supported/" + i52,schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema531.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err332];
}
else {
vErrors.push(err332);
}
errors++;
}
var valid179 = _errs607 === errors;
if(!valid179){
break;
}
}
}
else {
const err333 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/anyOf/2/properties/subject_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err333];
}
else {
vErrors.push(err333);
}
errors++;
}
}
var _valid53 = _errs605 === errors;
valid178 = valid178 || _valid53;
if(!valid178){
const _errs610 = errors;
if(typeof data163 !== "string"){
const err334 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err334];
}
else {
vErrors.push(err334);
}
errors++;
}
if(!((data163 === "public") || (data163 === "pairwise"))){
const err335 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/definitions/SubjectType/enum",keyword:"enum",params:{allowedValues: schema531.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err335];
}
else {
vErrors.push(err335);
}
errors++;
}
var _valid53 = _errs610 === errors;
valid178 = valid178 || _valid53;
}
if(!valid178){
const err336 = {instancePath:instancePath+"/subject_types_supported",schemaPath:"#/anyOf/2/properties/subject_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err336];
}
else {
vErrors.push(err336);
}
errors++;
}
else {
errors = _errs604;
if(vErrors !== null){
if(_errs604){
vErrors.length = _errs604;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs603 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.id_token_signing_alg_values_supported !== undefined){
let data165 = data.id_token_signing_alg_values_supported;
const _errs613 = errors;
const _errs614 = errors;
let valid182 = false;
const _errs615 = errors;
if(errors === _errs615){
if(Array.isArray(data165)){
var valid183 = true;
const len53 = data165.length;
for(let i53=0; i53<len53; i53++){
let data166 = data165[i53];
const _errs617 = errors;
if(typeof data166 !== "string"){
const err337 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i53,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err337];
}
else {
vErrors.push(err337);
}
errors++;
}
if(!(((((data166 === "EdDSA") || (data166 === "RS256")) || (data166 === "PS256")) || (data166 === "ES256")) || (data166 === "ES256K"))){
const err338 = {instancePath:instancePath+"/id_token_signing_alg_values_supported/" + i53,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err338];
}
else {
vErrors.push(err338);
}
errors++;
}
var valid183 = _errs617 === errors;
if(!valid183){
break;
}
}
}
else {
const err339 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/anyOf/2/properties/id_token_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err339];
}
else {
vErrors.push(err339);
}
errors++;
}
}
var _valid54 = _errs615 === errors;
valid182 = valid182 || _valid54;
if(!valid182){
const _errs620 = errors;
if(typeof data165 !== "string"){
const err340 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err340];
}
else {
vErrors.push(err340);
}
errors++;
}
if(!(((((data165 === "EdDSA") || (data165 === "RS256")) || (data165 === "PS256")) || (data165 === "ES256")) || (data165 === "ES256K"))){
const err341 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err341];
}
else {
vErrors.push(err341);
}
errors++;
}
var _valid54 = _errs620 === errors;
valid182 = valid182 || _valid54;
}
if(!valid182){
const err342 = {instancePath:instancePath+"/id_token_signing_alg_values_supported",schemaPath:"#/anyOf/2/properties/id_token_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err342];
}
else {
vErrors.push(err342);
}
errors++;
}
else {
errors = _errs614;
if(vErrors !== null){
if(_errs614){
vErrors.length = _errs614;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs613 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.request_object_signing_alg_values_supported !== undefined){
let data167 = data.request_object_signing_alg_values_supported;
const _errs623 = errors;
const _errs624 = errors;
let valid186 = false;
const _errs625 = errors;
if(errors === _errs625){
if(Array.isArray(data167)){
var valid187 = true;
const len54 = data167.length;
for(let i54=0; i54<len54; i54++){
let data168 = data167[i54];
const _errs627 = errors;
if(typeof data168 !== "string"){
const err343 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i54,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err343];
}
else {
vErrors.push(err343);
}
errors++;
}
if(!(((((data168 === "EdDSA") || (data168 === "RS256")) || (data168 === "PS256")) || (data168 === "ES256")) || (data168 === "ES256K"))){
const err344 = {instancePath:instancePath+"/request_object_signing_alg_values_supported/" + i54,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err344];
}
else {
vErrors.push(err344);
}
errors++;
}
var valid187 = _errs627 === errors;
if(!valid187){
break;
}
}
}
else {
const err345 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/anyOf/2/properties/request_object_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err345];
}
else {
vErrors.push(err345);
}
errors++;
}
}
var _valid55 = _errs625 === errors;
valid186 = valid186 || _valid55;
if(!valid186){
const _errs630 = errors;
if(typeof data167 !== "string"){
const err346 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err346];
}
else {
vErrors.push(err346);
}
errors++;
}
if(!(((((data167 === "EdDSA") || (data167 === "RS256")) || (data167 === "PS256")) || (data167 === "ES256")) || (data167 === "ES256K"))){
const err347 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err347];
}
else {
vErrors.push(err347);
}
errors++;
}
var _valid55 = _errs630 === errors;
valid186 = valid186 || _valid55;
}
if(!valid186){
const err348 = {instancePath:instancePath+"/request_object_signing_alg_values_supported",schemaPath:"#/anyOf/2/properties/request_object_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err348];
}
else {
vErrors.push(err348);
}
errors++;
}
else {
errors = _errs624;
if(vErrors !== null){
if(_errs624){
vErrors.length = _errs624;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs623 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.subject_syntax_types_supported !== undefined){
let data169 = data.subject_syntax_types_supported;
const _errs633 = errors;
if(errors === _errs633){
if(Array.isArray(data169)){
var valid190 = true;
const len55 = data169.length;
for(let i55=0; i55<len55; i55++){
const _errs635 = errors;
if(typeof data169[i55] !== "string"){
const err349 = {instancePath:instancePath+"/subject_syntax_types_supported/" + i55,schemaPath:"#/anyOf/2/properties/subject_syntax_types_supported/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err349];
}
else {
vErrors.push(err349);
}
errors++;
}
var valid190 = _errs635 === errors;
if(!valid190){
break;
}
}
}
else {
const err350 = {instancePath:instancePath+"/subject_syntax_types_supported",schemaPath:"#/anyOf/2/properties/subject_syntax_types_supported/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err350];
}
else {
vErrors.push(err350);
}
errors++;
}
}
var valid165 = _errs633 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.token_endpoint !== undefined){
const _errs637 = errors;
if(typeof data.token_endpoint !== "string"){
const err351 = {instancePath:instancePath+"/token_endpoint",schemaPath:"#/anyOf/2/properties/token_endpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err351];
}
else {
vErrors.push(err351);
}
errors++;
}
var valid165 = _errs637 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.userinfo_endpoint !== undefined){
const _errs639 = errors;
if(typeof data.userinfo_endpoint !== "string"){
const err352 = {instancePath:instancePath+"/userinfo_endpoint",schemaPath:"#/anyOf/2/properties/userinfo_endpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err352];
}
else {
vErrors.push(err352);
}
errors++;
}
var valid165 = _errs639 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.jwks_uri !== undefined){
const _errs641 = errors;
if(typeof data.jwks_uri !== "string"){
const err353 = {instancePath:instancePath+"/jwks_uri",schemaPath:"#/anyOf/2/properties/jwks_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err353];
}
else {
vErrors.push(err353);
}
errors++;
}
var valid165 = _errs641 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.registration_endpoint !== undefined){
const _errs643 = errors;
if(typeof data.registration_endpoint !== "string"){
const err354 = {instancePath:instancePath+"/registration_endpoint",schemaPath:"#/anyOf/2/properties/registration_endpoint/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err354];
}
else {
vErrors.push(err354);
}
errors++;
}
var valid165 = _errs643 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.response_modes_supported !== undefined){
let data175 = data.response_modes_supported;
const _errs645 = errors;
const _errs646 = errors;
let valid191 = false;
const _errs647 = errors;
if(errors === _errs647){
if(Array.isArray(data175)){
var valid192 = true;
const len56 = data175.length;
for(let i56=0; i56<len56; i56++){
let data176 = data175[i56];
const _errs649 = errors;
if(typeof data176 !== "string"){
const err355 = {instancePath:instancePath+"/response_modes_supported/" + i56,schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err355];
}
else {
vErrors.push(err355);
}
errors++;
}
if(!((((((((data176 === "fragment") || (data176 === "form_post")) || (data176 === "post")) || (data176 === "direct_post")) || (data176 === "query")) || (data176 === "direct_post.jwt")) || (data176 === "query.jwt")) || (data176 === "fragment.jwt"))){
const err356 = {instancePath:instancePath+"/response_modes_supported/" + i56,schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema537.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err356];
}
else {
vErrors.push(err356);
}
errors++;
}
var valid192 = _errs649 === errors;
if(!valid192){
break;
}
}
}
else {
const err357 = {instancePath:instancePath+"/response_modes_supported",schemaPath:"#/anyOf/2/properties/response_modes_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err357];
}
else {
vErrors.push(err357);
}
errors++;
}
}
var _valid56 = _errs647 === errors;
valid191 = valid191 || _valid56;
if(!valid191){
const _errs652 = errors;
if(typeof data175 !== "string"){
const err358 = {instancePath:instancePath+"/response_modes_supported",schemaPath:"#/definitions/ResponseMode/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err358];
}
else {
vErrors.push(err358);
}
errors++;
}
if(!((((((((data175 === "fragment") || (data175 === "form_post")) || (data175 === "post")) || (data175 === "direct_post")) || (data175 === "query")) || (data175 === "direct_post.jwt")) || (data175 === "query.jwt")) || (data175 === "fragment.jwt"))){
const err359 = {instancePath:instancePath+"/response_modes_supported",schemaPath:"#/definitions/ResponseMode/enum",keyword:"enum",params:{allowedValues: schema537.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err359];
}
else {
vErrors.push(err359);
}
errors++;
}
var _valid56 = _errs652 === errors;
valid191 = valid191 || _valid56;
}
if(!valid191){
const err360 = {instancePath:instancePath+"/response_modes_supported",schemaPath:"#/anyOf/2/properties/response_modes_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err360];
}
else {
vErrors.push(err360);
}
errors++;
}
else {
errors = _errs646;
if(vErrors !== null){
if(_errs646){
vErrors.length = _errs646;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs645 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.grant_types_supported !== undefined){
let data177 = data.grant_types_supported;
const _errs655 = errors;
const _errs656 = errors;
let valid195 = false;
const _errs657 = errors;
if(errors === _errs657){
if(Array.isArray(data177)){
var valid196 = true;
const len57 = data177.length;
for(let i57=0; i57<len57; i57++){
let data178 = data177[i57];
const _errs659 = errors;
if(typeof data178 !== "string"){
const err361 = {instancePath:instancePath+"/grant_types_supported/" + i57,schemaPath:"#/definitions/GrantType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err361];
}
else {
vErrors.push(err361);
}
errors++;
}
if(!((data178 === "authorization_code") || (data178 === "implicit"))){
const err362 = {instancePath:instancePath+"/grant_types_supported/" + i57,schemaPath:"#/definitions/GrantType/enum",keyword:"enum",params:{allowedValues: schema539.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err362];
}
else {
vErrors.push(err362);
}
errors++;
}
var valid196 = _errs659 === errors;
if(!valid196){
break;
}
}
}
else {
const err363 = {instancePath:instancePath+"/grant_types_supported",schemaPath:"#/anyOf/2/properties/grant_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err363];
}
else {
vErrors.push(err363);
}
errors++;
}
}
var _valid57 = _errs657 === errors;
valid195 = valid195 || _valid57;
if(!valid195){
const _errs662 = errors;
if(typeof data177 !== "string"){
const err364 = {instancePath:instancePath+"/grant_types_supported",schemaPath:"#/definitions/GrantType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err364];
}
else {
vErrors.push(err364);
}
errors++;
}
if(!((data177 === "authorization_code") || (data177 === "implicit"))){
const err365 = {instancePath:instancePath+"/grant_types_supported",schemaPath:"#/definitions/GrantType/enum",keyword:"enum",params:{allowedValues: schema539.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err365];
}
else {
vErrors.push(err365);
}
errors++;
}
var _valid57 = _errs662 === errors;
valid195 = valid195 || _valid57;
}
if(!valid195){
const err366 = {instancePath:instancePath+"/grant_types_supported",schemaPath:"#/anyOf/2/properties/grant_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err366];
}
else {
vErrors.push(err366);
}
errors++;
}
else {
errors = _errs656;
if(vErrors !== null){
if(_errs656){
vErrors.length = _errs656;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs655 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.acr_values_supported !== undefined){
let data179 = data.acr_values_supported;
const _errs665 = errors;
const _errs666 = errors;
let valid199 = false;
const _errs667 = errors;
if(errors === _errs667){
if(Array.isArray(data179)){
var valid200 = true;
const len58 = data179.length;
for(let i58=0; i58<len58; i58++){
let data180 = data179[i58];
const _errs669 = errors;
if(typeof data180 !== "string"){
const err367 = {instancePath:instancePath+"/acr_values_supported/" + i58,schemaPath:"#/definitions/AuthenticationContextReferences/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err367];
}
else {
vErrors.push(err367);
}
errors++;
}
if(!((data180 === "phr") || (data180 === "phrh"))){
const err368 = {instancePath:instancePath+"/acr_values_supported/" + i58,schemaPath:"#/definitions/AuthenticationContextReferences/enum",keyword:"enum",params:{allowedValues: schema541.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err368];
}
else {
vErrors.push(err368);
}
errors++;
}
var valid200 = _errs669 === errors;
if(!valid200){
break;
}
}
}
else {
const err369 = {instancePath:instancePath+"/acr_values_supported",schemaPath:"#/anyOf/2/properties/acr_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err369];
}
else {
vErrors.push(err369);
}
errors++;
}
}
var _valid58 = _errs667 === errors;
valid199 = valid199 || _valid58;
if(!valid199){
const _errs672 = errors;
if(typeof data179 !== "string"){
const err370 = {instancePath:instancePath+"/acr_values_supported",schemaPath:"#/definitions/AuthenticationContextReferences/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err370];
}
else {
vErrors.push(err370);
}
errors++;
}
if(!((data179 === "phr") || (data179 === "phrh"))){
const err371 = {instancePath:instancePath+"/acr_values_supported",schemaPath:"#/definitions/AuthenticationContextReferences/enum",keyword:"enum",params:{allowedValues: schema541.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err371];
}
else {
vErrors.push(err371);
}
errors++;
}
var _valid58 = _errs672 === errors;
valid199 = valid199 || _valid58;
}
if(!valid199){
const err372 = {instancePath:instancePath+"/acr_values_supported",schemaPath:"#/anyOf/2/properties/acr_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err372];
}
else {
vErrors.push(err372);
}
errors++;
}
else {
errors = _errs666;
if(vErrors !== null){
if(_errs666){
vErrors.length = _errs666;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs665 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.id_token_encryption_alg_values_supported !== undefined){
let data181 = data.id_token_encryption_alg_values_supported;
const _errs675 = errors;
const _errs676 = errors;
let valid203 = false;
const _errs677 = errors;
if(errors === _errs677){
if(Array.isArray(data181)){
var valid204 = true;
const len59 = data181.length;
for(let i59=0; i59<len59; i59++){
let data182 = data181[i59];
const _errs679 = errors;
if(typeof data182 !== "string"){
const err373 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported/" + i59,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err373];
}
else {
vErrors.push(err373);
}
errors++;
}
if(!(((((data182 === "EdDSA") || (data182 === "RS256")) || (data182 === "PS256")) || (data182 === "ES256")) || (data182 === "ES256K"))){
const err374 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported/" + i59,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err374];
}
else {
vErrors.push(err374);
}
errors++;
}
var valid204 = _errs679 === errors;
if(!valid204){
break;
}
}
}
else {
const err375 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported",schemaPath:"#/anyOf/2/properties/id_token_encryption_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err375];
}
else {
vErrors.push(err375);
}
errors++;
}
}
var _valid59 = _errs677 === errors;
valid203 = valid203 || _valid59;
if(!valid203){
const _errs682 = errors;
if(typeof data181 !== "string"){
const err376 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err376];
}
else {
vErrors.push(err376);
}
errors++;
}
if(!(((((data181 === "EdDSA") || (data181 === "RS256")) || (data181 === "PS256")) || (data181 === "ES256")) || (data181 === "ES256K"))){
const err377 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err377];
}
else {
vErrors.push(err377);
}
errors++;
}
var _valid59 = _errs682 === errors;
valid203 = valid203 || _valid59;
}
if(!valid203){
const err378 = {instancePath:instancePath+"/id_token_encryption_alg_values_supported",schemaPath:"#/anyOf/2/properties/id_token_encryption_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err378];
}
else {
vErrors.push(err378);
}
errors++;
}
else {
errors = _errs676;
if(vErrors !== null){
if(_errs676){
vErrors.length = _errs676;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs675 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.id_token_encryption_enc_values_supported !== undefined){
let data183 = data.id_token_encryption_enc_values_supported;
const _errs685 = errors;
const _errs686 = errors;
let valid207 = false;
const _errs687 = errors;
if(errors === _errs687){
if(Array.isArray(data183)){
var valid208 = true;
const len60 = data183.length;
for(let i60=0; i60<len60; i60++){
const _errs689 = errors;
if(typeof data183[i60] !== "string"){
const err379 = {instancePath:instancePath+"/id_token_encryption_enc_values_supported/" + i60,schemaPath:"#/anyOf/2/properties/id_token_encryption_enc_values_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err379];
}
else {
vErrors.push(err379);
}
errors++;
}
var valid208 = _errs689 === errors;
if(!valid208){
break;
}
}
}
else {
const err380 = {instancePath:instancePath+"/id_token_encryption_enc_values_supported",schemaPath:"#/anyOf/2/properties/id_token_encryption_enc_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err380];
}
else {
vErrors.push(err380);
}
errors++;
}
}
var _valid60 = _errs687 === errors;
valid207 = valid207 || _valid60;
if(!valid207){
const _errs691 = errors;
if(typeof data183 !== "string"){
const err381 = {instancePath:instancePath+"/id_token_encryption_enc_values_supported",schemaPath:"#/anyOf/2/properties/id_token_encryption_enc_values_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err381];
}
else {
vErrors.push(err381);
}
errors++;
}
var _valid60 = _errs691 === errors;
valid207 = valid207 || _valid60;
}
if(!valid207){
const err382 = {instancePath:instancePath+"/id_token_encryption_enc_values_supported",schemaPath:"#/anyOf/2/properties/id_token_encryption_enc_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err382];
}
else {
vErrors.push(err382);
}
errors++;
}
else {
errors = _errs686;
if(vErrors !== null){
if(_errs686){
vErrors.length = _errs686;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs685 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.userinfo_signing_alg_values_supported !== undefined){
let data185 = data.userinfo_signing_alg_values_supported;
const _errs693 = errors;
const _errs694 = errors;
let valid209 = false;
const _errs695 = errors;
if(errors === _errs695){
if(Array.isArray(data185)){
var valid210 = true;
const len61 = data185.length;
for(let i61=0; i61<len61; i61++){
let data186 = data185[i61];
const _errs697 = errors;
if(typeof data186 !== "string"){
const err383 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported/" + i61,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err383];
}
else {
vErrors.push(err383);
}
errors++;
}
if(!(((((data186 === "EdDSA") || (data186 === "RS256")) || (data186 === "PS256")) || (data186 === "ES256")) || (data186 === "ES256K"))){
const err384 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported/" + i61,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err384];
}
else {
vErrors.push(err384);
}
errors++;
}
var valid210 = _errs697 === errors;
if(!valid210){
break;
}
}
}
else {
const err385 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported",schemaPath:"#/anyOf/2/properties/userinfo_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err385];
}
else {
vErrors.push(err385);
}
errors++;
}
}
var _valid61 = _errs695 === errors;
valid209 = valid209 || _valid61;
if(!valid209){
const _errs700 = errors;
if(typeof data185 !== "string"){
const err386 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err386];
}
else {
vErrors.push(err386);
}
errors++;
}
if(!(((((data185 === "EdDSA") || (data185 === "RS256")) || (data185 === "PS256")) || (data185 === "ES256")) || (data185 === "ES256K"))){
const err387 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err387];
}
else {
vErrors.push(err387);
}
errors++;
}
var _valid61 = _errs700 === errors;
valid209 = valid209 || _valid61;
}
if(!valid209){
const err388 = {instancePath:instancePath+"/userinfo_signing_alg_values_supported",schemaPath:"#/anyOf/2/properties/userinfo_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err388];
}
else {
vErrors.push(err388);
}
errors++;
}
else {
errors = _errs694;
if(vErrors !== null){
if(_errs694){
vErrors.length = _errs694;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs693 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.userinfo_encryption_alg_values_supported !== undefined){
let data187 = data.userinfo_encryption_alg_values_supported;
const _errs703 = errors;
const _errs704 = errors;
let valid213 = false;
const _errs705 = errors;
if(errors === _errs705){
if(Array.isArray(data187)){
var valid214 = true;
const len62 = data187.length;
for(let i62=0; i62<len62; i62++){
let data188 = data187[i62];
const _errs707 = errors;
if(typeof data188 !== "string"){
const err389 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported/" + i62,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err389];
}
else {
vErrors.push(err389);
}
errors++;
}
if(!(((((data188 === "EdDSA") || (data188 === "RS256")) || (data188 === "PS256")) || (data188 === "ES256")) || (data188 === "ES256K"))){
const err390 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported/" + i62,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err390];
}
else {
vErrors.push(err390);
}
errors++;
}
var valid214 = _errs707 === errors;
if(!valid214){
break;
}
}
}
else {
const err391 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported",schemaPath:"#/anyOf/2/properties/userinfo_encryption_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err391];
}
else {
vErrors.push(err391);
}
errors++;
}
}
var _valid62 = _errs705 === errors;
valid213 = valid213 || _valid62;
if(!valid213){
const _errs710 = errors;
if(typeof data187 !== "string"){
const err392 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err392];
}
else {
vErrors.push(err392);
}
errors++;
}
if(!(((((data187 === "EdDSA") || (data187 === "RS256")) || (data187 === "PS256")) || (data187 === "ES256")) || (data187 === "ES256K"))){
const err393 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err393];
}
else {
vErrors.push(err393);
}
errors++;
}
var _valid62 = _errs710 === errors;
valid213 = valid213 || _valid62;
}
if(!valid213){
const err394 = {instancePath:instancePath+"/userinfo_encryption_alg_values_supported",schemaPath:"#/anyOf/2/properties/userinfo_encryption_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err394];
}
else {
vErrors.push(err394);
}
errors++;
}
else {
errors = _errs704;
if(vErrors !== null){
if(_errs704){
vErrors.length = _errs704;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs703 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.userinfo_encryption_enc_values_supported !== undefined){
let data189 = data.userinfo_encryption_enc_values_supported;
const _errs713 = errors;
const _errs714 = errors;
let valid217 = false;
const _errs715 = errors;
if(errors === _errs715){
if(Array.isArray(data189)){
var valid218 = true;
const len63 = data189.length;
for(let i63=0; i63<len63; i63++){
const _errs717 = errors;
if(typeof data189[i63] !== "string"){
const err395 = {instancePath:instancePath+"/userinfo_encryption_enc_values_supported/" + i63,schemaPath:"#/anyOf/2/properties/userinfo_encryption_enc_values_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err395];
}
else {
vErrors.push(err395);
}
errors++;
}
var valid218 = _errs717 === errors;
if(!valid218){
break;
}
}
}
else {
const err396 = {instancePath:instancePath+"/userinfo_encryption_enc_values_supported",schemaPath:"#/anyOf/2/properties/userinfo_encryption_enc_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err396];
}
else {
vErrors.push(err396);
}
errors++;
}
}
var _valid63 = _errs715 === errors;
valid217 = valid217 || _valid63;
if(!valid217){
const _errs719 = errors;
if(typeof data189 !== "string"){
const err397 = {instancePath:instancePath+"/userinfo_encryption_enc_values_supported",schemaPath:"#/anyOf/2/properties/userinfo_encryption_enc_values_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err397];
}
else {
vErrors.push(err397);
}
errors++;
}
var _valid63 = _errs719 === errors;
valid217 = valid217 || _valid63;
}
if(!valid217){
const err398 = {instancePath:instancePath+"/userinfo_encryption_enc_values_supported",schemaPath:"#/anyOf/2/properties/userinfo_encryption_enc_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err398];
}
else {
vErrors.push(err398);
}
errors++;
}
else {
errors = _errs714;
if(vErrors !== null){
if(_errs714){
vErrors.length = _errs714;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs713 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.request_object_encryption_alg_values_supported !== undefined){
let data191 = data.request_object_encryption_alg_values_supported;
const _errs721 = errors;
const _errs722 = errors;
let valid219 = false;
const _errs723 = errors;
if(errors === _errs723){
if(Array.isArray(data191)){
var valid220 = true;
const len64 = data191.length;
for(let i64=0; i64<len64; i64++){
let data192 = data191[i64];
const _errs725 = errors;
if(typeof data192 !== "string"){
const err399 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported/" + i64,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err399];
}
else {
vErrors.push(err399);
}
errors++;
}
if(!(((((data192 === "EdDSA") || (data192 === "RS256")) || (data192 === "PS256")) || (data192 === "ES256")) || (data192 === "ES256K"))){
const err400 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported/" + i64,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err400];
}
else {
vErrors.push(err400);
}
errors++;
}
var valid220 = _errs725 === errors;
if(!valid220){
break;
}
}
}
else {
const err401 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported",schemaPath:"#/anyOf/2/properties/request_object_encryption_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err401];
}
else {
vErrors.push(err401);
}
errors++;
}
}
var _valid64 = _errs723 === errors;
valid219 = valid219 || _valid64;
if(!valid219){
const _errs728 = errors;
if(typeof data191 !== "string"){
const err402 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err402];
}
else {
vErrors.push(err402);
}
errors++;
}
if(!(((((data191 === "EdDSA") || (data191 === "RS256")) || (data191 === "PS256")) || (data191 === "ES256")) || (data191 === "ES256K"))){
const err403 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err403];
}
else {
vErrors.push(err403);
}
errors++;
}
var _valid64 = _errs728 === errors;
valid219 = valid219 || _valid64;
}
if(!valid219){
const err404 = {instancePath:instancePath+"/request_object_encryption_alg_values_supported",schemaPath:"#/anyOf/2/properties/request_object_encryption_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err404];
}
else {
vErrors.push(err404);
}
errors++;
}
else {
errors = _errs722;
if(vErrors !== null){
if(_errs722){
vErrors.length = _errs722;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs721 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.request_object_encryption_enc_values_supported !== undefined){
let data193 = data.request_object_encryption_enc_values_supported;
const _errs731 = errors;
const _errs732 = errors;
let valid223 = false;
const _errs733 = errors;
if(errors === _errs733){
if(Array.isArray(data193)){
var valid224 = true;
const len65 = data193.length;
for(let i65=0; i65<len65; i65++){
const _errs735 = errors;
if(typeof data193[i65] !== "string"){
const err405 = {instancePath:instancePath+"/request_object_encryption_enc_values_supported/" + i65,schemaPath:"#/anyOf/2/properties/request_object_encryption_enc_values_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err405];
}
else {
vErrors.push(err405);
}
errors++;
}
var valid224 = _errs735 === errors;
if(!valid224){
break;
}
}
}
else {
const err406 = {instancePath:instancePath+"/request_object_encryption_enc_values_supported",schemaPath:"#/anyOf/2/properties/request_object_encryption_enc_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err406];
}
else {
vErrors.push(err406);
}
errors++;
}
}
var _valid65 = _errs733 === errors;
valid223 = valid223 || _valid65;
if(!valid223){
const _errs737 = errors;
if(typeof data193 !== "string"){
const err407 = {instancePath:instancePath+"/request_object_encryption_enc_values_supported",schemaPath:"#/anyOf/2/properties/request_object_encryption_enc_values_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err407];
}
else {
vErrors.push(err407);
}
errors++;
}
var _valid65 = _errs737 === errors;
valid223 = valid223 || _valid65;
}
if(!valid223){
const err408 = {instancePath:instancePath+"/request_object_encryption_enc_values_supported",schemaPath:"#/anyOf/2/properties/request_object_encryption_enc_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err408];
}
else {
vErrors.push(err408);
}
errors++;
}
else {
errors = _errs732;
if(vErrors !== null){
if(_errs732){
vErrors.length = _errs732;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs731 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.token_endpoint_auth_methods_supported !== undefined){
let data195 = data.token_endpoint_auth_methods_supported;
const _errs739 = errors;
const _errs740 = errors;
let valid225 = false;
const _errs741 = errors;
if(errors === _errs741){
if(Array.isArray(data195)){
var valid226 = true;
const len66 = data195.length;
for(let i66=0; i66<len66; i66++){
let data196 = data195[i66];
const _errs743 = errors;
if(typeof data196 !== "string"){
const err409 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported/" + i66,schemaPath:"#/definitions/TokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err409];
}
else {
vErrors.push(err409);
}
errors++;
}
if(!((((data196 === "client_secret_post") || (data196 === "client_secret_basic")) || (data196 === "client_secret_jwt")) || (data196 === "private_key_jwt"))){
const err410 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported/" + i66,schemaPath:"#/definitions/TokenEndpointAuthMethod/enum",keyword:"enum",params:{allowedValues: schema551.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err410];
}
else {
vErrors.push(err410);
}
errors++;
}
var valid226 = _errs743 === errors;
if(!valid226){
break;
}
}
}
else {
const err411 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported",schemaPath:"#/anyOf/2/properties/token_endpoint_auth_methods_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err411];
}
else {
vErrors.push(err411);
}
errors++;
}
}
var _valid66 = _errs741 === errors;
valid225 = valid225 || _valid66;
if(!valid225){
const _errs746 = errors;
if(typeof data195 !== "string"){
const err412 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported",schemaPath:"#/definitions/TokenEndpointAuthMethod/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err412];
}
else {
vErrors.push(err412);
}
errors++;
}
if(!((((data195 === "client_secret_post") || (data195 === "client_secret_basic")) || (data195 === "client_secret_jwt")) || (data195 === "private_key_jwt"))){
const err413 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported",schemaPath:"#/definitions/TokenEndpointAuthMethod/enum",keyword:"enum",params:{allowedValues: schema551.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err413];
}
else {
vErrors.push(err413);
}
errors++;
}
var _valid66 = _errs746 === errors;
valid225 = valid225 || _valid66;
}
if(!valid225){
const err414 = {instancePath:instancePath+"/token_endpoint_auth_methods_supported",schemaPath:"#/anyOf/2/properties/token_endpoint_auth_methods_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err414];
}
else {
vErrors.push(err414);
}
errors++;
}
else {
errors = _errs740;
if(vErrors !== null){
if(_errs740){
vErrors.length = _errs740;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs739 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.token_endpoint_auth_signing_alg_values_supported !== undefined){
let data197 = data.token_endpoint_auth_signing_alg_values_supported;
const _errs749 = errors;
const _errs750 = errors;
let valid229 = false;
const _errs751 = errors;
if(errors === _errs751){
if(Array.isArray(data197)){
var valid230 = true;
const len67 = data197.length;
for(let i67=0; i67<len67; i67++){
let data198 = data197[i67];
const _errs753 = errors;
if(typeof data198 !== "string"){
const err415 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported/" + i67,schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err415];
}
else {
vErrors.push(err415);
}
errors++;
}
if(!(((((data198 === "EdDSA") || (data198 === "RS256")) || (data198 === "PS256")) || (data198 === "ES256")) || (data198 === "ES256K"))){
const err416 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported/" + i67,schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err416];
}
else {
vErrors.push(err416);
}
errors++;
}
var valid230 = _errs753 === errors;
if(!valid230){
break;
}
}
}
else {
const err417 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported",schemaPath:"#/anyOf/2/properties/token_endpoint_auth_signing_alg_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err417];
}
else {
vErrors.push(err417);
}
errors++;
}
}
var _valid67 = _errs751 === errors;
valid229 = valid229 || _valid67;
if(!valid229){
const _errs756 = errors;
if(typeof data197 !== "string"){
const err418 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err418];
}
else {
vErrors.push(err418);
}
errors++;
}
if(!(((((data197 === "EdDSA") || (data197 === "RS256")) || (data197 === "PS256")) || (data197 === "ES256")) || (data197 === "ES256K"))){
const err419 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported",schemaPath:"#/definitions/SigningAlgo/enum",keyword:"enum",params:{allowedValues: schema533.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err419];
}
else {
vErrors.push(err419);
}
errors++;
}
var _valid67 = _errs756 === errors;
valid229 = valid229 || _valid67;
}
if(!valid229){
const err420 = {instancePath:instancePath+"/token_endpoint_auth_signing_alg_values_supported",schemaPath:"#/anyOf/2/properties/token_endpoint_auth_signing_alg_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err420];
}
else {
vErrors.push(err420);
}
errors++;
}
else {
errors = _errs750;
if(vErrors !== null){
if(_errs750){
vErrors.length = _errs750;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs749 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.display_values_supported !== undefined){
let data199 = data.display_values_supported;
const _errs759 = errors;
const _errs760 = errors;
let valid233 = false;
const _errs761 = errors;
if(errors === _errs761){
if(Array.isArray(data199)){
var valid234 = true;
const len68 = data199.length;
for(let i68=0; i68<len68; i68++){
const _errs763 = errors;
var valid234 = _errs763 === errors;
if(!valid234){
break;
}
}
}
else {
const err421 = {instancePath:instancePath+"/display_values_supported",schemaPath:"#/anyOf/2/properties/display_values_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err421];
}
else {
vErrors.push(err421);
}
errors++;
}
}
var _valid68 = _errs761 === errors;
valid233 = valid233 || _valid68;
if(!valid233){
const _errs764 = errors;
var _valid68 = _errs764 === errors;
valid233 = valid233 || _valid68;
}
if(!valid233){
const err422 = {instancePath:instancePath+"/display_values_supported",schemaPath:"#/anyOf/2/properties/display_values_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err422];
}
else {
vErrors.push(err422);
}
errors++;
}
else {
errors = _errs760;
if(vErrors !== null){
if(_errs760){
vErrors.length = _errs760;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs759 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.claim_types_supported !== undefined){
let data201 = data.claim_types_supported;
const _errs765 = errors;
const _errs766 = errors;
let valid235 = false;
const _errs767 = errors;
if(errors === _errs767){
if(Array.isArray(data201)){
var valid236 = true;
const len69 = data201.length;
for(let i69=0; i69<len69; i69++){
let data202 = data201[i69];
const _errs769 = errors;
if(typeof data202 !== "string"){
const err423 = {instancePath:instancePath+"/claim_types_supported/" + i69,schemaPath:"#/definitions/ClaimType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err423];
}
else {
vErrors.push(err423);
}
errors++;
}
if(!(((data202 === "normal") || (data202 === "aggregated")) || (data202 === "distributed"))){
const err424 = {instancePath:instancePath+"/claim_types_supported/" + i69,schemaPath:"#/definitions/ClaimType/enum",keyword:"enum",params:{allowedValues: schema555.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err424];
}
else {
vErrors.push(err424);
}
errors++;
}
var valid236 = _errs769 === errors;
if(!valid236){
break;
}
}
}
else {
const err425 = {instancePath:instancePath+"/claim_types_supported",schemaPath:"#/anyOf/2/properties/claim_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err425];
}
else {
vErrors.push(err425);
}
errors++;
}
}
var _valid69 = _errs767 === errors;
valid235 = valid235 || _valid69;
if(!valid235){
const _errs772 = errors;
if(typeof data201 !== "string"){
const err426 = {instancePath:instancePath+"/claim_types_supported",schemaPath:"#/definitions/ClaimType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err426];
}
else {
vErrors.push(err426);
}
errors++;
}
if(!(((data201 === "normal") || (data201 === "aggregated")) || (data201 === "distributed"))){
const err427 = {instancePath:instancePath+"/claim_types_supported",schemaPath:"#/definitions/ClaimType/enum",keyword:"enum",params:{allowedValues: schema555.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err427];
}
else {
vErrors.push(err427);
}
errors++;
}
var _valid69 = _errs772 === errors;
valid235 = valid235 || _valid69;
}
if(!valid235){
const err428 = {instancePath:instancePath+"/claim_types_supported",schemaPath:"#/anyOf/2/properties/claim_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err428];
}
else {
vErrors.push(err428);
}
errors++;
}
else {
errors = _errs766;
if(vErrors !== null){
if(_errs766){
vErrors.length = _errs766;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs765 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.claims_supported !== undefined){
let data203 = data.claims_supported;
const _errs775 = errors;
const _errs776 = errors;
let valid239 = false;
const _errs777 = errors;
if(errors === _errs777){
if(Array.isArray(data203)){
var valid240 = true;
const len70 = data203.length;
for(let i70=0; i70<len70; i70++){
const _errs779 = errors;
if(typeof data203[i70] !== "string"){
const err429 = {instancePath:instancePath+"/claims_supported/" + i70,schemaPath:"#/anyOf/2/properties/claims_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err429];
}
else {
vErrors.push(err429);
}
errors++;
}
var valid240 = _errs779 === errors;
if(!valid240){
break;
}
}
}
else {
const err430 = {instancePath:instancePath+"/claims_supported",schemaPath:"#/anyOf/2/properties/claims_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err430];
}
else {
vErrors.push(err430);
}
errors++;
}
}
var _valid70 = _errs777 === errors;
valid239 = valid239 || _valid70;
if(!valid239){
const _errs781 = errors;
if(typeof data203 !== "string"){
const err431 = {instancePath:instancePath+"/claims_supported",schemaPath:"#/anyOf/2/properties/claims_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err431];
}
else {
vErrors.push(err431);
}
errors++;
}
var _valid70 = _errs781 === errors;
valid239 = valid239 || _valid70;
}
if(!valid239){
const err432 = {instancePath:instancePath+"/claims_supported",schemaPath:"#/anyOf/2/properties/claims_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err432];
}
else {
vErrors.push(err432);
}
errors++;
}
else {
errors = _errs776;
if(vErrors !== null){
if(_errs776){
vErrors.length = _errs776;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs775 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.service_documentation !== undefined){
const _errs783 = errors;
if(typeof data.service_documentation !== "string"){
const err433 = {instancePath:instancePath+"/service_documentation",schemaPath:"#/anyOf/2/properties/service_documentation/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err433];
}
else {
vErrors.push(err433);
}
errors++;
}
var valid165 = _errs783 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.claims_locales_supported !== undefined){
let data206 = data.claims_locales_supported;
const _errs785 = errors;
const _errs786 = errors;
let valid241 = false;
const _errs787 = errors;
if(errors === _errs787){
if(Array.isArray(data206)){
var valid242 = true;
const len71 = data206.length;
for(let i71=0; i71<len71; i71++){
const _errs789 = errors;
if(typeof data206[i71] !== "string"){
const err434 = {instancePath:instancePath+"/claims_locales_supported/" + i71,schemaPath:"#/anyOf/2/properties/claims_locales_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err434];
}
else {
vErrors.push(err434);
}
errors++;
}
var valid242 = _errs789 === errors;
if(!valid242){
break;
}
}
}
else {
const err435 = {instancePath:instancePath+"/claims_locales_supported",schemaPath:"#/anyOf/2/properties/claims_locales_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err435];
}
else {
vErrors.push(err435);
}
errors++;
}
}
var _valid71 = _errs787 === errors;
valid241 = valid241 || _valid71;
if(!valid241){
const _errs791 = errors;
if(typeof data206 !== "string"){
const err436 = {instancePath:instancePath+"/claims_locales_supported",schemaPath:"#/anyOf/2/properties/claims_locales_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err436];
}
else {
vErrors.push(err436);
}
errors++;
}
var _valid71 = _errs791 === errors;
valid241 = valid241 || _valid71;
}
if(!valid241){
const err437 = {instancePath:instancePath+"/claims_locales_supported",schemaPath:"#/anyOf/2/properties/claims_locales_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err437];
}
else {
vErrors.push(err437);
}
errors++;
}
else {
errors = _errs786;
if(vErrors !== null){
if(_errs786){
vErrors.length = _errs786;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs785 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.ui_locales_supported !== undefined){
let data208 = data.ui_locales_supported;
const _errs793 = errors;
const _errs794 = errors;
let valid243 = false;
const _errs795 = errors;
if(errors === _errs795){
if(Array.isArray(data208)){
var valid244 = true;
const len72 = data208.length;
for(let i72=0; i72<len72; i72++){
const _errs797 = errors;
if(typeof data208[i72] !== "string"){
const err438 = {instancePath:instancePath+"/ui_locales_supported/" + i72,schemaPath:"#/anyOf/2/properties/ui_locales_supported/anyOf/0/items/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err438];
}
else {
vErrors.push(err438);
}
errors++;
}
var valid244 = _errs797 === errors;
if(!valid244){
break;
}
}
}
else {
const err439 = {instancePath:instancePath+"/ui_locales_supported",schemaPath:"#/anyOf/2/properties/ui_locales_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err439];
}
else {
vErrors.push(err439);
}
errors++;
}
}
var _valid72 = _errs795 === errors;
valid243 = valid243 || _valid72;
if(!valid243){
const _errs799 = errors;
if(typeof data208 !== "string"){
const err440 = {instancePath:instancePath+"/ui_locales_supported",schemaPath:"#/anyOf/2/properties/ui_locales_supported/anyOf/1/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err440];
}
else {
vErrors.push(err440);
}
errors++;
}
var _valid72 = _errs799 === errors;
valid243 = valid243 || _valid72;
}
if(!valid243){
const err441 = {instancePath:instancePath+"/ui_locales_supported",schemaPath:"#/anyOf/2/properties/ui_locales_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err441];
}
else {
vErrors.push(err441);
}
errors++;
}
else {
errors = _errs794;
if(vErrors !== null){
if(_errs794){
vErrors.length = _errs794;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs793 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.claims_parameter_supported !== undefined){
const _errs801 = errors;
if(typeof data.claims_parameter_supported !== "boolean"){
const err442 = {instancePath:instancePath+"/claims_parameter_supported",schemaPath:"#/anyOf/2/properties/claims_parameter_supported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err442];
}
else {
vErrors.push(err442);
}
errors++;
}
var valid165 = _errs801 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.request_parameter_supported !== undefined){
const _errs803 = errors;
if(typeof data.request_parameter_supported !== "boolean"){
const err443 = {instancePath:instancePath+"/request_parameter_supported",schemaPath:"#/anyOf/2/properties/request_parameter_supported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err443];
}
else {
vErrors.push(err443);
}
errors++;
}
var valid165 = _errs803 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.request_uri_parameter_supported !== undefined){
const _errs805 = errors;
if(typeof data.request_uri_parameter_supported !== "boolean"){
const err444 = {instancePath:instancePath+"/request_uri_parameter_supported",schemaPath:"#/anyOf/2/properties/request_uri_parameter_supported/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err444];
}
else {
vErrors.push(err444);
}
errors++;
}
var valid165 = _errs805 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.require_request_uri_registration !== undefined){
const _errs807 = errors;
if(typeof data.require_request_uri_registration !== "boolean"){
const err445 = {instancePath:instancePath+"/require_request_uri_registration",schemaPath:"#/anyOf/2/properties/require_request_uri_registration/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"};
if(vErrors === null){
vErrors = [err445];
}
else {
vErrors.push(err445);
}
errors++;
}
var valid165 = _errs807 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.op_policy_uri !== undefined){
const _errs809 = errors;
if(typeof data.op_policy_uri !== "string"){
const err446 = {instancePath:instancePath+"/op_policy_uri",schemaPath:"#/anyOf/2/properties/op_policy_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err446];
}
else {
vErrors.push(err446);
}
errors++;
}
var valid165 = _errs809 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.op_tos_uri !== undefined){
const _errs811 = errors;
if(typeof data.op_tos_uri !== "string"){
const err447 = {instancePath:instancePath+"/op_tos_uri",schemaPath:"#/anyOf/2/properties/op_tos_uri/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err447];
}
else {
vErrors.push(err447);
}
errors++;
}
var valid165 = _errs811 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.id_token_types_supported !== undefined){
let data216 = data.id_token_types_supported;
const _errs813 = errors;
const _errs814 = errors;
let valid245 = false;
const _errs815 = errors;
if(errors === _errs815){
if(Array.isArray(data216)){
var valid246 = true;
const len73 = data216.length;
for(let i73=0; i73<len73; i73++){
let data217 = data216[i73];
const _errs817 = errors;
if(typeof data217 !== "string"){
const err448 = {instancePath:instancePath+"/id_token_types_supported/" + i73,schemaPath:"#/definitions/IdTokenType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err448];
}
else {
vErrors.push(err448);
}
errors++;
}
if(!((data217 === "subject_signed") || (data217 === "attester_signed"))){
const err449 = {instancePath:instancePath+"/id_token_types_supported/" + i73,schemaPath:"#/definitions/IdTokenType/enum",keyword:"enum",params:{allowedValues: schema637.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err449];
}
else {
vErrors.push(err449);
}
errors++;
}
var valid246 = _errs817 === errors;
if(!valid246){
break;
}
}
}
else {
const err450 = {instancePath:instancePath+"/id_token_types_supported",schemaPath:"#/anyOf/2/properties/id_token_types_supported/anyOf/0/type",keyword:"type",params:{type: "array"},message:"must be array"};
if(vErrors === null){
vErrors = [err450];
}
else {
vErrors.push(err450);
}
errors++;
}
}
var _valid73 = _errs815 === errors;
valid245 = valid245 || _valid73;
if(!valid245){
const _errs820 = errors;
if(typeof data216 !== "string"){
const err451 = {instancePath:instancePath+"/id_token_types_supported",schemaPath:"#/definitions/IdTokenType/type",keyword:"type",params:{type: "string"},message:"must be string"};
if(vErrors === null){
vErrors = [err451];
}
else {
vErrors.push(err451);
}
errors++;
}
if(!((data216 === "subject_signed") || (data216 === "attester_signed"))){
const err452 = {instancePath:instancePath+"/id_token_types_supported",schemaPath:"#/definitions/IdTokenType/enum",keyword:"enum",params:{allowedValues: schema637.enum},message:"must be equal to one of the allowed values"};
if(vErrors === null){
vErrors = [err452];
}
else {
vErrors.push(err452);
}
errors++;
}
var _valid73 = _errs820 === errors;
valid245 = valid245 || _valid73;
}
if(!valid245){
const err453 = {instancePath:instancePath+"/id_token_types_supported",schemaPath:"#/anyOf/2/properties/id_token_types_supported/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err453];
}
else {
vErrors.push(err453);
}
errors++;
}
else {
errors = _errs814;
if(vErrors !== null){
if(_errs814){
vErrors.length = _errs814;
}
else {
vErrors = null;
}
}
}
var valid165 = _errs813 === errors;
}
else {
var valid165 = true;
}
if(valid165){
if(data.vp_formats_supported !== undefined){
const _errs823 = errors;
if(!(validate273(data.vp_formats_supported, {instancePath:instancePath+"/vp_formats_supported",parentData:data,parentDataProperty:"vp_formats_supported",rootData}))){
vErrors = vErrors === null ? validate273.errors : vErrors.concat(validate273.errors);
errors = vErrors.length;
}
var valid165 = _errs823 === errors;
}
else {
var valid165 = true;
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
else {
const err454 = {instancePath,schemaPath:"#/anyOf/2/type",keyword:"type",params:{type: "object"},message:"must be object"};
if(vErrors === null){
vErrors = [err454];
}
else {
vErrors.push(err454);
}
errors++;
}
}
var _valid0 = _errs567 === errors;
valid0 = valid0 || _valid0;
}
}
if(!valid0){
const err455 = {instancePath,schemaPath:"#/anyOf",keyword:"anyOf",params:{},message:"must match a schema in anyOf"};
if(vErrors === null){
vErrors = [err455];
}
else {
vErrors.push(err455);
}
errors++;
validate270.errors = vErrors;
return false;
}
else {
errors = _errs0;
if(vErrors !== null){
if(_errs0){
vErrors.length = _errs0;
}
else {
vErrors = null;
}
}
}
validate270.errors = vErrors;
return errors === 0;
}


function validate269(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){
/*# sourceURL="DiscoveryMetadataPayloadSchema" */;
let vErrors = null;
let errors = 0;
if(!(validate270(data, {instancePath,parentData,parentDataProperty,rootData}))){
vErrors = vErrors === null ? validate270.errors : vErrors.concat(validate270.errors);
errors = vErrors.length;
}
validate269.errors = vErrors;
return errors === 0;
}
