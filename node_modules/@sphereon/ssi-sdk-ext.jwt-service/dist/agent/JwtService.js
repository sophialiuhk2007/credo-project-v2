"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JwtService = void 0;
const __1 = require("..");
/**
 * @public
 */
class JwtService {
    constructor() {
        this.schema = __1.schema.IJwtService;
        this.methods = {
            jwtPrepareJws: this.jwtPrepareJws.bind(this),
            jwtCreateJwsJsonGeneralSignature: this.jwtCreateJwsJsonGeneralSignature.bind(this),
            jwtCreateJwsJsonFlattenedSignature: this.jwtCreateJwsJsonFlattenedSignature.bind(this),
            jwtCreateJwsCompactSignature: this.jwtCreateJwsCompactSignature.bind(this),
            jwtVerifyJwsSignature: this.jwtVerifyJwsSignature.bind(this),
        };
    }
    jwtPrepareJws(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, __1.prepareJwsObject)(args, context);
        });
    }
    jwtCreateJwsJsonGeneralSignature(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, __1.createJwsJsonGeneral)(args, context);
        });
    }
    jwtCreateJwsJsonFlattenedSignature(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, __1.createJwsJsonFlattened)(args, context);
        });
    }
    jwtCreateJwsCompactSignature(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            // We wrap it in a json object for remote REST calls
            return { jwt: yield (0, __1.createJwsCompact)(args, context) };
        });
    }
    jwtVerifyJwsSignature(args, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, __1.verifyJws)(args, context);
        });
    }
}
exports.JwtService = JwtService;
//# sourceMappingURL=JwtService.js.map