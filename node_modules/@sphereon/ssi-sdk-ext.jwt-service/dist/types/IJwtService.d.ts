import { ExternalIdentifierDidOpts, ExternalIdentifierResult, ExternalIdentifierX5cOpts, IIdentifierResolution, ManagedIdentifierOptsOrResult, ManagedIdentifierResult } from '@sphereon/ssi-sdk-ext.identifier-resolution';
import { ClientIdScheme } from '@sphereon/ssi-sdk-ext.x509-utils';
import { IValidationResult, JoseSignatureAlgorithm, JoseSignatureAlgorithmString, JWK } from '@sphereon/ssi-types';
import { IAgentContext, IKeyManager, IPluginMethodMap } from '@veramo/core';
export type IRequiredContext = IAgentContext<IIdentifierResolution & IKeyManager>;
export declare const jwtServiceContextMethods: Array<string>;
export interface IJwtService extends IPluginMethodMap {
    jwtPrepareJws(args: CreateJwsJsonArgs, context: IRequiredContext): Promise<PreparedJwsObject>;
    jwtCreateJwsJsonGeneralSignature(args: CreateJwsJsonArgs, context: IRequiredContext): Promise<JwsJsonGeneral>;
    jwtCreateJwsJsonFlattenedSignature(args: CreateJwsFlattenedArgs, context: IRequiredContext): Promise<JwsJsonFlattened>;
    jwtCreateJwsCompactSignature(args: CreateJwsCompactArgs, context: IRequiredContext): Promise<JwsCompactResult>;
    jwtVerifyJwsSignature(args: VerifyJwsArgs, context: IRequiredContext): Promise<IJwsValidationResult>;
}
export type IJwsValidationResult = IValidationResult & {
    jws: JwsJsonGeneralWithIdentifiers;
};
export interface PreparedJws {
    protectedHeader: JwtHeader;
    payload: Uint8Array;
    unprotectedHeader?: JwtHeader;
    existingSignatures?: Array<JwsJsonSignature>;
}
export interface JwsJsonSignature {
    protected: string;
    header?: JwtHeader;
    signature: string;
}
export type Jws = JwsCompact | JwsJsonFlattened | JwsJsonGeneral;
export type JwsCompact = string;
export interface JwsJsonFlattened {
    payload: string;
    protected: string;
    header?: JwtHeader;
    signature: string;
}
export interface JwsJsonGeneral {
    payload: string;
    signatures: Array<JwsJsonSignature>;
}
export interface JwsJsonGeneralWithIdentifiers extends JwsJsonGeneral {
    signatures: Array<JwsJsonSignatureWithIdentifier>;
}
export interface JwsJsonSignatureWithIdentifier extends JwsJsonSignature {
    identifier: ExternalIdentifierResult;
}
export interface PreparedJwsObject {
    jws: PreparedJws;
    b64: {
        payload: string;
        protectedHeader: string;
    };
    identifier: ManagedIdentifierResult;
}
export interface BaseJwtHeader {
    typ?: string;
    alg?: string;
    kid?: string;
}
export interface BaseJwtPayload {
    iss?: string;
    sub?: string;
    aud?: string[] | string;
    exp?: number;
    nbf?: number;
    iat?: number;
    jti?: string;
}
export interface JwtHeader extends BaseJwtHeader {
    kid?: string;
    jwk?: JWK;
    x5c?: string[];
    [key: string]: unknown;
}
export interface JwtPayload extends BaseJwtPayload {
    [key: string]: unknown;
}
export interface JwsHeaderOpts {
    alg: JoseSignatureAlgorithm | JoseSignatureAlgorithmString;
}
export type JwsIdentifierMode = 'x5c' | 'kid' | 'jwk' | 'did' | 'auto';
export type CreateJwsArgs = {
    mode?: JwsIdentifierMode;
    issuer: ManagedIdentifierOptsOrResult & {
        noIssPayloadUpdate?: boolean;
        noIdentifierInHeader?: boolean;
    };
    clientId?: string;
    clientIdScheme?: ClientIdScheme | 'did' | string;
    protectedHeader: JwtHeader;
    payload: JwtPayload | Uint8Array | string;
};
export type CreateJwsCompactArgs = CreateJwsArgs;
export type CreateJwsFlattenedArgs = Exclude<CreateJwsJsonArgs, 'existingSignatures'>;
export type VerifyJwsArgs = {
    jws: Jws;
    jwk?: JWK;
    opts?: {
        x5c?: Omit<ExternalIdentifierX5cOpts, 'identifier'>;
        did?: Omit<ExternalIdentifierDidOpts, 'identifier'>;
    };
};
/**
 * @public
 */
export type CreateJwsJsonArgs = CreateJwsArgs & {
    unprotectedHeader?: JwtHeader;
    existingSignatures?: Array<JwsJsonSignature>;
};
/**
 * @public
 */
export interface JwsCompactResult {
    jwt: JwsCompact;
}
export declare function isJwsCompact(jws: Jws): jws is JwsCompact;
export declare function isJwsJsonFlattened(jws: Jws): jws is JwsJsonFlattened;
export declare function isJwsJsonGeneral(jws: Jws): jws is JwsJsonGeneral;
export declare const COMPACT_JWS_REGEX: RegExp;
//# sourceMappingURL=IJwtService.d.ts.map