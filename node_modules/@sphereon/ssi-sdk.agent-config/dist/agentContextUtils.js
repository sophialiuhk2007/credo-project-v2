"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.contextHasDataStoreORM = exports.contextHasDataStore = exports.contextHasCredentialStatusVerifier = exports.contextHasCredentialVerifier = exports.contextHasCredentialIssuer = exports.contextHasDidResolver = exports.contextHasDidManager = exports.contextHasKeyManager = exports.contextHasPlugin = void 0;
/**
 * Allows to get a type agent context plugin methods based on provided or inferred types and at least one method for these plugin(s)
 * @param context Tje agent context to check against
 * @param requiredMethod One or more method the plugin provides, so we can check availability and thus plugin presence
 */
function contextHasPlugin(context, requiredMethod) {
    const methods = Array.isArray(requiredMethod) ? requiredMethod : [requiredMethod];
    const allMethods = context.agent.availableMethods();
    return methods.every((method) => allMethods.includes(method));
}
exports.contextHasPlugin = contextHasPlugin;
/**
 * The below methods are convenience methods to directly get the appropriate context after calling the respective method
 *
 * @param context
 */
function contextHasKeyManager(context) {
    return contextHasPlugin(context, 'keyManagerGet');
}
exports.contextHasKeyManager = contextHasKeyManager;
function contextHasDidManager(context) {
    return contextHasPlugin(context, 'didManagerGet'); // IResolver is always required for IDIDManager
}
exports.contextHasDidManager = contextHasDidManager;
function contextHasDidResolver(context) {
    return contextHasPlugin(context, 'resolveDid'); // IResolver is always required for IDIDManager
}
exports.contextHasDidResolver = contextHasDidResolver;
function contextHasCredentialIssuer(context) {
    return contextHasPlugin(context, ['createVerifiableCredential', 'createVerifiablePresentation']); // W3C Credential issuer
}
exports.contextHasCredentialIssuer = contextHasCredentialIssuer;
function contextHasCredentialVerifier(context) {
    return contextHasPlugin(context, ['verifyCredential', 'verifyPresentation']); // W3c Credential Verifier
}
exports.contextHasCredentialVerifier = contextHasCredentialVerifier;
function contextHasCredentialStatusVerifier(context) {
    return contextHasPlugin(context, ['checkCredentialStatus']); // W3c Credential status Verifier
}
exports.contextHasCredentialStatusVerifier = contextHasCredentialStatusVerifier;
function contextHasDataStore(context) {
    return contextHasPlugin(context, ['dataStoreGetVerifiableCredential', 'dataStoreGetVerifiablePresentation']);
}
exports.contextHasDataStore = contextHasDataStore;
function contextHasDataStoreORM(context) {
    return contextHasPlugin(context, ['dataStoreORMGetVerifiableCredentials', 'dataStoreORMGetVerifiablePresentations']);
}
exports.contextHasDataStoreORM = contextHasDataStoreORM;
//# sourceMappingURL=agentContextUtils.js.map