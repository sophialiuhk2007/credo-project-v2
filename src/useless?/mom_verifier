// This code is for verifier agent setup
import type { InitConfig, KeyDidCreateOptions } from "@credo-ts/core";
import { Agent, DidKey, KeyType, ConnectionsModule } from "@credo-ts/core";
import { agentDependencies } from "@credo-ts/node";
import { AskarModule } from "@credo-ts/askar";
import { ariesAskar } from "@hyperledger/aries-askar-nodejs";
import express, { Router } from "express";
import {
  OpenId4VcVerifierModule,
  OpenId4VcVerificationSessionStateChangedEvent,
  OpenId4VcVerifierEvents,
  OpenId4VcVerificationSessionState,
} from "@credo-ts/openid4vc";
import "./shim.js";

// Create two express routers, all endpoints for the
// issuer and verifier will be added to these routers
//const verifierRouter = Router()

// Register the routers on the express server. The path should match
// with the baseUrl you configure in the modules below.
const app = express();

let latestRequestUri: string | null = null;

const verifier = async () => {
  const config: InitConfig = {
    label: "veri-agent-nodejs",
    walletConfig: {
      id: "veriwallet-id",
      key: "verikey0000000000000000000000000",
    },
  };

  const agent = new Agent({
    config,
    dependencies: agentDependencies,
    modules: {
      askar: new AskarModule({ ariesAskar }),
      connections: new ConnectionsModule({ autoAcceptConnections: true }),

      // openId4VcVerifier module can only be used in Node.js
      openId4VcVerifier: new OpenId4VcVerifierModule({
        baseUrl: "http://127.0.0.1:3000/siop",
      }),
    },
  });

  // Initialize the agent
  await agent.initialize();

  return agent;
};

const createnewverifier = async (agent: Agent) => {
  // Create a verifier
  const openId4VcVerifier =
    await agent.modules.openId4VcVerifier.createVerifier({});

  // Create a did:key that we will use for signing OpenID4VP authorization requests
  const verifierDidResult = await agent.dids.create<KeyDidCreateOptions>({
    method: "key",
    options: {
      keyType: KeyType.Ed25519,
    },
  });

  if (verifierDidResult.didState.state !== "finished") {
    throw new Error("DID creation failed.");
  }

  const verifierDidKey = DidKey.fromDid(verifierDidResult.didState.did);

  return { openId4VcVerifier, verifierDidKey };
};

const createauthorequest = async (
  agent: Agent,
  openId4VcVerifier: any,
  verifierDidKey: DidKey
) => {
  const { authorizationRequest, verificationSession } =
    await agent.modules.openId4VcVerifier.createAuthorizationRequest({
      verifierId: openId4VcVerifier.verifierId,
      requestSigner: {
        didUrl: `${verifierDidKey.did}#${verifierDidKey.key.fingerprint}`,
        method: "did",
      },
      // Add DIF presentation exchange data
      presentationExchange: {
        definition: {
          id: "9ed05140-b33b-445e-a0f0-9a23aa501868",
          name: "Employee Verification",
          purpose:
            "We need to verify your employee status to grant access to the employee portal",
          input_descriptors: [
            {
              id: "9c98fb43-6fd5-49b1-8dcc-69bd2a378f23",
              constraints: {
                // Require limit disclosure
                limit_disclosure: "required",
                fields: [
                  {
                    filter: {
                      type: "string",
                      const: "AcmeCorpEmployee",
                    },
                    path: ["$.vct"],
                  },
                ],
              },
            },
          ],
        },
      },
    });

  const requestUri = authorizationRequest;
  console.log(
    "DEBUG: requestUri value:",
    requestUri,
    "Type:",
    typeof requestUri
  );
  latestRequestUri = requestUri; // Save the URI for the endpoint

  // Listen and react to changes in the verification session
  agent.events.on<OpenId4VcVerificationSessionStateChangedEvent>(
    OpenId4VcVerifierEvents.VerificationSessionStateChanged,
    async (event) => {
      if (event.payload.verificationSession.id === verificationSession.id) {
        console.log(
          "Verification session state changed to ",
          event.payload.verificationSession.state
        );
      }

      if (
        event.payload.verificationSession.state ===
        OpenId4VcVerificationSessionState.ResponseVerified
      ) {
        const verifiedAuthorizationResponse =
          await agent.modules.openId4VcVerifier.getVerifiedAuthorizationResponse(
            verificationSession.id
          );
        console.log(
          "Successfully verified presentation.",
          JSON.stringify(verifiedAuthorizationResponse, null, 2)
        );

        console.log("Exiting...");
        process.exit();
      }
    }
  );
};

const run = async () => {
  console.log("Initializing Verifier agent...");
  const verifierAgent = await verifier();
  // Register the router after agent is initialized
  const verifierRouter = verifierAgent.modules.openId4VcVerifier.config.router;
  app.use("/siop", verifierRouter);

  // Create issuer and credential offer
  console.log("Creating new verifier...");
  const { openId4VcVerifier, verifierDidKey } = await createnewverifier(
    verifierAgent
  );
  await createauthorequest(verifierAgent, openId4VcVerifier, verifierDidKey);
  console.log("creating autorization request");

  // Register endpoint
  app.get("/latest-request-uri", (req, res) => {
    if (latestRequestUri) {
      res.json({ uri: latestRequestUri });
    } else {
      res.status(404).json({ error: "No offer URI available" });
    }
  });

  // Start server
  app.listen(3000, () => {
    console.log("OpenID4VC app listening on port 3000");
  });
};

export default run;

void run();
